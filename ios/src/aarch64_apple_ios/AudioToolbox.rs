/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const COPYFILE_STATE_SRC_FD: u32 = 1;
pub const COPYFILE_STATE_SRC_FILENAME: u32 = 2;
pub const COPYFILE_STATE_DST_FD: u32 = 3;
pub const COPYFILE_STATE_DST_FILENAME: u32 = 4;
pub const COPYFILE_STATE_QUARANTINE: u32 = 5;
pub const COPYFILE_STATE_STATUS_CB: u32 = 6;
pub const COPYFILE_STATE_STATUS_CTX: u32 = 7;
pub const COPYFILE_STATE_COPIED: u32 = 8;
pub const COPYFILE_STATE_XATTRNAME: u32 = 9;
pub const COPYFILE_STATE_WAS_CLONED: u32 = 10;
pub const COPYFILE_STATE_SRC_BSIZE: u32 = 11;
pub const COPYFILE_STATE_DST_BSIZE: u32 = 12;
pub const COPYFILE_STATE_BSIZE: u32 = 13;
pub const COPYFILE_DISABLE_VAR: &[u8; 17usize] = b"COPYFILE_DISABLE\0";
pub const COPYFILE_ACL: u32 = 1;
pub const COPYFILE_STAT: u32 = 2;
pub const COPYFILE_XATTR: u32 = 4;
pub const COPYFILE_DATA: u32 = 8;
pub const COPYFILE_SECURITY: u32 = 3;
pub const COPYFILE_METADATA: u32 = 7;
pub const COPYFILE_ALL: u32 = 15;
pub const COPYFILE_RECURSIVE: u32 = 32768;
pub const COPYFILE_CHECK: u32 = 65536;
pub const COPYFILE_EXCL: u32 = 131072;
pub const COPYFILE_NOFOLLOW_SRC: u32 = 262144;
pub const COPYFILE_NOFOLLOW_DST: u32 = 524288;
pub const COPYFILE_MOVE: u32 = 1048576;
pub const COPYFILE_UNLINK: u32 = 2097152;
pub const COPYFILE_NOFOLLOW: u32 = 786432;
pub const COPYFILE_PACK: u32 = 4194304;
pub const COPYFILE_UNPACK: u32 = 8388608;
pub const COPYFILE_CLONE: u32 = 16777216;
pub const COPYFILE_CLONE_FORCE: u32 = 33554432;
pub const COPYFILE_RUN_IN_PLACE: u32 = 67108864;
pub const COPYFILE_DATA_SPARSE: u32 = 134217728;
pub const COPYFILE_PRESERVE_DST_TRACKED: u32 = 268435456;
pub const COPYFILE_VERBOSE: u32 = 1073741824;
pub const COPYFILE_RECURSE_ERROR: u32 = 0;
pub const COPYFILE_RECURSE_FILE: u32 = 1;
pub const COPYFILE_RECURSE_DIR: u32 = 2;
pub const COPYFILE_RECURSE_DIR_CLEANUP: u32 = 3;
pub const COPYFILE_COPY_DATA: u32 = 4;
pub const COPYFILE_COPY_XATTR: u32 = 5;
pub const COPYFILE_START: u32 = 1;
pub const COPYFILE_FINISH: u32 = 2;
pub const COPYFILE_ERR: u32 = 3;
pub const COPYFILE_PROGRESS: u32 = 4;
pub const COPYFILE_CONTINUE: u32 = 0;
pub const COPYFILE_SKIP: u32 = 1;
pub const COPYFILE_QUIT: u32 = 2;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __IPHONE_OS_VERSION_MAX_ALLOWED: u32 = 160200;
pub const __ENABLE_LEGACY_IPHONE_AVAILABILITY: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FE_INEXACT: u32 = 16;
pub const FE_UNDERFLOW: u32 = 8;
pub const FE_OVERFLOW: u32 = 4;
pub const FE_DIVBYZERO: u32 = 2;
pub const FE_INVALID: u32 = 1;
pub const FE_FLUSHTOZERO: u32 = 128;
pub const FE_ALL_EXCEPT: u32 = 159;
pub const FE_TONEAREST: u32 = 0;
pub const FE_UPWARD: u32 = 4194304;
pub const FE_DOWNWARD: u32 = 8388608;
pub const FE_TOWARDZERO: u32 = 12582912;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"jd\0";
pub const PRIiMAX: &[u8; 3usize] = b"ji\0";
pub const PRIoMAX: &[u8; 3usize] = b"jo\0";
pub const PRIuMAX: &[u8; 3usize] = b"ju\0";
pub const PRIxMAX: &[u8; 3usize] = b"jx\0";
pub const PRIXMAX: &[u8; 3usize] = b"jX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"jd\0";
pub const SCNiMAX: &[u8; 3usize] = b"ji\0";
pub const SCNoMAX: &[u8; 3usize] = b"jo\0";
pub const SCNuMAX: &[u8; 3usize] = b"ju\0";
pub const SCNxMAX: &[u8; 3usize] = b"jx\0";
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const RPP_ECHO_OFF: u32 = 0;
pub const RPP_ECHO_ON: u32 = 1;
pub const RPP_REQUIRE_TTY: u32 = 2;
pub const RPP_FORCELOWER: u32 = 4;
pub const RPP_FORCEUPPER: u32 = 8;
pub const RPP_SEVENBIT: u32 = 16;
pub const RPP_STDIN: u32 = 32;
pub const _JBLEN: u32 = 48;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const _PATH_PWD: &[u8; 5usize] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12usize] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7usize] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19usize] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10usize] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14usize] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12usize] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7usize] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13usize] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8usize] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19usize] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const PIDLOCK_NONBLOCK: u32 = 1;
pub const PIDLOCK_USEHOSTNAME: u32 = 2;
pub const FPARSELN_UNESCESC: u32 = 1;
pub const FPARSELN_UNESCCONT: u32 = 2;
pub const FPARSELN_UNESCCOMM: u32 = 4;
pub const FPARSELN_UNESCREST: u32 = 8;
pub const FPARSELN_UNESCALL: u32 = 15;
pub const OPENDEV_PART: u32 = 1;
pub const OPENDEV_BLCK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const XATTR_OPERATION_INTENT_COPY: u32 = 1;
pub const XATTR_OPERATION_INTENT_SAVE: u32 = 2;
pub const XATTR_OPERATION_INTENT_SHARE: u32 = 3;
pub const XATTR_OPERATION_INTENT_SYNC: u32 = 4;
pub const XATTR_OPERATION_INTENT_BACKUP: u32 = 5;
pub const O_SYNC: u32 = 128;
pub const O_DSYNC: u32 = 4194304;
pub const AIO_ALLDONE: u32 = 1;
pub const AIO_CANCELED: u32 = 2;
pub const AIO_NOTCANCELED: u32 = 4;
pub const LIO_NOP: u32 = 0;
pub const LIO_READ: u32 = 1;
pub const LIO_WRITE: u32 = 2;
pub const LIO_NOWAIT: u32 = 1;
pub const LIO_WAIT: u32 = 2;
pub const AIO_LISTIO_MAX: u32 = 16;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18usize] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const C_ISSOCK: u32 = 49152;
pub const C_ISLNK: u32 = 40960;
pub const C_ISCTG: u32 = 36864;
pub const C_ISREG: u32 = 32768;
pub const C_ISBLK: u32 = 24576;
pub const C_ISDIR: u32 = 16384;
pub const C_ISCHR: u32 = 8192;
pub const C_ISFIFO: u32 = 4096;
pub const C_ISUID: u32 = 2048;
pub const C_ISGID: u32 = 1024;
pub const C_ISVTX: u32 = 512;
pub const C_IRUSR: u32 = 256;
pub const C_IWUSR: u32 = 128;
pub const C_IXUSR: u32 = 64;
pub const C_IRGRP: u32 = 32;
pub const C_IWGRP: u32 = 16;
pub const C_IXGRP: u32 = 8;
pub const C_IROTH: u32 = 4;
pub const C_IWOTH: u32 = 2;
pub const C_IXOTH: u32 = 1;
pub const MAGIC: &[u8; 7usize] = b"070707\0";
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const MM_HARD: u32 = 1;
pub const MM_SOFT: u32 = 2;
pub const MM_FIRM: u32 = 4;
pub const MM_APPL: u32 = 16;
pub const MM_UTIL: u32 = 32;
pub const MM_OPSYS: u32 = 64;
pub const MM_PRINT: u32 = 256;
pub const MM_CONSOLE: u32 = 512;
pub const MM_RECOVER: u32 = 4096;
pub const MM_NRECOV: u32 = 8192;
pub const MM_NOSEV: u32 = 0;
pub const MM_HALT: u32 = 1;
pub const MM_ERROR: u32 = 2;
pub const MM_WARNING: u32 = 3;
pub const MM_INFO: u32 = 4;
pub const MM_NULLSEV: u32 = 0;
pub const MM_NULLMC: u32 = 0;
pub const MM_OK: u32 = 0;
pub const MM_NOMSG: u32 = 1;
pub const MM_NOCON: u32 = 2;
pub const MM_NOTOK: u32 = 3;
pub const FNM_NOMATCH: u32 = 1;
pub const FNM_NOESCAPE: u32 = 1;
pub const FNM_PATHNAME: u32 = 2;
pub const FNM_PERIOD: u32 = 4;
pub const FNM_NOSYS: i32 = -1;
pub const FNM_LEADING_DIR: u32 = 8;
pub const FNM_CASEFOLD: u32 = 16;
pub const FNM_IGNORECASE: u32 = 16;
pub const FNM_FILE_NAME: u32 = 2;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const FTW_F: u32 = 0;
pub const FTW_D: u32 = 1;
pub const FTW_DNR: u32 = 2;
pub const FTW_DP: u32 = 3;
pub const FTW_NS: u32 = 4;
pub const FTW_SL: u32 = 5;
pub const FTW_SLN: u32 = 6;
pub const FTW_PHYS: u32 = 1;
pub const FTW_MOUNT: u32 = 2;
pub const FTW_DEPTH: u32 = 4;
pub const FTW_CHDIR: u32 = 8;
pub const GLOB_APPEND: u32 = 1;
pub const GLOB_DOOFFS: u32 = 2;
pub const GLOB_ERR: u32 = 4;
pub const GLOB_MARK: u32 = 8;
pub const GLOB_NOCHECK: u32 = 16;
pub const GLOB_NOSORT: u32 = 32;
pub const GLOB_NOESCAPE: u32 = 8192;
pub const GLOB_NOSPACE: i32 = -1;
pub const GLOB_ABORTED: i32 = -2;
pub const GLOB_NOMATCH: i32 = -3;
pub const GLOB_NOSYS: i32 = -4;
pub const GLOB_ALTDIRFUNC: u32 = 64;
pub const GLOB_BRACE: u32 = 128;
pub const GLOB_MAGCHAR: u32 = 256;
pub const GLOB_NOMAGIC: u32 = 512;
pub const GLOB_QUOTE: u32 = 1024;
pub const GLOB_TILDE: u32 = 2048;
pub const GLOB_LIMIT: u32 = 4096;
pub const _GLOB_ERR_BLOCK: u32 = 2147483648;
pub const GLOB_MAXPATH: u32 = 4096;
pub const GLOB_ABEND: i32 = -2;
pub const _PATH_GROUP: &[u8; 11usize] = b"/etc/group\0";
pub const _LIBICONV_VERSION: u32 = 267;
pub const ICONV_TRIVIALP: u32 = 0;
pub const ICONV_GET_TRANSLITERATE: u32 = 1;
pub const ICONV_SET_TRANSLITERATE: u32 = 2;
pub const ICONV_GET_DISCARD_ILSEQ: u32 = 3;
pub const ICONV_SET_DISCARD_ILSEQ: u32 = 4;
pub const ICONV_SET_HOOKS: u32 = 5;
pub const ICONV_SET_FALLBACKS: u32 = 6;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const CODESET: u32 = 0;
pub const D_T_FMT: u32 = 1;
pub const D_FMT: u32 = 2;
pub const T_FMT: u32 = 3;
pub const T_FMT_AMPM: u32 = 4;
pub const AM_STR: u32 = 5;
pub const PM_STR: u32 = 6;
pub const DAY_1: u32 = 7;
pub const DAY_2: u32 = 8;
pub const DAY_3: u32 = 9;
pub const DAY_4: u32 = 10;
pub const DAY_5: u32 = 11;
pub const DAY_6: u32 = 12;
pub const DAY_7: u32 = 13;
pub const ABDAY_1: u32 = 14;
pub const ABDAY_2: u32 = 15;
pub const ABDAY_3: u32 = 16;
pub const ABDAY_4: u32 = 17;
pub const ABDAY_5: u32 = 18;
pub const ABDAY_6: u32 = 19;
pub const ABDAY_7: u32 = 20;
pub const MON_1: u32 = 21;
pub const MON_2: u32 = 22;
pub const MON_3: u32 = 23;
pub const MON_4: u32 = 24;
pub const MON_5: u32 = 25;
pub const MON_6: u32 = 26;
pub const MON_7: u32 = 27;
pub const MON_8: u32 = 28;
pub const MON_9: u32 = 29;
pub const MON_10: u32 = 30;
pub const MON_11: u32 = 31;
pub const MON_12: u32 = 32;
pub const ABMON_1: u32 = 33;
pub const ABMON_2: u32 = 34;
pub const ABMON_3: u32 = 35;
pub const ABMON_4: u32 = 36;
pub const ABMON_5: u32 = 37;
pub const ABMON_6: u32 = 38;
pub const ABMON_7: u32 = 39;
pub const ABMON_8: u32 = 40;
pub const ABMON_9: u32 = 41;
pub const ABMON_10: u32 = 42;
pub const ABMON_11: u32 = 43;
pub const ABMON_12: u32 = 44;
pub const ERA: u32 = 45;
pub const ERA_D_FMT: u32 = 46;
pub const ERA_D_T_FMT: u32 = 47;
pub const ERA_T_FMT: u32 = 48;
pub const ALT_DIGITS: u32 = 49;
pub const RADIXCHAR: u32 = 50;
pub const THOUSEP: u32 = 51;
pub const YESEXPR: u32 = 52;
pub const NOEXPR: u32 = 53;
pub const YESSTR: u32 = 54;
pub const NOSTR: u32 = 55;
pub const CRNCYSTR: u32 = 56;
pub const D_MD_ORDER: u32 = 57;
pub const DBM_RDONLY: u32 = 0;
pub const DBM_INSERT: u32 = 0;
pub const DBM_REPLACE: u32 = 1;
pub const DBM_SUFFIX: &[u8; 4usize] = b".db\0";
pub const _PATH_HEQUIV: &[u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14usize] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14usize] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const DLIL_SDLDATACOUNT: u32 = 12;
pub const IF_NAMESIZE: u32 = 16;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const APPLE_IF_FAM_LOOPBACK: u32 = 1;
pub const APPLE_IF_FAM_ETHERNET: u32 = 2;
pub const APPLE_IF_FAM_SLIP: u32 = 3;
pub const APPLE_IF_FAM_TUN: u32 = 4;
pub const APPLE_IF_FAM_VLAN: u32 = 5;
pub const APPLE_IF_FAM_PPP: u32 = 6;
pub const APPLE_IF_FAM_PVC: u32 = 7;
pub const APPLE_IF_FAM_DISC: u32 = 8;
pub const APPLE_IF_FAM_MDECAP: u32 = 9;
pub const APPLE_IF_FAM_GIF: u32 = 10;
pub const APPLE_IF_FAM_FAITH: u32 = 11;
pub const APPLE_IF_FAM_STF: u32 = 12;
pub const APPLE_IF_FAM_FIREWIRE: u32 = 13;
pub const APPLE_IF_FAM_BOND: u32 = 14;
pub const APPLE_IF_FAM_CELLULAR: u32 = 15;
pub const APPLE_IF_FAM_UNUSED_16: u32 = 16;
pub const APPLE_IF_FAM_UTUN: u32 = 17;
pub const APPLE_IF_FAM_IPSEC: u32 = 18;
pub const IF_MINMTU: u32 = 72;
pub const IF_MAXMTU: u32 = 65535;
pub const IFNAMSIZ: u32 = 16;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_DEBUG: u32 = 4;
pub const IFF_LOOPBACK: u32 = 8;
pub const IFF_POINTOPOINT: u32 = 16;
pub const IFF_NOTRAILERS: u32 = 32;
pub const IFF_RUNNING: u32 = 64;
pub const IFF_NOARP: u32 = 128;
pub const IFF_PROMISC: u32 = 256;
pub const IFF_ALLMULTI: u32 = 512;
pub const IFF_OACTIVE: u32 = 1024;
pub const IFF_SIMPLEX: u32 = 2048;
pub const IFF_LINK0: u32 = 4096;
pub const IFF_LINK1: u32 = 8192;
pub const IFF_LINK2: u32 = 16384;
pub const IFF_ALTPHYS: u32 = 16384;
pub const IFF_MULTICAST: u32 = 32768;
pub const IFCAP_RXCSUM: u32 = 1;
pub const IFCAP_TXCSUM: u32 = 2;
pub const IFCAP_VLAN_MTU: u32 = 4;
pub const IFCAP_VLAN_HWTAGGING: u32 = 8;
pub const IFCAP_JUMBO_MTU: u32 = 16;
pub const IFCAP_TSO4: u32 = 32;
pub const IFCAP_TSO6: u32 = 64;
pub const IFCAP_LRO: u32 = 128;
pub const IFCAP_AV: u32 = 256;
pub const IFCAP_TXSTATUS: u32 = 512;
pub const IFCAP_SKYWALK: u32 = 1024;
pub const IFCAP_HW_TIMESTAMP: u32 = 2048;
pub const IFCAP_SW_TIMESTAMP: u32 = 4096;
pub const IFCAP_CSUM_PARTIAL: u32 = 8192;
pub const IFCAP_CSUM_ZERO_INVERT: u32 = 16384;
pub const IFCAP_HWCSUM: u32 = 3;
pub const IFCAP_TSO: u32 = 96;
pub const IFCAP_VALID: u32 = 32767;
pub const IFQ_MAXLEN: u32 = 128;
pub const IFNET_SLOWHZ: u32 = 1;
pub const IFQ_DEF_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_DEF_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_DEF_L4S_TARGET_DELAY: u32 = 2000000;
pub const IFQ_DEF_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_L4S_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IF_WAKE_ON_MAGIC_PACKET: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_UNKNOWN: u32 = 0;
pub const IFRTYPE_FUNCTIONAL_LOOPBACK: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_WIRED: u32 = 2;
pub const IFRTYPE_FUNCTIONAL_WIFI_INFRA: u32 = 3;
pub const IFRTYPE_FUNCTIONAL_WIFI_AWDL: u32 = 4;
pub const IFRTYPE_FUNCTIONAL_CELLULAR: u32 = 5;
pub const IFRTYPE_FUNCTIONAL_INTCOPROC: u32 = 6;
pub const IFRTYPE_FUNCTIONAL_COMPANIONLINK: u32 = 7;
pub const IFRTYPE_FUNCTIONAL_LAST: u32 = 7;
pub const IFSTATMAX: u32 = 800;
pub const IFT_OTHER: u32 = 1;
pub const IFT_1822: u32 = 2;
pub const IFT_HDH1822: u32 = 3;
pub const IFT_X25DDN: u32 = 4;
pub const IFT_X25: u32 = 5;
pub const IFT_ETHER: u32 = 6;
pub const IFT_ISO88023: u32 = 7;
pub const IFT_ISO88024: u32 = 8;
pub const IFT_ISO88025: u32 = 9;
pub const IFT_ISO88026: u32 = 10;
pub const IFT_STARLAN: u32 = 11;
pub const IFT_P10: u32 = 12;
pub const IFT_P80: u32 = 13;
pub const IFT_HY: u32 = 14;
pub const IFT_FDDI: u32 = 15;
pub const IFT_LAPB: u32 = 16;
pub const IFT_SDLC: u32 = 17;
pub const IFT_T1: u32 = 18;
pub const IFT_CEPT: u32 = 19;
pub const IFT_ISDNBASIC: u32 = 20;
pub const IFT_ISDNPRIMARY: u32 = 21;
pub const IFT_PTPSERIAL: u32 = 22;
pub const IFT_PPP: u32 = 23;
pub const IFT_LOOP: u32 = 24;
pub const IFT_EON: u32 = 25;
pub const IFT_XETHER: u32 = 26;
pub const IFT_NSIP: u32 = 27;
pub const IFT_SLIP: u32 = 28;
pub const IFT_ULTRA: u32 = 29;
pub const IFT_DS3: u32 = 30;
pub const IFT_SIP: u32 = 31;
pub const IFT_FRELAY: u32 = 32;
pub const IFT_RS232: u32 = 33;
pub const IFT_PARA: u32 = 34;
pub const IFT_ARCNET: u32 = 35;
pub const IFT_ARCNETPLUS: u32 = 36;
pub const IFT_ATM: u32 = 37;
pub const IFT_MIOX25: u32 = 38;
pub const IFT_SONET: u32 = 39;
pub const IFT_X25PLE: u32 = 40;
pub const IFT_ISO88022LLC: u32 = 41;
pub const IFT_LOCALTALK: u32 = 42;
pub const IFT_SMDSDXI: u32 = 43;
pub const IFT_FRELAYDCE: u32 = 44;
pub const IFT_V35: u32 = 45;
pub const IFT_HSSI: u32 = 46;
pub const IFT_HIPPI: u32 = 47;
pub const IFT_MODEM: u32 = 48;
pub const IFT_AAL5: u32 = 49;
pub const IFT_SONETPATH: u32 = 50;
pub const IFT_SONETVT: u32 = 51;
pub const IFT_SMDSICIP: u32 = 52;
pub const IFT_PROPVIRTUAL: u32 = 53;
pub const IFT_PROPMUX: u32 = 54;
pub const IFT_GIF: u32 = 55;
pub const IFT_FAITH: u32 = 56;
pub const IFT_STF: u32 = 57;
pub const IFT_6LOWPAN: u32 = 64;
pub const IFT_L2VLAN: u32 = 135;
pub const IFT_IEEE8023ADLAG: u32 = 136;
pub const IFT_IEEE1394: u32 = 144;
pub const IFT_BRIDGE: u32 = 209;
pub const IFT_ENC: u32 = 244;
pub const IFT_PFLOG: u32 = 245;
pub const IFT_PFSYNC: u32 = 246;
pub const IFT_CARP: u32 = 248;
pub const IFT_PKTAP: u32 = 254;
pub const IFT_CELLULAR: u32 = 255;
pub const IFT_PDP: u32 = 255;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_AE: u32 = 256;
pub const TH_FLAGS: u32 = 247;
pub const TH_FLAGS_ALL: u32 = 255;
pub const TH_ACCEPT: u32 = 23;
pub const TH_ACE: u32 = 448;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_ACCECN0: u32 = 172;
pub const TCPOPT_ACCECN1: u32 = 174;
pub const TCPOLEN_ACCECN_EMPTY: u32 = 2;
pub const TCPOLEN_ACCECN_COUNTER: u32 = 3;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLWRNORM: u32 = 4;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRBAND: u32 = 256;
pub const POLLEXTEND: u32 = 512;
pub const POLLATTRIB: u32 = 1024;
pub const POLLNLINK: u32 = 2048;
pub const POLLWRITE: u32 = 4096;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLSTANDARD: u32 = 511;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const POSIX_SPAWN_RESETIDS: u32 = 1;
pub const POSIX_SPAWN_SETPGROUP: u32 = 2;
pub const POSIX_SPAWN_SETSIGDEF: u32 = 4;
pub const POSIX_SPAWN_SETSIGMASK: u32 = 8;
pub const POSIX_SPAWN_SETEXEC: u32 = 64;
pub const POSIX_SPAWN_START_SUSPENDED: u32 = 128;
pub const POSIX_SPAWN_SETSID: u32 = 1024;
pub const POSIX_SPAWN_CLOEXEC_DEFAULT: u32 = 16384;
pub const _POSIX_SPAWN_RESLIDE: u32 = 2048;
pub const POSIX_SPAWN_PCONTROL_NONE: u32 = 0;
pub const POSIX_SPAWN_PCONTROL_THROTTLE: u32 = 1;
pub const POSIX_SPAWN_PCONTROL_SUSPEND: u32 = 2;
pub const POSIX_SPAWN_PCONTROL_KILL: u32 = 3;
pub const POSIX_SPAWN_PANIC_ON_CRASH: u32 = 1;
pub const POSIX_SPAWN_PANIC_ON_NON_ZERO_EXIT: u32 = 2;
pub const POSIX_SPAWN_PANIC_ON_EXIT: u32 = 4;
pub const POSIX_SPAWN_PANIC_ON_SPAWN_FAIL: u32 = 8;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_ARM_UNDEFINED: u32 = 1;
pub const EXC_ARM_FP_UNDEFINED: u32 = 0;
pub const EXC_ARM_FP_IO: u32 = 1;
pub const EXC_ARM_FP_DZ: u32 = 2;
pub const EXC_ARM_FP_OF: u32 = 3;
pub const EXC_ARM_FP_UF: u32 = 4;
pub const EXC_ARM_FP_IX: u32 = 5;
pub const EXC_ARM_FP_ID: u32 = 6;
pub const EXC_ARM_DA_ALIGN: u32 = 257;
pub const EXC_ARM_DA_DEBUG: u32 = 258;
pub const EXC_ARM_SP_ALIGN: u32 = 259;
pub const EXC_ARM_SWP: u32 = 260;
pub const EXC_ARM_PAC_FAIL: u32 = 261;
pub const EXC_ARM_BREAKPOINT: u32 = 1;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const PPNUM_MAX: u32 = 4294967295;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const POSIX_SPAWN_NP_CSM_ALL: u32 = 1;
pub const POSIX_SPAWN_NP_CSM_NOSMT: u32 = 2;
pub const POSIX_SPAWN_NP_CSM_TECS: u32 = 4;
pub const _PTHREAD_MUTEX_POLICY_FAIRSHARE: u32 = 1;
pub const _PTHREAD_MUTEX_POLICY_FIRSTFIT: u32 = 3;
pub const REG_BASIC: u32 = 0;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NOSUB: u32 = 4;
pub const REG_NEWLINE: u32 = 8;
pub const REG_NOSPEC: u32 = 16;
pub const REG_LITERAL: u32 = 16;
pub const REG_PEND: u32 = 32;
pub const REG_MINIMAL: u32 = 64;
pub const REG_UNGREEDY: u32 = 64;
pub const REG_DUMP: u32 = 128;
pub const REG_ENHANCED: u32 = 256;
pub const REG_ENOSYS: i32 = -1;
pub const REG_NOMATCH: u32 = 1;
pub const REG_BADPAT: u32 = 2;
pub const REG_ECOLLATE: u32 = 3;
pub const REG_ECTYPE: u32 = 4;
pub const REG_EESCAPE: u32 = 5;
pub const REG_ESUBREG: u32 = 6;
pub const REG_EBRACK: u32 = 7;
pub const REG_EPAREN: u32 = 8;
pub const REG_EBRACE: u32 = 9;
pub const REG_BADBR: u32 = 10;
pub const REG_ERANGE: u32 = 11;
pub const REG_ESPACE: u32 = 12;
pub const REG_BADRPT: u32 = 13;
pub const REG_EMPTY: u32 = 14;
pub const REG_ASSERT: u32 = 15;
pub const REG_INVARG: u32 = 16;
pub const REG_ILLSEQ: u32 = 17;
pub const REG_ATOI: u32 = 255;
pub const REG_ITOA: u32 = 256;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const REG_TRACE: u32 = 256;
pub const REG_LARGE: u32 = 512;
pub const REG_BACKR: u32 = 1024;
pub const REG_BACKTRACKING_MATCHER: u32 = 1024;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_R: u32 = 256;
pub const IPC_W: u32 = 128;
pub const IPC_M: u32 = 4096;
pub const PROT_NONE: u32 = 0;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_COPY: u32 = 2;
pub const MAP_FIXED: u32 = 16;
pub const MAP_RENAME: u32 = 32;
pub const MAP_NORESERVE: u32 = 64;
pub const MAP_RESERVED0080: u32 = 128;
pub const MAP_NOEXTEND: u32 = 256;
pub const MAP_HASSEMAPHORE: u32 = 512;
pub const MAP_NOCACHE: u32 = 1024;
pub const MAP_JIT: u32 = 2048;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANON: u32 = 4096;
pub const MAP_ANONYMOUS: u32 = 4096;
pub const MAP_RESILIENT_CODESIGN: u32 = 8192;
pub const MAP_RESILIENT_MEDIA: u32 = 16384;
pub const MAP_TRANSLATED_ALLOW_EXECUTE: u32 = 131072;
pub const MAP_UNIX03: u32 = 262144;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MS_ASYNC: u32 = 1;
pub const MS_INVALIDATE: u32 = 2;
pub const MS_SYNC: u32 = 16;
pub const MS_KILLPAGES: u32 = 4;
pub const MS_DEACTIVATE: u32 = 8;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 5;
pub const MADV_ZERO_WIRED_PAGES: u32 = 6;
pub const MADV_FREE_REUSABLE: u32 = 7;
pub const MADV_FREE_REUSE: u32 = 8;
pub const MADV_CAN_REUSE: u32 = 9;
pub const MADV_PAGEOUT: u32 = 10;
pub const MINCORE_INCORE: u32 = 1;
pub const MINCORE_REFERENCED: u32 = 2;
pub const MINCORE_MODIFIED: u32 = 4;
pub const MINCORE_REFERENCED_OTHER: u32 = 8;
pub const MINCORE_MODIFIED_OTHER: u32 = 16;
pub const MINCORE_PAGED_OUT: u32 = 32;
pub const MINCORE_COPIED: u32 = 64;
pub const MINCORE_ANONYMOUS: u32 = 128;
pub const MSG_NOERROR: u32 = 4096;
pub const GETNCNT: u32 = 3;
pub const GETPID: u32 = 4;
pub const GETVAL: u32 = 5;
pub const GETALL: u32 = 6;
pub const GETZCNT: u32 = 7;
pub const SETVAL: u32 = 8;
pub const SETALL: u32 = 9;
pub const SEM_UNDO: u32 = 4096;
pub const SEM_A: u32 = 128;
pub const SEM_R: u32 = 256;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHMLBA: u32 = 16384;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const ST_RDONLY: u32 = 1;
pub const ST_NOSUID: u32 = 2;
pub const GRAFTDMG_SECURE_BOOT_CRYPTEX_ARGS_VERSION: u32 = 1;
pub const MAX_GRAFT_ARGS_SIZE: u32 = 512;
pub const SBC_PRESERVE_MOUNT: u32 = 1;
pub const SBC_ALTERNATE_SHARED_REGION: u32 = 2;
pub const SBC_SYSTEM_CONTENT: u32 = 4;
pub const SBC_PANIC_ON_AUTHFAIL: u32 = 8;
pub const SBC_STRICT_AUTH: u32 = 16;
pub const SBC_PRESERVE_GRAFT: u32 = 32;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const SOL_LOCAL: u32 = 0;
pub const LOCAL_PEERCRED: u32 = 1;
pub const LOCAL_PEERPID: u32 = 2;
pub const LOCAL_PEEREPID: u32 = 3;
pub const LOCAL_PEERUUID: u32 = 4;
pub const LOCAL_PEEREUUID: u32 = 5;
pub const LOCAL_PEERTOKEN: u32 = 6;
pub const _SYS_NAMELEN: u32 = 256;
pub const XATTR_NOFOLLOW: u32 = 1;
pub const XATTR_CREATE: u32 = 2;
pub const XATTR_REPLACE: u32 = 4;
pub const XATTR_NOSECURITY: u32 = 8;
pub const XATTR_NODEFAULT: u32 = 16;
pub const XATTR_SHOWCOMPRESSION: u32 = 32;
pub const XATTR_MAXNAMELEN: u32 = 127;
pub const XATTR_FINDERINFO_NAME: &[u8; 21usize] = b"com.apple.FinderInfo\0";
pub const XATTR_RESOURCEFORK_NAME: &[u8; 23usize] = b"com.apple.ResourceFork\0";
pub const _PATH_LOG: &[u8; 16usize] = b"/var/run/syslog\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_NETINFO: u32 = 96;
pub const LOG_REMOTEAUTH: u32 = 104;
pub const LOG_INSTALL: u32 = 112;
pub const LOG_RAS: u32 = 120;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_LAUNCHD: u32 = 192;
pub const LOG_NFACILITIES: u32 = 25;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const TMAGIC: &[u8; 6usize] = b"ustar\0";
pub const TMAGLEN: u32 = 6;
pub const TVERSION: &[u8; 3usize] = b"00\0";
pub const TVERSLEN: u32 = 2;
pub const REGTYPE: u8 = 48u8;
pub const AREGTYPE: u8 = 0u8;
pub const LNKTYPE: u8 = 49u8;
pub const SYMTYPE: u8 = 50u8;
pub const CHRTYPE: u8 = 51u8;
pub const BLKTYPE: u8 = 52u8;
pub const DIRTYPE: u8 = 53u8;
pub const FIFOTYPE: u8 = 54u8;
pub const CONTTYPE: u8 = 55u8;
pub const TSUID: u32 = 2048;
pub const TSGID: u32 = 1024;
pub const TSVTX: u32 = 512;
pub const TUREAD: u32 = 256;
pub const TUWRITE: u32 = 128;
pub const TUEXEC: u32 = 64;
pub const TGREAD: u32 = 32;
pub const TGWRITE: u32 = 16;
pub const TGEXEC: u32 = 8;
pub const TOREAD: u32 = 4;
pub const TOWRITE: u32 = 2;
pub const TOEXEC: u32 = 1;
pub const UL_GETFSIZE: u32 = 1;
pub const UL_SETFSIZE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const _PATH_UTMPX: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const UTMPX_FILE: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const _UTX_USERSIZE: u32 = 256;
pub const _UTX_LINESIZE: u32 = 32;
pub const _UTX_IDSIZE: u32 = 4;
pub const _UTX_HOSTSIZE: u32 = 256;
pub const EMPTY: u32 = 0;
pub const RUN_LVL: u32 = 1;
pub const BOOT_TIME: u32 = 2;
pub const OLD_TIME: u32 = 3;
pub const NEW_TIME: u32 = 4;
pub const INIT_PROCESS: u32 = 5;
pub const LOGIN_PROCESS: u32 = 6;
pub const USER_PROCESS: u32 = 7;
pub const DEAD_PROCESS: u32 = 8;
pub const ACCOUNTING: u32 = 9;
pub const SIGNATURE: u32 = 10;
pub const SHUTDOWN_TIME: u32 = 11;
pub const UTMPX_AUTOFILL_MASK: u32 = 32768;
pub const UTMPX_DEAD_IF_CORRESPONDING_MASK: u32 = 16384;
pub const UTMPX_CHANGE_NOTIFICATION: &[u8; 23usize] = b"com.apple.system.utmpx\0";
pub const WRDE_APPEND: u32 = 1;
pub const WRDE_DOOFFS: u32 = 2;
pub const WRDE_NOCMD: u32 = 4;
pub const WRDE_REUSE: u32 = 8;
pub const WRDE_SHOWERR: u32 = 16;
pub const WRDE_UNDEF: u32 = 32;
pub const WRDE_BADCHAR: u32 = 1;
pub const WRDE_BADVAL: u32 = 2;
pub const WRDE_CMDSUB: u32 = 3;
pub const WRDE_NOSPACE: u32 = 4;
pub const WRDE_NOSYS: u32 = 5;
pub const WRDE_SYNTAX: u32 = 6;
pub const ETHER_ADDR_LEN: u32 = 6;
pub const ETHER_TYPE_LEN: u32 = 2;
pub const ETHER_CRC_LEN: u32 = 4;
pub const ETHER_HDR_LEN: u32 = 14;
pub const ETHER_MIN_LEN: u32 = 64;
pub const ETHER_MAX_LEN: u32 = 1518;
pub const ETHER_ALIGN: u32 = 2;
pub const ETHERTYPE_PUP: u32 = 512;
pub const ETHERTYPE_IP: u32 = 2048;
pub const ETHERTYPE_ARP: u32 = 2054;
pub const ETHERTYPE_REVARP: u32 = 32821;
pub const ETHERTYPE_VLAN: u32 = 33024;
pub const ETHERTYPE_IPV6: u32 = 34525;
pub const ETHERTYPE_PAE: u32 = 34958;
pub const ETHERTYPE_RSN_PREAUTH: u32 = 35015;
pub const ETHERTYPE_PTP: u32 = 35063;
pub const ETHERTYPE_LOOPBACK: u32 = 36864;
pub const ETHERTYPE_TRAIL: u32 = 4096;
pub const ETHERTYPE_NTRAILER: u32 = 16;
pub const ETHERMTU: u32 = 1500;
pub const ETHERMIN: u32 = 46;
pub const IF_CELLULAR_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_CELLULAR_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_CELL_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_CELL_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_CELL_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_CELL_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_CELL_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_CELL_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_CELL_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_CELL_UL_BYTES_LOST_VALID: u32 = 128;
pub const IF_CELL_UL_MIN_QUEUE_SIZE_VALID: u32 = 256;
pub const IF_CELL_UL_AVG_QUEUE_SIZE_VALID: u32 = 512;
pub const IF_CELL_UL_MAX_QUEUE_SIZE_VALID: u32 = 1024;
pub const IF_CELL_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2048;
pub const IF_CELL_DL_MAX_BANDWIDTH_VALID: u32 = 4096;
pub const IF_CELL_CONFIG_INACTIVITY_TIME_VALID: u32 = 8192;
pub const IF_CELL_CONFIG_BACKOFF_TIME_VALID: u32 = 16384;
pub const IF_CELL_UL_MSS_RECOMMENDED_VALID: u32 = 32768;
pub const IF_CELL_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_CELL_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_CELL_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_CELL_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_CELL_UL_MSS_RECOMMENDED_NONE: u32 = 0;
pub const IF_CELL_UL_MSS_RECOMMENDED_MEDIUM: u32 = 1;
pub const IF_CELL_UL_MSS_RECOMMENDED_LOW: u32 = 2;
pub const IF_WIFI_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_WIFI_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_WIFI_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_WIFI_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_WIFI_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_WIFI_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_WIFI_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_WIFI_UL_ERROR_RATE_VALID: u32 = 128;
pub const IF_WIFI_UL_BYTES_LOST_VALID: u32 = 256;
pub const IF_WIFI_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 512;
pub const IF_WIFI_DL_MAX_BANDWIDTH_VALID: u32 = 1024;
pub const IF_WIFI_DL_MIN_LATENCY_VALID: u32 = 2048;
pub const IF_WIFI_DL_EFFECTIVE_LATENCY_VALID: u32 = 4096;
pub const IF_WIFI_DL_MAX_LATENCY_VALID: u32 = 8192;
pub const IF_WIFI_DL_ERROR_RATE_VALID: u32 = 16384;
pub const IF_WIFI_CONFIG_FREQUENCY_VALID: u32 = 32768;
pub const IF_WIFI_CONFIG_MULTICAST_RATE_VALID: u32 = 65536;
pub const IF_WIFI_CONFIG_SCAN_COUNT_VALID: u32 = 131072;
pub const IF_WIFI_CONFIG_SCAN_DURATION_VALID: u32 = 262144;
pub const IF_WIFI_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_WIFI_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_WIFI_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_WIFI_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_WIFI_CONFIG_FREQUENCY_2_4_GHZ: u32 = 1;
pub const IF_WIFI_CONFIG_FREQUENCY_5_0_GHZ: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_BT: u32 = 1;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_AWDL: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_TX_QUEUE_COUNT: u32 = 6;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_NO: u32 = 0;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_YES: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_TYPE_INET: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_INBOUND: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_OUTBOUND: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_IPVER: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_PROTO: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LADDR: u32 = 4;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RADDR: u32 = 8;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LPORT: u32 = 16;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RPORT: u32 = 32;
pub const IFNET_TRAFFIC_RULE_ACTION_STEER: u32 = 1;
pub const __PFKEY_V2_H: u32 = 1;
pub const PF_KEY_V2: u32 = 2;
pub const PFKEYV2_REVISION: u32 = 199806;
pub const SADB_RESERVED: u32 = 0;
pub const SADB_GETSPI: u32 = 1;
pub const SADB_UPDATE: u32 = 2;
pub const SADB_ADD: u32 = 3;
pub const SADB_DELETE: u32 = 4;
pub const SADB_GET: u32 = 5;
pub const SADB_ACQUIRE: u32 = 6;
pub const SADB_REGISTER: u32 = 7;
pub const SADB_EXPIRE: u32 = 8;
pub const SADB_FLUSH: u32 = 9;
pub const SADB_DUMP: u32 = 10;
pub const SADB_X_PROMISC: u32 = 11;
pub const SADB_X_PCHANGE: u32 = 12;
pub const SADB_X_SPDUPDATE: u32 = 13;
pub const SADB_X_SPDADD: u32 = 14;
pub const SADB_X_SPDDELETE: u32 = 15;
pub const SADB_X_SPDGET: u32 = 16;
pub const SADB_X_SPDACQUIRE: u32 = 17;
pub const SADB_X_SPDDUMP: u32 = 18;
pub const SADB_X_SPDFLUSH: u32 = 19;
pub const SADB_X_SPDSETIDX: u32 = 20;
pub const SADB_X_SPDEXPIRE: u32 = 21;
pub const SADB_X_SPDDELETE2: u32 = 22;
pub const SADB_GETSASTAT: u32 = 23;
pub const SADB_X_SPDENABLE: u32 = 24;
pub const SADB_X_SPDDISABLE: u32 = 25;
pub const SADB_MIGRATE: u32 = 26;
pub const SADB_MAX: u32 = 26;
pub const SADB_EXT_RESERVED: u32 = 0;
pub const SADB_EXT_SA: u32 = 1;
pub const SADB_EXT_LIFETIME_CURRENT: u32 = 2;
pub const SADB_EXT_LIFETIME_HARD: u32 = 3;
pub const SADB_EXT_LIFETIME_SOFT: u32 = 4;
pub const SADB_EXT_ADDRESS_SRC: u32 = 5;
pub const SADB_EXT_ADDRESS_DST: u32 = 6;
pub const SADB_EXT_ADDRESS_PROXY: u32 = 7;
pub const SADB_EXT_KEY_AUTH: u32 = 8;
pub const SADB_EXT_KEY_ENCRYPT: u32 = 9;
pub const SADB_EXT_IDENTITY_SRC: u32 = 10;
pub const SADB_EXT_IDENTITY_DST: u32 = 11;
pub const SADB_EXT_SENSITIVITY: u32 = 12;
pub const SADB_EXT_PROPOSAL: u32 = 13;
pub const SADB_EXT_SUPPORTED_AUTH: u32 = 14;
pub const SADB_EXT_SUPPORTED_ENCRYPT: u32 = 15;
pub const SADB_EXT_SPIRANGE: u32 = 16;
pub const SADB_X_EXT_KMPRIVATE: u32 = 17;
pub const SADB_X_EXT_POLICY: u32 = 18;
pub const SADB_X_EXT_SA2: u32 = 19;
pub const SADB_EXT_SESSION_ID: u32 = 20;
pub const SADB_EXT_SASTAT: u32 = 21;
pub const SADB_X_EXT_IPSECIF: u32 = 22;
pub const SADB_X_EXT_ADDR_RANGE_SRC_START: u32 = 23;
pub const SADB_X_EXT_ADDR_RANGE_SRC_END: u32 = 24;
pub const SADB_X_EXT_ADDR_RANGE_DST_START: u32 = 25;
pub const SADB_X_EXT_ADDR_RANGE_DST_END: u32 = 26;
pub const SADB_EXT_MIGRATE_ADDRESS_SRC: u32 = 27;
pub const SADB_EXT_MIGRATE_ADDRESS_DST: u32 = 28;
pub const SADB_X_EXT_MIGRATE_IPSECIF: u32 = 29;
pub const SADB_EXT_MAX: u32 = 29;
pub const SADB_SATYPE_UNSPEC: u32 = 0;
pub const SADB_SATYPE_AH: u32 = 2;
pub const SADB_SATYPE_ESP: u32 = 3;
pub const SADB_SATYPE_RSVP: u32 = 5;
pub const SADB_SATYPE_OSPFV2: u32 = 6;
pub const SADB_SATYPE_RIPV2: u32 = 7;
pub const SADB_SATYPE_MIP: u32 = 8;
pub const SADB_X_SATYPE_IPCOMP: u32 = 9;
pub const SADB_X_SATYPE_POLICY: u32 = 10;
pub const SADB_SATYPE_MAX: u32 = 11;
pub const SADB_SASTATE_LARVAL: u32 = 0;
pub const SADB_SASTATE_MATURE: u32 = 1;
pub const SADB_SASTATE_DYING: u32 = 2;
pub const SADB_SASTATE_DEAD: u32 = 3;
pub const SADB_SASTATE_MAX: u32 = 3;
pub const SADB_SAFLAGS_PFS: u32 = 1;
pub const SADB_AALG_NONE: u32 = 0;
pub const SADB_AALG_MD5HMAC: u32 = 1;
pub const SADB_AALG_SHA1HMAC: u32 = 2;
pub const SADB_AALG_MAX: u32 = 8;
pub const SADB_X_AALG_SHA2_256: u32 = 6;
pub const SADB_X_AALG_SHA2_384: u32 = 7;
pub const SADB_X_AALG_SHA2_512: u32 = 8;
pub const SADB_X_AALG_MD5: u32 = 3;
pub const SADB_X_AALG_SHA: u32 = 4;
pub const SADB_X_AALG_NULL: u32 = 5;
pub const SADB_EALG_NONE: u32 = 0;
pub const SADB_EALG_DESCBC: u32 = 1;
pub const SADB_EALG_3DESCBC: u32 = 2;
pub const SADB_EALG_NULL: u32 = 3;
pub const SADB_EALG_MAX: u32 = 12;
pub const SADB_X_EALG_CAST128CBC: u32 = 5;
pub const SADB_X_EALG_BLOWFISHCBC: u32 = 4;
pub const SADB_X_EALG_RIJNDAELCBC: u32 = 12;
pub const SADB_X_EALG_AESCBC: u32 = 12;
pub const SADB_X_EALG_AES: u32 = 12;
pub const SADB_X_EALG_AES_GCM: u32 = 13;
pub const SADB_X_EALG_CHACHA20POLY1305: u32 = 14;
pub const SADB_X_CALG_NONE: u32 = 0;
pub const SADB_X_CALG_OUI: u32 = 1;
pub const SADB_X_CALG_DEFLATE: u32 = 2;
pub const SADB_X_CALG_LZS: u32 = 3;
pub const SADB_X_CALG_MAX: u32 = 4;
pub const SADB_IDENTTYPE_RESERVED: u32 = 0;
pub const SADB_IDENTTYPE_PREFIX: u32 = 1;
pub const SADB_IDENTTYPE_FQDN: u32 = 2;
pub const SADB_IDENTTYPE_USERFQDN: u32 = 3;
pub const SADB_X_IDENTTYPE_ADDR: u32 = 4;
pub const SADB_IDENTTYPE_MAX: u32 = 4;
pub const SADB_X_EXT_NONE: u32 = 0;
pub const SADB_X_EXT_OLD: u32 = 1;
pub const SADB_X_EXT_IV4B: u32 = 16;
pub const SADB_X_EXT_DERIV: u32 = 32;
pub const SADB_X_EXT_CYCSEQ: u32 = 64;
pub const SADB_X_EXT_PSEQ: u32 = 0;
pub const SADB_X_EXT_PRAND: u32 = 256;
pub const SADB_X_EXT_PZERO: u32 = 512;
pub const SADB_X_EXT_PMASK: u32 = 768;
pub const SADB_X_EXT_IIV: u32 = 1024;
pub const SADB_X_EXT_RAWCPI: u32 = 128;
pub const SADB_KEY_FLAGS_MAX: u32 = 32767;
pub const SADB_X_LIFETIME_ALLOCATIONS: u32 = 0;
pub const SADB_X_LIFETIME_BYTES: u32 = 1;
pub const SADB_X_LIFETIME_ADDTIME: u32 = 2;
pub const SADB_X_LIFETIME_USETIME: u32 = 3;
pub const PFKEY_SOFT_LIFETIME_RATE: u32 = 80;
pub const ICMPV6_PLD_MAXLEN: u32 = 1232;
pub const ICMP6_DST_UNREACH: u32 = 1;
pub const ICMP6_PACKET_TOO_BIG: u32 = 2;
pub const ICMP6_TIME_EXCEEDED: u32 = 3;
pub const ICMP6_PARAM_PROB: u32 = 4;
pub const ICMP6_ECHO_REQUEST: u32 = 128;
pub const ICMP6_ECHO_REPLY: u32 = 129;
pub const MLD_LISTENER_QUERY: u32 = 130;
pub const MLD_LISTENER_REPORT: u32 = 131;
pub const MLD_LISTENER_DONE: u32 = 132;
pub const MLD_LISTENER_REDUCTION: u32 = 132;
pub const ICMP6_MEMBERSHIP_QUERY: u32 = 130;
pub const ICMP6_MEMBERSHIP_REPORT: u32 = 131;
pub const ICMP6_MEMBERSHIP_REDUCTION: u32 = 132;
pub const MLD6_LISTENER_QUERY: u32 = 130;
pub const MLD6_LISTENER_REPORT: u32 = 131;
pub const MLD6_LISTENER_DONE: u32 = 132;
pub const ND_ROUTER_SOLICIT: u32 = 133;
pub const ND_ROUTER_ADVERT: u32 = 134;
pub const ND_NEIGHBOR_SOLICIT: u32 = 135;
pub const ND_NEIGHBOR_ADVERT: u32 = 136;
pub const ND_REDIRECT: u32 = 137;
pub const ICMP6_ROUTER_RENUMBERING: u32 = 138;
pub const ICMP6_WRUREQUEST: u32 = 139;
pub const ICMP6_WRUREPLY: u32 = 140;
pub const ICMP6_FQDN_QUERY: u32 = 139;
pub const ICMP6_FQDN_REPLY: u32 = 140;
pub const ICMP6_NI_QUERY: u32 = 139;
pub const ICMP6_NI_REPLY: u32 = 140;
pub const MLDV2_LISTENER_REPORT: u32 = 143;
pub const MLD_MTRACE_RESP: u32 = 200;
pub const MLD_MTRACE: u32 = 201;
pub const MLD6_MTRACE_RESP: u32 = 200;
pub const MLD6_MTRACE: u32 = 201;
pub const ICMP6_MAXTYPE: u32 = 201;
pub const ICMP6_DST_UNREACH_NOROUTE: u32 = 0;
pub const ICMP6_DST_UNREACH_ADMIN: u32 = 1;
pub const ICMP6_DST_UNREACH_NOTNEIGHBOR: u32 = 2;
pub const ICMP6_DST_UNREACH_BEYONDSCOPE: u32 = 2;
pub const ICMP6_DST_UNREACH_ADDR: u32 = 3;
pub const ICMP6_DST_UNREACH_NOPORT: u32 = 4;
pub const ICMP6_TIME_EXCEED_TRANSIT: u32 = 0;
pub const ICMP6_TIME_EXCEED_REASSEMBLY: u32 = 1;
pub const ICMP6_PARAMPROB_HEADER: u32 = 0;
pub const ICMP6_PARAMPROB_NEXTHEADER: u32 = 1;
pub const ICMP6_PARAMPROB_OPTION: u32 = 2;
pub const ICMP6_PARAMPROB_FIRSTFRAG_INCOMP_HDR: u32 = 3;
pub const ICMP6_INFOMSG_MASK: u32 = 128;
pub const ICMP6_NI_SUBJ_IPV6: u32 = 0;
pub const ICMP6_NI_SUBJ_FQDN: u32 = 1;
pub const ICMP6_NI_SUBJ_IPV4: u32 = 2;
pub const ICMP6_NI_SUCCESS: u32 = 0;
pub const ICMP6_NI_REFUSED: u32 = 1;
pub const ICMP6_NI_UNKNOWN: u32 = 2;
pub const ICMP6_ROUTER_RENUMBERING_COMMAND: u32 = 0;
pub const ICMP6_ROUTER_RENUMBERING_RESULT: u32 = 1;
pub const ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET: u32 = 255;
pub const ND_REDIRECT_ONLINK: u32 = 0;
pub const ND_REDIRECT_ROUTER: u32 = 1;
pub const ND_RA_FLAG_MANAGED: u32 = 128;
pub const ND_RA_FLAG_OTHER: u32 = 64;
pub const ND_RA_FLAG_HA: u32 = 32;
pub const ND_RA_FLAG_RTPREF_MASK: u32 = 24;
pub const ND_RA_FLAG_RTPREF_HIGH: u32 = 8;
pub const ND_RA_FLAG_RTPREF_MEDIUM: u32 = 0;
pub const ND_RA_FLAG_RTPREF_LOW: u32 = 24;
pub const ND_RA_FLAG_RTPREF_RSV: u32 = 16;
pub const ND_NA_FLAG_ROUTER: u32 = 128;
pub const ND_NA_FLAG_SOLICITED: u32 = 64;
pub const ND_NA_FLAG_OVERRIDE: u32 = 32;
pub const ND_OPT_SOURCE_LINKADDR: u32 = 1;
pub const ND_OPT_TARGET_LINKADDR: u32 = 2;
pub const ND_OPT_PREFIX_INFORMATION: u32 = 3;
pub const ND_OPT_REDIRECTED_HEADER: u32 = 4;
pub const ND_OPT_MTU: u32 = 5;
pub const ND_OPT_NONCE: u32 = 14;
pub const ND_OPT_ROUTE_INFO: u32 = 24;
pub const ND_OPT_RDNSS: u32 = 25;
pub const ND_OPT_DNSSL: u32 = 31;
pub const ND_OPT_CAPTIVE_PORTAL: u32 = 37;
pub const ND_OPT_PREF64: u32 = 38;
pub const ND_OPT_PI_FLAG_ONLINK: u32 = 128;
pub const ND_OPT_PI_FLAG_AUTO: u32 = 64;
pub const ND_OPT_NONCE_LEN: u32 = 6;
pub const ND_OPT_PREF64_SCALED_LIFETIME_MASK: u32 = 65528;
pub const ND_OPT_PREF64_PLC_MASK: u32 = 7;
pub const ND_OPT_PREF64_LIFETIME_MAX: u32 = 65528;
pub const ND_OPT_PREF64_PLC_32: u32 = 5;
pub const ND_OPT_PREF64_PLC_40: u32 = 4;
pub const ND_OPT_PREF64_PLC_48: u32 = 3;
pub const ND_OPT_PREF64_PLC_56: u32 = 2;
pub const ND_OPT_PREF64_PLC_64: u32 = 1;
pub const ND_OPT_PREF64_PLC_96: u32 = 0;
pub const NI_QTYPE_NOOP: u32 = 0;
pub const NI_QTYPE_SUPTYPES: u32 = 1;
pub const NI_QTYPE_FQDN: u32 = 2;
pub const NI_QTYPE_DNSNAME: u32 = 2;
pub const NI_QTYPE_NODEADDR: u32 = 3;
pub const NI_QTYPE_IPV4ADDR: u32 = 4;
pub const NI_SUPTYPE_FLAG_COMPRESS: u32 = 256;
pub const NI_FQDN_FLAG_VALIDTTL: u32 = 256;
pub const NI_NODEADDR_FLAG_TRUNCATE: u32 = 256;
pub const NI_NODEADDR_FLAG_ALL: u32 = 512;
pub const NI_NODEADDR_FLAG_COMPAT: u32 = 1024;
pub const NI_NODEADDR_FLAG_LINKLOCAL: u32 = 2048;
pub const NI_NODEADDR_FLAG_SITELOCAL: u32 = 4096;
pub const NI_NODEADDR_FLAG_GLOBAL: u32 = 8192;
pub const NI_NODEADDR_FLAG_ANYCAST: u32 = 16384;
pub const ICMP6_RR_FLAGS_TEST: u32 = 128;
pub const ICMP6_RR_FLAGS_REQRESULT: u32 = 64;
pub const ICMP6_RR_FLAGS_FORCEAPPLY: u32 = 32;
pub const ICMP6_RR_FLAGS_SPECSITE: u32 = 16;
pub const ICMP6_RR_FLAGS_PREVDONE: u32 = 8;
pub const RPM_PCO_ADD: u32 = 1;
pub const RPM_PCO_CHANGE: u32 = 2;
pub const RPM_PCO_SETGLOBAL: u32 = 3;
pub const RPM_PCO_MAX: u32 = 4;
pub const ICMP6_RR_PCOUSE_RAFLAGS_ONLINK: u32 = 128;
pub const ICMP6_RR_PCOUSE_RAFLAGS_AUTO: u32 = 64;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME: u32 = 128;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME: u32 = 64;
pub const ICMP6_RR_RESULT_FLAGS_OOB: u32 = 512;
pub const ICMP6_RR_RESULT_FLAGS_FORBIDDEN: u32 = 256;
pub const ICMPV6CTL_STATS: u32 = 1;
pub const ICMPV6CTL_REDIRACCEPT: u32 = 2;
pub const ICMPV6CTL_REDIRTIMEOUT: u32 = 3;
pub const ICMPV6CTL_ND6_PRUNE: u32 = 6;
pub const ICMPV6CTL_ND6_DELAY: u32 = 8;
pub const ICMPV6CTL_ND6_UMAXTRIES: u32 = 9;
pub const ICMPV6CTL_ND6_MMAXTRIES: u32 = 10;
pub const ICMPV6CTL_ND6_USELOOPBACK: u32 = 11;
pub const ICMPV6CTL_NODEINFO: u32 = 13;
pub const ICMPV6CTL_ERRPPSLIMIT: u32 = 14;
pub const ICMPV6CTL_ND6_MAXNUDHINT: u32 = 15;
pub const ICMPV6CTL_MTUDISC_HIWAT: u32 = 16;
pub const ICMPV6CTL_MTUDISC_LOWAT: u32 = 17;
pub const ICMPV6CTL_ND6_DEBUG: u32 = 18;
pub const ICMPV6CTL_ND6_DRLIST: u32 = 19;
pub const ICMPV6CTL_ND6_PRLIST: u32 = 20;
pub const ICMPV6CTL_MLD_MAXSRCFILTER: u32 = 21;
pub const ICMPV6CTL_MLD_SOMAXSRC: u32 = 22;
pub const ICMPV6CTL_MLD_VERSION: u32 = 23;
pub const ICMPV6CTL_ND6_MAXQLEN: u32 = 24;
pub const ICMPV6CTL_ND6_ACCEPT_6TO4: u32 = 25;
pub const ICMPV6CTL_ND6_OPTIMISTIC_DAD: u32 = 26;
pub const ICMPV6CTL_ERRPPSLIMIT_RANDOM_INCR: u32 = 27;
pub const ICMPV6CTL_MAXID: u32 = 28;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 0;
pub const TARGET_OS_IPHONE: u32 = 1;
pub const TARGET_OS_IOS: u32 = 1;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 1;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_APP_APPROVED: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_TRACKER: u32 = 2;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_DOMAIN_SHORT: u32 = 4;
pub const SO_TRACKER_TRANSPARENCY_VERSION: u32 = 3;
pub const INP_IPV4: u32 = 1;
pub const INP_IPV6: u32 = 2;
pub const INP_V4MAPPEDV6: u32 = 4;
pub const INP_ANONPORT: u32 = 64;
pub const IN6P_IPV6_V6ONLY: u32 = 32768;
pub const IN6P_BINDV6ONLY: u32 = 16777216;
pub const IPVERSION: u32 = 4;
pub const IP_RF: u32 = 32768;
pub const IP_DF: u32 = 16384;
pub const IP_MF: u32 = 8192;
pub const IP_OFFMASK: u32 = 8191;
pub const IP_MAXPACKET: u32 = 65535;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_CE: u32 = 1;
pub const IPTOS_ECT: u32 = 2;
pub const IPTOS_DSCP_SHIFT: u32 = 2;
pub const IPTOS_ECN_NOTECT: u32 = 0;
pub const IPTOS_ECN_ECT1: u32 = 1;
pub const IPTOS_ECN_ECT0: u32 = 2;
pub const IPTOS_ECN_CE: u32 = 3;
pub const IPTOS_ECN_MASK: u32 = 3;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IPOPT_CONTROL: u32 = 0;
pub const IPOPT_RESERVED1: u32 = 32;
pub const IPOPT_DEBMEAS: u32 = 64;
pub const IPOPT_RESERVED2: u32 = 96;
pub const IPOPT_EOL: u32 = 0;
pub const IPOPT_NOP: u32 = 1;
pub const IPOPT_RR: u32 = 7;
pub const IPOPT_TS: u32 = 68;
pub const IPOPT_SECURITY: u32 = 130;
pub const IPOPT_LSRR: u32 = 131;
pub const IPOPT_SATID: u32 = 136;
pub const IPOPT_SSRR: u32 = 137;
pub const IPOPT_RA: u32 = 148;
pub const IPOPT_OPTVAL: u32 = 0;
pub const IPOPT_OLEN: u32 = 1;
pub const IPOPT_OFFSET: u32 = 2;
pub const IPOPT_MINOFF: u32 = 4;
pub const IPOPT_TS_TSONLY: u32 = 0;
pub const IPOPT_TS_TSANDADDR: u32 = 1;
pub const IPOPT_TS_PRESPEC: u32 = 3;
pub const IPOPT_SECUR_UNCLASS: u32 = 0;
pub const IPOPT_SECUR_CONFID: u32 = 61749;
pub const IPOPT_SECUR_EFTO: u32 = 30874;
pub const IPOPT_SECUR_MMMM: u32 = 48205;
pub const IPOPT_SECUR_RESTR: u32 = 44819;
pub const IPOPT_SECUR_SECRET: u32 = 55176;
pub const IPOPT_SECUR_TOPSECRET: u32 = 27589;
pub const MAXTTL: u32 = 255;
pub const IPDEFTTL: u32 = 64;
pub const IPFRAGTTL: u32 = 30;
pub const IPTTLDEC: u32 = 1;
pub const IP_MSS: u32 = 576;
pub const IPV6_VERSION: u32 = 96;
pub const IPV6_VERSION_MASK: u32 = 240;
pub const IPV6_FLOWINFO_MASK: u32 = 4294967055;
pub const IPV6_FLOWLABEL_MASK: u32 = 4294905600;
pub const IPV6_FLOW_ECN_MASK: u32 = 12288;
pub const IP6TOS_CE: u32 = 1;
pub const IP6TOS_ECT: u32 = 2;
pub const IP6FLOW_DSCP_MASK: u32 = 264241152;
pub const IP6FLOW_DSCP_SHIFT: u32 = 22;
pub const IP6OPT_PAD1: u32 = 0;
pub const IP6OPT_PADN: u32 = 1;
pub const IP6OPT_JUMBO: u32 = 194;
pub const IP6OPT_NSAP_ADDR: u32 = 195;
pub const IP6OPT_TUNNEL_LIMIT: u32 = 4;
pub const IP6OPT_RTALERT: u32 = 5;
pub const IP6OPT_ROUTER_ALERT: u32 = 5;
pub const IP6OPT_RTALERT_LEN: u32 = 4;
pub const IP6OPT_RTALERT_MLD: u32 = 0;
pub const IP6OPT_RTALERT_RSVP: u32 = 1;
pub const IP6OPT_RTALERT_ACTNET: u32 = 2;
pub const IP6OPT_MINLEN: u32 = 2;
pub const IP6OPT_EID: u32 = 138;
pub const IP6OPT_TYPE_SKIP: u32 = 0;
pub const IP6OPT_TYPE_DISCARD: u32 = 64;
pub const IP6OPT_TYPE_FORCEICMP: u32 = 128;
pub const IP6OPT_TYPE_ICMP: u32 = 192;
pub const IP6OPT_MUTABLE: u32 = 32;
pub const IP6OPT_JUMBO_LEN: u32 = 6;
pub const IP6_ALERT_MLD: u32 = 0;
pub const IP6_ALERT_RSVP: u32 = 256;
pub const IP6_ALERT_AN: u32 = 512;
pub const IP6F_OFF_MASK: u32 = 63743;
pub const IP6F_RESERVED_MASK: u32 = 1536;
pub const IP6F_MORE_FRAG: u32 = 256;
pub const IPV6_MAXHLIM: u32 = 255;
pub const IPV6_DEFHLIM: u32 = 64;
pub const IPV6_FRAGTTL: u32 = 60;
pub const IPV6_HLIMDEC: u32 = 1;
pub const IPV6_MMTU: u32 = 1280;
pub const IPV6_MAXPACKET: u32 = 65535;
pub const IPV6_MAXOPTHDR: u32 = 2048;
pub const ICMP_MINLEN: u32 = 8;
pub const ICMP_MASKLEN: u32 = 12;
pub const ICMP_ECHOREPLY: u32 = 0;
pub const ICMP_UNREACH: u32 = 3;
pub const ICMP_UNREACH_NET: u32 = 0;
pub const ICMP_UNREACH_HOST: u32 = 1;
pub const ICMP_UNREACH_PROTOCOL: u32 = 2;
pub const ICMP_UNREACH_PORT: u32 = 3;
pub const ICMP_UNREACH_NEEDFRAG: u32 = 4;
pub const ICMP_UNREACH_SRCFAIL: u32 = 5;
pub const ICMP_UNREACH_NET_UNKNOWN: u32 = 6;
pub const ICMP_UNREACH_HOST_UNKNOWN: u32 = 7;
pub const ICMP_UNREACH_ISOLATED: u32 = 8;
pub const ICMP_UNREACH_NET_PROHIB: u32 = 9;
pub const ICMP_UNREACH_HOST_PROHIB: u32 = 10;
pub const ICMP_UNREACH_TOSNET: u32 = 11;
pub const ICMP_UNREACH_TOSHOST: u32 = 12;
pub const ICMP_UNREACH_FILTER_PROHIB: u32 = 13;
pub const ICMP_UNREACH_HOST_PRECEDENCE: u32 = 14;
pub const ICMP_UNREACH_PRECEDENCE_CUTOFF: u32 = 15;
pub const ICMP_SOURCEQUENCH: u32 = 4;
pub const ICMP_REDIRECT: u32 = 5;
pub const ICMP_REDIRECT_NET: u32 = 0;
pub const ICMP_REDIRECT_HOST: u32 = 1;
pub const ICMP_REDIRECT_TOSNET: u32 = 2;
pub const ICMP_REDIRECT_TOSHOST: u32 = 3;
pub const ICMP_ALTHOSTADDR: u32 = 6;
pub const ICMP_ECHO: u32 = 8;
pub const ICMP_ROUTERADVERT: u32 = 9;
pub const ICMP_ROUTERADVERT_NORMAL: u32 = 0;
pub const ICMP_ROUTERADVERT_NOROUTE_COMMON: u32 = 16;
pub const ICMP_ROUTERSOLICIT: u32 = 10;
pub const ICMP_TIMXCEED: u32 = 11;
pub const ICMP_TIMXCEED_INTRANS: u32 = 0;
pub const ICMP_TIMXCEED_REASS: u32 = 1;
pub const ICMP_PARAMPROB: u32 = 12;
pub const ICMP_PARAMPROB_ERRATPTR: u32 = 0;
pub const ICMP_PARAMPROB_OPTABSENT: u32 = 1;
pub const ICMP_PARAMPROB_LENGTH: u32 = 2;
pub const ICMP_TSTAMP: u32 = 13;
pub const ICMP_TSTAMPREPLY: u32 = 14;
pub const ICMP_IREQ: u32 = 15;
pub const ICMP_IREQREPLY: u32 = 16;
pub const ICMP_MASKREQ: u32 = 17;
pub const ICMP_MASKREPLY: u32 = 18;
pub const ICMP_TRACEROUTE: u32 = 30;
pub const ICMP_DATACONVERR: u32 = 31;
pub const ICMP_MOBILE_REDIRECT: u32 = 32;
pub const ICMP_IPV6_WHEREAREYOU: u32 = 33;
pub const ICMP_IPV6_IAMHERE: u32 = 34;
pub const ICMP_MOBILE_REGREQUEST: u32 = 35;
pub const ICMP_MOBILE_REGREPLY: u32 = 36;
pub const ICMP_SKIP: u32 = 39;
pub const ICMP_PHOTURIS: u32 = 40;
pub const ICMP_PHOTURIS_UNKNOWN_INDEX: u32 = 1;
pub const ICMP_PHOTURIS_AUTH_FAILED: u32 = 2;
pub const ICMP_PHOTURIS_DECRYPT_FAILED: u32 = 3;
pub const ICMP_MAXTYPE: u32 = 40;
pub const TCPT_NTIMERS_EXT: u32 = 4;
pub const TCPT_REXMT: u32 = 0;
pub const TCPT_PERSIST: u32 = 1;
pub const TCPT_KEEP: u32 = 2;
pub const TCPT_2MSL: u32 = 3;
pub const TCPT_DELACK: u32 = 4;
pub const TCPT_MAX: u32 = 4;
pub const TCPT_NONE: u32 = 5;
pub const TCPT_NTIMERS: u32 = 5;
pub const TF_ACKNOW: u32 = 1;
pub const TF_DELACK: u32 = 2;
pub const TF_NODELAY: u32 = 4;
pub const TF_NOOPT: u32 = 8;
pub const TF_SENTFIN: u32 = 16;
pub const TF_REQ_SCALE: u32 = 32;
pub const TF_RCVD_SCALE: u32 = 64;
pub const TF_REQ_TSTMP: u32 = 128;
pub const TF_RCVD_TSTMP: u32 = 256;
pub const TF_SACK_PERMIT: u32 = 512;
pub const TF_NEEDSYN: u32 = 1024;
pub const TF_NEEDFIN: u32 = 2048;
pub const TF_NOPUSH: u32 = 4096;
pub const TF_REQ_CC: u32 = 8192;
pub const TF_RCVD_CC: u32 = 16384;
pub const TF_SENDCCNEW: u32 = 32768;
pub const TF_MORETOCOME: u32 = 65536;
pub const TF_LQ_OVERFLOW: u32 = 131072;
pub const TF_RXWIN0SENT: u32 = 262144;
pub const TF_SLOWLINK: u32 = 524288;
pub const TCPOOB_HAVEDATA: u32 = 1;
pub const TCPOOB_HADDATA: u32 = 2;
pub const TCPCTL_DO_RFC1323: u32 = 1;
pub const TCPCTL_DO_RFC1644: u32 = 2;
pub const TCPCTL_MSSDFLT: u32 = 3;
pub const TCPCTL_STATS: u32 = 4;
pub const TCPCTL_RTTDFLT: u32 = 5;
pub const TCPCTL_KEEPIDLE: u32 = 6;
pub const TCPCTL_KEEPINTVL: u32 = 7;
pub const TCPCTL_SENDSPACE: u32 = 8;
pub const TCPCTL_RECVSPACE: u32 = 9;
pub const TCPCTL_KEEPINIT: u32 = 10;
pub const TCPCTL_PCBLIST: u32 = 11;
pub const TCPCTL_DELACKTIME: u32 = 12;
pub const TCPCTL_V6MSSDFLT: u32 = 13;
pub const TCPCTL_MAXID: u32 = 14;
pub const UDP_NOCKSUM: u32 = 1;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_X_VERSION_MIN_REQUIRED: u32 = 1050;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const __IPHONE_COMPAT_VERSION: u32 = 40000;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_CPU_STAT: u32 = 268435459;
pub const PROCESSOR_CPU_STAT64: u32 = 268435460;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_BASIC_INFO_64_2: u32 = 18;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const MACH_VM_MIN_ADDRESS_RAW: u32 = 0;
pub const MACH_VM_MAX_ADDRESS_RAW: u64 = 67645734912;
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW: u64 = 68719476736;
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW: u64 = 481036337152;
pub const SWI_SYSCALL: u32 = 128;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const MACH_VOUCHER_BANK_CONTENT_SIZE: u32 = 500;
pub const BANK_ORIGINATOR_PID: u32 = 1;
pub const BANK_PERSONA_TOKEN: u32 = 2;
pub const BANK_PERSONA_ID: u32 = 3;
pub const BANK_PERSONA_ADOPT_ANY: u32 = 4;
pub const PROC_PERSONA_INFO_FLAG_ADOPTION_ALLOWED: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const DEBUG_ASSERT_COMPONENT_NAME_STRING: &[u8; 1usize] = b"\0";
pub const __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 65;
pub const thread_act_MSG_COUNT: u32 = 31;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const clock_MSG_COUNT: u32 = 3;
pub const clock_reply_MSG_COUNT: u32 = 1;
pub const exc_MSG_COUNT: u32 = 3;
pub const HOST_REBOOT_HALT: u32 = 8;
pub const HOST_REBOOT_UPSDELAY: u32 = 256;
pub const HOST_REBOOT_DEBUGGER: u32 = 4096;
pub const TASK_PORT_REGISTER_MAX: u32 = 3;
pub const TASK_MAX_WATCHPORT_COUNT: u32 = 32;
pub const TASK_SELF_PORT_COUNT: u32 = 4;
pub const THREAD_SELF_PORT_COUNT: u32 = 3;
pub const mach_voucher_MSG_COUNT: u32 = 5;
pub const memory_entry_MSG_COUNT: u32 = 3;
pub const CC_SYM_PREFIX: &[u8; 2usize] = b"_\0";
pub const MACH_ARM_TRAP_ABSTIME: i32 = -3;
pub const MACH_ARM_TRAP_CONTTIME: i32 = -4;
pub const OSATOMIC_DEPRECATED: u32 = 1;
pub const OSSPINLOCK_DEPRECATED: u32 = 1;
pub const OS_SPINLOCK_INIT: u32 = 0;
pub const OS_LOCK_API_VERSION: u32 = 20160309;
pub const MALLOC_PTR_IN_USE_RANGE_TYPE: u32 = 1;
pub const MALLOC_PTR_REGION_RANGE_TYPE: u32 = 2;
pub const MALLOC_ADMIN_REGION_RANGE_TYPE: u32 = 4;
pub const MALLOC_ZONE_SPECIFIC_FLAGS: u32 = 65280;
pub const MALLOC_VERBOSE_PRINT_LEVEL: u32 = 2;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 65536;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 262144;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 65536;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6usize] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11usize] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const IPSEC_PORT_ANY: u32 = 0;
pub const IPSEC_ULPROTO_ANY: u32 = 255;
pub const IPSEC_PROTO_ANY: u32 = 255;
pub const IPSEC_MODE_ANY: u32 = 0;
pub const IPSEC_MODE_TRANSPORT: u32 = 1;
pub const IPSEC_MODE_TUNNEL: u32 = 2;
pub const IPSEC_DIR_ANY: u32 = 0;
pub const IPSEC_DIR_INBOUND: u32 = 1;
pub const IPSEC_DIR_OUTBOUND: u32 = 2;
pub const IPSEC_DIR_MAX: u32 = 3;
pub const IPSEC_DIR_INVALID: u32 = 4;
pub const IPSEC_POLICY_DISCARD: u32 = 0;
pub const IPSEC_POLICY_NONE: u32 = 1;
pub const IPSEC_POLICY_IPSEC: u32 = 2;
pub const IPSEC_POLICY_ENTRUST: u32 = 3;
pub const IPSEC_POLICY_BYPASS: u32 = 4;
pub const IPSEC_POLICY_GENERATE: u32 = 5;
pub const IPSEC_LEVEL_DEFAULT: u32 = 0;
pub const IPSEC_LEVEL_USE: u32 = 1;
pub const IPSEC_LEVEL_REQUIRE: u32 = 2;
pub const IPSEC_LEVEL_UNIQUE: u32 = 3;
pub const IPSEC_MANUAL_REQID_MAX: u32 = 16383;
pub const IPSEC_REPLAYWSIZE: u32 = 32;
pub const IPSEC_KEY_AUTH_MAX_BYTES: u32 = 256;
pub const IPSEC_KEY_ENCRYPT_MAX_BYTES: u32 = 256;
pub const IPSEC_MAX_WAKE_PKT_LEN: u32 = 100;
pub const SCOPE6_ID_MAX: u32 = 16;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30usize] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26usize] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const FSOPT_NOFOLLOW: u32 = 1;
pub const FSOPT_NOINMEMUPDATE: u32 = 2;
pub const FSOPT_REPORT_FULLSIZE: u32 = 4;
pub const FSOPT_PACK_INVAL_ATTRS: u32 = 8;
pub const FSOPT_ATTR_CMN_EXTENDED: u32 = 32;
pub const FSOPT_RETURN_REALDEV: u32 = 512;
pub const FSOPT_NOFOLLOW_ANY: u32 = 2048;
pub const SEARCHFS_MAX_SEARCHPARMS: u32 = 4096;
pub const ATTR_BIT_MAP_COUNT: u32 = 5;
pub const VOL_CAPABILITIES_FORMAT: u32 = 0;
pub const VOL_CAPABILITIES_INTERFACES: u32 = 1;
pub const VOL_CAPABILITIES_RESERVED1: u32 = 2;
pub const VOL_CAPABILITIES_RESERVED2: u32 = 3;
pub const ATTR_MAX_BUFFER: u32 = 8192;
pub const VOL_CAP_FMT_PERSISTENTOBJECTIDS: u32 = 1;
pub const VOL_CAP_FMT_SYMBOLICLINKS: u32 = 2;
pub const VOL_CAP_FMT_HARDLINKS: u32 = 4;
pub const VOL_CAP_FMT_JOURNAL: u32 = 8;
pub const VOL_CAP_FMT_JOURNAL_ACTIVE: u32 = 16;
pub const VOL_CAP_FMT_NO_ROOT_TIMES: u32 = 32;
pub const VOL_CAP_FMT_SPARSE_FILES: u32 = 64;
pub const VOL_CAP_FMT_ZERO_RUNS: u32 = 128;
pub const VOL_CAP_FMT_CASE_SENSITIVE: u32 = 256;
pub const VOL_CAP_FMT_CASE_PRESERVING: u32 = 512;
pub const VOL_CAP_FMT_FAST_STATFS: u32 = 1024;
pub const VOL_CAP_FMT_2TB_FILESIZE: u32 = 2048;
pub const VOL_CAP_FMT_OPENDENYMODES: u32 = 4096;
pub const VOL_CAP_FMT_HIDDEN_FILES: u32 = 8192;
pub const VOL_CAP_FMT_PATH_FROM_ID: u32 = 16384;
pub const VOL_CAP_FMT_NO_VOLUME_SIZES: u32 = 32768;
pub const VOL_CAP_FMT_DECMPFS_COMPRESSION: u32 = 65536;
pub const VOL_CAP_FMT_64BIT_OBJECT_IDS: u32 = 131072;
pub const VOL_CAP_FMT_DIR_HARDLINKS: u32 = 262144;
pub const VOL_CAP_FMT_DOCUMENT_ID: u32 = 524288;
pub const VOL_CAP_FMT_WRITE_GENERATION_COUNT: u32 = 1048576;
pub const VOL_CAP_FMT_NO_IMMUTABLE_FILES: u32 = 2097152;
pub const VOL_CAP_FMT_NO_PERMISSIONS: u32 = 4194304;
pub const VOL_CAP_FMT_SHARED_SPACE: u32 = 8388608;
pub const VOL_CAP_FMT_VOL_GROUPS: u32 = 16777216;
pub const VOL_CAP_FMT_SEALED: u32 = 33554432;
pub const VOL_CAP_INT_SEARCHFS: u32 = 1;
pub const VOL_CAP_INT_ATTRLIST: u32 = 2;
pub const VOL_CAP_INT_NFSEXPORT: u32 = 4;
pub const VOL_CAP_INT_READDIRATTR: u32 = 8;
pub const VOL_CAP_INT_EXCHANGEDATA: u32 = 16;
pub const VOL_CAP_INT_COPYFILE: u32 = 32;
pub const VOL_CAP_INT_ALLOCATE: u32 = 64;
pub const VOL_CAP_INT_VOL_RENAME: u32 = 128;
pub const VOL_CAP_INT_ADVLOCK: u32 = 256;
pub const VOL_CAP_INT_FLOCK: u32 = 512;
pub const VOL_CAP_INT_EXTENDED_SECURITY: u32 = 1024;
pub const VOL_CAP_INT_USERACCESS: u32 = 2048;
pub const VOL_CAP_INT_MANLOCK: u32 = 4096;
pub const VOL_CAP_INT_NAMEDSTREAMS: u32 = 8192;
pub const VOL_CAP_INT_EXTENDED_ATTR: u32 = 16384;
pub const VOL_CAP_INT_CLONE: u32 = 65536;
pub const VOL_CAP_INT_SNAPSHOT: u32 = 131072;
pub const VOL_CAP_INT_RENAME_SWAP: u32 = 262144;
pub const VOL_CAP_INT_RENAME_EXCL: u32 = 524288;
pub const VOL_CAP_INT_RENAME_OPENFAIL: u32 = 1048576;
pub const ATTR_CMN_NAME: u32 = 1;
pub const ATTR_CMN_DEVID: u32 = 2;
pub const ATTR_CMN_FSID: u32 = 4;
pub const ATTR_CMN_OBJTYPE: u32 = 8;
pub const ATTR_CMN_OBJTAG: u32 = 16;
pub const ATTR_CMN_OBJID: u32 = 32;
pub const ATTR_CMN_OBJPERMANENTID: u32 = 64;
pub const ATTR_CMN_PAROBJID: u32 = 128;
pub const ATTR_CMN_SCRIPT: u32 = 256;
pub const ATTR_CMN_CRTIME: u32 = 512;
pub const ATTR_CMN_MODTIME: u32 = 1024;
pub const ATTR_CMN_CHGTIME: u32 = 2048;
pub const ATTR_CMN_ACCTIME: u32 = 4096;
pub const ATTR_CMN_BKUPTIME: u32 = 8192;
pub const ATTR_CMN_FNDRINFO: u32 = 16384;
pub const ATTR_CMN_OWNERID: u32 = 32768;
pub const ATTR_CMN_GRPID: u32 = 65536;
pub const ATTR_CMN_ACCESSMASK: u32 = 131072;
pub const ATTR_CMN_FLAGS: u32 = 262144;
pub const ATTR_CMN_GEN_COUNT: u32 = 524288;
pub const ATTR_CMN_DOCUMENT_ID: u32 = 1048576;
pub const ATTR_CMN_USERACCESS: u32 = 2097152;
pub const ATTR_CMN_EXTENDED_SECURITY: u32 = 4194304;
pub const ATTR_CMN_UUID: u32 = 8388608;
pub const ATTR_CMN_GRPUUID: u32 = 16777216;
pub const ATTR_CMN_FILEID: u32 = 33554432;
pub const ATTR_CMN_PARENTID: u32 = 67108864;
pub const ATTR_CMN_FULLPATH: u32 = 134217728;
pub const ATTR_CMN_ADDEDTIME: u32 = 268435456;
pub const ATTR_CMN_ERROR: u32 = 536870912;
pub const ATTR_CMN_DATA_PROTECT_FLAGS: u32 = 1073741824;
pub const ATTR_CMN_RETURNED_ATTRS: u32 = 2147483648;
pub const ATTR_CMN_VALIDMASK: u32 = 4294967295;
pub const ATTR_CMN_SETMASK: u32 = 1372061440;
pub const ATTR_CMN_VOLSETMASK: u32 = 26368;
pub const ATTR_VOL_FSTYPE: u32 = 1;
pub const ATTR_VOL_SIGNATURE: u32 = 2;
pub const ATTR_VOL_SIZE: u32 = 4;
pub const ATTR_VOL_SPACEFREE: u32 = 8;
pub const ATTR_VOL_SPACEAVAIL: u32 = 16;
pub const ATTR_VOL_MINALLOCATION: u32 = 32;
pub const ATTR_VOL_ALLOCATIONCLUMP: u32 = 64;
pub const ATTR_VOL_IOBLOCKSIZE: u32 = 128;
pub const ATTR_VOL_OBJCOUNT: u32 = 256;
pub const ATTR_VOL_FILECOUNT: u32 = 512;
pub const ATTR_VOL_DIRCOUNT: u32 = 1024;
pub const ATTR_VOL_MAXOBJCOUNT: u32 = 2048;
pub const ATTR_VOL_MOUNTPOINT: u32 = 4096;
pub const ATTR_VOL_NAME: u32 = 8192;
pub const ATTR_VOL_MOUNTFLAGS: u32 = 16384;
pub const ATTR_VOL_MOUNTEDDEVICE: u32 = 32768;
pub const ATTR_VOL_ENCODINGSUSED: u32 = 65536;
pub const ATTR_VOL_CAPABILITIES: u32 = 131072;
pub const ATTR_VOL_UUID: u32 = 262144;
pub const ATTR_VOL_SPACEUSED: u32 = 8388608;
pub const ATTR_VOL_QUOTA_SIZE: u32 = 268435456;
pub const ATTR_VOL_RESERVED_SIZE: u32 = 536870912;
pub const ATTR_VOL_ATTRIBUTES: u32 = 1073741824;
pub const ATTR_VOL_INFO: u32 = 2147483648;
pub const ATTR_VOL_VALIDMASK: u32 = 4035444735;
pub const ATTR_VOL_SETMASK: u32 = 2147491840;
pub const ATTR_DIR_LINKCOUNT: u32 = 1;
pub const ATTR_DIR_ENTRYCOUNT: u32 = 2;
pub const ATTR_DIR_MOUNTSTATUS: u32 = 4;
pub const ATTR_DIR_ALLOCSIZE: u32 = 8;
pub const ATTR_DIR_IOBLOCKSIZE: u32 = 16;
pub const ATTR_DIR_DATALENGTH: u32 = 32;
pub const DIR_MNTSTATUS_MNTPOINT: u32 = 1;
pub const DIR_MNTSTATUS_TRIGGER: u32 = 2;
pub const ATTR_DIR_VALIDMASK: u32 = 63;
pub const ATTR_DIR_SETMASK: u32 = 0;
pub const ATTR_FILE_LINKCOUNT: u32 = 1;
pub const ATTR_FILE_TOTALSIZE: u32 = 2;
pub const ATTR_FILE_ALLOCSIZE: u32 = 4;
pub const ATTR_FILE_IOBLOCKSIZE: u32 = 8;
pub const ATTR_FILE_DEVTYPE: u32 = 32;
pub const ATTR_FILE_FORKCOUNT: u32 = 128;
pub const ATTR_FILE_FORKLIST: u32 = 256;
pub const ATTR_FILE_DATALENGTH: u32 = 512;
pub const ATTR_FILE_DATAALLOCSIZE: u32 = 1024;
pub const ATTR_FILE_RSRCLENGTH: u32 = 4096;
pub const ATTR_FILE_RSRCALLOCSIZE: u32 = 8192;
pub const ATTR_FILE_VALIDMASK: u32 = 14335;
pub const ATTR_FILE_SETMASK: u32 = 32;
pub const ATTR_CMNEXT_RELPATH: u32 = 4;
pub const ATTR_CMNEXT_PRIVATESIZE: u32 = 8;
pub const ATTR_CMNEXT_LINKID: u32 = 16;
pub const ATTR_CMNEXT_NOFIRMLINKPATH: u32 = 32;
pub const ATTR_CMNEXT_REALDEVID: u32 = 64;
pub const ATTR_CMNEXT_REALFSID: u32 = 128;
pub const ATTR_CMNEXT_CLONEID: u32 = 256;
pub const ATTR_CMNEXT_EXT_FLAGS: u32 = 512;
pub const ATTR_CMNEXT_RECURSIVE_GENCOUNT: u32 = 1024;
pub const ATTR_CMNEXT_VALIDMASK: u32 = 2044;
pub const ATTR_CMNEXT_SETMASK: u32 = 0;
pub const ATTR_FORK_TOTALSIZE: u32 = 1;
pub const ATTR_FORK_ALLOCSIZE: u32 = 2;
pub const ATTR_FORK_RESERVED: u32 = 4294967295;
pub const ATTR_FORK_VALIDMASK: u32 = 3;
pub const ATTR_FORK_SETMASK: u32 = 0;
pub const ATTR_CMN_NAMEDATTRCOUNT: u32 = 524288;
pub const ATTR_CMN_NAMEDATTRLIST: u32 = 1048576;
pub const ATTR_FILE_CLUMPSIZE: u32 = 16;
pub const ATTR_FILE_FILETYPE: u32 = 64;
pub const ATTR_FILE_DATAEXTENTS: u32 = 2048;
pub const ATTR_FILE_RSRCEXTENTS: u32 = 16384;
pub const ATTR_BULK_REQUIRED: u32 = 2147483649;
pub const SRCHFS_START: u32 = 1;
pub const SRCHFS_MATCHPARTIALNAMES: u32 = 2;
pub const SRCHFS_MATCHDIRS: u32 = 4;
pub const SRCHFS_MATCHFILES: u32 = 8;
pub const SRCHFS_SKIPLINKS: u32 = 16;
pub const SRCHFS_SKIPINVISIBLE: u32 = 32;
pub const SRCHFS_SKIPPACKAGES: u32 = 64;
pub const SRCHFS_SKIPINAPPROPRIATE: u32 = 128;
pub const SRCHFS_NEGATEPARAMS: u32 = 2147483648;
pub const SRCHFS_VALIDOPTIONSMASK: u32 = 2147483903;
pub const FST_EOF: i32 = -1;
pub const CLONE_NOFOLLOW: u32 = 1;
pub const CLONE_NOOWNERCOPY: u32 = 2;
pub const CLONE_ACL: u32 = 4;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_MACHPORT: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_USER: i32 = -10;
pub const EVFILT_VM: i32 = -12;
pub const EVFILT_EXCEPT: i32 = -15;
pub const EVFILT_SYSCOUNT: u32 = 17;
pub const EVFILT_THREADMARKER: u32 = 17;
pub const KEVENT_FLAG_NONE: u32 = 0;
pub const KEVENT_FLAG_IMMEDIATE: u32 = 1;
pub const KEVENT_FLAG_ERROR_EVENTS: u32 = 2;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_UDATA_SPECIFIC: u32 = 256;
pub const EV_DISPATCH2: u32 = 384;
pub const EV_VANISHED: u32 = 512;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_FLAG0: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const EV_POLL: u32 = 4096;
pub const EV_OOBAND: u32 = 8192;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_OOB: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_NONE: u32 = 128;
pub const NOTE_FUNLOCK: u32 = 256;
pub const NOTE_LEASE_DOWNGRADE: u32 = 512;
pub const NOTE_LEASE_RELEASE: u32 = 1024;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_SIGNAL: u32 = 134217728;
pub const NOTE_EXITSTATUS: u32 = 67108864;
pub const NOTE_EXIT_DETAIL: u32 = 33554432;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_PCTRLMASK: i32 = -1048576;
pub const NOTE_EXIT_DETAIL_MASK: u32 = 458752;
pub const NOTE_EXIT_DECRYPTFAIL: u32 = 65536;
pub const NOTE_EXIT_MEMORY: u32 = 131072;
pub const NOTE_EXIT_CSERROR: u32 = 262144;
pub const NOTE_VM_PRESSURE: u32 = 2147483648;
pub const NOTE_VM_PRESSURE_TERMINATE: u32 = 1073741824;
pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE: u32 = 536870912;
pub const NOTE_VM_ERROR: u32 = 268435456;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_USECONDS: u32 = 2;
pub const NOTE_NSECONDS: u32 = 4;
pub const NOTE_ABSOLUTE: u32 = 8;
pub const NOTE_LEEWAY: u32 = 16;
pub const NOTE_CRITICAL: u32 = 32;
pub const NOTE_BACKGROUND: u32 = 64;
pub const NOTE_MACH_CONTINUOUS_TIME: u32 = 128;
pub const NOTE_MACHTIME: u32 = 256;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const LCID_PROC_SELF: u32 = 0;
pub const LCID_REMOVE: i32 = -1;
pub const LCID_CREATE: u32 = 0;
pub const MFSNAMELEN: u32 = 15;
pub const MFSTYPENAMELEN: u32 = 16;
pub const MNAMELEN: u32 = 1024;
pub const MNT_EXT_ROOT_DATA_VOL: u32 = 1;
pub const MNT_RDONLY: u32 = 1;
pub const MNT_SYNCHRONOUS: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOSUID: u32 = 8;
pub const MNT_NODEV: u32 = 16;
pub const MNT_UNION: u32 = 32;
pub const MNT_ASYNC: u32 = 64;
pub const MNT_CPROTECT: u32 = 128;
pub const MNT_EXPORTED: u32 = 256;
pub const MNT_REMOVABLE: u32 = 512;
pub const MNT_QUARANTINE: u32 = 1024;
pub const MNT_LOCAL: u32 = 4096;
pub const MNT_QUOTA: u32 = 8192;
pub const MNT_ROOTFS: u32 = 16384;
pub const MNT_DOVOLFS: u32 = 32768;
pub const MNT_DONTBROWSE: u32 = 1048576;
pub const MNT_IGNORE_OWNERSHIP: u32 = 2097152;
pub const MNT_AUTOMOUNTED: u32 = 4194304;
pub const MNT_JOURNALED: u32 = 8388608;
pub const MNT_NOUSERXATTR: u32 = 16777216;
pub const MNT_DEFWRITE: u32 = 33554432;
pub const MNT_MULTILABEL: u32 = 67108864;
pub const MNT_NOFOLLOW: u32 = 134217728;
pub const MNT_NOATIME: u32 = 268435456;
pub const MNT_SNAPSHOT: u32 = 1073741824;
pub const MNT_STRICTATIME: u32 = 2147483648;
pub const MNT_UNKNOWNPERMISSIONS: u32 = 2097152;
pub const MNT_VISFLAGMASK: u32 = 3757111295;
pub const MNT_UPDATE: u32 = 65536;
pub const MNT_NOBLOCK: u32 = 131072;
pub const MNT_RELOAD: u32 = 262144;
pub const MNT_FORCE: u32 = 524288;
pub const MNT_CMDFLAGS: u32 = 983040;
pub const VFS_GENERIC: u32 = 0;
pub const VFS_NUMMNTOPS: u32 = 1;
pub const VFS_MAXTYPENUM: u32 = 1;
pub const VFS_CONF: u32 = 2;
pub const MNT_WAIT: u32 = 1;
pub const MNT_NOWAIT: u32 = 2;
pub const MNT_DWAIT: u32 = 4;
pub const VFS_CTL_VERS1: u32 = 1;
pub const VFS_CTL_OSTATFS: u32 = 65537;
pub const VFS_CTL_UMOUNT: u32 = 65538;
pub const VFS_CTL_QUERY: u32 = 65539;
pub const VFS_CTL_NEWADDR: u32 = 65540;
pub const VFS_CTL_TIMEO: u32 = 65541;
pub const VFS_CTL_NOLOCKS: u32 = 65542;
pub const VFS_CTL_SADDR: u32 = 65543;
pub const VFS_CTL_DISC: u32 = 65544;
pub const VFS_CTL_SERVERINFO: u32 = 65545;
pub const VFS_CTL_NSTATUS: u32 = 65546;
pub const VFS_CTL_STATFS64: u32 = 65547;
pub const VFS_CTL_STATFS: u32 = 65547;
pub const VQ_NOTRESP: u32 = 1;
pub const VQ_NEEDAUTH: u32 = 2;
pub const VQ_LOWDISK: u32 = 4;
pub const VQ_MOUNT: u32 = 8;
pub const VQ_UNMOUNT: u32 = 16;
pub const VQ_DEAD: u32 = 32;
pub const VQ_ASSIST: u32 = 64;
pub const VQ_NOTRESPLOCK: u32 = 128;
pub const VQ_UPDATE: u32 = 256;
pub const VQ_VERYLOWDISK: u32 = 512;
pub const VQ_SYNCEVENT: u32 = 1024;
pub const VQ_SERVEREVENT: u32 = 2048;
pub const VQ_QUOTA: u32 = 4096;
pub const VQ_NEARLOWDISK: u32 = 8192;
pub const VQ_DESIRED_DISK: u32 = 16384;
pub const VQ_FREE_SPACE_CHANGE: u32 = 32768;
pub const VQ_FLAG10000: u32 = 65536;
pub const NFSV4_MAX_FH_SIZE: u32 = 128;
pub const NFSV3_MAX_FH_SIZE: u32 = 64;
pub const NFSV2_MAX_FH_SIZE: u32 = 32;
pub const _PATH_FORKSPECIFIER: &[u8; 14usize] = b"/..namedfork/\0";
pub const _PATH_DATANAME: &[u8; 5usize] = b"data\0";
pub const _PATH_RSRCNAME: &[u8; 5usize] = b"rsrc\0";
pub const _PATH_RSRCFORKSPEC: &[u8; 18usize] = b"/..namedfork/rsrc\0";
pub const SIDL: u32 = 1;
pub const SRUN: u32 = 2;
pub const SSLEEP: u32 = 3;
pub const SSTOP: u32 = 4;
pub const SZOMB: u32 = 5;
pub const P_ADVLOCK: u32 = 1;
pub const P_CONTROLT: u32 = 2;
pub const P_LP64: u32 = 4;
pub const P_NOCLDSTOP: u32 = 8;
pub const P_PPWAIT: u32 = 16;
pub const P_PROFIL: u32 = 32;
pub const P_SELECT: u32 = 64;
pub const P_CONTINUED: u32 = 128;
pub const P_SUGID: u32 = 256;
pub const P_SYSTEM: u32 = 512;
pub const P_TIMEOUT: u32 = 1024;
pub const P_TRACED: u32 = 2048;
pub const P_DISABLE_ASLR: u32 = 4096;
pub const P_WEXIT: u32 = 8192;
pub const P_EXEC: u32 = 16384;
pub const P_OWEUPC: u32 = 32768;
pub const P_AFFINITY: u32 = 65536;
pub const P_TRANSLATED: u32 = 131072;
pub const P_CLASSIC: u32 = 131072;
pub const P_DELAYIDLESLEEP: u32 = 262144;
pub const P_CHECKOPENEVT: u32 = 524288;
pub const P_DEPENDENCY_CAPABLE: u32 = 1048576;
pub const P_REBOOT: u32 = 2097152;
pub const P_RESV6: u32 = 4194304;
pub const P_RESV7: u32 = 8388608;
pub const P_THCWD: u32 = 16777216;
pub const P_RESV9: u32 = 33554432;
pub const P_ADOPTPERSONA: u32 = 67108864;
pub const P_RESV11: u32 = 134217728;
pub const P_NOSHLIB: u32 = 268435456;
pub const P_FORCEQUOTA: u32 = 536870912;
pub const P_NOCLDWAIT: u32 = 1073741824;
pub const P_NOREMOTEHANG: u32 = 2147483648;
pub const P_INMEM: u32 = 0;
pub const P_NOSWAP: u32 = 0;
pub const P_PHYSIO: u32 = 0;
pub const P_FSTRACE: u32 = 0;
pub const P_SSTEP: u32 = 0;
pub const P_DIRTY_TRACK: u32 = 1;
pub const P_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const P_DIRTY_DEFER: u32 = 4;
pub const P_DIRTY: u32 = 8;
pub const P_DIRTY_SHUTDOWN: u32 = 16;
pub const P_DIRTY_TERMINATED: u32 = 32;
pub const P_DIRTY_BUSY: u32 = 64;
pub const P_DIRTY_MARKED: u32 = 128;
pub const P_DIRTY_AGING_IN_PROGRESS: u32 = 256;
pub const P_DIRTY_LAUNCH_IN_PROGRESS: u32 = 512;
pub const P_DIRTY_DEFER_ALWAYS: u32 = 1024;
pub const P_DIRTY_IS_DIRTY: u32 = 24;
pub const P_DIRTY_IDLE_EXIT_ENABLED: u32 = 3;
pub const MAX_IQ_TIME: u32 = 604800;
pub const MAX_DQ_TIME: u32 = 604800;
pub const MAXQUOTAS: u32 = 2;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const QUOTAFILENAME: &[u8; 7usize] = b".quota\0";
pub const QUOTAOPSNAME: &[u8; 11usize] = b".quota.ops\0";
pub const QUOTAGROUP: &[u8; 9usize] = b"operator\0";
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_QUOTAON: u32 = 256;
pub const Q_QUOTAOFF: u32 = 512;
pub const Q_GETQUOTA: u32 = 768;
pub const Q_SETQUOTA: u32 = 1024;
pub const Q_SETUSE: u32 = 1280;
pub const Q_SYNC: u32 = 1536;
pub const Q_QUOTASTAT: u32 = 1792;
pub const QF_VERSION: u32 = 1;
pub const QF_STRING_TAG: &[u8; 16usize] = b"QUOTA HASH FILE\0";
pub const QF_USERS_PER_GB: u32 = 256;
pub const QF_MIN_USERS: u32 = 2048;
pub const QF_MAX_USERS: u32 = 2097152;
pub const QF_GROUPS_PER_GB: u32 = 32;
pub const QF_MIN_GROUPS: u32 = 2048;
pub const QF_MAX_GROUPS: u32 = 262144;
pub const RB_DIR_LEFT: u32 = 0;
pub const RB_DIR_RIGHT: u32 = 1;
pub const SYS_syscall: u32 = 0;
pub const SYS_exit: u32 = 1;
pub const SYS_fork: u32 = 2;
pub const SYS_read: u32 = 3;
pub const SYS_write: u32 = 4;
pub const SYS_open: u32 = 5;
pub const SYS_close: u32 = 6;
pub const SYS_wait4: u32 = 7;
pub const SYS_link: u32 = 9;
pub const SYS_unlink: u32 = 10;
pub const SYS_chdir: u32 = 12;
pub const SYS_fchdir: u32 = 13;
pub const SYS_mknod: u32 = 14;
pub const SYS_chmod: u32 = 15;
pub const SYS_chown: u32 = 16;
pub const SYS_getfsstat: u32 = 18;
pub const SYS_getpid: u32 = 20;
pub const SYS_setuid: u32 = 23;
pub const SYS_getuid: u32 = 24;
pub const SYS_geteuid: u32 = 25;
pub const SYS_ptrace: u32 = 26;
pub const SYS_recvmsg: u32 = 27;
pub const SYS_sendmsg: u32 = 28;
pub const SYS_recvfrom: u32 = 29;
pub const SYS_accept: u32 = 30;
pub const SYS_getpeername: u32 = 31;
pub const SYS_getsockname: u32 = 32;
pub const SYS_access: u32 = 33;
pub const SYS_chflags: u32 = 34;
pub const SYS_fchflags: u32 = 35;
pub const SYS_sync: u32 = 36;
pub const SYS_kill: u32 = 37;
pub const SYS_getppid: u32 = 39;
pub const SYS_dup: u32 = 41;
pub const SYS_pipe: u32 = 42;
pub const SYS_getegid: u32 = 43;
pub const SYS_sigaction: u32 = 46;
pub const SYS_getgid: u32 = 47;
pub const SYS_sigprocmask: u32 = 48;
pub const SYS_getlogin: u32 = 49;
pub const SYS_setlogin: u32 = 50;
pub const SYS_acct: u32 = 51;
pub const SYS_sigpending: u32 = 52;
pub const SYS_sigaltstack: u32 = 53;
pub const SYS_ioctl: u32 = 54;
pub const SYS_reboot: u32 = 55;
pub const SYS_revoke: u32 = 56;
pub const SYS_symlink: u32 = 57;
pub const SYS_readlink: u32 = 58;
pub const SYS_execve: u32 = 59;
pub const SYS_umask: u32 = 60;
pub const SYS_chroot: u32 = 61;
pub const SYS_msync: u32 = 65;
pub const SYS_vfork: u32 = 66;
pub const SYS_munmap: u32 = 73;
pub const SYS_mprotect: u32 = 74;
pub const SYS_madvise: u32 = 75;
pub const SYS_mincore: u32 = 78;
pub const SYS_getgroups: u32 = 79;
pub const SYS_setgroups: u32 = 80;
pub const SYS_getpgrp: u32 = 81;
pub const SYS_setpgid: u32 = 82;
pub const SYS_setitimer: u32 = 83;
pub const SYS_swapon: u32 = 85;
pub const SYS_getitimer: u32 = 86;
pub const SYS_getdtablesize: u32 = 89;
pub const SYS_dup2: u32 = 90;
pub const SYS_fcntl: u32 = 92;
pub const SYS_select: u32 = 93;
pub const SYS_fsync: u32 = 95;
pub const SYS_setpriority: u32 = 96;
pub const SYS_socket: u32 = 97;
pub const SYS_connect: u32 = 98;
pub const SYS_getpriority: u32 = 100;
pub const SYS_bind: u32 = 104;
pub const SYS_setsockopt: u32 = 105;
pub const SYS_listen: u32 = 106;
pub const SYS_sigsuspend: u32 = 111;
pub const SYS_gettimeofday: u32 = 116;
pub const SYS_getrusage: u32 = 117;
pub const SYS_getsockopt: u32 = 118;
pub const SYS_readv: u32 = 120;
pub const SYS_writev: u32 = 121;
pub const SYS_settimeofday: u32 = 122;
pub const SYS_fchown: u32 = 123;
pub const SYS_fchmod: u32 = 124;
pub const SYS_setreuid: u32 = 126;
pub const SYS_setregid: u32 = 127;
pub const SYS_rename: u32 = 128;
pub const SYS_flock: u32 = 131;
pub const SYS_mkfifo: u32 = 132;
pub const SYS_sendto: u32 = 133;
pub const SYS_shutdown: u32 = 134;
pub const SYS_socketpair: u32 = 135;
pub const SYS_mkdir: u32 = 136;
pub const SYS_rmdir: u32 = 137;
pub const SYS_utimes: u32 = 138;
pub const SYS_futimes: u32 = 139;
pub const SYS_adjtime: u32 = 140;
pub const SYS_gethostuuid: u32 = 142;
pub const SYS_setsid: u32 = 147;
pub const SYS_getpgid: u32 = 151;
pub const SYS_setprivexec: u32 = 152;
pub const SYS_pread: u32 = 153;
pub const SYS_pwrite: u32 = 154;
pub const SYS_nfssvc: u32 = 155;
pub const SYS_statfs: u32 = 157;
pub const SYS_fstatfs: u32 = 158;
pub const SYS_unmount: u32 = 159;
pub const SYS_getfh: u32 = 161;
pub const SYS_quotactl: u32 = 165;
pub const SYS_mount: u32 = 167;
pub const SYS_csops: u32 = 169;
pub const SYS_csops_audittoken: u32 = 170;
pub const SYS_waitid: u32 = 173;
pub const SYS_kdebug_typefilter: u32 = 177;
pub const SYS_kdebug_trace_string: u32 = 178;
pub const SYS_kdebug_trace64: u32 = 179;
pub const SYS_kdebug_trace: u32 = 180;
pub const SYS_setgid: u32 = 181;
pub const SYS_setegid: u32 = 182;
pub const SYS_seteuid: u32 = 183;
pub const SYS_sigreturn: u32 = 184;
pub const SYS_thread_selfcounts: u32 = 186;
pub const SYS_fdatasync: u32 = 187;
pub const SYS_stat: u32 = 188;
pub const SYS_fstat: u32 = 189;
pub const SYS_lstat: u32 = 190;
pub const SYS_pathconf: u32 = 191;
pub const SYS_fpathconf: u32 = 192;
pub const SYS_getrlimit: u32 = 194;
pub const SYS_setrlimit: u32 = 195;
pub const SYS_getdirentries: u32 = 196;
pub const SYS_mmap: u32 = 197;
pub const SYS_lseek: u32 = 199;
pub const SYS_truncate: u32 = 200;
pub const SYS_ftruncate: u32 = 201;
pub const SYS_sysctl: u32 = 202;
pub const SYS_mlock: u32 = 203;
pub const SYS_munlock: u32 = 204;
pub const SYS_undelete: u32 = 205;
pub const SYS_open_dprotected_np: u32 = 216;
pub const SYS_fsgetpath_ext: u32 = 217;
pub const SYS_openat_dprotected_np: u32 = 218;
pub const SYS_getattrlist: u32 = 220;
pub const SYS_setattrlist: u32 = 221;
pub const SYS_getdirentriesattr: u32 = 222;
pub const SYS_exchangedata: u32 = 223;
pub const SYS_searchfs: u32 = 225;
pub const SYS_delete: u32 = 226;
pub const SYS_copyfile: u32 = 227;
pub const SYS_fgetattrlist: u32 = 228;
pub const SYS_fsetattrlist: u32 = 229;
pub const SYS_poll: u32 = 230;
pub const SYS_getxattr: u32 = 234;
pub const SYS_fgetxattr: u32 = 235;
pub const SYS_setxattr: u32 = 236;
pub const SYS_fsetxattr: u32 = 237;
pub const SYS_removexattr: u32 = 238;
pub const SYS_fremovexattr: u32 = 239;
pub const SYS_listxattr: u32 = 240;
pub const SYS_flistxattr: u32 = 241;
pub const SYS_fsctl: u32 = 242;
pub const SYS_initgroups: u32 = 243;
pub const SYS_posix_spawn: u32 = 244;
pub const SYS_ffsctl: u32 = 245;
pub const SYS_fhopen: u32 = 248;
pub const SYS_minherit: u32 = 250;
pub const SYS_semsys: u32 = 251;
pub const SYS_msgsys: u32 = 252;
pub const SYS_shmsys: u32 = 253;
pub const SYS_semctl: u32 = 254;
pub const SYS_semget: u32 = 255;
pub const SYS_semop: u32 = 256;
pub const SYS_msgctl: u32 = 258;
pub const SYS_msgget: u32 = 259;
pub const SYS_msgsnd: u32 = 260;
pub const SYS_msgrcv: u32 = 261;
pub const SYS_shmat: u32 = 262;
pub const SYS_shmctl: u32 = 263;
pub const SYS_shmdt: u32 = 264;
pub const SYS_shmget: u32 = 265;
pub const SYS_shm_open: u32 = 266;
pub const SYS_shm_unlink: u32 = 267;
pub const SYS_sem_open: u32 = 268;
pub const SYS_sem_close: u32 = 269;
pub const SYS_sem_unlink: u32 = 270;
pub const SYS_sem_wait: u32 = 271;
pub const SYS_sem_trywait: u32 = 272;
pub const SYS_sem_post: u32 = 273;
pub const SYS_sysctlbyname: u32 = 274;
pub const SYS_open_extended: u32 = 277;
pub const SYS_umask_extended: u32 = 278;
pub const SYS_stat_extended: u32 = 279;
pub const SYS_lstat_extended: u32 = 280;
pub const SYS_fstat_extended: u32 = 281;
pub const SYS_chmod_extended: u32 = 282;
pub const SYS_fchmod_extended: u32 = 283;
pub const SYS_access_extended: u32 = 284;
pub const SYS_settid: u32 = 285;
pub const SYS_gettid: u32 = 286;
pub const SYS_setsgroups: u32 = 287;
pub const SYS_getsgroups: u32 = 288;
pub const SYS_setwgroups: u32 = 289;
pub const SYS_getwgroups: u32 = 290;
pub const SYS_mkfifo_extended: u32 = 291;
pub const SYS_mkdir_extended: u32 = 292;
pub const SYS_identitysvc: u32 = 293;
pub const SYS_shared_region_check_np: u32 = 294;
pub const SYS_vm_pressure_monitor: u32 = 296;
pub const SYS_psynch_rw_longrdlock: u32 = 297;
pub const SYS_psynch_rw_yieldwrlock: u32 = 298;
pub const SYS_psynch_rw_downgrade: u32 = 299;
pub const SYS_psynch_rw_upgrade: u32 = 300;
pub const SYS_psynch_mutexwait: u32 = 301;
pub const SYS_psynch_mutexdrop: u32 = 302;
pub const SYS_psynch_cvbroad: u32 = 303;
pub const SYS_psynch_cvsignal: u32 = 304;
pub const SYS_psynch_cvwait: u32 = 305;
pub const SYS_psynch_rw_rdlock: u32 = 306;
pub const SYS_psynch_rw_wrlock: u32 = 307;
pub const SYS_psynch_rw_unlock: u32 = 308;
pub const SYS_psynch_rw_unlock2: u32 = 309;
pub const SYS_getsid: u32 = 310;
pub const SYS_settid_with_pid: u32 = 311;
pub const SYS_psynch_cvclrprepost: u32 = 312;
pub const SYS_aio_fsync: u32 = 313;
pub const SYS_aio_return: u32 = 314;
pub const SYS_aio_suspend: u32 = 315;
pub const SYS_aio_cancel: u32 = 316;
pub const SYS_aio_error: u32 = 317;
pub const SYS_aio_read: u32 = 318;
pub const SYS_aio_write: u32 = 319;
pub const SYS_lio_listio: u32 = 320;
pub const SYS_iopolicysys: u32 = 322;
pub const SYS_process_policy: u32 = 323;
pub const SYS_mlockall: u32 = 324;
pub const SYS_munlockall: u32 = 325;
pub const SYS_issetugid: u32 = 327;
pub const SYS___pthread_kill: u32 = 328;
pub const SYS___pthread_sigmask: u32 = 329;
pub const SYS___sigwait: u32 = 330;
pub const SYS___disable_threadsignal: u32 = 331;
pub const SYS___pthread_markcancel: u32 = 332;
pub const SYS___pthread_canceled: u32 = 333;
pub const SYS___semwait_signal: u32 = 334;
pub const SYS_proc_info: u32 = 336;
pub const SYS_sendfile: u32 = 337;
pub const SYS_stat64: u32 = 338;
pub const SYS_fstat64: u32 = 339;
pub const SYS_lstat64: u32 = 340;
pub const SYS_stat64_extended: u32 = 341;
pub const SYS_lstat64_extended: u32 = 342;
pub const SYS_fstat64_extended: u32 = 343;
pub const SYS_getdirentries64: u32 = 344;
pub const SYS_statfs64: u32 = 345;
pub const SYS_fstatfs64: u32 = 346;
pub const SYS_getfsstat64: u32 = 347;
pub const SYS___pthread_chdir: u32 = 348;
pub const SYS___pthread_fchdir: u32 = 349;
pub const SYS_audit: u32 = 350;
pub const SYS_auditon: u32 = 351;
pub const SYS_getauid: u32 = 353;
pub const SYS_setauid: u32 = 354;
pub const SYS_getaudit_addr: u32 = 357;
pub const SYS_setaudit_addr: u32 = 358;
pub const SYS_auditctl: u32 = 359;
pub const SYS_bsdthread_create: u32 = 360;
pub const SYS_bsdthread_terminate: u32 = 361;
pub const SYS_kqueue: u32 = 362;
pub const SYS_kevent: u32 = 363;
pub const SYS_lchown: u32 = 364;
pub const SYS_bsdthread_register: u32 = 366;
pub const SYS_workq_open: u32 = 367;
pub const SYS_workq_kernreturn: u32 = 368;
pub const SYS_kevent64: u32 = 369;
pub const SYS_thread_selfid: u32 = 372;
pub const SYS_ledger: u32 = 373;
pub const SYS_kevent_qos: u32 = 374;
pub const SYS_kevent_id: u32 = 375;
pub const SYS___mac_execve: u32 = 380;
pub const SYS___mac_syscall: u32 = 381;
pub const SYS___mac_get_file: u32 = 382;
pub const SYS___mac_set_file: u32 = 383;
pub const SYS___mac_get_link: u32 = 384;
pub const SYS___mac_set_link: u32 = 385;
pub const SYS___mac_get_proc: u32 = 386;
pub const SYS___mac_set_proc: u32 = 387;
pub const SYS___mac_get_fd: u32 = 388;
pub const SYS___mac_set_fd: u32 = 389;
pub const SYS___mac_get_pid: u32 = 390;
pub const SYS_pselect: u32 = 394;
pub const SYS_pselect_nocancel: u32 = 395;
pub const SYS_read_nocancel: u32 = 396;
pub const SYS_write_nocancel: u32 = 397;
pub const SYS_open_nocancel: u32 = 398;
pub const SYS_close_nocancel: u32 = 399;
pub const SYS_wait4_nocancel: u32 = 400;
pub const SYS_recvmsg_nocancel: u32 = 401;
pub const SYS_sendmsg_nocancel: u32 = 402;
pub const SYS_recvfrom_nocancel: u32 = 403;
pub const SYS_accept_nocancel: u32 = 404;
pub const SYS_msync_nocancel: u32 = 405;
pub const SYS_fcntl_nocancel: u32 = 406;
pub const SYS_select_nocancel: u32 = 407;
pub const SYS_fsync_nocancel: u32 = 408;
pub const SYS_connect_nocancel: u32 = 409;
pub const SYS_sigsuspend_nocancel: u32 = 410;
pub const SYS_readv_nocancel: u32 = 411;
pub const SYS_writev_nocancel: u32 = 412;
pub const SYS_sendto_nocancel: u32 = 413;
pub const SYS_pread_nocancel: u32 = 414;
pub const SYS_pwrite_nocancel: u32 = 415;
pub const SYS_waitid_nocancel: u32 = 416;
pub const SYS_poll_nocancel: u32 = 417;
pub const SYS_msgsnd_nocancel: u32 = 418;
pub const SYS_msgrcv_nocancel: u32 = 419;
pub const SYS_sem_wait_nocancel: u32 = 420;
pub const SYS_aio_suspend_nocancel: u32 = 421;
pub const SYS___sigwait_nocancel: u32 = 422;
pub const SYS___semwait_signal_nocancel: u32 = 423;
pub const SYS___mac_mount: u32 = 424;
pub const SYS___mac_get_mount: u32 = 425;
pub const SYS___mac_getfsstat: u32 = 426;
pub const SYS_fsgetpath: u32 = 427;
pub const SYS_audit_session_self: u32 = 428;
pub const SYS_audit_session_join: u32 = 429;
pub const SYS_fileport_makeport: u32 = 430;
pub const SYS_fileport_makefd: u32 = 431;
pub const SYS_audit_session_port: u32 = 432;
pub const SYS_pid_suspend: u32 = 433;
pub const SYS_pid_resume: u32 = 434;
pub const SYS_pid_hibernate: u32 = 435;
pub const SYS_pid_shutdown_sockets: u32 = 436;
pub const SYS_kas_info: u32 = 439;
pub const SYS_memorystatus_control: u32 = 440;
pub const SYS_guarded_open_np: u32 = 441;
pub const SYS_guarded_close_np: u32 = 442;
pub const SYS_guarded_kqueue_np: u32 = 443;
pub const SYS_change_fdguard_np: u32 = 444;
pub const SYS_usrctl: u32 = 445;
pub const SYS_proc_rlimit_control: u32 = 446;
pub const SYS_connectx: u32 = 447;
pub const SYS_disconnectx: u32 = 448;
pub const SYS_peeloff: u32 = 449;
pub const SYS_socket_delegate: u32 = 450;
pub const SYS_telemetry: u32 = 451;
pub const SYS_proc_uuid_policy: u32 = 452;
pub const SYS_memorystatus_get_level: u32 = 453;
pub const SYS_system_override: u32 = 454;
pub const SYS_vfs_purge: u32 = 455;
pub const SYS_sfi_ctl: u32 = 456;
pub const SYS_sfi_pidctl: u32 = 457;
pub const SYS_coalition: u32 = 458;
pub const SYS_coalition_info: u32 = 459;
pub const SYS_necp_match_policy: u32 = 460;
pub const SYS_getattrlistbulk: u32 = 461;
pub const SYS_clonefileat: u32 = 462;
pub const SYS_openat: u32 = 463;
pub const SYS_openat_nocancel: u32 = 464;
pub const SYS_renameat: u32 = 465;
pub const SYS_faccessat: u32 = 466;
pub const SYS_fchmodat: u32 = 467;
pub const SYS_fchownat: u32 = 468;
pub const SYS_fstatat: u32 = 469;
pub const SYS_fstatat64: u32 = 470;
pub const SYS_linkat: u32 = 471;
pub const SYS_unlinkat: u32 = 472;
pub const SYS_readlinkat: u32 = 473;
pub const SYS_symlinkat: u32 = 474;
pub const SYS_mkdirat: u32 = 475;
pub const SYS_getattrlistat: u32 = 476;
pub const SYS_proc_trace_log: u32 = 477;
pub const SYS_bsdthread_ctl: u32 = 478;
pub const SYS_openbyid_np: u32 = 479;
pub const SYS_recvmsg_x: u32 = 480;
pub const SYS_sendmsg_x: u32 = 481;
pub const SYS_thread_selfusage: u32 = 482;
pub const SYS_csrctl: u32 = 483;
pub const SYS_guarded_open_dprotected_np: u32 = 484;
pub const SYS_guarded_write_np: u32 = 485;
pub const SYS_guarded_pwrite_np: u32 = 486;
pub const SYS_guarded_writev_np: u32 = 487;
pub const SYS_renameatx_np: u32 = 488;
pub const SYS_mremap_encrypted: u32 = 489;
pub const SYS_netagent_trigger: u32 = 490;
pub const SYS_stack_snapshot_with_config: u32 = 491;
pub const SYS_microstackshot: u32 = 492;
pub const SYS_grab_pgo_data: u32 = 493;
pub const SYS_persona: u32 = 494;
pub const SYS_mach_eventlink_signal: u32 = 496;
pub const SYS_mach_eventlink_wait_until: u32 = 497;
pub const SYS_mach_eventlink_signal_wait_until: u32 = 498;
pub const SYS_work_interval_ctl: u32 = 499;
pub const SYS_getentropy: u32 = 500;
pub const SYS_necp_open: u32 = 501;
pub const SYS_necp_client_action: u32 = 502;
pub const SYS___nexus_open: u32 = 503;
pub const SYS___nexus_register: u32 = 504;
pub const SYS___nexus_deregister: u32 = 505;
pub const SYS___nexus_create: u32 = 506;
pub const SYS___nexus_destroy: u32 = 507;
pub const SYS___nexus_get_opt: u32 = 508;
pub const SYS___nexus_set_opt: u32 = 509;
pub const SYS___channel_open: u32 = 510;
pub const SYS___channel_get_info: u32 = 511;
pub const SYS___channel_sync: u32 = 512;
pub const SYS___channel_get_opt: u32 = 513;
pub const SYS___channel_set_opt: u32 = 514;
pub const SYS_ulock_wait: u32 = 515;
pub const SYS_ulock_wake: u32 = 516;
pub const SYS_fclonefileat: u32 = 517;
pub const SYS_fs_snapshot: u32 = 518;
pub const SYS_register_uexc_handler: u32 = 519;
pub const SYS_terminate_with_payload: u32 = 520;
pub const SYS_abort_with_payload: u32 = 521;
pub const SYS_necp_session_open: u32 = 522;
pub const SYS_necp_session_action: u32 = 523;
pub const SYS_setattrlistat: u32 = 524;
pub const SYS_net_qos_guideline: u32 = 525;
pub const SYS_fmount: u32 = 526;
pub const SYS_ntp_adjtime: u32 = 527;
pub const SYS_ntp_gettime: u32 = 528;
pub const SYS_os_fault_with_payload: u32 = 529;
pub const SYS_kqueue_workloop_ctl: u32 = 530;
pub const SYS___mach_bridge_remote_time: u32 = 531;
pub const SYS_coalition_ledger: u32 = 532;
pub const SYS_log_data: u32 = 533;
pub const SYS_memorystatus_available_memory: u32 = 534;
pub const SYS_objc_bp_assist_cfg_np: u32 = 535;
pub const SYS_shared_region_map_and_slide_2_np: u32 = 536;
pub const SYS_pivot_root: u32 = 537;
pub const SYS_task_inspect_for_pid: u32 = 538;
pub const SYS_task_read_for_pid: u32 = 539;
pub const SYS_preadv: u32 = 540;
pub const SYS_pwritev: u32 = 541;
pub const SYS_preadv_nocancel: u32 = 542;
pub const SYS_pwritev_nocancel: u32 = 543;
pub const SYS_ulock_wait2: u32 = 544;
pub const SYS_proc_info_extended_id: u32 = 545;
pub const SYS_tracker_action: u32 = 546;
pub const SYS_debug_syscall_reject: u32 = 547;
pub const SYS_debug_syscall_reject_config: u32 = 548;
pub const SYS_graftdmg: u32 = 549;
pub const SYS_map_with_linking_np: u32 = 550;
pub const SYS_freadlink: u32 = 551;
pub const SYS_record_system_event: u32 = 552;
pub const SYS_mkfifoat: u32 = 553;
pub const SYS_mknodat: u32 = 554;
pub const SYS_ungraftdmg: u32 = 555;
pub const SYS_MAXSYSCALL: u32 = 556;
pub const SYS_invalid: u32 = 63;
pub const CTL_MAXNAME: u32 = 12;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_QUAD: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_NOLOCK: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_MASKED: u32 = 67108864;
pub const CTLFLAG_NOAUTO: u32 = 33554432;
pub const CTLFLAG_KERN: u32 = 16777216;
pub const CTLFLAG_LOCKED: u32 = 8388608;
pub const CTLFLAG_OID2: u32 = 4194304;
pub const CTLFLAG_EXPERIMENT: u32 = 1048576;
pub const OID_AUTO: i32 = -1;
pub const OID_AUTO_START: u32 = 100;
pub const CTL_UNSPEC: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_MAXID: u32 = 9;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_DOMAINNAME: u32 = 22;
pub const KERN_MAXPARTITIONS: u32 = 23;
pub const KERN_KDEBUG: u32 = 24;
pub const KERN_UPDATEINTERVAL: u32 = 25;
pub const KERN_OSRELDATE: u32 = 26;
pub const KERN_NTP_PLL: u32 = 27;
pub const KERN_BOOTFILE: u32 = 28;
pub const KERN_MAXFILESPERPROC: u32 = 29;
pub const KERN_MAXPROCPERUID: u32 = 30;
pub const KERN_DUMPDEV: u32 = 31;
pub const KERN_IPC: u32 = 32;
pub const KERN_DUMMY: u32 = 33;
pub const KERN_PS_STRINGS: u32 = 34;
pub const KERN_USRSTACK32: u32 = 35;
pub const KERN_LOGSIGEXIT: u32 = 36;
pub const KERN_SYMFILE: u32 = 37;
pub const KERN_PROCARGS: u32 = 38;
pub const KERN_NETBOOT: u32 = 40;
pub const KERN_SYSV: u32 = 42;
pub const KERN_AFFINITY: u32 = 43;
pub const KERN_TRANSLATE: u32 = 44;
pub const KERN_CLASSIC: u32 = 44;
pub const KERN_EXEC: u32 = 45;
pub const KERN_CLASSICHANDLER: u32 = 45;
pub const KERN_AIOMAX: u32 = 46;
pub const KERN_AIOPROCMAX: u32 = 47;
pub const KERN_AIOTHREADS: u32 = 48;
pub const KERN_PROCARGS2: u32 = 49;
pub const KERN_COREFILE: u32 = 50;
pub const KERN_COREDUMP: u32 = 51;
pub const KERN_SUGID_COREDUMP: u32 = 52;
pub const KERN_PROCDELAYTERM: u32 = 53;
pub const KERN_SHREG_PRIVATIZABLE: u32 = 54;
pub const KERN_LOW_PRI_WINDOW: u32 = 56;
pub const KERN_LOW_PRI_DELAY: u32 = 57;
pub const KERN_POSIX: u32 = 58;
pub const KERN_USRSTACK64: u32 = 59;
pub const KERN_NX_PROTECTION: u32 = 60;
pub const KERN_TFP: u32 = 61;
pub const KERN_PROCNAME: u32 = 62;
pub const KERN_THALTSTACK: u32 = 63;
pub const KERN_SPECULATIVE_READS: u32 = 64;
pub const KERN_OSVERSION: u32 = 65;
pub const KERN_SAFEBOOT: u32 = 66;
pub const KERN_RAGEVNODE: u32 = 68;
pub const KERN_TTY: u32 = 69;
pub const KERN_CHECKOPENEVT: u32 = 70;
pub const KERN_THREADNAME: u32 = 71;
pub const KERN_MAXID: u32 = 72;
pub const KERN_USRSTACK: u32 = 59;
pub const KERN_RAGE_PROC: u32 = 1;
pub const KERN_RAGE_THREAD: u32 = 2;
pub const KERN_UNRAGE_PROC: u32 = 3;
pub const KERN_UNRAGE_THREAD: u32 = 4;
pub const KERN_OPENEVT_PROC: u32 = 1;
pub const KERN_UNOPENEVT_PROC: u32 = 2;
pub const KERN_TFP_POLICY: u32 = 1;
pub const KERN_TFP_POLICY_DENY: u32 = 0;
pub const KERN_TFP_POLICY_DEFAULT: u32 = 2;
pub const KERN_KDEFLAGS: u32 = 1;
pub const KERN_KDDFLAGS: u32 = 2;
pub const KERN_KDENABLE: u32 = 3;
pub const KERN_KDSETBUF: u32 = 4;
pub const KERN_KDGETBUF: u32 = 5;
pub const KERN_KDSETUP: u32 = 6;
pub const KERN_KDREMOVE: u32 = 7;
pub const KERN_KDSETREG: u32 = 8;
pub const KERN_KDGETREG: u32 = 9;
pub const KERN_KDREADTR: u32 = 10;
pub const KERN_KDPIDTR: u32 = 11;
pub const KERN_KDTHRMAP: u32 = 12;
pub const KERN_KDPIDEX: u32 = 14;
pub const KERN_KDSETRTCDEC: u32 = 15;
pub const KERN_KDGETENTROPY: u32 = 16;
pub const KERN_KDWRITETR: u32 = 17;
pub const KERN_KDWRITEMAP: u32 = 18;
pub const KERN_KDTEST: u32 = 19;
pub const KERN_KDREADCURTHRMAP: u32 = 21;
pub const KERN_KDSET_TYPEFILTER: u32 = 22;
pub const KERN_KDBUFWAIT: u32 = 23;
pub const KERN_KDCPUMAP: u32 = 24;
pub const KERN_KDCPUMAP_EXT: u32 = 25;
pub const KERN_KDSET_EDM: u32 = 26;
pub const KERN_KDGET_EDM: u32 = 27;
pub const KERN_KDWRITETR_V3: u32 = 28;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_LCID: u32 = 7;
pub const KERN_VFSNSPACE_HANDLE_PROC: u32 = 1;
pub const KERN_VFSNSPACE_UNHANDLE_PROC: u32 = 2;
pub const WMESGLEN: u32 = 7;
pub const EPROC_CTTY: u32 = 1;
pub const EPROC_SLEADER: u32 = 2;
pub const COMAPT_MAXLOGNAME: u32 = 12;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const KIPC_MBSTAT: u32 = 8;
pub const KIPC_NMBCLUSTERS: u32 = 9;
pub const KIPC_SOQLIMITCOMPAT: u32 = 10;
pub const VM_METER: u32 = 1;
pub const VM_LOADAVG: u32 = 2;
pub const VM_MACHFACTOR: u32 = 4;
pub const VM_SWAPUSAGE: u32 = 5;
pub const VM_MAXID: u32 = 6;
pub const LSCALE: u32 = 1000;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_EPOCH: u32 = 10;
pub const HW_FLOATINGPT: u32 = 11;
pub const HW_MACHINE_ARCH: u32 = 12;
pub const HW_VECTORUNIT: u32 = 13;
pub const HW_BUS_FREQ: u32 = 14;
pub const HW_CPU_FREQ: u32 = 15;
pub const HW_CACHELINE: u32 = 16;
pub const HW_L1ICACHESIZE: u32 = 17;
pub const HW_L1DCACHESIZE: u32 = 18;
pub const HW_L2SETTINGS: u32 = 19;
pub const HW_L2CACHESIZE: u32 = 20;
pub const HW_L3SETTINGS: u32 = 21;
pub const HW_L3CACHESIZE: u32 = 22;
pub const HW_TB_FREQ: u32 = 23;
pub const HW_MEMSIZE: u32 = 24;
pub const HW_AVAILCPU: u32 = 25;
pub const HW_TARGET: u32 = 26;
pub const HW_PRODUCT: u32 = 27;
pub const HW_MAXID: u32 = 28;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_MAXID: u32 = 21;
pub const CTL_DEBUG_NAME: u32 = 0;
pub const CTL_DEBUG_VALUE: u32 = 1;
pub const CTL_DEBUG_MAXID: u32 = 20;
pub const _PATH_DEFPATH: &[u8; 14usize] = b"/usr/bin:/bin\0";
pub const _PATH_STDPATH: &[u8; 30usize] = b"/usr/bin:/bin:/usr/sbin:/sbin\0";
pub const _PATH_BSHELL: &[u8; 8usize] = b"/bin/sh\0";
pub const _PATH_CONSOLE: &[u8; 13usize] = b"/dev/console\0";
pub const _PATH_CSHELL: &[u8; 9usize] = b"/bin/csh\0";
pub const _PATH_DEFTAPE: &[u8; 11usize] = b"/dev/nrst0\0";
pub const _PATH_DEVDB: &[u8; 16usize] = b"/var/run/dev.db\0";
pub const _PATH_DEVNULL: &[u8; 10usize] = b"/dev/null\0";
pub const _PATH_DRUM: &[u8; 10usize] = b"/dev/drum\0";
pub const _PATH_FSIRAND: &[u8; 14usize] = b"/sbin/fsirand\0";
pub const _PATH_KMEM: &[u8; 10usize] = b"/dev/kmem\0";
pub const _PATH_KVMDB: &[u8; 15usize] = b"/var/db/kvm.db\0";
pub const _PATH_LOCALE: &[u8; 18usize] = b"/usr/share/locale\0";
pub const _PATH_MAILDIR: &[u8; 10usize] = b"/var/mail\0";
pub const _PATH_MAN: &[u8; 15usize] = b"/usr/share/man\0";
pub const _PATH_MEM: &[u8; 9usize] = b"/dev/mem\0";
pub const _PATH_NOLOGIN: &[u8; 13usize] = b"/etc/nologin\0";
pub const _PATH_RSH: &[u8; 13usize] = b"/usr/bin/rsh\0";
pub const _PATH_SENDMAIL: &[u8; 19usize] = b"/usr/sbin/sendmail\0";
pub const _PATH_SHELLS: &[u8; 12usize] = b"/etc/shells\0";
pub const _PATH_TTY: &[u8; 9usize] = b"/dev/tty\0";
pub const _PATH_UNIX: &[u8; 6usize] = b"/mach\0";
pub const _PATH_VI: &[u8; 12usize] = b"/usr/bin/vi\0";
pub const _PATH_DEV: &[u8; 6usize] = b"/dev/\0";
pub const _PATH_TMP: &[u8; 6usize] = b"/tmp/\0";
pub const _PATH_UUCPLOCK: &[u8; 17usize] = b"/var/spool/lock/\0";
pub const _PATH_VARDB: &[u8; 9usize] = b"/var/db/\0";
pub const _PATH_VARRUN: &[u8; 10usize] = b"/var/run/\0";
pub const _PATH_VARTMP: &[u8; 10usize] = b"/var/tmp/\0";
pub const EX_OK: u32 = 0;
pub const EX__BASE: u32 = 64;
pub const EX_USAGE: u32 = 64;
pub const EX_DATAERR: u32 = 65;
pub const EX_NOINPUT: u32 = 66;
pub const EX_NOUSER: u32 = 67;
pub const EX_NOHOST: u32 = 68;
pub const EX_UNAVAILABLE: u32 = 69;
pub const EX_SOFTWARE: u32 = 70;
pub const EX_OSERR: u32 = 71;
pub const EX_OSFILE: u32 = 72;
pub const EX_CANTCREAT: u32 = 73;
pub const EX_IOERR: u32 = 74;
pub const EX_TEMPFAIL: u32 = 75;
pub const EX_PROTOCOL: u32 = 76;
pub const EX_NOPERM: u32 = 77;
pub const EX_CONFIG: u32 = 78;
pub const EX__MAX: u32 = 78;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const OBJC_NO_GC_API: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const OBJC_BOOL_IS_BOOL: u32 = 1;
pub const NSIntegerMax: u64 = 9223372036854775807;
pub const NSIntegerMin: i64 = -9223372036854775808;
pub const NSUIntegerMax: i32 = -1;
pub const NSINTEGER_DEFINED: u32 = 1;
pub const OBJC_GETCLASSHOOK_DEFINED: u32 = 1;
pub const OBJC_ADDLOADIMAGEFUNC_DEFINED: u32 = 1;
pub const OBJC_SETHOOK_LAZYCLASSNAMER_DEFINED: u32 = 1;
pub const OBJC_REALIZECLASSFROMSWIFT_DEFINED: u32 = 1;
pub const _C_ID: u8 = 64u8;
pub const _C_CLASS: u8 = 35u8;
pub const _C_SEL: u8 = 58u8;
pub const _C_CHR: u8 = 99u8;
pub const _C_UCHR: u8 = 67u8;
pub const _C_SHT: u8 = 115u8;
pub const _C_USHT: u8 = 83u8;
pub const _C_INT: u8 = 105u8;
pub const _C_UINT: u8 = 73u8;
pub const _C_LNG: u8 = 108u8;
pub const _C_ULNG: u8 = 76u8;
pub const _C_LNG_LNG: u8 = 113u8;
pub const _C_ULNG_LNG: u8 = 81u8;
pub const _C_INT128: u8 = 116u8;
pub const _C_UINT128: u8 = 84u8;
pub const _C_FLT: u8 = 102u8;
pub const _C_DBL: u8 = 100u8;
pub const _C_LNG_DBL: u8 = 68u8;
pub const _C_BFLD: u8 = 98u8;
pub const _C_BOOL: u8 = 66u8;
pub const _C_VOID: u8 = 118u8;
pub const _C_UNDEF: u8 = 63u8;
pub const _C_PTR: u8 = 94u8;
pub const _C_CHARPTR: u8 = 42u8;
pub const _C_ATOM: u8 = 37u8;
pub const _C_ARY_B: u8 = 91u8;
pub const _C_ARY_E: u8 = 93u8;
pub const _C_UNION_B: u8 = 40u8;
pub const _C_UNION_E: u8 = 41u8;
pub const _C_STRUCT_B: u8 = 123u8;
pub const _C_STRUCT_E: u8 = 125u8;
pub const _C_VECTOR: u8 = 33u8;
pub const _C_COMPLEX: u8 = 106u8;
pub const _C_ATOMIC: u8 = 65u8;
pub const _C_CONST: u8 = 114u8;
pub const _C_IN: u8 = 110u8;
pub const _C_INOUT: u8 = 78u8;
pub const _C_OUT: u8 = 111u8;
pub const _C_BYCOPY: u8 = 79u8;
pub const _C_BYREF: u8 = 82u8;
pub const _C_ONEWAY: u8 = 86u8;
pub const _C_GNUREGISTER: u8 = 43u8;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 1;
pub const OS_OBJECT_USE_OBJC: u32 = 1;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_2_0: f64 = 478.23;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_2_1: f64 = 478.26;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_2_2: f64 = 478.29;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_3_0: f64 = 478.47;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_3_1: f64 = 478.52;
pub const kCFCoreFoundationVersionNumber_iPhoneOS_3_2: f64 = 478.61;
pub const kCFCoreFoundationVersionNumber_iOS_4_0: f64 = 550.32;
pub const kCFCoreFoundationVersionNumber_iOS_4_1: f64 = 550.38;
pub const kCFCoreFoundationVersionNumber_iOS_4_2: f64 = 550.52;
pub const kCFCoreFoundationVersionNumber_iOS_4_3: f64 = 550.52;
pub const kCFCoreFoundationVersionNumber_iOS_5_0: f64 = 675.0;
pub const kCFCoreFoundationVersionNumber_iOS_5_1: f64 = 690.1;
pub const kCFCoreFoundationVersionNumber_iOS_6_0: f64 = 793.0;
pub const kCFCoreFoundationVersionNumber_iOS_6_1: f64 = 793.0;
pub const kCFCoreFoundationVersionNumber_iOS_7_0: f64 = 847.2;
pub const kCFCoreFoundationVersionNumber_iOS_7_1: f64 = 847.24;
pub const kCFCoreFoundationVersionNumber_iOS_8_0: f64 = 1140.1;
pub const kCFCoreFoundationVersionNumber_iOS_8_1: f64 = 1141.14;
pub const kCFCoreFoundationVersionNumber_iOS_8_2: f64 = 1142.16;
pub const kCFCoreFoundationVersionNumber_iOS_8_3: f64 = 1144.17;
pub const kCFCoreFoundationVersionNumber_iOS_8_4: f64 = 1145.15;
pub const kCFCoreFoundationVersionNumber_iOS_8_x_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber_iOS_9_0: f64 = 1240.1;
pub const kCFCoreFoundationVersionNumber_iOS_9_1: f64 = 1241.11;
pub const kCFCoreFoundationVersionNumber_iOS_9_2: f64 = 1242.13;
pub const kCFCoreFoundationVersionNumber_iOS_9_3: f64 = 1242.13;
pub const kCFCoreFoundationVersionNumber_iOS_9_4: f64 = 1280.38;
pub const kCFCoreFoundationVersionNumber_iOS_9_x_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFCGTYPES__: u32 = 1;
pub const CGFLOAT_IS_DOUBLE: u32 = 1;
pub const CGFLOAT_DEFINED: u32 = 1;
pub const CGVECTOR_DEFINED: u32 = 1;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGINCOM__: u32 = 1;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const COREAUDIOTYPES_VERSION: u32 = 20211130;
pub const CA_PREFER_FIXED_POINT: u32 = 1;
pub const kAudioUnitSampleFractionBits: u32 = 24;
pub const SEC_OS_IPHONE: u32 = 1;
pub const SEC_OS_OSX: u32 = 0;
pub const SECURITY_TYPE_UNIFICATION: u32 = 1;
pub const NS_BLOCKS_AVAILABLE: u32 = 1;
pub const NSFoundationVersionNumber10_0: f64 = 397.4;
pub const NSFoundationVersionNumber10_1: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_1: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_2: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_3: f64 = 425.0;
pub const NSFoundationVersionNumber10_1_4: f64 = 425.0;
pub const NSFoundationVersionNumber10_2: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_1: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_2: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_3: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_4: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_5: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_6: f64 = 462.0;
pub const NSFoundationVersionNumber10_2_7: f64 = 462.7;
pub const NSFoundationVersionNumber10_2_8: f64 = 462.7;
pub const NSFoundationVersionNumber10_3: f64 = 500.0;
pub const NSFoundationVersionNumber10_3_1: f64 = 500.0;
pub const NSFoundationVersionNumber10_3_2: f64 = 500.3;
pub const NSFoundationVersionNumber10_3_3: f64 = 500.54;
pub const NSFoundationVersionNumber10_3_4: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_5: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_6: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_7: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_8: f64 = 500.56;
pub const NSFoundationVersionNumber10_3_9: f64 = 500.58;
pub const NSFoundationVersionNumber10_4: f64 = 567.0;
pub const NSFoundationVersionNumber10_4_1: f64 = 567.0;
pub const NSFoundationVersionNumber10_4_2: f64 = 567.12;
pub const NSFoundationVersionNumber10_4_3: f64 = 567.21;
pub const NSFoundationVersionNumber10_4_4_Intel: f64 = 567.23;
pub const NSFoundationVersionNumber10_4_4_PowerPC: f64 = 567.21;
pub const NSFoundationVersionNumber10_4_5: f64 = 567.25;
pub const NSFoundationVersionNumber10_4_6: f64 = 567.26;
pub const NSFoundationVersionNumber10_4_7: f64 = 567.27;
pub const NSFoundationVersionNumber10_4_8: f64 = 567.28;
pub const NSFoundationVersionNumber10_4_9: f64 = 567.29;
pub const NSFoundationVersionNumber10_4_10: f64 = 567.29;
pub const NSFoundationVersionNumber10_4_11: f64 = 567.36;
pub const NSFoundationVersionNumber10_5: f64 = 677.0;
pub const NSFoundationVersionNumber10_5_1: f64 = 677.1;
pub const NSFoundationVersionNumber10_5_2: f64 = 677.15;
pub const NSFoundationVersionNumber10_5_3: f64 = 677.19;
pub const NSFoundationVersionNumber10_5_4: f64 = 677.19;
pub const NSFoundationVersionNumber10_5_5: f64 = 677.21;
pub const NSFoundationVersionNumber10_5_6: f64 = 677.22;
pub const NSFoundationVersionNumber10_5_7: f64 = 677.24;
pub const NSFoundationVersionNumber10_5_8: f64 = 677.26;
pub const NSFoundationVersionNumber10_6: f64 = 751.0;
pub const NSFoundationVersionNumber10_6_1: f64 = 751.0;
pub const NSFoundationVersionNumber10_6_2: f64 = 751.14;
pub const NSFoundationVersionNumber10_6_3: f64 = 751.21;
pub const NSFoundationVersionNumber10_6_4: f64 = 751.29;
pub const NSFoundationVersionNumber10_6_5: f64 = 751.42;
pub const NSFoundationVersionNumber10_6_6: f64 = 751.53;
pub const NSFoundationVersionNumber10_6_7: f64 = 751.53;
pub const NSFoundationVersionNumber10_6_8: f64 = 751.62;
pub const NSFoundationVersionNumber10_7: f64 = 833.1;
pub const NSFoundationVersionNumber10_7_1: f64 = 833.1;
pub const NSFoundationVersionNumber10_7_2: f64 = 833.2;
pub const NSFoundationVersionNumber10_7_3: f64 = 833.24;
pub const NSFoundationVersionNumber10_7_4: f64 = 833.25;
pub const NSFoundationVersionNumber10_8: f64 = 945.0;
pub const NSFoundationVersionNumber10_8_1: f64 = 945.0;
pub const NSFoundationVersionNumber10_8_2: f64 = 945.11;
pub const NSFoundationVersionNumber10_8_3: f64 = 945.16;
pub const NSFoundationVersionNumber10_8_4: f64 = 945.18;
pub const NSFoundationVersionNumber10_9: u32 = 1056;
pub const NSFoundationVersionNumber10_9_1: u32 = 1056;
pub const NSFoundationVersionNumber10_9_2: f64 = 1056.13;
pub const NSFoundationVersionNumber10_10: f64 = 1151.16;
pub const NSFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const NSFoundationVersionNumber10_10_2: f64 = 1152.14;
pub const NSFoundationVersionNumber10_10_3: f64 = 1153.2;
pub const NSFoundationVersionNumber10_10_4: f64 = 1153.2;
pub const NSFoundationVersionNumber10_10_5: u32 = 1154;
pub const NSFoundationVersionNumber10_10_Max: u32 = 1199;
pub const NSFoundationVersionNumber10_11: u32 = 1252;
pub const NSFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const NSFoundationVersionNumber10_11_2: f64 = 1256.1;
pub const NSFoundationVersionNumber10_11_3: f64 = 1256.1;
pub const NSFoundationVersionNumber10_11_4: u32 = 1258;
pub const NSFoundationVersionNumber10_11_Max: u32 = 1299;
pub const NSFoundationVersionNumber_iPhoneOS_2_0: f64 = 678.24;
pub const NSFoundationVersionNumber_iPhoneOS_2_1: f64 = 678.26;
pub const NSFoundationVersionNumber_iPhoneOS_2_2: f64 = 678.29;
pub const NSFoundationVersionNumber_iPhoneOS_3_0: f64 = 678.47;
pub const NSFoundationVersionNumber_iPhoneOS_3_1: f64 = 678.51;
pub const NSFoundationVersionNumber_iPhoneOS_3_2: f64 = 678.6;
pub const NSFoundationVersionNumber_iOS_4_0: f64 = 751.32;
pub const NSFoundationVersionNumber_iOS_4_1: f64 = 751.37;
pub const NSFoundationVersionNumber_iOS_4_2: f64 = 751.49;
pub const NSFoundationVersionNumber_iOS_4_3: f64 = 751.49;
pub const NSFoundationVersionNumber_iOS_5_0: f64 = 881.0;
pub const NSFoundationVersionNumber_iOS_5_1: f64 = 890.1;
pub const NSFoundationVersionNumber_iOS_6_0: f64 = 992.0;
pub const NSFoundationVersionNumber_iOS_6_1: f64 = 993.0;
pub const NSFoundationVersionNumber_iOS_7_0: f64 = 1047.2;
pub const NSFoundationVersionNumber_iOS_7_1: f64 = 1047.25;
pub const NSFoundationVersionNumber_iOS_8_0: f64 = 1140.11;
pub const NSFoundationVersionNumber_iOS_8_1: f64 = 1141.1;
pub const NSFoundationVersionNumber_iOS_8_2: f64 = 1142.14;
pub const NSFoundationVersionNumber_iOS_8_3: f64 = 1144.17;
pub const NSFoundationVersionNumber_iOS_8_4: f64 = 1144.17;
pub const NSFoundationVersionNumber_iOS_8_x_Max: u32 = 1199;
pub const NSFoundationVersionNumber_iOS_9_0: f64 = 1240.1;
pub const NSFoundationVersionNumber_iOS_9_1: f64 = 1241.14;
pub const NSFoundationVersionNumber_iOS_9_2: f64 = 1242.12;
pub const NSFoundationVersionNumber_iOS_9_3: f64 = 1242.12;
pub const NSFoundationVersionNumber_iOS_9_4: f64 = 1280.25;
pub const NSFoundationVersionNumber_iOS_9_x_Max: u32 = 1299;
pub const NSMaximumStringLength: u32 = 2147483646;
pub const NS_UNICHAR_IS_EIGHT_BIT: u32 = 0;
pub const NSTimeIntervalSince1970: f64 = 978307200.0;
pub const NSDecimalMaxSize: u32 = 8;
pub const NSDecimalNoScale: u32 = 32767;
pub const NSFoundationVersionWithFileManagerResourceForkSupport: u32 = 412;
pub const __FOUNDATION_NSPOINTERFUNCTIONS__: u32 = 1;
pub const __FOUNDATION_NSHASHTABLE__: u32 = 1;
pub const __FOUNDATION_NSMAPTABLE__: u32 = 1;
pub const AUDIO_TOOLBOX_VERSION: u32 = 1060;
pub const kAudioComponentConfigurationInfo_ValidationResult: &[u8; 17usize] = b"ValidationResult\0";
pub const kAudioComponentValidationParameter_TimeOut: &[u8; 8usize] = b"TimeOut\0";
pub const kAudioComponentValidationParameter_ForceValidation: &[u8; 16usize] = b"ForceValidation\0";
pub const kAudioComponentValidationParameter_LoadOutOfProcess: &[u8; 17usize] =
    b"LoadOutOfProcess\0";
pub const kAudioSettings_TopLevelKey: &[u8; 5usize] = b"name\0";
pub const kAudioSettings_Version: &[u8; 8usize] = b"version\0";
pub const kAudioSettings_Parameters: &[u8; 11usize] = b"parameters\0";
pub const kAudioSettings_SettingKey: &[u8; 4usize] = b"key\0";
pub const kAudioSettings_SettingName: &[u8; 5usize] = b"name\0";
pub const kAudioSettings_ValueType: &[u8; 11usize] = b"value type\0";
pub const kAudioSettings_AvailableValues: &[u8; 17usize] = b"available values\0";
pub const kAudioSettings_LimitedValues: &[u8; 15usize] = b"limited values\0";
pub const kAudioSettings_CurrentValue: &[u8; 14usize] = b"current value\0";
pub const kAudioSettings_Summary: &[u8; 8usize] = b"summary\0";
pub const kAudioSettings_Hint: &[u8; 5usize] = b"hint\0";
pub const kAudioSettings_Unit: &[u8; 5usize] = b"unit\0";
pub const AU_SUPPORT_INTERAPP_AUDIO: u32 = 1;
pub const kAUPresetVersionKey: &[u8; 8usize] = b"version\0";
pub const kAUPresetTypeKey: &[u8; 5usize] = b"type\0";
pub const kAUPresetSubtypeKey: &[u8; 8usize] = b"subtype\0";
pub const kAUPresetManufacturerKey: &[u8; 13usize] = b"manufacturer\0";
pub const kAUPresetDataKey: &[u8; 5usize] = b"data\0";
pub const kAUPresetNameKey: &[u8; 5usize] = b"name\0";
pub const kAUPresetNumberKey: &[u8; 14usize] = b"preset-number\0";
pub const kAUPresetRenderQualityKey: &[u8; 15usize] = b"render-quality\0";
pub const kAUPresetCPULoadKey: &[u8; 9usize] = b"cpu-load\0";
pub const kAUPresetElementNameKey: &[u8; 13usize] = b"element-name\0";
pub const kAUPresetExternalFileRefs: &[u8; 16usize] = b"file-references\0";
pub const kAUPresetPartKey: &[u8; 5usize] = b"part\0";
pub const kAudioUnitConfigurationInfo_HasCustomView: &[u8; 14usize] = b"HasCustomView\0";
pub const kAudioUnitConfigurationInfo_ChannelConfigurations: &[u8; 22usize] =
    b"ChannelConfigurations\0";
pub const kAudioUnitConfigurationInfo_InitialInputs: &[u8; 14usize] = b"InitialInputs\0";
pub const kAudioUnitConfigurationInfo_InitialOutputs: &[u8; 15usize] = b"InitialOutputs\0";
pub const kAudioUnitConfigurationInfo_IconURL: &[u8; 8usize] = b"IconURL\0";
pub const kAudioUnitConfigurationInfo_BusCountWritable: &[u8; 17usize] = b"BusCountWritable\0";
pub const kAudioUnitConfigurationInfo_SupportedChannelLayoutTags: &[u8; 27usize] =
    b"SupportedChannelLayoutTags\0";
pub const kAudioUnitConfigurationInfo_MIDIProtocol: &[u8; 13usize] = b"MIDIProtocol\0";
pub const kAudioUnitConfigurationInfo_MigrateFromPlugin: &[u8; 18usize] = b"MigrateFromPlugin\0";
pub const AUDIO_UNIT_VERSION: u32 = 1070;
pub const kAFInfoDictionary_Album: &[u8; 6usize] = b"album\0";
pub const kAFInfoDictionary_ApproximateDurationInSeconds: &[u8; 32usize] =
    b"approximate duration in seconds\0";
pub const kAFInfoDictionary_Artist: &[u8; 7usize] = b"artist\0";
pub const kAFInfoDictionary_ChannelLayout: &[u8; 15usize] = b"channel layout\0";
pub const kAFInfoDictionary_Comments: &[u8; 9usize] = b"comments\0";
pub const kAFInfoDictionary_Composer: &[u8; 9usize] = b"composer\0";
pub const kAFInfoDictionary_Copyright: &[u8; 10usize] = b"copyright\0";
pub const kAFInfoDictionary_EncodingApplication: &[u8; 21usize] = b"encoding application\0";
pub const kAFInfoDictionary_Genre: &[u8; 6usize] = b"genre\0";
pub const kAFInfoDictionary_ISRC: &[u8; 5usize] = b"ISRC\0";
pub const kAFInfoDictionary_KeySignature: &[u8; 14usize] = b"key signature\0";
pub const kAFInfoDictionary_Lyricist: &[u8; 9usize] = b"lyricist\0";
pub const kAFInfoDictionary_NominalBitRate: &[u8; 17usize] = b"nominal bit rate\0";
pub const kAFInfoDictionary_RecordedDate: &[u8; 14usize] = b"recorded date\0";
pub const kAFInfoDictionary_SourceBitDepth: &[u8; 17usize] = b"source bit depth\0";
pub const kAFInfoDictionary_SourceEncoder: &[u8; 15usize] = b"source encoder\0";
pub const kAFInfoDictionary_SubTitle: &[u8; 9usize] = b"subtitle\0";
pub const kAFInfoDictionary_Tempo: &[u8; 6usize] = b"tempo\0";
pub const kAFInfoDictionary_TimeSignature: &[u8; 15usize] = b"time signature\0";
pub const kAFInfoDictionary_Title: &[u8; 6usize] = b"title\0";
pub const kAFInfoDictionary_TrackNumber: &[u8; 13usize] = b"track number\0";
pub const kAFInfoDictionary_Year: &[u8; 5usize] = b"year\0";
pub const kAudioSession_AudioRouteChangeKey_Reason: &[u8; 29usize] =
    b"OutputDeviceDidChange_Reason\0";
pub const kAudioSession_AudioRouteChangeKey_OldRoute: &[u8; 31usize] =
    b"OutputDeviceDidChange_OldRoute\0";
pub const kInstrumentInfoKey_Name: &[u8; 5usize] = b"name\0";
pub const kInstrumentInfoKey_MSB: &[u8; 4usize] = b"MSB\0";
pub const kInstrumentInfoKey_LSB: &[u8; 4usize] = b"LSB\0";
pub const kInstrumentInfoKey_Program: &[u8; 8usize] = b"program\0";
pub type max_align_t = f64;
extern "C" {
    pub fn cacosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn casinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn catanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ccosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ctanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cacoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn casinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn catanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ccoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ctanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cexpf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexp(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn clogf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clog(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cabsf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cabs(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cabsl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn cpowf(arg1: __BindgenComplex<f32>, arg2: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpow(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(
        arg1: __BindgenComplex<u128>,
        arg2: __BindgenComplex<u128>,
    ) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csqrtf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrt(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cargf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn carg(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cargl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn cimagf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cimag(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cimagl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn conjf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn conj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn conjl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cprojf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cproj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn crealf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn creal(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creall(arg1: __BindgenComplex<u128>) -> f64;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _copyfile_state {
    _unused: [u8; 0],
}
pub type copyfile_state_t = *mut _copyfile_state;
pub type copyfile_flags_t = u32;
extern "C" {
    pub fn copyfile(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        state: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcopyfile(
        from_fd: ::std::os::raw::c_int,
        to_fd: ::std::os::raw::c_int,
        arg1: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_free(arg1: copyfile_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_alloc() -> copyfile_state_t;
}
extern "C" {
    pub fn copyfile_state_get(
        s: copyfile_state_t,
        flag: u32,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_set(
        s: copyfile_state_t,
        flag: u32,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type copyfile_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: copyfile_state_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn err(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn errc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn verrc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn errx(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verrx(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarn(arg1: *const ::std::os::raw::c_char, arg2: __darwin_va_list);
}
extern "C" {
    pub fn warnc(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnc(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    );
}
extern "C" {
    pub fn warnx(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnx(arg1: *const ::std::os::raw::c_char, arg2: __darwin_va_list);
}
extern "C" {
    pub fn err_set_file(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn err_set_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn err_set_exit_b(arg1: *mut ::std::os::raw::c_void);
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fenv_t {
    pub __fpsr: ::std::os::raw::c_ulonglong,
    pub __fpcr: ::std::os::raw::c_ulonglong,
}
pub type fexcept_t = ::std::os::raw::c_ushort;
pub const __fpcr_trap_invalid: _bindgen_ty_1 = 256;
pub const __fpcr_trap_divbyzero: _bindgen_ty_1 = 512;
pub const __fpcr_trap_overflow: _bindgen_ty_1 = 1024;
pub const __fpcr_trap_underflow: _bindgen_ty_1 = 2048;
pub const __fpcr_trap_inexact: _bindgen_ty_1 = 4096;
pub const __fpcr_trap_denormal: _bindgen_ty_1 = 32768;
pub const __fpcr_flush_to_zero: _bindgen_ty_1 = 16777216;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const __fpsr_saturation: _bindgen_ty_2 = 134217728;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub static _FE_DFL_ENV: fenv_t;
}
extern "C" {
    pub static _FE_DFL_DISABLE_DENORMS_ENV: fenv_t;
}
extern "C" {
    pub fn feclearexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetexceptflag(
        arg1: *mut fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feraiseexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetexceptflag(
        arg1: *const fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fetestexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetround() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetround(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetenv(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feholdexcept(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feupdateenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
extern "C" {
    pub fn readpassphrase(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type jmp_buf = [::std::os::raw::c_int; 48usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 49usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
pub type ucontext_t = __darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type rsize_t = ::std::os::raw::c_ulong;
pub const memory_order_memory_order_relaxed: memory_order = 0;
pub const memory_order_memory_order_consume: memory_order = 1;
pub const memory_order_memory_order_acquire: memory_order = 2;
pub const memory_order_memory_order_release: memory_order = 3;
pub const memory_order_memory_order_acq_rel: memory_order = 4;
pub const memory_order_memory_order_seq_cst: memory_order = 5;
pub type memory_order = ::std::os::raw::c_uint;
extern "C" {
    pub fn atomic_thread_fence(arg1: memory_order);
}
extern "C" {
    pub fn atomic_signal_fence(arg1: memory_order);
}
pub type atomic_bool = u8;
pub type atomic_char = u8;
pub type atomic_schar = u8;
pub type atomic_uchar = u8;
pub type atomic_short = u16;
pub type atomic_ushort = u16;
pub type atomic_int = u32;
pub type atomic_uint = u32;
pub type atomic_long = u64;
pub type atomic_ulong = u64;
pub type atomic_llong = u64;
pub type atomic_ullong = u64;
pub type atomic_char16_t = u16;
pub type atomic_char32_t = u32;
pub type atomic_wchar_t = u32;
pub type atomic_int_least8_t = u8;
pub type atomic_uint_least8_t = u8;
pub type atomic_int_least16_t = u16;
pub type atomic_uint_least16_t = u16;
pub type atomic_int_least32_t = u32;
pub type atomic_uint_least32_t = u32;
pub type atomic_int_least64_t = u64;
pub type atomic_uint_least64_t = u64;
pub type atomic_int_fast8_t = u8;
pub type atomic_uint_fast8_t = u8;
pub type atomic_int_fast16_t = u16;
pub type atomic_uint_fast16_t = u16;
pub type atomic_int_fast32_t = u32;
pub type atomic_uint_fast32_t = u32;
pub type atomic_int_fast64_t = u64;
pub type atomic_uint_fast64_t = u64;
pub type atomic_intptr_t = u64;
pub type atomic_uintptr_t = u64;
pub type atomic_size_t = u64;
pub type atomic_ptrdiff_t = u64;
pub type atomic_intmax_t = u64;
pub type atomic_uintmax_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_flag {
    pub _Value: atomic_bool,
}
extern "C" {
    pub fn atomic_flag_test_and_set(arg1: *mut atomic_flag) -> bool;
}
extern "C" {
    pub fn atomic_flag_test_and_set_explicit(arg1: *mut atomic_flag, arg2: memory_order) -> bool;
}
extern "C" {
    pub fn atomic_flag_clear(arg1: *mut atomic_flag);
}
extern "C" {
    pub fn atomic_flag_clear_explicit(arg1: *mut atomic_flag, arg2: memory_order);
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type id_t = __darwin_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub __bindgen_anon_1: wait__bindgen_ty_1,
    pub __bindgen_anon_2: wait__bindgen_ty_2,
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type _Argument_type_is_not_arithmetic = ::std::os::raw::c_void;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn login_tty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logwtmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn opendev(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut termios,
        arg5: *mut winsize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fparseln(
        arg1: *mut FILE,
        arg2: *mut usize,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn forkpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut termios,
        arg4: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn pidlock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttylock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyunlock(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyaction(
        tty: *mut ::std::os::raw::c_char,
        act: *mut ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttymsg(
        arg1: *mut iovec,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type mbstate_t = __darwin_mbstate_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t, arg3: *mut mbstate_t)
        -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
pub type wctrans_t = __darwin_wctrans_t;
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn strtoimax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut wchar_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const wchar_t, arg2: *mut FILE, arg3: locale_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: wchar_t, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const wchar_t, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: wchar_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
pub type nl_item = __darwin_nl_item;
extern "C" {
    pub fn nl_langinfo_l(arg1: nl_item, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
pub type regoff_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: usize,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub fn regcomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regncomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp_l(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec_l(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
        arg6: locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type xattr_operation_intent_t = ::std::os::raw::c_uint;
pub type xattr_flags_t = u64;
extern "C" {
    pub fn xattr_preserve_for_intent(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_operation_intent_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xattr_name_with_flags(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_flags_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_name_without_flags(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_flags_from_name(arg1: *const ::std::os::raw::c_char) -> xattr_flags_t;
}
extern "C" {
    pub fn xattr_intent_with_flags(
        arg1: xattr_operation_intent_t,
        arg2: xattr_flags_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aiocb {
    pub aio_fildes: ::std::os::raw::c_int,
    pub aio_offset: off_t,
    pub aio_buf: *mut ::std::os::raw::c_void,
    pub aio_nbytes: usize,
    pub aio_reqprio: ::std::os::raw::c_int,
    pub aio_sigevent: sigevent,
    pub aio_lio_opcode: ::std::os::raw::c_int,
}
extern "C" {
    pub fn aio_cancel(fd: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_error(aiocbp: *const aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_fsync(op: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_read(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_return(aiocbp: *mut aiocb) -> isize;
}
extern "C" {
    pub fn aio_suspend(
        aiocblist: *const *const aiocb,
        nent: ::std::os::raw::c_int,
        timeoutp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_write(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lio_listio(
        mode: ::std::os::raw::c_int,
        aiocblist: *const *mut aiocb,
        nent: ::std::os::raw::c_int,
        sigp: *mut sigevent,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
pub type sockaddr_ref_t = *mut sockaddr;
pub type sockaddr_ref_ref_t = *mut *mut sockaddr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
pub type sockaddr_storage_ref_t = *mut sockaddr_storage;
pub type sockaddr_storage_ref_ref_t = *mut *mut sockaddr_storage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
pub type Dl_info = dl_info;
extern "C" {
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
pub type fspecread_t = fspecread;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmtmsg(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fnmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTW {
    pub base: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
extern "C" {
    pub fn ftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
                arg4: *mut FTW,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glob_t {
    pub __bindgen_anon_1: glob_t__bindgen_ty_1,
    pub gl_pathc: usize,
    pub gl_matchc: ::std::os::raw::c_int,
    pub gl_offs: usize,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut dirent,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union glob_t__bindgen_ty_1 {
    pub gl_errfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_errblk: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn glob(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glob_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globfree(arg1: *mut glob_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn getgrgid(arg1: gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(arg1: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrgid_r(
        arg1: gid_t,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn group_from_gid(arg1: gid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getgruuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut group;
}
extern "C" {
    pub fn getgruuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgrfile(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setgroupent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _libiconv_version: ::std::os::raw::c_int;
}
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(
        __tocode: *const ::std::os::raw::c_char,
        __fromcode: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut ::std::os::raw::c_char,
        __inbytesleft: *mut usize,
        __outbuf: *mut *mut ::std::os::raw::c_char,
        __outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(_cd: iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconvctl(
        cd: iconv_t,
        request: ::std::os::raw::c_int,
        argument: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type iconv_unicode_char_hook = ::std::option::Option<
    unsafe extern "C" fn(uc: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void),
>;
pub type iconv_wide_char_hook =
    ::std::option::Option<unsafe extern "C" fn(wc: wchar_t, data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut ::std::os::raw::c_void,
}
pub type iconv_unicode_mb_to_uc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_uint,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_unicode_uc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: ::std::os::raw::c_uint,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_mb_to_wc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const wchar_t,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_wc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: wchar_t,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn iconvlist(
        do_one: ::std::option::Option<
            unsafe extern "C" fn(
                namescount: ::std::os::raw::c_uint,
                names: *const *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iconv_canonicalize(name: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libiconv_set_relocation_prefix(
        orig_prefix: *const ::std::os::raw::c_char,
        curr_prefix: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_dstaddr: *mut sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmaddrs {
    pub ifma_next: *mut ifmaddrs,
    pub ifma_name: *mut sockaddr,
    pub ifma_addr: *mut sockaddr,
    pub ifma_lladdr: *mut sockaddr,
}
extern "C" {
    pub fn getifaddrs(arg1: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifaddrs(arg1: *mut ifaddrs);
}
extern "C" {
    pub fn getifmaddrs(arg1: *mut *mut ifmaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifmaddrs(arg1: *mut ifmaddrs);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nl_langinfo(arg1: nl_item) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct datum {
    pub dptr: *mut ::std::os::raw::c_void,
    pub dsize: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBM {
    pub __opaque: [::std::os::raw::c_char; 68usize],
}
extern "C" {
    pub fn dbm_clearerr(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_close(arg1: *mut DBM);
}
extern "C" {
    pub fn dbm_delete(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_dirfno(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_error(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_fetch(arg1: *mut DBM, arg2: datum) -> datum;
}
extern "C" {
    pub fn dbm_firstkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_forder(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dbm_nextkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mode_t,
    ) -> *mut DBM;
}
extern "C" {
    pub fn dbm_store(
        arg1: *mut DBM,
        arg2: datum,
        arg3: datum,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_len: u_char,
    pub sdl_family: u_char,
    pub sdl_index: u_short,
    pub sdl_type: u_char,
    pub sdl_nlen: u_char,
    pub sdl_alen: u_char,
    pub sdl_slen: u_char,
    pub sdl_data: [::std::os::raw::c_char; 12usize],
}
extern "C" {
    pub fn link_addr(arg1: *const ::std::os::raw::c_char, arg2: *mut sockaddr_dl);
}
extern "C" {
    pub fn link_ntoa(arg1: *const sockaddr_dl) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_event_data {
    pub if_family: u_int32_t,
    pub if_unit: u_int32_t,
    pub if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval32 {
    pub tv_sec: __int32_t,
    pub tv_usec: __int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_data {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int32_t,
    pub ifi_ipackets: u_int32_t,
    pub ifi_ierrors: u_int32_t,
    pub ifi_opackets: u_int32_t,
    pub ifi_oerrors: u_int32_t,
    pub ifi_collisions: u_int32_t,
    pub ifi_ibytes: u_int32_t,
    pub ifi_obytes: u_int32_t,
    pub ifi_imcasts: u_int32_t,
    pub ifi_omcasts: u_int32_t,
    pub ifi_iqdrops: u_int32_t,
    pub ifi_noproto: u_int32_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
    pub ifi_unused2: u_int32_t,
    pub ifi_hwassist: u_int32_t,
    pub ifi_reserved1: u_int32_t,
    pub ifi_reserved2: u_int32_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct if_data64 {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int64_t,
    pub ifi_ipackets: u_int64_t,
    pub ifi_ierrors: u_int64_t,
    pub ifi_opackets: u_int64_t,
    pub ifi_oerrors: u_int64_t,
    pub ifi_collisions: u_int64_t,
    pub ifi_ibytes: u_int64_t,
    pub ifi_obytes: u_int64_t,
    pub ifi_imcasts: u_int64_t,
    pub ifi_omcasts: u_int64_t,
    pub ifi_iqdrops: u_int64_t,
    pub ifi_noproto: u_int64_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifqueue {
    pub ifq_head: *mut ::std::os::raw::c_void,
    pub ifq_tail: *mut ::std::os::raw::c_void,
    pub ifq_len: ::std::os::raw::c_int,
    pub ifq_maxlen: ::std::os::raw::c_int,
    pub ifq_drops: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_clonereq {
    pub ifcr_total: ::std::os::raw::c_int,
    pub ifcr_count: ::std::os::raw::c_int,
    pub ifcr_buffer: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr {
    pub ifm_msglen: ::std::os::raw::c_ushort,
    pub ifm_version: ::std::os::raw::c_uchar,
    pub ifm_type: ::std::os::raw::c_uchar,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: ::std::os::raw::c_ushort,
    pub ifm_data: if_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_msghdr {
    pub ifam_msglen: ::std::os::raw::c_ushort,
    pub ifam_version: ::std::os::raw::c_uchar,
    pub ifam_type: ::std::os::raw::c_uchar,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: ::std::os::raw::c_ushort,
    pub ifam_metric: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr {
    pub ifmam_msglen: ::std::os::raw::c_ushort,
    pub ifmam_version: ::std::os::raw::c_uchar,
    pub ifmam_type: ::std::os::raw::c_uchar,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr2 {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub ifm_snd_len: ::std::os::raw::c_int,
    pub ifm_snd_maxlen: ::std::os::raw::c_int,
    pub ifm_snd_drops: ::std::os::raw::c_int,
    pub ifm_timer: ::std::os::raw::c_int,
    pub ifm_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr2 {
    pub ifmam_msglen: u_short,
    pub ifmam_version: u_char,
    pub ifmam_type: u_char,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: u_short,
    pub ifmam_refcount: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdevmtu {
    pub ifdm_current: ::std::os::raw::c_int,
    pub ifdm_min: ::std::os::raw::c_int,
    pub ifdm_max: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifkpi {
    pub __bindgen_anon_1: ifkpi__bindgen_ty_1,
    pub ifk_module_id: ::std::os::raw::c_uint,
    pub ifk_type: ::std::os::raw::c_uint,
    pub ifk_data: ifkpi__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifkpi__bindgen_ty_1 {
    pub ifk_ptr: *mut ::std::os::raw::c_void,
    pub ifk_value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub __bindgen_anon_1: ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_phys: ::std::os::raw::c_int,
    pub ifru_media: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_devmtu: ifdevmtu,
    pub ifru_kpi: ifkpi,
    pub ifru_wake_flags: u_int32_t,
    pub ifru_route_refcnt: u_int32_t,
    pub ifru_cap: [::std::os::raw::c_int; 2usize],
    pub ifru_functional_type: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rslvmulti_req {
    pub sa: *mut sockaddr,
    pub llsa: *mut *mut sockaddr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifmediareq {
    pub ifm_name: [::std::os::raw::c_char; 16usize],
    pub ifm_current: ::std::os::raw::c_int,
    pub ifm_mask: ::std::os::raw::c_int,
    pub ifm_status: ::std::os::raw::c_int,
    pub ifm_active: ::std::os::raw::c_int,
    pub ifm_count: ::std::os::raw::c_int,
    pub ifm_ulist: *mut ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifdrv {
    pub ifd_name: [::std::os::raw::c_char; 16usize],
    pub ifd_cmd: ::std::os::raw::c_ulong,
    pub ifd_len: usize,
    pub ifd_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifstat {
    pub ifs_name: [::std::os::raw::c_char; 16usize],
    pub ascii: [::std::os::raw::c_char; 801usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub __bindgen_anon_1: ifconf__bindgen_ty_1,
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: caddr_t,
    pub ifcu_req: *mut ifreq,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_dl_proto_data {
    pub link_data: net_event_data,
    pub proto_family: u_int32_t,
    pub proto_remaining_count: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nameindex {
    pub if_index: ::std::os::raw::c_uint,
    pub if_name: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn if_nametoindex(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn if_indextoname(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn if_nameindex() -> *mut if_nameindex;
}
extern "C" {
    pub fn if_freenameindex(arg1: *mut if_nameindex);
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nl_cat_d {
    pub __data: *mut ::std::os::raw::c_void,
    pub __size: ::std::os::raw::c_int,
}
pub type nl_catd = *mut __nl_cat_d;
extern "C" {
    pub fn catopen(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(
        arg1: nl_catd,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(arg1: nl_catd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
pub type nfds_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn poll(
        arg1: *mut pollfd,
        arg2: nfds_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type posix_spawnattr_t = *mut ::std::os::raw::c_void;
pub type posix_spawn_file_actions_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn posix_spawn(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnp(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addclose(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_adddup2(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addopen(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_destroy(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_init(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_destroy(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigdefault(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getflags(
        arg1: *const posix_spawnattr_t,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getpgroup(
        arg1: *const posix_spawnattr_t,
        arg2: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigmask(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_init(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigdefault(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setflags(
        arg1: *mut posix_spawnattr_t,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setpgroup(
        arg1: *mut posix_spawnattr_t,
        arg2: pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigmask(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type boolean_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
    pub flags: u32,
    pub mpl: mach_port_limits_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub __bindgen_anon_1: arm_unified_thread_state__bindgen_ty_1,
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
extern "C" {
    pub fn posix_spawnattr_getbinpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getarchpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setauditsessionport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setbinpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setarchpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setexceptionports_np(
        arg1: *mut posix_spawnattr_t,
        arg2: exception_mask_t,
        arg3: mach_port_t,
        arg4: exception_behavior_t,
        arg5: thread_state_flavor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setspecialport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setnosmt_np(attr: *const posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_csm_np(
        attr: *const posix_spawnattr_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addinherit_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addfchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_qos_class_np(
        __attr: *mut posix_spawnattr_t,
        __qos_class: qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_get_qos_class_np(
        __attr: *const posix_spawnattr_t,
        __qos_class: *mut qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pthread_mutex_enable_legacy_mode();
}
extern "C" {
    pub fn pthread_create_from_mach_thread(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regcomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regerror(
        arg1: ::std::os::raw::c_int,
        arg2: *const regex_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> usize;
}
extern "C" {
    pub fn regexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regfree(arg1: *mut regex_t);
}
extern "C" {
    pub fn regncomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regnexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwncomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type ENTRY = entry;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
extern "C" {
    pub fn hcreate(arg1: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdestroy();
}
extern "C" {
    pub fn hsearch(arg1: ENTRY, arg2: ACTION) -> *mut ENTRY;
}
extern "C" {
    pub fn insque(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn remque(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tdelete(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn twalk(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: VISIT,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
pub type sem_t = ::std::os::raw::c_int;
extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub uid: uid_t,
    pub gid: gid_t,
    pub cuid: uid_t,
    pub cgid: gid_t,
    pub mode: mode_t,
    pub _seq: ::std::os::raw::c_ushort,
    pub _key: key_t,
}
extern "C" {
    pub fn ftok(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> key_t;
}
extern "C" {
    pub fn mlockall(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlockall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mprotect(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msync(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munmap(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mincore(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minherit(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type msgqnum_t = ::std::os::raw::c_ulong;
pub type msglen_t = ::std::os::raw::c_ulong;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msqid_ds_new {
    pub msg_perm: ipc_perm,
    pub msg_first: __int32_t,
    pub msg_last: __int32_t,
    pub msg_cbytes: msglen_t,
    pub msg_qnum: msgqnum_t,
    pub msg_qbytes: msglen_t,
    pub msg_lspid: pid_t,
    pub msg_lrpid: pid_t,
    pub msg_stime: time_t,
    pub msg_pad1: __int32_t,
    pub msg_rtime: time_t,
    pub msg_pad2: __int32_t,
    pub msg_ctime: time_t,
    pub msg_pad3: __int32_t,
    pub msg_pad4: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg {
    pub msg_next: *mut msg,
    pub msg_type: ::std::os::raw::c_long,
    pub msg_ts: ::std::os::raw::c_ushort,
    pub msg_spot: ::std::os::raw::c_short,
    pub label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mymsg {
    pub mtype: ::std::os::raw::c_long,
    pub mtext: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msginfo {
    pub msgmax: ::std::os::raw::c_int,
    pub msgmni: ::std::os::raw::c_int,
    pub msgmnb: ::std::os::raw::c_int,
    pub msgtql: ::std::os::raw::c_int,
    pub msgssz: ::std::os::raw::c_int,
    pub msgseg: ::std::os::raw::c_int,
}
extern "C" {
    pub fn msgsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __msqid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgget(arg1: key_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgrcv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn msgsnd(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __semid_ds_new {
    pub sem_perm: ipc_perm,
    pub sem_base: __int32_t,
    pub sem_nsems: ::std::os::raw::c_ushort,
    pub sem_otime: time_t,
    pub sem_pad1: __int32_t,
    pub sem_ctime: time_t,
    pub sem_pad2: __int32_t,
    pub sem_pad3: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem {
    pub semval: ::std::os::raw::c_ushort,
    pub sempid: pid_t,
    pub semncnt: ::std::os::raw::c_ushort,
    pub semzcnt: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sembuf {
    pub sem_num: ::std::os::raw::c_ushort,
    pub sem_op: ::std::os::raw::c_short,
    pub sem_flg: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: ::std::os::raw::c_int,
    pub buf: *mut __semid_ds_new,
    pub array: *mut ::std::os::raw::c_ushort,
}
pub type semun_t = semun;
extern "C" {
    pub fn semsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semget(
        arg1: key_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semop(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sembuf,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
pub type shmatt_t = ::std::os::raw::c_ushort;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __shmid_ds_new {
    pub shm_perm: ipc_perm,
    pub shm_segsz: usize,
    pub shm_lpid: pid_t,
    pub shm_cpid: pid_t,
    pub shm_nattch: shmatt_t,
    pub shm_atime: time_t,
    pub shm_dtime: time_t,
    pub shm_ctime: time_t,
    pub shm_internal: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn shmsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn shmctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __shmid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmdt(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmget(arg1: key_t, arg2: usize, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
}
extern "C" {
    pub fn fstatvfs(arg1: ::std::os::raw::c_int, arg2: *mut statvfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statvfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
pub type fsobj_id_t = fsobj_id;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct secure_boot_cryptex_args {
    pub sbc_version: u_int32_t,
    pub sbc_4cc: u_int32_t,
    pub sbc_authentic_manifest_fd: ::std::os::raw::c_int,
    pub sbc_user_manifest_fd: ::std::os::raw::c_int,
    pub sbc_payload_fd: ::std::os::raw::c_int,
    pub sbc_flags: u_int64_t,
}
pub type secure_boot_cryptex_args_t = secure_boot_cryptex_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union graft_args {
    pub max_size: [u_int8_t; 512usize],
    pub sbc_args: secure_boot_cryptex_args_t,
}
pub type graftdmg_args_un = graft_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext64 {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext64,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext64: *mut __darwin_mcontext64,
}
pub type ucontext64_t = __darwin_ucontext64;
pub const uio_rw_UIO_READ: uio_rw = 0;
pub const uio_rw_UIO_WRITE: uio_rw = 1;
pub type uio_rw = ::std::os::raw::c_uint;
extern "C" {
    pub fn readv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utsname {
    pub sysname: [::std::os::raw::c_char; 256usize],
    pub nodename: [::std::os::raw::c_char; 256usize],
    pub release: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub machine: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn uname(arg1: *mut utsname) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn fgetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn setxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn removexattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fremovexattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listxattr(
        path: *const ::std::os::raw::c_char,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn flistxattr(
        fd: ::std::os::raw::c_int,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    );
}
extern "C" {
    pub fn ulimit(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
extern "C" {
    pub fn utime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmpx {
    pub ut_user: [::std::os::raw::c_char; 256usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_pid: pid_t,
    pub ut_type: ::std::os::raw::c_short,
    pub ut_tv: timeval,
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_pad: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlogx {
    pub ll_tv: timeval,
    pub ll_line: [::std::os::raw::c_char; 32usize],
    pub ll_host: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn endutxent();
}
extern "C" {
    pub fn endutxent_wtmp();
}
extern "C" {
    pub fn getlastlogx(arg1: uid_t, arg2: *mut lastlogx) -> *mut lastlogx;
}
extern "C" {
    pub fn getlastlogxbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut lastlogx,
    ) -> *mut lastlogx;
}
extern "C" {
    pub fn getutxent() -> *mut utmpx;
}
extern "C" {
    pub fn getutxent_wtmp() -> *mut utmpx;
}
extern "C" {
    pub fn getutxid(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn getutxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn pututxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn setutxent();
}
extern "C" {
    pub fn setutxent_wtmp(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn utmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wtmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wordexp_t {
    pub we_wordc: usize,
    pub we_wordv: *mut *mut ::std::os::raw::c_char,
    pub we_offs: usize,
}
extern "C" {
    pub fn wordexp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut wordexp_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wordfree(arg1: *mut wordexp_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_header {
    pub ether_dhost: [u_char; 6usize],
    pub ether_shost: [u_char; 6usize],
    pub ether_type: u_short,
}
pub type ether_header_t = ether_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_addr {
    pub octet: [u_char; 6usize],
}
pub type ether_addr_t = ether_addr;
extern "C" {
    pub fn ether_hostton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_line(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_ntoa(arg1: *const ether_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ether_aton(arg1: *const ::std::os::raw::c_char) -> *mut ether_addr;
}
extern "C" {
    pub fn ether_ntohost(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ether_addr,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_cellular_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_min_queue_size: u_int32_t,
    pub ul_avg_queue_size: u_int32_t,
    pub ul_max_queue_size: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub config_inactivity_time: u_int32_t,
    pub config_backoff_time: u_int32_t,
    pub mss_recommended: u_int16_t,
    pub reserved_1: u_int16_t,
    pub reserved_2: u_int32_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
    pub reserved_5: u_int64_t,
    pub reserved_6: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_cellular_status {
    pub if_cell_u: if_cellular_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_cellular_status__bindgen_ty_1 {
    pub if_status_v1: if_cellular_status_v1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_wifi_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_error_rate: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub dl_min_latency: u_int32_t,
    pub dl_effective_latency: u_int32_t,
    pub dl_max_latency: u_int32_t,
    pub dl_error_rate: u_int32_t,
    pub config_frequency: u_int32_t,
    pub config_multicast_rate: u_int32_t,
    pub scan_count: u_int32_t,
    pub scan_duration: u_int32_t,
    pub reserved_1: u_int64_t,
    pub reserved_2: u_int64_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_wifi_status {
    pub if_wifi_u: if_wifi_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_wifi_status__bindgen_ty_1 {
    pub if_status_v1: if_wifi_status_v1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_link_status {
    pub __bindgen_anon_1: if_link_status__bindgen_ty_1,
    pub ifsr_version: u_int32_t,
    pub ifsr_len: u_int32_t,
    pub ifsr_u: if_link_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_link_status__bindgen_ty_1 {
    pub ifsr_cell: if_cellular_status,
    pub ifsr_wifi: if_wifi_status,
}
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_1:
    ifnet_interface_advisory_version = 1;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_2:
    ifnet_interface_advisory_version = 2;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_CURRENT:
    ifnet_interface_advisory_version = 2;
pub type ifnet_interface_advisory_version = u8;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_TX:
    ifnet_interface_advisory_direction = 1;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_RX:
    ifnet_interface_advisory_direction = 2;
pub type ifnet_interface_advisory_direction = u8;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_WIFI:
    ifnet_interface_advisory_interface_type = 1;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_CELL:
    ifnet_interface_advisory_interface_type = 2;
pub type ifnet_interface_advisory_interface_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_header {
    pub version: ifnet_interface_advisory_version,
    pub direction: ifnet_interface_advisory_direction,
    pub interface_type: ifnet_interface_advisory_interface_type,
    pub reserved: u8,
}
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_UP:
    ifnet_interface_advisory_rate_trend = 2147483647;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_DOWN:
    ifnet_interface_advisory_rate_trend = -2147483648;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_NEUTRAL:
    ifnet_interface_advisory_rate_trend = 0;
pub type ifnet_interface_advisory_rate_trend = i32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_capacity {
    pub rate_trend_suggestion: ifnet_interface_advisory_rate_trend,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
}
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_NOT_AVAIL:
    ifnet_interface_advisory_wifi_freq_band = 0;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_24GHZ:
    ifnet_interface_advisory_wifi_freq_band = 1;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_5GHZ:
    ifnet_interface_advisory_wifi_freq_band = 2;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_6GHZ:
    ifnet_interface_advisory_wifi_freq_band = 3;
pub type ifnet_interface_advisory_wifi_freq_band = u8;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_wifi_context {
    pub frequency_band: ifnet_interface_advisory_wifi_freq_band,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
    pub radio_coex: u8,
    pub wlan_duty_cycle: u16,
    pub wifi_observed_tx_bitrate: [u32; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_cell_context {
    pub radio_access_technology: u8,
    pub reference_signal_level: i16,
    pub signal_level: i16,
    pub signal_quality: i8,
    pub uplink_bler: u8,
    pub downlink_bler: u8,
    pub bandwidth_limitation_indication: u8,
    pub cdrx_state: u8,
    pub cdrx_cycle: u16,
    pub estimated_outage_period: u16,
    pub outage_state: u8,
    pub __pad: u8,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1 {
    pub version: u8,
    pub direction: u8,
    pub _reserved: u16,
    pub rate_trend_suggestion: i32,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
    pub frequency_band: u8,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub header: ifnet_interface_advisory_header,
    pub capacity: ifnet_interface_advisory_capacity,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub wifi_context: ifnet_interface_advisory_wifi_context,
    pub cell_context: ifnet_interface_advisory_cell_context,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_descriptor_common {
    pub itd_type: u8,
    pub _reserved: u8,
    pub itd_len: u16,
    pub itd_flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_ip_addr {
    pub __bindgen_anon_1: ifnet_ip_addr__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ifnet_ip_addr__bindgen_ty_1 {
    pub addr8: [u8; 16usize],
    pub addr16: [u16; 8usize],
    pub addr32: [u32; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ifnet_traffic_descriptor_inet {
    pub inet_common: ifnet_traffic_descriptor_common,
    pub inet_mask: u8,
    pub inet_ipver: u8,
    pub inet_proto: u8,
    pub _reserved: u8,
    pub inet_laddr: ifnet_ip_addr,
    pub inet_raddr: ifnet_ip_addr,
    pub inet_lport: u16,
    pub inet_rport: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action {
    pub ra_type: u8,
    pub _reserved: u8,
    pub ra_len: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action_steer {
    pub ras_common: ifnet_traffic_rule_action,
    pub ras_qset_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_msg {
    pub sadb_msg_version: u_int8_t,
    pub sadb_msg_type: u_int8_t,
    pub sadb_msg_errno: u_int8_t,
    pub sadb_msg_satype: u_int8_t,
    pub sadb_msg_len: u_int16_t,
    pub sadb_msg_reserved: u_int16_t,
    pub sadb_msg_seq: u_int32_t,
    pub sadb_msg_pid: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ext {
    pub sadb_ext_len: u_int16_t,
    pub sadb_ext_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sa {
    pub sadb_sa_len: u_int16_t,
    pub sadb_sa_exttype: u_int16_t,
    pub sadb_sa_spi: u_int32_t,
    pub sadb_sa_replay: u_int8_t,
    pub sadb_sa_state: u_int8_t,
    pub sadb_sa_auth: u_int8_t,
    pub sadb_sa_encrypt: u_int8_t,
    pub sadb_sa_flags: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_lifetime {
    pub sadb_lifetime_len: u_int16_t,
    pub sadb_lifetime_exttype: u_int16_t,
    pub sadb_lifetime_allocations: u_int32_t,
    pub sadb_lifetime_bytes: u_int64_t,
    pub sadb_lifetime_addtime: u_int64_t,
    pub sadb_lifetime_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_address {
    pub sadb_address_len: u_int16_t,
    pub sadb_address_exttype: u_int16_t,
    pub sadb_address_proto: u_int8_t,
    pub sadb_address_prefixlen: u_int8_t,
    pub sadb_address_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_key {
    pub sadb_key_len: u_int16_t,
    pub sadb_key_exttype: u_int16_t,
    pub sadb_key_bits: u_int16_t,
    pub sadb_key_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ident {
    pub sadb_ident_len: u_int16_t,
    pub sadb_ident_exttype: u_int16_t,
    pub sadb_ident_type: u_int16_t,
    pub sadb_ident_reserved: u_int16_t,
    pub sadb_ident_id: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sens {
    pub sadb_sens_len: u_int16_t,
    pub sadb_sens_exttype: u_int16_t,
    pub sadb_sens_dpd: u_int32_t,
    pub sadb_sens_sens_level: u_int8_t,
    pub sadb_sens_sens_len: u_int8_t,
    pub sadb_sens_integ_level: u_int8_t,
    pub sadb_sens_integ_len: u_int8_t,
    pub sadb_sens_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_prop {
    pub sadb_prop_len: u_int16_t,
    pub sadb_prop_exttype: u_int16_t,
    pub sadb_prop_replay: u_int8_t,
    pub sadb_prop_reserved: [u_int8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_comb {
    pub sadb_comb_auth: u_int8_t,
    pub sadb_comb_encrypt: u_int8_t,
    pub sadb_comb_flags: u_int16_t,
    pub sadb_comb_auth_minbits: u_int16_t,
    pub sadb_comb_auth_maxbits: u_int16_t,
    pub sadb_comb_encrypt_minbits: u_int16_t,
    pub sadb_comb_encrypt_maxbits: u_int16_t,
    pub sadb_comb_reserved: u_int32_t,
    pub sadb_comb_soft_allocations: u_int32_t,
    pub sadb_comb_hard_allocations: u_int32_t,
    pub sadb_comb_soft_bytes: u_int64_t,
    pub sadb_comb_hard_bytes: u_int64_t,
    pub sadb_comb_soft_addtime: u_int64_t,
    pub sadb_comb_hard_addtime: u_int64_t,
    pub sadb_comb_soft_usetime: u_int64_t,
    pub sadb_comb_hard_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_supported {
    pub sadb_supported_len: u_int16_t,
    pub sadb_supported_exttype: u_int16_t,
    pub sadb_supported_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_alg {
    pub sadb_alg_id: u_int8_t,
    pub sadb_alg_ivlen: u_int8_t,
    pub sadb_alg_minbits: u_int16_t,
    pub sadb_alg_maxbits: u_int16_t,
    pub sadb_alg_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_spirange {
    pub sadb_spirange_len: u_int16_t,
    pub sadb_spirange_exttype: u_int16_t,
    pub sadb_spirange_min: u_int32_t,
    pub sadb_spirange_max: u_int32_t,
    pub sadb_spirange_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_kmprivate {
    pub sadb_x_kmprivate_len: u_int16_t,
    pub sadb_x_kmprivate_exttype: u_int16_t,
    pub sadb_x_kmprivate_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sadb_x_sa2 {
    pub __bindgen_anon_1: sadb_x_sa2__bindgen_ty_1,
    pub __bindgen_anon_2: sadb_x_sa2__bindgen_ty_2,
    pub sadb_x_sa2_len: u_int16_t,
    pub sadb_x_sa2_exttype: u_int16_t,
    pub sadb_x_sa2_mode: u_int8_t,
    pub sadb_x_sa2_sequence: u_int32_t,
    pub sadb_x_sa2_reqid: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_1 {
    pub sadb_x_sa2_reserved1: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_2 {
    pub sadb_x_sa2_reserved2: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_policy {
    pub sadb_x_policy_len: u_int16_t,
    pub sadb_x_policy_exttype: u_int16_t,
    pub sadb_x_policy_type: u_int16_t,
    pub sadb_x_policy_dir: u_int8_t,
    pub sadb_x_policy_reserved: u_int8_t,
    pub sadb_x_policy_id: u_int32_t,
    pub sadb_x_policy_reserved2: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_ipsecrequest {
    pub sadb_x_ipsecrequest_len: u_int16_t,
    pub sadb_x_ipsecrequest_proto: u_int16_t,
    pub sadb_x_ipsecrequest_mode: u_int8_t,
    pub sadb_x_ipsecrequest_level: u_int8_t,
    pub sadb_x_ipsecrequest_reqid: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_session_id {
    pub sadb_session_id_len: u_int16_t,
    pub sadb_session_id_exttype: u_int16_t,
    pub sadb_session_id_v: [u_int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sastat {
    pub spi: u_int32_t,
    pub created: u_int32_t,
    pub lft_c: sadb_lifetime,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sastat {
    pub sadb_sastat_len: u_int16_t,
    pub sadb_sastat_exttype: u_int16_t,
    pub sadb_sastat_dir: u_int32_t,
    pub sadb_sastat_reserved: u_int32_t,
    pub sadb_sastat_list_len: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_hdr {
    pub __bindgen_anon_1: icmp6_hdr__bindgen_ty_1,
    pub icmp6_type: u_int8_t,
    pub icmp6_code: u_int8_t,
    pub icmp6_cksum: u_int16_t,
    pub icmp6_dataun: icmp6_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp6_hdr__bindgen_ty_1 {
    pub icmp6_un_data32: [u_int32_t; 1usize],
    pub icmp6_un_data16: [u_int16_t; 2usize],
    pub icmp6_un_data8: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mld_hdr {
    pub mld_icmp6_hdr: icmp6_hdr,
    pub mld_addr: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_solicit {
    pub nd_rs_hdr: icmp6_hdr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_advert {
    pub nd_ra_hdr: icmp6_hdr,
    pub nd_ra_reachable: u_int32_t,
    pub nd_ra_retransmit: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_solicit {
    pub nd_ns_hdr: icmp6_hdr,
    pub nd_ns_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_advert {
    pub nd_na_hdr: icmp6_hdr,
    pub nd_na_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_redirect {
    pub nd_rd_hdr: icmp6_hdr,
    pub nd_rd_target: in6_addr,
    pub nd_rd_dst: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_hdr {
    pub nd_opt_type: u_int8_t,
    pub nd_opt_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_prefix_info {
    pub nd_opt_pi_type: u_int8_t,
    pub nd_opt_pi_len: u_int8_t,
    pub nd_opt_pi_prefix_len: u_int8_t,
    pub nd_opt_pi_flags_reserved: u_int8_t,
    pub nd_opt_pi_valid_time: u_int32_t,
    pub nd_opt_pi_preferred_time: u_int32_t,
    pub nd_opt_pi_reserved2: u_int32_t,
    pub nd_opt_pi_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_nonce {
    pub nd_opt_nonce_type: u_int8_t,
    pub nd_opt_nonce_len: u_int8_t,
    pub nd_opt_nonce: [u_int8_t; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_rd_hdr {
    pub nd_opt_rh_type: u_int8_t,
    pub nd_opt_rh_len: u_int8_t,
    pub nd_opt_rh_reserved1: u_int16_t,
    pub nd_opt_rh_reserved2: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_mtu {
    pub nd_opt_mtu_type: u_int8_t,
    pub nd_opt_mtu_len: u_int8_t,
    pub nd_opt_mtu_reserved: u_int16_t,
    pub nd_opt_mtu_mtu: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_route_info {
    pub nd_opt_rti_type: u_int8_t,
    pub nd_opt_rti_len: u_int8_t,
    pub nd_opt_rti_prefixlen: u_int8_t,
    pub nd_opt_rti_flags: u_int8_t,
    pub nd_opt_rti_lifetime: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_rdnss {
    pub nd_opt_rdnss_type: u_int8_t,
    pub nd_opt_rdnss_len: u_int8_t,
    pub nd_opt_rdnss_reserved: u_int16_t,
    pub nd_opt_rdnss_lifetime: u_int32_t,
    pub nd_opt_rdnss_addr: [in6_addr; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_dnssl {
    pub nd_opt_dnssl_type: u_int8_t,
    pub nd_opt_dnssl_len: u_int8_t,
    pub nd_opt_dnssl_reserved: u_int16_t,
    pub nd_opt_dnssl_lifetime: u_int32_t,
    pub nd_opt_dnssl_domains: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_pref64 {
    pub nd_opt_pref64_type: u_int8_t,
    pub nd_opt_pref64_len: u_int8_t,
    pub nd_opt_pref64_scaled_lifetime_plc: u_int16_t,
    pub nd_opt_pref64_prefix: [u_int32_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_namelookup {
    pub icmp6_nl_hdr: icmp6_hdr,
    pub icmp6_nl_nonce: [u_int8_t; 8usize],
    pub icmp6_nl_ttl: i32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_nodeinfo {
    pub icmp6_ni_hdr: icmp6_hdr,
    pub icmp6_ni_nonce: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ni_reply_fqdn {
    pub ni_fqdn_ttl: u_int32_t,
    pub ni_fqdn_namelen: u_int8_t,
    pub ni_fqdn_name: [u_int8_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_router_renum {
    pub rr_hdr: icmp6_hdr,
    pub rr_segnum: u_int8_t,
    pub rr_flags: u_int8_t,
    pub rr_maxdelay: u_int16_t,
    pub rr_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_match {
    pub rpm_code: u_int8_t,
    pub rpm_len: u_int8_t,
    pub rpm_ordinal: u_int8_t,
    pub rpm_matchlen: u_int8_t,
    pub rpm_minlen: u_int8_t,
    pub rpm_maxlen: u_int8_t,
    pub rpm_reserved: u_int16_t,
    pub rpm_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_use {
    pub rpu_uselen: u_int8_t,
    pub rpu_keeplen: u_int8_t,
    pub rpu_ramask: u_int8_t,
    pub rpu_raflags: u_int8_t,
    pub rpu_vltime: u_int32_t,
    pub rpu_pltime: u_int32_t,
    pub rpu_flags: u_int32_t,
    pub rpu_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_result {
    pub rrr_flags: u_int16_t,
    pub rrr_ordinal: u_int8_t,
    pub rrr_matchedlen: u_int8_t,
    pub rrr_ifid: u_int32_t,
    pub rrr_prefix: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_filter {
    pub icmp6_filt: [u_int32_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6errstat {
    pub icp6errs_dst_unreach_noroute: u_quad_t,
    pub icp6errs_dst_unreach_admin: u_quad_t,
    pub icp6errs_dst_unreach_beyondscope: u_quad_t,
    pub icp6errs_dst_unreach_addr: u_quad_t,
    pub icp6errs_dst_unreach_noport: u_quad_t,
    pub icp6errs_packet_too_big: u_quad_t,
    pub icp6errs_time_exceed_transit: u_quad_t,
    pub icp6errs_time_exceed_reassembly: u_quad_t,
    pub icp6errs_paramprob_header: u_quad_t,
    pub icp6errs_paramprob_nextheader: u_quad_t,
    pub icp6errs_paramprob_option: u_quad_t,
    pub icp6errs_redirect: u_quad_t,
    pub icp6errs_unknown: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6stat {
    pub icp6s_error: u_quad_t,
    pub icp6s_canterror: u_quad_t,
    pub icp6s_toofreq: u_quad_t,
    pub icp6s_outhist: [u_quad_t; 256usize],
    pub icp6s_badcode: u_quad_t,
    pub icp6s_tooshort: u_quad_t,
    pub icp6s_checksum: u_quad_t,
    pub icp6s_badlen: u_quad_t,
    pub icp6s_reflect: u_quad_t,
    pub icp6s_inhist: [u_quad_t; 256usize],
    pub icp6s_nd_toomanyopt: u_quad_t,
    pub icp6s_outerrhist: icmp6errstat,
    pub icp6s_pmtuchg: u_quad_t,
    pub icp6s_nd_badopt: u_quad_t,
    pub icp6s_badns: u_quad_t,
    pub icp6s_badna: u_quad_t,
    pub icp6s_badrs: u_quad_t,
    pub icp6s_badra: u_quad_t,
    pub icp6s_badredirect: u_quad_t,
    pub icp6s_rfc6980_drop: u_quad_t,
    pub icp6s_badpkttoobig: u_quad_t,
}
pub type so_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsockbuf {
    pub sb_cc: u_int32_t,
    pub sb_hiwat: u_int32_t,
    pub sb_mbcnt: u_int32_t,
    pub sb_mbmax: u_int32_t,
    pub sb_lowat: i32,
    pub sb_flags: ::std::os::raw::c_short,
    pub sb_timeo: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsocket {
    pub xso_len: u_int32_t,
    pub xso_so: u_int32_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int32_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
pub const so_tracker_action_SO_TRACKER_ACTION_INVALID: so_tracker_action = 0;
pub const so_tracker_action_SO_TRACKER_ACTION_ADD: so_tracker_action = 1;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_BY_APP: so_tracker_action = 2;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_ALL: so_tracker_action = 3;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_MAX: so_tracker_action = 4;
pub type so_tracker_action = ::std::os::raw::c_uint;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_INVALID: so_tracker_attribute = 0;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS_FAMILY: so_tracker_attribute = 1;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS: so_tracker_attribute = 2;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_APP_UUID: so_tracker_attribute = 3;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN: so_tracker_attribute = 4;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN_OWNER: so_tracker_attribute = 5;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_FLAGS: so_tracker_attribute = 6;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DUMP_ENTRY: so_tracker_attribute = 7;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MEMORY_USED: so_tracker_attribute = 8;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MAX: so_tracker_attribute = 9;
pub type so_tracker_attribute = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracker_action(
        action: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
    ) -> ::std::os::raw::c_int;
}
pub type inp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr_4in6 {
    pub ia46_pad32: [u_int32_t; 3usize],
    pub ia46_addr4: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbport {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_pktopts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_moptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbpolicy {
    _unused: [u8; 0],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct inpcb {
    pub __bindgen_anon_1: inpcb__bindgen_ty_1,
    pub __bindgen_anon_2: inpcb__bindgen_ty_2,
    pub __bindgen_anon_3: inpcb__bindgen_ty_3,
    pub __bindgen_anon_4: inpcb__bindgen_ty_4,
    pub __bindgen_anon_5: inpcb__bindgen_ty_5,
    pub inp_hash: _inpcb_list_entry,
    pub reserved1: in_addr,
    pub reserved2: in_addr,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: _inpcb_list_entry,
    pub inp_ppcb: u_int32_t,
    pub inp_pcbinfo: u_int32_t,
    pub inp_socket: u_int32_t,
    pub nat_owner: u_char,
    pub nat_cookie: u_int32_t,
    pub inp_portlist: _inpcb_list_entry,
    pub inp_phd: u_int32_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: inpcb__bindgen_ty_1,
    pub inp_dependladdr: inpcb__bindgen_ty_2,
    pub inp_dependroute: inpcb__bindgen_ty_3,
    pub inp_depend4: inpcb__bindgen_ty_4,
    pub inp_depend6: inpcb__bindgen_ty_5,
    pub hash_element: ::std::os::raw::c_int,
    pub inp_saved_ppcb: u_int32_t,
    pub inp_sp: u_int32_t,
    pub reserved: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_3 {
    pub inp4_route: [u_char; 20usize],
    pub inp6_route: [u_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_4 {
    pub inp4_ip_tos: u_char,
    pub inp4_options: u_int32_t,
    pub inp4_moptions: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_5 {
    pub inp6_options: u_int32_t,
    pub inp6_hlim: u_int8_t,
    pub unused_uint8_1: u_int8_t,
    pub unused_uint16_1: ushort,
    pub inp6_outputopts: u_int32_t,
    pub inp6_moptions: u_int32_t,
    pub inp6_icmp6filt: u_int32_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb {
    pub xi_len: u_int32_t,
    pub xi_inp: inpcb,
    pub xi_socket: xsocket,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xinpgen {
    pub xig_len: u_int32_t,
    pub xig_count: u_int,
    pub xig_gen: inp_gen_t,
    pub xig_sogen: so_gen_t,
}
pub type n_short = __uint16_t;
pub type n_long = __uint32_t;
pub type n_time = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ip_tos: u_char,
    pub ip_len: u_short,
    pub ip_id: u_short,
    pub ip_off: u_short,
    pub ip_ttl: u_char,
    pub ip_p: u_char,
    pub ip_sum: u_short,
    pub ip_src: in_addr,
    pub ip_dst: in_addr,
}
impl ip {
    #[inline]
    pub fn ip_hl(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_hl(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_v(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_v(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ip_hl: u_int, ip_v: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ip_hl: u32 = unsafe { ::std::mem::transmute(ip_hl) };
            ip_hl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ip_v: u32 = unsafe { ::std::mem::transmute(ip_v) };
            ip_v as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_timestamp {
    pub ipt_code: u_char,
    pub ipt_len: u_char,
    pub ipt_ptr: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ipt_timestamp: ip_timestamp_ipt_timestamp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_timestamp_ipt_timestamp {
    pub ipt_time: [n_long; 1usize],
    pub ipt_ta: [ip_timestamp_ipt_timestamp_ipt_ta; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_timestamp_ipt_timestamp_ipt_ta {
    pub ipt_addr: in_addr,
    pub ipt_time: n_long,
}
impl ip_timestamp {
    #[inline]
    pub fn ipt_flg(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_flg(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ipt_oflw(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_oflw(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ipt_flg: u_int, ipt_oflw: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ipt_flg: u32 = unsafe { ::std::mem::transmute(ipt_flg) };
            ipt_flg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ipt_oflw: u32 = unsafe { ::std::mem::transmute(ipt_oflw) };
            ipt_oflw as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ip6_hdr {
    pub __bindgen_anon_1: ip6_hdr__bindgen_ty_1,
    pub ip6_ctlun: ip6_hdr__bindgen_ty_1,
    pub ip6_src: in6_addr,
    pub ip6_dst: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip6_hdr__bindgen_ty_1 {
    pub ip6_un1: ip6_hdr__bindgen_ty_1_ip6_hdrctl,
    pub ip6_un2_vfc: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hdr__bindgen_ty_1_ip6_hdrctl {
    pub ip6_un1_flow: u_int32_t,
    pub ip6_un1_plen: u_int16_t,
    pub ip6_un1_nxt: u_int8_t,
    pub ip6_un1_hlim: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_ext {
    pub ip6e_nxt: u_int8_t,
    pub ip6e_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hbh {
    pub ip6h_nxt: u_int8_t,
    pub ip6h_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_dest {
    pub ip6d_nxt: u_int8_t,
    pub ip6d_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt {
    pub ip6o_type: u_int8_t,
    pub ip6o_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_jumbo {
    pub ip6oj_type: u_int8_t,
    pub ip6oj_len: u_int8_t,
    pub ip6oj_jumbo_len: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_nsap {
    pub ip6on_type: u_int8_t,
    pub ip6on_len: u_int8_t,
    pub ip6on_src_nsap_len: u_int8_t,
    pub ip6on_dst_nsap_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_tunnel {
    pub ip6ot_type: u_int8_t,
    pub ip6ot_len: u_int8_t,
    pub ip6ot_encap_limit: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_router {
    pub ip6or_type: u_int8_t,
    pub ip6or_len: u_int8_t,
    pub ip6or_value: [u_int8_t; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr {
    pub ip6r_nxt: u_int8_t,
    pub ip6r_len: u_int8_t,
    pub ip6r_type: u_int8_t,
    pub ip6r_segleft: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr0 {
    pub ip6r0_nxt: u_int8_t,
    pub ip6r0_len: u_int8_t,
    pub ip6r0_type: u_int8_t,
    pub ip6r0_segleft: u_int8_t,
    pub ip6r0_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_frag {
    pub ip6f_nxt: u_int8_t,
    pub ip6f_reserved: u_int8_t,
    pub ip6f_offlg: u_int16_t,
    pub ip6f_ident: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp_ra_addr {
    pub ira_addr: u_int32_t,
    pub ira_preference: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct icmp {
    pub __bindgen_anon_1: icmp__bindgen_ty_1,
    pub __bindgen_anon_2: icmp__bindgen_ty_2,
    pub icmp_type: u_char,
    pub icmp_code: u_char,
    pub icmp_cksum: u_short,
    pub icmp_hun: icmp__bindgen_ty_1,
    pub icmp_dun: icmp__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_1 {
    pub ih_pptr: u_char,
    pub ih_gwaddr: in_addr,
    pub ih_idseq: icmp__bindgen_ty_1_ih_idseq,
    pub ih_void: ::std::os::raw::c_int,
    pub ih_pmtu: icmp__bindgen_ty_1_ih_pmtu,
    pub ih_rtradv: icmp__bindgen_ty_1_ih_rtradv,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_idseq {
    pub icd_id: n_short,
    pub icd_seq: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_pmtu {
    pub ipm_void: n_short,
    pub ipm_nextmtu: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_rtradv {
    pub irt_num_addrs: u_char,
    pub irt_wpa: u_char,
    pub irt_lifetime: u_int16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_2 {
    pub id_ts: icmp__bindgen_ty_2_id_ts,
    pub id_ip: icmp__bindgen_ty_2_id_ip,
    pub id_radv: icmp_ra_addr,
    pub id_mask: u_int32_t,
    pub id_data: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ts {
    pub its_otime: n_time,
    pub its_rtime: n_time,
    pub its_ttime: n_time,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ip {
    pub idi_ip: ip,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tseg_qent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsegqe_head {
    pub lh_first: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpcb {
    pub t_segq: tsegqe_head,
    pub t_dupacks: ::std::os::raw::c_int,
    pub unused: u_int32_t,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_inpcb: u_int32_t,
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat {
    pub tcps_connattempt: u_int32_t,
    pub tcps_accepts: u_int32_t,
    pub tcps_connects: u_int32_t,
    pub tcps_drops: u_int32_t,
    pub tcps_conndrops: u_int32_t,
    pub tcps_closed: u_int32_t,
    pub tcps_segstimed: u_int32_t,
    pub tcps_rttupdated: u_int32_t,
    pub tcps_delack: u_int32_t,
    pub tcps_timeoutdrop: u_int32_t,
    pub tcps_rexmttimeo: u_int32_t,
    pub tcps_persisttimeo: u_int32_t,
    pub tcps_keeptimeo: u_int32_t,
    pub tcps_keepprobe: u_int32_t,
    pub tcps_keepdrops: u_int32_t,
    pub tcps_sndtotal: u_int32_t,
    pub tcps_sndpack: u_int32_t,
    pub tcps_sndbyte: u_int32_t,
    pub tcps_sndrexmitpack: u_int32_t,
    pub tcps_sndrexmitbyte: u_int32_t,
    pub tcps_sndacks: u_int32_t,
    pub tcps_sndprobe: u_int32_t,
    pub tcps_sndurg: u_int32_t,
    pub tcps_sndwinup: u_int32_t,
    pub tcps_sndctrl: u_int32_t,
    pub tcps_rcvtotal: u_int32_t,
    pub tcps_rcvpack: u_int32_t,
    pub tcps_rcvbyte: u_int32_t,
    pub tcps_rcvbadsum: u_int32_t,
    pub tcps_rcvbadoff: u_int32_t,
    pub tcps_rcvmemdrop: u_int32_t,
    pub tcps_rcvshort: u_int32_t,
    pub tcps_rcvduppack: u_int32_t,
    pub tcps_rcvdupbyte: u_int32_t,
    pub tcps_rcvpartduppack: u_int32_t,
    pub tcps_rcvpartdupbyte: u_int32_t,
    pub tcps_rcvoopack: u_int32_t,
    pub tcps_rcvoobyte: u_int32_t,
    pub tcps_rcvpackafterwin: u_int32_t,
    pub tcps_rcvbyteafterwin: u_int32_t,
    pub tcps_rcvafterclose: u_int32_t,
    pub tcps_rcvwinprobe: u_int32_t,
    pub tcps_rcvdupack: u_int32_t,
    pub tcps_rcvacktoomuch: u_int32_t,
    pub tcps_rcvackpack: u_int32_t,
    pub tcps_rcvackbyte: u_int32_t,
    pub tcps_rcvwinupd: u_int32_t,
    pub tcps_pawsdrop: u_int32_t,
    pub tcps_predack: u_int32_t,
    pub tcps_preddat: u_int32_t,
    pub tcps_pcbcachemiss: u_int32_t,
    pub tcps_cachedrtt: u_int32_t,
    pub tcps_cachedrttvar: u_int32_t,
    pub tcps_cachedssthresh: u_int32_t,
    pub tcps_usedrtt: u_int32_t,
    pub tcps_usedrttvar: u_int32_t,
    pub tcps_usedssthresh: u_int32_t,
    pub tcps_persistdrop: u_int32_t,
    pub tcps_badsyn: u_int32_t,
    pub tcps_mturesent: u_int32_t,
    pub tcps_listendrop: u_int32_t,
    pub tcps_synchallenge: u_int32_t,
    pub tcps_rstchallenge: u_int32_t,
    pub tcps_minmssdrops: u_int32_t,
    pub tcps_sndrexmitbad: u_int32_t,
    pub tcps_badrst: u_int32_t,
    pub tcps_sc_added: u_int32_t,
    pub tcps_sc_retransmitted: u_int32_t,
    pub tcps_sc_dupsyn: u_int32_t,
    pub tcps_sc_dropped: u_int32_t,
    pub tcps_sc_completed: u_int32_t,
    pub tcps_sc_bucketoverflow: u_int32_t,
    pub tcps_sc_cacheoverflow: u_int32_t,
    pub tcps_sc_reset: u_int32_t,
    pub tcps_sc_stale: u_int32_t,
    pub tcps_sc_aborted: u_int32_t,
    pub tcps_sc_badack: u_int32_t,
    pub tcps_sc_unreach: u_int32_t,
    pub tcps_sc_zonefail: u_int32_t,
    pub tcps_sc_sendcookie: u_int32_t,
    pub tcps_sc_recvcookie: u_int32_t,
    pub tcps_hc_added: u_int32_t,
    pub tcps_hc_bucketoverflow: u_int32_t,
    pub tcps_sack_recovery_episode: u_int32_t,
    pub tcps_sack_rexmits: u_int32_t,
    pub tcps_sack_rexmit_bytes: u_int32_t,
    pub tcps_sack_rcv_blocks: u_int32_t,
    pub tcps_sack_send_blocks: u_int32_t,
    pub tcps_sack_sboverflow: u_int32_t,
    pub tcps_bg_rcvtotal: u_int32_t,
    pub tcps_rxtfindrop: u_int32_t,
    pub tcps_fcholdpacket: u_int32_t,
    pub tcps_limited_txt: u_int32_t,
    pub tcps_early_rexmt: u_int32_t,
    pub tcps_sack_ackadv: u_int32_t,
    pub tcps_rcv_swcsum: u_int32_t,
    pub tcps_rcv_swcsum_bytes: u_int32_t,
    pub tcps_rcv6_swcsum: u_int32_t,
    pub tcps_rcv6_swcsum_bytes: u_int32_t,
    pub tcps_snd_swcsum: u_int32_t,
    pub tcps_snd_swcsum_bytes: u_int32_t,
    pub tcps_snd6_swcsum: u_int32_t,
    pub tcps_snd6_swcsum_bytes: u_int32_t,
    pub tcps_unused_1: u_int32_t,
    pub tcps_unused_2: u_int32_t,
    pub tcps_unused_3: u_int32_t,
    pub tcps_invalid_mpcap: u_int32_t,
    pub tcps_invalid_joins: u_int32_t,
    pub tcps_mpcap_fallback: u_int32_t,
    pub tcps_join_fallback: u_int32_t,
    pub tcps_estab_fallback: u_int32_t,
    pub tcps_invalid_opt: u_int32_t,
    pub tcps_mp_outofwin: u_int32_t,
    pub tcps_mp_reducedwin: u_int32_t,
    pub tcps_mp_badcsum: u_int32_t,
    pub tcps_mp_oodata: u_int32_t,
    pub tcps_mp_switches: u_int32_t,
    pub tcps_mp_rcvtotal: u_int32_t,
    pub tcps_mp_rcvbytes: u_int32_t,
    pub tcps_mp_sndpacks: u_int32_t,
    pub tcps_mp_sndbytes: u_int32_t,
    pub tcps_join_rxmts: u_int32_t,
    pub tcps_tailloss_rto: u_int32_t,
    pub tcps_reordered_pkts: u_int32_t,
    pub tcps_recovered_pkts: u_int32_t,
    pub tcps_pto: u_int32_t,
    pub tcps_rto_after_pto: u_int32_t,
    pub tcps_tlp_recovery: u_int32_t,
    pub tcps_tlp_recoverlastpkt: u_int32_t,
    pub tcps_ecn_client_success: u_int32_t,
    pub tcps_ecn_recv_ece: u_int32_t,
    pub tcps_ecn_sent_ece: u_int32_t,
    pub tcps_detect_reordering: u_int32_t,
    pub tcps_delay_recovery: u_int32_t,
    pub tcps_avoid_rxmt: u_int32_t,
    pub tcps_unnecessary_rxmt: u_int32_t,
    pub tcps_nostretchack: u_int32_t,
    pub tcps_rescue_rxmt: u_int32_t,
    pub tcps_pto_in_recovery: u_int32_t,
    pub tcps_pmtudbh_reverted: u_int32_t,
    pub tcps_dsack_disable: u_int32_t,
    pub tcps_dsack_ackloss: u_int32_t,
    pub tcps_dsack_badrexmt: u_int32_t,
    pub tcps_dsack_sent: u_int32_t,
    pub tcps_dsack_recvd: u_int32_t,
    pub tcps_dsack_recvd_old: u_int32_t,
    pub tcps_mp_sel_symtomsd: u_int32_t,
    pub tcps_mp_sel_rtt: u_int32_t,
    pub tcps_mp_sel_rto: u_int32_t,
    pub tcps_mp_sel_peer: u_int32_t,
    pub tcps_mp_num_probes: u_int32_t,
    pub tcps_mp_verdowngrade: u_int32_t,
    pub tcps_drop_after_sleep: u_int32_t,
    pub tcps_probe_if: u_int32_t,
    pub tcps_probe_if_conflict: u_int32_t,
    pub tcps_ecn_client_setup: u_int32_t,
    pub tcps_ecn_server_setup: u_int32_t,
    pub tcps_ecn_server_success: u_int32_t,
    pub tcps_ecn_ace_syn_not_ect: u_int32_t,
    pub tcps_ecn_ace_syn_ect1: u_int32_t,
    pub tcps_ecn_ace_syn_ect0: u_int32_t,
    pub tcps_ecn_ace_syn_ce: u_int32_t,
    pub tcps_ecn_lost_synack: u_int32_t,
    pub tcps_ecn_lost_syn: u_int32_t,
    pub tcps_ecn_not_supported: u_int32_t,
    pub tcps_ecn_recv_ce: u_int32_t,
    pub tcps_ecn_ace_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ece: u_int32_t,
    pub tcps_ecn_conn_plnoce: u_int32_t,
    pub tcps_ecn_conn_pl_ce: u_int32_t,
    pub tcps_ecn_conn_nopl_ce: u_int32_t,
    pub tcps_ecn_fallback_synloss: u_int32_t,
    pub tcps_ecn_fallback_reorder: u_int32_t,
    pub tcps_ecn_fallback_ce: u_int32_t,
    pub tcps_tfo_syn_data_rcv: u_int32_t,
    pub tcps_tfo_cookie_req_rcv: u_int32_t,
    pub tcps_tfo_cookie_sent: u_int32_t,
    pub tcps_tfo_cookie_invalid: u_int32_t,
    pub tcps_tfo_cookie_req: u_int32_t,
    pub tcps_tfo_cookie_rcv: u_int32_t,
    pub tcps_tfo_syn_data_sent: u_int32_t,
    pub tcps_tfo_syn_data_acked: u_int32_t,
    pub tcps_tfo_syn_loss: u_int32_t,
    pub tcps_tfo_blackhole: u_int32_t,
    pub tcps_tfo_cookie_wrong: u_int32_t,
    pub tcps_tfo_no_cookie_rcv: u_int32_t,
    pub tcps_tfo_heuristics_disable: u_int32_t,
    pub tcps_tfo_sndblackhole: u_int32_t,
    pub tcps_mss_to_default: u_int32_t,
    pub tcps_mss_to_medium: u_int32_t,
    pub tcps_mss_to_low: u_int32_t,
    pub tcps_ecn_fallback_droprst: u_int32_t,
    pub tcps_ecn_fallback_droprxmt: u_int32_t,
    pub tcps_ecn_fallback_synrst: u_int32_t,
    pub tcps_mptcp_rcvmemdrop: u_int32_t,
    pub tcps_mptcp_rcvduppack: u_int32_t,
    pub tcps_mptcp_rcvpackafterwin: u_int32_t,
    pub tcps_timer_drift_le_1_ms: u_int32_t,
    pub tcps_timer_drift_le_10_ms: u_int32_t,
    pub tcps_timer_drift_le_20_ms: u_int32_t,
    pub tcps_timer_drift_le_50_ms: u_int32_t,
    pub tcps_timer_drift_le_100_ms: u_int32_t,
    pub tcps_timer_drift_le_200_ms: u_int32_t,
    pub tcps_timer_drift_le_500_ms: u_int32_t,
    pub tcps_timer_drift_le_1000_ms: u_int32_t,
    pub tcps_timer_drift_gt_1000_ms: u_int32_t,
    pub tcps_mptcp_handover_attempt: u_int32_t,
    pub tcps_mptcp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_fp_handover_attempt: u_int32_t,
    pub tcps_mptcp_fp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_fp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_fp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_interactive_success: u_int32_t,
    pub tcps_mptcp_aggregate_success: u_int32_t,
    pub tcps_mptcp_fp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_fp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_fp_interactive_success: u_int32_t,
    pub tcps_mptcp_fp_aggregate_success: u_int32_t,
    pub tcps_mptcp_handover_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_wifi_from_cell: u_int32_t,
    pub tcps_mptcp_interactive_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_cell_bytes: u_int64_t,
    pub tcps_mptcp_interactive_cell_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_cell_bytes: u_int64_t,
    pub tcps_mptcp_handover_all_bytes: u_int64_t,
    pub tcps_mptcp_interactive_all_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_all_bytes: u_int64_t,
    pub tcps_mptcp_back_to_wifi: u_int32_t,
    pub tcps_mptcp_wifi_proxy: u_int32_t,
    pub tcps_mptcp_cell_proxy: u_int32_t,
    pub tcps_ka_offload_drops: u_int32_t,
    pub tcps_mptcp_triggered_cell: u_int32_t,
    pub tcps_fin_timeout_drops: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat_local {
    pub badformat: u_int64_t,
    pub unspecv6: u_int64_t,
    pub synfin: u_int64_t,
    pub badformatipsec: u_int64_t,
    pub noconnnolist: u_int64_t,
    pub noconnlist: u_int64_t,
    pub listbadsyn: u_int64_t,
    pub icmp6unreach: u_int64_t,
    pub deprecate6: u_int64_t,
    pub ooopacket: u_int64_t,
    pub rstinsynrcv: u_int64_t,
    pub dospacket: u_int64_t,
    pub cleanup: u_int64_t,
    pub synwindow: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb {
    pub xt_len: u_int32_t,
    pub xt_inp: inpcb,
    pub xt_tp: tcpcb,
    pub xt_socket: xsocket,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr {
    pub uh_sport: u_short,
    pub uh_dport: u_short,
    pub uh_ulen: u_short,
    pub uh_sum: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat {
    pub irq_ex_cnt: u32,
    pub ipi_cnt: u32,
    pub timer_cnt: u32,
    pub undef_ex_cnt: u32,
    pub unaligned_cnt: u32,
    pub vfp_cnt: u32,
    pub vfp_shortv_cnt: u32,
    pub data_ex_cnt: u32,
    pub instr_ex_cnt: u32,
}
pub type processor_cpu_stat_data_t = processor_cpu_stat;
pub type processor_cpu_stat_t = *mut processor_cpu_stat;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat64 {
    pub irq_ex_cnt: u64,
    pub ipi_cnt: u64,
    pub timer_cnt: u64,
    pub undef_ex_cnt: u64,
    pub unaligned_cnt: u64,
    pub vfp_cnt: u64,
    pub vfp_shortv_cnt: u64,
    pub data_ex_cnt: u64,
    pub instr_ex_cnt: u64,
    pub pmi_cnt: u64,
}
pub type processor_cpu_stat64_data_t = processor_cpu_stat64;
pub type processor_cpu_stat64_t = *mut processor_cpu_stat64;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64_2 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_2_data_t = task_basic_info_64_2;
pub type task_basic_info_64_2_t = *mut task_basic_info_64_2;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_energy: u64,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 1024usize];
pub type nspace_name_t = [::std::os::raw::c_char; 1024usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type bank_action_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_persona_info {
    pub unique_pid: u64,
    pub pid: i32,
    pub flags: u32,
    pub pidversion: u32,
    pub persona_id: u32,
    pub uid: u32,
    pub gid: u32,
    pub macho_uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_token {
    pub originator: proc_persona_info,
    pub proximate: proc_persona_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_modify_info {
    pub persona_id: u32,
    pub unique_pid: u64,
}
extern "C" {
    pub fn _NSGetArgv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetArgc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _NSGetEnviron() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetProgname() -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header_64 {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _NSGetMachExecuteHeader() -> *mut mach_header_64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
extern "C" {
    pub fn getopt_long(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_3 = 0;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_4 = 0;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_6 = 1061109567;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_7 = 0;
pub const bold: _bindgen_ty_7 = 1;
pub const italic: _bindgen_ty_7 = 2;
pub const underline: _bindgen_ty_7 = 4;
pub const outline: _bindgen_ty_7 = 8;
pub const shadow: _bindgen_ty_7 = 16;
pub const condense: _bindgen_ty_7 = 32;
pub const extend: _bindgen_ty_7 = 64;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
pub const developStage: _bindgen_ty_8 = 32;
pub const alphaStage: _bindgen_ty_8 = 64;
pub const betaStage: _bindgen_ty_8 = 96;
pub const finalStage: _bindgen_ty_8 = 128;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
pub const OSUnknownByteOrder: _bindgen_ty_9 = 0;
pub const OSLittleEndian: _bindgen_ty_9 = 1;
pub const OSBigEndian: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
}
extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type string_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn clock_get_time(
        clock_serv: clock_serv_t,
        cur_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_get_attributes(
        clock_serv: clock_serv_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_alarm(
        clock_serv: clock_serv_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
        alarm_port: clock_reply_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_time_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_subsystem {
    pub Request_clock_get_time: __Request__clock_get_time_t,
    pub Request_clock_get_attributes: __Request__clock_get_attributes_t,
    pub Request_clock_alarm: __Request__clock_alarm_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_subsystem {
    pub Reply_clock_get_time: __Reply__clock_get_time_t,
    pub Reply_clock_get_attributes: __Reply__clock_get_attributes_t,
    pub Reply_clock_alarm: __Reply__clock_alarm_t,
}
extern "C" {
    pub fn clock_alarm_reply(
        alarm_port: clock_reply_t,
        alarm_portPoly: mach_msg_type_name_t,
        alarm_code: kern_return_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub alarm_code: kern_return_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_reply_subsystem {
    pub Request_clock_alarm_reply: __Request__clock_alarm_reply_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_reply_subsystem {
    pub Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t,
}
extern "C" {
    pub fn exception_raise(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state(
        exception_port: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state_identity(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__exc_subsystem {
    pub Request_exception_raise: __Request__exception_raise_t,
    pub Request_exception_raise_state: __Request__exception_raise_state_t,
    pub Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__exc_subsystem {
    pub Reply_exception_raise: __Reply__exception_raise_t,
    pub Reply_exception_raise_state: __Reply__exception_raise_state_t,
    pub Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t,
}
pub const HV_SUCCESS: _bindgen_ty_10 = 0;
pub const HV_ERROR: _bindgen_ty_10 = -85377023;
pub const HV_BUSY: _bindgen_ty_10 = -85377022;
pub const HV_BAD_ARGUMENT: _bindgen_ty_10 = -85377021;
pub const HV_ILLEGAL_GUEST_STATE: _bindgen_ty_10 = -85377020;
pub const HV_NO_RESOURCES: _bindgen_ty_10 = -85377019;
pub const HV_NO_DEVICE: _bindgen_ty_10 = -85377018;
pub const HV_DENIED: _bindgen_ty_10 = -85377017;
pub const HV_UNSUPPORTED: _bindgen_ty_10 = -85377009;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub type hv_return_t = mach_error_t;
pub const HV_MEMORY_READ: _bindgen_ty_11 = 1;
pub const HV_MEMORY_WRITE: _bindgen_ty_11 = 2;
pub const HV_MEMORY_EXEC: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub type hv_memory_flags_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
pub type mach_timebase_info_t = *mut mach_timebase_info;
pub type mach_timebase_info_data_t = mach_timebase_info;
extern "C" {
    pub fn mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_wait_until(deadline: u64) -> kern_return_t;
}
extern "C" {
    pub fn mach_absolute_time() -> u64;
}
extern "C" {
    pub fn mach_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_voucher_extract_attr_content(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        content: mach_voucher_attr_content_t,
        contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipeCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_all_attr_recipes(
        voucher: ipc_voucher_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_attr_command(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        command: mach_voucher_attr_command_t,
        in_content: mach_voucher_attr_content_t,
        in_contentCnt: mach_msg_type_number_t,
        out_content: mach_voucher_attr_content_t,
        out_contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_debug_info(
        task: ipc_space_read_t,
        voucher_name: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub recipeCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_command_t,
    pub in_contentCnt: mach_msg_type_number_t,
    pub in_content: [u8; 4096usize],
    pub out_contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub voucher_name: mach_port_name_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_voucher_subsystem {
    pub Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t,
    pub Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t,
    pub Request_mach_voucher_extract_all_attr_recipes:
        __Request__mach_voucher_extract_all_attr_recipes_t,
    pub Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t,
    pub Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub contentCnt: mach_msg_type_number_t,
    pub content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipeCnt: mach_msg_type_number_t,
    pub recipe: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_contentCnt: mach_msg_type_number_t,
    pub out_content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_voucher_subsystem {
    pub Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t,
    pub Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t,
    pub Reply_mach_voucher_extract_all_attr_recipes:
        __Reply__mach_voucher_extract_all_attr_recipes_t,
    pub Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t,
    pub Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t,
}
extern "C" {
    pub fn mach_memory_entry_purgable_control(
        mem_entry: mem_entry_name_port_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_access_tracking(
        mem_entry: mem_entry_name_port_t,
        access_tracking: *mut ::std::os::raw::c_int,
        access_tracking_reads: *mut u32,
        access_tracking_writes: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_ownership(
        mem_entry: mem_entry_name_port_t,
        owner: task_t,
        ledger_tag: ::std::os::raw::c_int,
        ledger_flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub access_tracking: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub owner: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledger_tag: ::std::os::raw::c_int,
    pub ledger_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__memory_entry_subsystem {
    pub Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t,
    pub Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t,
    pub Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub access_tracking: ::std::os::raw::c_int,
    pub access_tracking_reads: u32,
    pub access_tracking_writes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__memory_entry_subsystem {
    pub Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t,
    pub Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t,
    pub Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port_obj_tentry {
    pub pos_value: *mut ::std::os::raw::c_void,
    pub pos_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn port_obj_init(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut port_obj_table: *mut port_obj_tentry;
}
extern "C" {
    pub static mut port_obj_table_size: ::std::os::raw::c_int;
}
extern "C" {
    pub fn thread_get_register_pointer_values(
        thread: thread_t,
        sp: *mut usize,
        length: *mut usize,
        values: *mut usize,
    ) -> kern_return_t;
}
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
pub type io_object_t = mach_port_t;
pub type OSAtomic_int64_aligned64_t = i64;
extern "C" {
    pub fn OSAtomicAdd32(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd64(__theAmount: i64, __theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicAdd64Barrier(
        __theAmount: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> i64;
}
extern "C" {
    pub fn OSAtomicOr32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: *mut i32)
        -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32Barrier(
        __oldValue: i32,
        __newValue: i32,
        __theValue: *mut i32,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtr(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtrBarrier(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapInt(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapIntBarrier(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLong(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLongBarrier(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64Barrier(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSet(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClear(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void)
        -> bool;
}
extern "C" {
    pub fn OSMemoryBarrier();
}
pub type OSSpinLock = i32;
extern "C" {
    pub fn OSSpinLockTry(__lock: *mut OSSpinLock) -> bool;
}
extern "C" {
    pub fn OSSpinLockLock(__lock: *mut OSSpinLock);
}
extern "C" {
    pub fn OSSpinLockUnlock(__lock: *mut OSSpinLock);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_12 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: ::std::os::raw::c_long,
}
pub type OSQueueHead = _bindgen_ty_12;
extern "C" {
    pub fn OSAtomicEnqueue(
        __list: *mut OSQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicDequeue(
        __list: *mut OSQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_unfair_lock_s {
    pub _os_unfair_lock_opaque: u32,
}
pub type os_unfair_lock = os_unfair_lock_s;
pub type os_unfair_lock_t = *mut os_unfair_lock_s;
extern "C" {
    pub fn os_unfair_lock_lock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_trylock(lock: os_unfair_lock_t) -> bool;
}
extern "C" {
    pub fn os_unfair_lock_unlock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_assert_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_unfair_lock_assert_not_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_proc_available_memory() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            num_items: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub valloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(zone: *mut _malloc_zone_t)>,
    pub zone_name: *const ::std::os::raw::c_char,
    pub batch_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            size: usize,
            results: *mut *mut ::std::os::raw::c_void,
            num_requested: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub batch_free: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            to_be_freed: *mut *mut ::std::os::raw::c_void,
            num_to_be_freed: ::std::os::raw::c_uint,
        ),
    >,
    pub introspect: *mut malloc_introspection_t,
    pub version: ::std::os::raw::c_uint,
    pub memalign: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            alignment: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_definite_size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ),
    >,
    pub pressure_relief: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, goal: usize) -> usize,
    >,
    pub claimed_address: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
        ) -> boolean_t,
    >,
    pub try_free_default: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_default_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_create_zone(
        start_size: vm_size_t,
        flags: ::std::os::raw::c_uint,
    ) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_destroy_zone(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_malloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_calloc(
        zone: *mut malloc_zone_t,
        num_items: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_valloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_free(zone: *mut malloc_zone_t, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_from_ptr(ptr: *const ::std::os::raw::c_void) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_size(ptr: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn malloc_good_size(size: usize) -> usize;
}
extern "C" {
    pub fn malloc_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_batch_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        results: *mut *mut ::std::os::raw::c_void,
        num_requested: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn malloc_zone_batch_free(
        zone: *mut malloc_zone_t,
        to_be_freed: *mut *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn malloc_default_purgeable_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_make_purgeable(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_make_nonpurgeable(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc_zone_register(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_unregister(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_set_zone_name(zone: *mut malloc_zone_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn malloc_get_zone_name(zone: *mut malloc_zone_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn malloc_zone_pressure_relief(zone: *mut malloc_zone_t, goal: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_range_t {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_statistics_t {
    pub blocks_in_use: ::std::os::raw::c_uint,
    pub size_in_use: usize,
    pub max_size_in_use: usize,
    pub size_allocated: usize,
}
pub type memory_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        remote_task: task_t,
        remote_address: vm_address_t,
        size: vm_size_t,
        local_memory: *mut *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
pub type vm_range_recorder_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: task_t,
        arg2: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_uint,
        arg3: *mut vm_range_t,
        arg4: ::std::os::raw::c_uint,
    ),
>;
pub type print_task_printer_t =
    ::std::option::Option<unsafe extern "C" fn(fmt: *const ::std::os::raw::c_char, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_introspection_t {
    pub enumerator: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            arg1: *mut ::std::os::raw::c_void,
            type_mask: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            recorder: vm_range_recorder_t,
        ) -> kern_return_t,
    >,
    pub good_size:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, size: usize) -> usize>,
    pub check: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub print:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, verbose: boolean_t)>,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void),
    >,
    pub force_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub force_unlock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub statistics: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t),
    >,
    pub zone_locked:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub enable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub disable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub discharge: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void),
    >,
    pub enumerate_discharged_pointers: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut malloc_zone_t,
            report_discharged: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reinit_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub print_task: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            level: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            printer: print_task_printer_t,
        ),
    >,
    pub task_statistics: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            stats: *mut malloc_statistics_t,
        ),
    >,
}
extern "C" {
    pub fn malloc_printf(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn malloc_get_all_zones(
        task: task_t,
        reader: memory_reader_t,
        addresses: *mut *mut vm_address_t,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn malloc_zone_print_ptr_info(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_check(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_print(zone: *mut malloc_zone_t, verbose: boolean_t);
}
extern "C" {
    pub fn malloc_zone_statistics(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t);
}
extern "C" {
    pub fn malloc_zone_log(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstats {
    pub bytes_total: usize,
    pub chunks_used: usize,
    pub bytes_used: usize,
    pub chunks_free: usize,
    pub bytes_free: usize,
}
extern "C" {
    pub fn mstats() -> mstats;
}
extern "C" {
    pub fn malloc_zone_enable_discharge_checking(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_disable_discharge_checking(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_discharge(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_enumerate_discharged_pointers(
        zone: *mut malloc_zone_t,
        report_discharged: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: ::std::os::raw::c_uchar,
}
pub type au_expire_after_t = au_expire_after;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    _unused: [u8; 0],
}
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
pub type au_evclass_map_t = au_evclass_map;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsecstat {
    pub in_success: u_quad_t,
    pub in_polvio: u_quad_t,
    pub in_nosa: u_quad_t,
    pub in_inval: u_quad_t,
    pub in_nomem: u_quad_t,
    pub in_badspi: u_quad_t,
    pub in_ahreplay: u_quad_t,
    pub in_espreplay: u_quad_t,
    pub in_ahauthsucc: u_quad_t,
    pub in_ahauthfail: u_quad_t,
    pub in_espauthsucc: u_quad_t,
    pub in_espauthfail: u_quad_t,
    pub in_esphist: [u_quad_t; 256usize],
    pub in_ahhist: [u_quad_t; 256usize],
    pub in_comphist: [u_quad_t; 256usize],
    pub out_success: u_quad_t,
    pub out_polvio: u_quad_t,
    pub out_nosa: u_quad_t,
    pub out_inval: u_quad_t,
    pub out_nomem: u_quad_t,
    pub out_noroute: u_quad_t,
    pub out_esphist: [u_quad_t; 256usize],
    pub out_ahhist: [u_quad_t; 256usize],
    pub out_comphist: [u_quad_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_info {
    pub wake_pkt: [u_int8_t; 100usize],
    pub wake_uuid: uuid_string_t,
    pub wake_pkt_spi: u_int32_t,
    pub wake_pkt_seq: u_int32_t,
    pub wake_pkt_len: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_event_data {
    pub wake_uuid: uuid_string_t,
}
extern "C" {
    pub fn ipsec_set_policy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> caddr_t;
}
extern "C" {
    pub fn ipsec_get_policylen(arg1: caddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipsec_dump_policy(
        arg1: caddr_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipsec_strerror() -> *const ::std::os::raw::c_char;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
pub type text_encoding_t = u_int32_t;
pub type fsobj_type_t = u_int32_t;
pub type fsobj_tag_t = u_int32_t;
pub type fsfile_type_t = u_int32_t;
pub type fsvolid_t = u_int32_t;
pub type attrgroup_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrlist {
    pub bitmapcount: u_short,
    pub reserved: u_int16_t,
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_set {
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
pub type attribute_set_t = attribute_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrreference {
    pub attr_dataoffset: i32,
    pub attr_length: u_int32_t,
}
pub type attrreference_t = attrreference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diskextent {
    pub startblock: u_int32_t,
    pub blockcount: u_int32_t,
}
pub type extentrecord = [diskextent; 8usize];
pub type vol_capabilities_set_t = [u_int32_t; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_capabilities_attr {
    pub capabilities: vol_capabilities_set_t,
    pub valid: vol_capabilities_set_t,
}
pub type vol_capabilities_attr_t = vol_capabilities_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_attributes_attr {
    pub validattr: attribute_set_t,
    pub nativeattr: attribute_set_t,
}
pub type vol_attributes_attr_t = vol_attributes_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    pub returnattrs: *mut attrlist,
    pub returnbuffer: *mut ::std::os::raw::c_void,
    pub returnbuffersize: usize,
    pub maxmatches: u_long,
    pub timelimit: timeval,
    pub searchparams1: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams1: usize,
    pub searchparams2: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams2: usize,
    pub searchattrs: attrlist,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    pub ss_union_flags: u32,
    pub ss_union_layer: u32,
    pub ss_fsstate: [u_char; 548usize],
}
extern "C" {
    pub fn clonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2usize],
}
pub const eNoteReapDeprecated: _bindgen_ty_13 = 268435456;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const eNoteExitReparentedDeprecated: _bindgen_ty_14 = 524288;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
extern "C" {
    pub fn kqueue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent,
        nevents: ::std::os::raw::c_int,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent64(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent64_s,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent64_s,
        nevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_start(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_end(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    _unused: [u8; 0],
}
pub type mount_t = *mut mount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    _unused: [u8; 0],
}
pub type vnode_t = *mut vnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [::std::os::raw::c_char; 15usize],
    pub vfc_typenum: ::std::os::raw::c_int,
    pub vfc_refcount: ::std::os::raw::c_int,
    pub vfc_flags: ::std::os::raw::c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsidctl {
    pub vc_vers: ::std::os::raw::c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut ::std::os::raw::c_void,
    pub vc_len: usize,
    pub vc_spare: [u_int32_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsquery {
    pub vq_flags: u_int32_t,
    pub vq_spare: [u_int32_t; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u_int8_t; 768usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct netfs_status {
    pub ns_status: u_int32_t,
    pub ns_mountopts: [::std::os::raw::c_char; 512usize],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: __IncompleteArrayField<u64>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fhandle {
    pub fh_len: ::std::os::raw::c_uint,
    pub fh_data: [::std::os::raw::c_uchar; 128usize],
}
pub type fhandle_t = fhandle;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_BOOT: graftdmg_type_t = 1;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PREBOOT: graftdmg_type_t = 2;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_DOWNLEVEL: graftdmg_type_t = 3;
pub type graftdmg_type_t = u32;
extern "C" {
    pub fn fhopen(arg1: *const fhandle, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatfs(arg1: ::std::os::raw::c_int, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfh(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fhandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfsstat(
        arg1: *mut statfs,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo(arg1: *mut *mut statfs, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo_r_np(
        arg1: *mut *mut statfs,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statfs(arg1: *const ::std::os::raw::c_char, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvfsbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut vfsconf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgrp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ident {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct extern_proc {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1,
    pub p_un: extern_proc__bindgen_ty_1,
    pub p_vmspace: *mut vmspace,
    pub p_sigacts: *mut sigacts,
    pub p_flag: ::std::os::raw::c_int,
    pub p_stat: ::std::os::raw::c_char,
    pub p_pid: pid_t,
    pub p_oppid: pid_t,
    pub p_dupfd: ::std::os::raw::c_int,
    pub user_stack: caddr_t,
    pub exit_thread: *mut ::std::os::raw::c_void,
    pub p_debugger: ::std::os::raw::c_int,
    pub sigwait: boolean_t,
    pub p_estcpu: u_int,
    pub p_cpticks: ::std::os::raw::c_int,
    pub p_pctcpu: fixpt_t,
    pub p_wchan: *mut ::std::os::raw::c_void,
    pub p_wmesg: *mut ::std::os::raw::c_char,
    pub p_swtime: u_int,
    pub p_slptime: u_int,
    pub p_realtimer: itimerval,
    pub p_rtime: timeval,
    pub p_uticks: u_quad_t,
    pub p_sticks: u_quad_t,
    pub p_iticks: u_quad_t,
    pub p_traceflag: ::std::os::raw::c_int,
    pub p_tracep: *mut vnode,
    pub p_siglist: ::std::os::raw::c_int,
    pub p_textvp: *mut vnode,
    pub p_holdcnt: ::std::os::raw::c_int,
    pub p_sigmask: sigset_t,
    pub p_sigignore: sigset_t,
    pub p_sigcatch: sigset_t,
    pub p_priority: u_char,
    pub p_usrpri: u_char,
    pub p_nice: ::std::os::raw::c_char,
    pub p_comm: [::std::os::raw::c_char; 17usize],
    pub p_pgrp: *mut pgrp,
    pub p_addr: *mut user,
    pub p_xstat: u_short,
    pub p_acflag: u_short,
    pub p_ru: *mut rusage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union extern_proc__bindgen_ty_1 {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub p_st1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub __p_starttime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extern_proc__bindgen_ty_1__bindgen_ty_1 {
    pub __p_forw: *mut proc_,
    pub __p_back: *mut proc_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqfilehdr {
    pub dqh_magic: u_int32_t,
    pub dqh_version: u_int32_t,
    pub dqh_maxentries: u_int32_t,
    pub dqh_entrycnt: u_int32_t,
    pub dqh_flags: u_int32_t,
    pub dqh_chktime: u_int32_t,
    pub dqh_btime: u_int32_t,
    pub dqh_itime: u_int32_t,
    pub dqh_string: [::std::os::raw::c_char; 16usize],
    pub dqh_spare: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqblk {
    pub dqb_bhardlimit: u_int64_t,
    pub dqb_bsoftlimit: u_int64_t,
    pub dqb_curbytes: u_int64_t,
    pub dqb_ihardlimit: u_int32_t,
    pub dqb_isoftlimit: u_int32_t,
    pub dqb_curinodes: u_int32_t,
    pub dqb_btime: u_int32_t,
    pub dqb_itime: u_int32_t,
    pub dqb_id: u_int32_t,
    pub dqb_spare: [u_int32_t; 4usize],
}
extern "C" {
    pub fn quotactl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: caddr_t,
    ) -> ::std::os::raw::c_int;
}
pub type rbto_compare_nodes_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type rbto_compare_key_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree_ops_t {
    pub rbto_compare_nodes: rbto_compare_nodes_fn,
    pub rbto_compare_key: rbto_compare_key_fn,
    pub rbto_node_offset: usize,
    pub rbto_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub opaque: [*mut ::std::os::raw::c_void; 3usize],
}
pub type rb_node_t = rb_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree {
    pub opaque: [*mut ::std::os::raw::c_void; 8usize],
}
pub type rb_tree_t = rb_tree;
extern "C" {
    pub fn rb_tree_init(arg1: *mut rb_tree_t, arg2: *const rb_tree_ops_t);
}
extern "C" {
    pub fn rb_tree_insert_node(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_geq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_leq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_remove_node(arg1: *mut rb_tree_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rb_tree_iterate(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_count(arg1: *mut rb_tree_t) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmspace {
    pub dummy: i32,
    pub dummy2: caddr_t,
    pub dummy3: [i32; 5usize],
    pub dummy4: [caddr_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcred {
    pub pc_lock: [::std::os::raw::c_char; 72usize],
    pub pc_ucred: *mut ucred,
    pub p_ruid: uid_t,
    pub p_svuid: uid_t,
    pub p_rgid: gid_t,
    pub p_svgid: gid_t,
    pub p_refcnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ucred {
    pub cr_ref: i32,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo_proc {
    pub kp_proc: extern_proc,
    pub kp_eproc: kinfo_proc_eproc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kinfo_proc_eproc {
    pub e_paddr: *mut proc_,
    pub e_sess: *mut session,
    pub e_pcred: _pcred,
    pub e_ucred: _ucred,
    pub e_vm: vmspace,
    pub e_ppid: pid_t,
    pub e_pgid: pid_t,
    pub e_jobc: ::std::os::raw::c_short,
    pub e_tdev: dev_t,
    pub e_tpgid: pid_t,
    pub e_tsess: *mut session,
    pub e_wmesg: [::std::os::raw::c_char; 8usize],
    pub e_xsize: segsz_t,
    pub e_xrssize: ::std::os::raw::c_short,
    pub e_xccount: ::std::os::raw::c_short,
    pub e_xswrss: ::std::os::raw::c_short,
    pub e_flag: i32,
    pub e_login: [::std::os::raw::c_char; 12usize],
    pub e_spare: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsw_usage {
    pub xsu_total: u_int64_t,
    pub xsu_avail: u_int64_t,
    pub xsu_used: u_int64_t,
    pub xsu_pagesize: u_int32_t,
    pub xsu_encrypted: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadavg {
    pub ldavg: [fixpt_t; 3usize],
    pub fscale: ::std::os::raw::c_long,
}
extern "C" {
    pub static mut averunnable: loadavg;
}
extern "C" {
    pub fn sysctl(
        arg1: *mut ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut ::std::os::raw::c_void,
        arg6: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeb {
    pub time: time_t,
    pub millitm: ::std::os::raw::c_ushort,
    pub timezone: ::std::os::raw::c_short,
    pub dstflag: ::std::os::raw::c_short,
}
extern "C" {
    pub fn ftime(arg1: *mut timeb) -> ::std::os::raw::c_int;
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
pub const NXByteOrder_NX_UnknownByteOrder: NXByteOrder = 0;
pub const NXByteOrder_NX_LittleEndian: NXByteOrder = 1;
pub const NXByteOrder_NX_BigEndian: NXByteOrder = 2;
pub type NXByteOrder = ::std::os::raw::c_uint;
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_uint;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = bool;
pub type objc_zone_t = *mut _malloc_zone_t;
extern "C" {
    pub fn sel_getName(sel: objc::runtime::Sel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_registerName(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sel_isMapped(sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn sel_getUid(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqual: object)
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, class)
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, self)
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performSelector: aSelector)
    }
    unsafe fn performSelector_withObject_(&self, aSelector: objc::runtime::Sel, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object)
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isKindOfClass: aClass)
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMemberOfClass: aClass)
    }
    unsafe fn conformsToProtocol_(&self, aProtocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, conformsToProtocol: aProtocol)
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, respondsToSelector: aSelector)
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retain)
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, release)
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autorelease)
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainCount)
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zone)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclass)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copy)
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopy)
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodForSelector: aSelector)
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesNotRecognizeSelector: aSelector)
    }
    unsafe fn forwardingTargetForSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardingTargetForSelector: aSelector)
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: anInvocation)
    }
    unsafe fn methodSignatureForSelector_(&self, aSelector: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: aSelector)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), load)
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), initialize)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), new)
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), allocWithZone: zone)
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), alloc)
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), copyWithZone: zone)
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), mutableCopyWithZone: zone)
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instancesRespondToSelector: aSelector)
    }
    unsafe fn conformsToProtocol_(protocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), conformsToProtocol: protocol)
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instanceMethodForSelector: aSelector)
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            instanceMethodSignatureForSelector: aSelector
        )
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), isSubclassOfClass: aClass)
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveClassMethod: sel)
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveInstanceMethod: sel)
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), hash)
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), superclass)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), class)
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), description)
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method {
    _unused: [u8; 0],
}
pub type Method = *mut objc_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_ivar {
    _unused: [u8; 0],
}
pub type Ivar = *mut objc_ivar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_category {
    _unused: [u8; 0],
}
pub type Category = *mut objc_category;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property {
    _unused: [u8; 0],
}
pub type objc_property_t = *mut objc_property;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Protocol(pub id);
impl std::ops::Deref for Protocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Protocol {}
impl Protocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Protocol), alloc) })
    }
}
impl IProtocol for Protocol {}
pub trait IProtocol: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_description {
    pub name: objc::runtime::Sel,
    pub types: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property_attribute_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn object_copy(obj: id, size: usize) -> id;
}
extern "C" {
    pub fn object_dispose(obj: id) -> id;
}
extern "C" {
    pub fn object_getClass(obj: id) -> Class;
}
extern "C" {
    pub fn object_setClass(obj: id, cls: Class) -> Class;
}
extern "C" {
    pub fn object_isClass(obj: id) -> BOOL;
}
extern "C" {
    pub fn object_getIvar(obj: id, ivar: Ivar) -> id;
}
extern "C" {
    pub fn object_setIvar(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setIvarWithStrongDefault(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_setInstanceVariableWithStrongDefault(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_getInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        outValue: *mut *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn objc_getClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getMetaClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_lookUpClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getRequiredClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getClassList(
        buffer: Class,
        bufferCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_copyClassList(outCount: *mut ::std::os::raw::c_uint) -> Class;
}
extern "C" {
    pub fn objc_enumerateClasses(
        image: *const ::std::os::raw::c_void,
        namePrefix: *const ::std::os::raw::c_char,
        conformingTo: Protocol,
        subclassing: Class,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn class_getName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_isMetaClass(cls: Class) -> BOOL;
}
extern "C" {
    pub fn class_getSuperclass(cls: Class) -> Class;
}
extern "C" {
    pub fn class_setSuperclass(cls: Class, newSuper: Class) -> Class;
}
extern "C" {
    pub fn class_getVersion(cls: Class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_setVersion(cls: Class, version: ::std::os::raw::c_int);
}
extern "C" {
    pub fn class_getInstanceSize(cls: Class) -> usize;
}
extern "C" {
    pub fn class_getInstanceVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_getClassVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_copyIvarList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Ivar;
}
extern "C" {
    pub fn class_getInstanceMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getClassMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getMethodImplementation(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_getMethodImplementation_stret(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToSelector(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn class_copyMethodList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Method;
}
extern "C" {
    pub fn class_conformsToProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_copyProtocolList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn class_getProperty(cls: Class, name: *const ::std::os::raw::c_char) -> objc_property_t;
}
extern "C" {
    pub fn class_copyPropertyList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn class_getIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_getWeakIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_addMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> IMP;
}
extern "C" {
    pub fn class_addIvar(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        size: usize,
        alignment: u8,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_addProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_addProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn class_setIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn class_setWeakIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn objc_getFutureClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn class_createInstance(cls: Class, extraBytes: usize) -> id;
}
extern "C" {
    pub fn objc_constructInstance(cls: Class, bytes: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_destructInstance(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_allocateClassPair(
        superclass: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_registerClassPair(cls: Class);
}
extern "C" {
    pub fn objc_duplicateClass(
        original: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_disposeClassPair(cls: Class);
}
extern "C" {
    pub fn method_getName(m: Method) -> objc::runtime::Sel;
}
extern "C" {
    pub fn method_getImplementation(m: Method) -> IMP;
}
extern "C" {
    pub fn method_getTypeEncoding(m: Method) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getNumberOfArguments(m: Method) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn method_copyReturnType(m: Method) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_copyArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getReturnType(m: Method, dst: *mut ::std::os::raw::c_char, dst_len: usize);
}
extern "C" {
    pub fn method_getArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
        dst_len: usize,
    );
}
extern "C" {
    pub fn method_getDescription(m: Method) -> *mut objc_method_description;
}
extern "C" {
    pub fn method_setImplementation(m: Method, imp: IMP) -> IMP;
}
extern "C" {
    pub fn method_exchangeImplementations(m1: Method, m2: Method);
}
extern "C" {
    pub fn ivar_getName(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getTypeEncoding(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getOffset(v: Ivar) -> isize;
}
extern "C" {
    pub fn property_getName(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_getAttributes(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_copyAttributeList(
        property: objc_property_t,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_attribute_t;
}
extern "C" {
    pub fn property_copyAttributeValue(
        property: objc_property_t,
        attributeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_getProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_copyProtocolList(outCount: *mut ::std::os::raw::c_uint) -> *mut Protocol;
}
extern "C" {
    pub fn protocol_conformsToProtocol(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_isEqual(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_getName(proto: Protocol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_getMethodDescription(
        proto: Protocol,
        aSel: objc::runtime::Sel,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    ) -> objc_method_description;
}
extern "C" {
    pub fn protocol_copyMethodDescriptionList(
        proto: Protocol,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_method_description;
}
extern "C" {
    pub fn protocol_getProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList2(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyProtocolList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn objc_allocateProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_registerProtocol(proto: Protocol);
}
extern "C" {
    pub fn protocol_addMethodDescription(
        proto: Protocol,
        name: objc::runtime::Sel,
        types: *const ::std::os::raw::c_char,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    );
}
extern "C" {
    pub fn protocol_addProtocol(proto: Protocol, addition: Protocol);
}
extern "C" {
    pub fn protocol_addProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    );
}
extern "C" {
    pub fn objc_copyImageNames(
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_getImageName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_copyClassNamesForImage(
        image: *const ::std::os::raw::c_char,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_isEqual(lhs: objc::runtime::Sel, rhs: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn objc_enumerationMutation(obj: id);
}
extern "C" {
    pub fn objc_setEnumerationMutationHandler(
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: id)>,
    );
}
extern "C" {
    pub fn objc_setForwardHandler(
        fwd: *mut ::std::os::raw::c_void,
        fwd_stret: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn imp_implementationWithBlock(block: id) -> IMP;
}
extern "C" {
    pub fn imp_getBlock(anImp: IMP) -> id;
}
extern "C" {
    pub fn imp_removeBlock(anImp: IMP) -> BOOL;
}
extern "C" {
    pub fn objc_loadWeak(location: *mut id) -> id;
}
extern "C" {
    pub fn objc_storeWeak(location: *mut id, obj: id) -> id;
}
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_ASSIGN: objc_AssociationPolicy = 0;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN_NONATOMIC: objc_AssociationPolicy = 1;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY_NONATOMIC: objc_AssociationPolicy = 3;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN: objc_AssociationPolicy = 769;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY: objc_AssociationPolicy = 771;
pub type objc_AssociationPolicy = usize;
extern "C" {
    pub fn objc_setAssociatedObject(
        object: id,
        key: *const ::std::os::raw::c_void,
        value: id,
        policy: objc_AssociationPolicy,
    );
}
extern "C" {
    pub fn objc_getAssociatedObject(object: id, key: *const ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_removeAssociatedObjects(object: id);
}
pub type objc_hook_getImageName = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, outImageName: *mut *const ::std::os::raw::c_char) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getImageName(
        newValue: objc_hook_getImageName,
        outOldValue: *mut objc_hook_getImageName,
    );
}
pub type objc_hook_getClass = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char, outClass: Class) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getClass(
        newValue: objc_hook_getClass,
        outOldValue: *mut objc_hook_getClass,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header {
    _unused: [u8; 0],
}
pub type objc_func_loadImage =
    ::std::option::Option<unsafe extern "C" fn(header: *const mach_header)>;
extern "C" {
    pub fn objc_addLoadImageFunc(func: objc_func_loadImage);
}
pub type objc_hook_lazyClassNamer =
    ::std::option::Option<unsafe extern "C" fn(cls: Class) -> *const ::std::os::raw::c_char>;
extern "C" {
    pub fn objc_setHook_lazyClassNamer(
        newValue: objc_hook_lazyClassNamer,
        oldOutValue: *mut objc_hook_lazyClassNamer,
    );
}
pub type _objc_swiftMetadataInitializer = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, arg: *mut ::std::os::raw::c_void) -> Class,
>;
extern "C" {
    pub fn _objc_realizeClassFromSwift(
        cls: Class,
        previously: *mut ::std::os::raw::c_void,
    ) -> Class;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_list {
    _unused: [u8; 0],
}
extern "C" {
    pub fn class_lookupMethod(cls: Class, sel: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToMethod(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn _objc_flush_caches(cls: Class);
}
extern "C" {
    pub fn object_copyFromZone(anObject: id, nBytes: usize, z: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn class_createInstanceFromZone(
        arg1: Class,
        idxIvars: usize,
        z: *mut ::std::os::raw::c_void,
    ) -> id;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_super {
    pub receiver: id,
    pub super_class: Class,
}
extern "C" {
    pub fn objc_msgSend();
}
extern "C" {
    pub fn objc_msgSendSuper();
}
extern "C" {
    pub fn objc_msgSend_stret();
}
extern "C" {
    pub fn objc_msgSendSuper_stret();
}
extern "C" {
    pub fn method_invoke();
}
extern "C" {
    pub fn method_invoke_stret();
}
extern "C" {
    pub fn _objc_msgForward();
}
extern "C" {
    pub fn _objc_msgForward_stret();
}
pub const OBJC_RATIO_COLLECTION: _bindgen_ty_15 = 0;
pub const OBJC_GENERATIONAL_COLLECTION: _bindgen_ty_15 = 1;
pub const OBJC_FULL_COLLECTION: _bindgen_ty_15 = 2;
pub const OBJC_EXHAUSTIVE_COLLECTION: _bindgen_ty_15 = 3;
pub const OBJC_COLLECT_IF_NEEDED: _bindgen_ty_15 = 8;
pub const OBJC_WAIT_UNTIL_DONE: _bindgen_ty_15 = 16;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const OBJC_CLEAR_RESIDENT_STACK: _bindgen_ty_16 = 1;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub type objc_exception_preprocessor =
    ::std::option::Option<unsafe extern "C" fn(exception: id) -> id>;
pub type objc_exception_matcher = ::std::option::Option<
    unsafe extern "C" fn(catch_type: Class, exception: id) -> ::std::os::raw::c_int,
>;
pub type objc_uncaught_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(exception: id)>;
pub type objc_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(unused: id, context: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn objc_exception_throw(exception: id) -> !;
}
extern "C" {
    pub fn objc_exception_rethrow() -> !;
}
extern "C" {
    pub fn objc_begin_catch(exc_buf: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_end_catch();
}
extern "C" {
    pub fn objc_terminate() -> !;
}
extern "C" {
    pub fn objc_setExceptionPreprocessor(
        fn_: objc_exception_preprocessor,
    ) -> objc_exception_preprocessor;
}
extern "C" {
    pub fn objc_setExceptionMatcher(fn_: objc_exception_matcher) -> objc_exception_matcher;
}
extern "C" {
    pub fn objc_setUncaughtExceptionHandler(
        fn_: objc_uncaught_exception_handler,
    ) -> objc_uncaught_exception_handler;
}
extern "C" {
    pub fn objc_addExceptionHandler(
        fn_: objc_exception_handler,
        context: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn objc_removeExceptionHandler(token: usize);
}
extern "C" {
    pub fn objc_sync_enter(obj: id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_sync_exit(obj: id) -> ::std::os::raw::c_int;
}
pub const OBJC_SYNC_SUCCESS: _bindgen_ty_17 = 0;
pub const OBJC_SYNC_NOT_OWNING_THREAD_ERROR: _bindgen_ty_17 = -1;
pub type _bindgen_ty_17 = ::std::os::raw::c_int;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_object(pub id);
impl std::ops::Deref for OS_object {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_object {}
impl OS_object {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_object), alloc) })
    }
}
impl INSObject for OS_object {}
impl PNSObject for OS_object {}
impl From<OS_object> for NSObject {
    fn from(child: OS_object) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_object {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_object, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_object)) };
        if is_kind_of {
            Ok(OS_object(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_object")
        }
    }
}
impl IOS_object for OS_object {}
pub trait IOS_object: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup(pub id);
impl std::ops::Deref for OS_os_workgroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup {}
impl OS_os_workgroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup), alloc) })
    }
}
impl IOS_object for OS_os_workgroup {}
impl From<OS_os_workgroup> for OS_object {
    fn from(child: OS_os_workgroup) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl INSObject for OS_os_workgroup {}
impl PNSObject for OS_os_workgroup {}
impl From<OS_os_workgroup> for NSObject {
    fn from(child: OS_os_workgroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl IOS_os_workgroup for OS_os_workgroup {}
pub trait IOS_os_workgroup: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_t = OS_os_workgroup;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: OS_os_workgroup,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: OS_os_workgroup,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: OS_os_workgroup,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(wg: OS_os_workgroup, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: OS_os_workgroup,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: OS_os_workgroup,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: OS_os_workgroup);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: OS_os_workgroup) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: OS_os_workgroup,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_interval: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_interval(pub id);
impl std::ops::Deref for OS_os_workgroup_interval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_interval {}
impl OS_os_workgroup_interval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_interval), alloc) })
    }
}
impl POS_os_workgroup_interval for OS_os_workgroup_interval {}
impl IOS_os_workgroup for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_interval) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_object for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_object {
    fn from(child: OS_os_workgroup_interval) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl INSObject for OS_os_workgroup_interval {}
impl PNSObject for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for NSObject {
    fn from(child: OS_os_workgroup_interval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_os_workgroup_interval for OS_os_workgroup_interval {}
pub trait IOS_os_workgroup_interval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_interval_t = OS_os_workgroup;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: OS_os_workgroup,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: OS_os_workgroup,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: OS_os_workgroup,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_parallel: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_parallel(pub id);
impl std::ops::Deref for OS_os_workgroup_parallel {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_parallel {}
impl OS_os_workgroup_parallel {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_parallel), alloc) })
    }
}
impl POS_os_workgroup_parallel for OS_os_workgroup_parallel {}
impl IOS_os_workgroup for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_parallel) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_object for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_object {
    fn from(child: OS_os_workgroup_parallel) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl INSObject for OS_os_workgroup_parallel {}
impl PNSObject for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for NSObject {
    fn from(child: OS_os_workgroup_parallel) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_os_workgroup_parallel for OS_os_workgroup_parallel {}
pub trait IOS_os_workgroup_parallel: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_parallel_t = OS_os_workgroup;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_18 = 18446744073709551614;
pub type _bindgen_ty_18 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub trait POS_dispatch_object: Sized + std::ops::Deref {}
pub type dispatch_object_t = NSObject;
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub use self::qos_class_t as dispatch_qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: NSObject);
}
extern "C" {
    pub fn dispatch_release(object: NSObject);
}
extern "C" {
    pub fn dispatch_get_context(object: NSObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(object: NSObject, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_set_finalizer_f(object: NSObject, finalizer: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_activate(object: NSObject);
}
extern "C" {
    pub fn dispatch_suspend(object: NSObject);
}
extern "C" {
    pub fn dispatch_resume(object: NSObject);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(object: NSObject, message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dispatch_debugv(object: NSObject, message: *const ::std::os::raw::c_char, ap: va_list);
}
pub trait POS_dispatch_queue: Sized + std::ops::Deref {}
pub type dispatch_queue_t = NSObject;
pub trait POS_dispatch_queue_global: Sized + std::ops::Deref {}
pub type dispatch_queue_global_t = NSObject;
pub trait POS_dispatch_queue_serial: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_t = NSObject;
pub trait POS_dispatch_queue_main: Sized + std::ops::Deref {}
pub type dispatch_queue_main_t = NSObject;
pub trait POS_dispatch_queue_concurrent: Sized + std::ops::Deref {}
pub type dispatch_queue_concurrent_t = NSObject;
extern "C" {
    pub fn dispatch_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(iterations: usize, queue: NSObject, block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, iteration: usize),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub trait POS_dispatch_queue_attr: Sized + std::ops::Deref {}
pub type dispatch_queue_attr_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(attr: NSObject) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
        target: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(queue: NSObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: NSObject,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: NSObject, queue: NSObject);
}
extern "C" {
    pub fn dispatch_main() -> !;
}
extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: NSObject);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: NSObject);
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: NSObject);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub trait POS_dispatch_source: Sized + std::ops::Deref {}
pub type dispatch_source_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: NSObject,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_cancel(source: NSObject);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: NSObject) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: NSObject, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: NSObject,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
pub trait POS_dispatch_group: Sized + std::ops::Deref {}
pub type dispatch_group_t = NSObject;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(group: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: NSObject);
}
extern "C" {
    pub fn dispatch_group_leave(group: NSObject);
}
pub trait POS_dispatch_semaphore: Sized + std::ops::Deref {}
pub type dispatch_semaphore_t = NSObject;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(dsema: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: NSObject) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub trait POS_dispatch_data: Sized + std::ops::Deref {}
pub type dispatch_data_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_data_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: NSObject,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: NSObject,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(data1: NSObject, data2: NSObject) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: NSObject,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(data: NSObject, applier: dispatch_data_applier_t) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: NSObject,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: NSObject,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub trait POS_dispatch_io: Sized + std::ops::Deref {}
pub type dispatch_io_t = NSObject;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: NSObject,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: NSObject,
        offset: off_t,
        length: usize,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: NSObject,
        offset: off_t,
        data: NSObject,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(channel: NSObject, flags: dispatch_io_close_flags_t);
}
extern "C" {
    pub fn dispatch_io_barrier(channel: NSObject, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: NSObject) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: NSObject, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: NSObject, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: NSObject,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub trait POS_dispatch_workloop: Sized + std::ops::Deref {}
pub type dispatch_workloop_t = NSObject;
extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(workloop: NSObject, workgroup: OS_os_workgroup);
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult_kCFCompareLessThan: CFComparisonResult = -1;
pub const CFComparisonResult_kCFCompareEqualTo: CFComparisonResult = 0;
pub const CFComparisonResult_kCFCompareGreaterThan: CFComparisonResult = 1;
pub type CFComparisonResult = CFIndex;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDrop:
    CFNotificationSuspensionBehavior = 1;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorCoalesce:
    CFNotificationSuspensionBehavior = 2;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorHold:
    CFNotificationSuspensionBehavior = 3;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDeliverImmediately:
    CFNotificationSuspensionBehavior = 4;
pub type CFNotificationSuspensionBehavior = CFIndex;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_19 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = CFOptionFlags;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionUnknown: CFLocaleLanguageDirection =
    0;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionLeftToRight:
    CFLocaleLanguageDirection = 1;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionRightToLeft:
    CFLocaleLanguageDirection = 2;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionTopToBottom:
    CFLocaleLanguageDirection = 3;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionBottomToTop:
    CFLocaleLanguageDirection = 4;
pub type CFLocaleLanguageDirection = CFIndex;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
pub const CFGregorianUnitFlags_kCFGregorianUnitsYears: CFGregorianUnitFlags = 1;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMonths: CFGregorianUnitFlags = 2;
pub const CFGregorianUnitFlags_kCFGregorianUnitsDays: CFGregorianUnitFlags = 4;
pub const CFGregorianUnitFlags_kCFGregorianUnitsHours: CFGregorianUnitFlags = 8;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMinutes: CFGregorianUnitFlags = 16;
pub const CFGregorianUnitFlags_kCFGregorianUnitsSeconds: CFGregorianUnitFlags = 32;
pub const CFGregorianUnitFlags_kCFGregorianAllUnits: CFGregorianUnitFlags = 16777215;
pub type CFGregorianUnitFlags = CFOptionFlags;
extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub const CFDataSearchFlags_kCFDataSearchBackwards: CFDataSearchFlags = 1;
pub const CFDataSearchFlags_kCFDataSearchAnchored: CFDataSearchFlags = 2;
pub type CFDataSearchFlags = CFOptionFlags;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetControl: CFCharacterSetPredefinedSet = 1;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespace: CFCharacterSetPredefinedSet = 2;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespaceAndNewline:
    CFCharacterSetPredefinedSet = 3;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecimalDigit: CFCharacterSetPredefinedSet = 4;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLetter: CFCharacterSetPredefinedSet = 5;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLowercaseLetter: CFCharacterSetPredefinedSet =
    6;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetUppercaseLetter: CFCharacterSetPredefinedSet =
    7;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNonBase: CFCharacterSetPredefinedSet = 8;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecomposable: CFCharacterSetPredefinedSet = 9;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetAlphaNumeric: CFCharacterSetPredefinedSet = 10;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetPunctuation: CFCharacterSetPredefinedSet = 11;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetCapitalizedLetter:
    CFCharacterSetPredefinedSet = 13;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetSymbol: CFCharacterSetPredefinedSet = 14;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNewline: CFCharacterSetPredefinedSet = 15;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetIllegal: CFCharacterSetPredefinedSet = 12;
pub type CFCharacterSetPredefinedSet = CFIndex;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings_kCFStringEncodingMacRoman: CFStringBuiltInEncodings = 0;
pub const CFStringBuiltInEncodings_kCFStringEncodingWindowsLatin1: CFStringBuiltInEncodings = 1280;
pub const CFStringBuiltInEncodings_kCFStringEncodingISOLatin1: CFStringBuiltInEncodings = 513;
pub const CFStringBuiltInEncodings_kCFStringEncodingNextStepLatin: CFStringBuiltInEncodings = 2817;
pub const CFStringBuiltInEncodings_kCFStringEncodingASCII: CFStringBuiltInEncodings = 1536;
pub const CFStringBuiltInEncodings_kCFStringEncodingUnicode: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF8: CFStringBuiltInEncodings = 134217984;
pub const CFStringBuiltInEncodings_kCFStringEncodingNonLossyASCII: CFStringBuiltInEncodings = 3071;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16BE: CFStringBuiltInEncodings = 268435712;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16LE: CFStringBuiltInEncodings = 335544576;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32: CFStringBuiltInEncodings = 201326848;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32BE: CFStringBuiltInEncodings = 402653440;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32LE: CFStringBuiltInEncodings = 469762304;
pub type CFStringBuiltInEncodings = CFStringEncoding;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: va_list,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub const CFStringCompareFlags_kCFCompareCaseInsensitive: CFStringCompareFlags = 1;
pub const CFStringCompareFlags_kCFCompareBackwards: CFStringCompareFlags = 4;
pub const CFStringCompareFlags_kCFCompareAnchored: CFStringCompareFlags = 8;
pub const CFStringCompareFlags_kCFCompareNonliteral: CFStringCompareFlags = 16;
pub const CFStringCompareFlags_kCFCompareLocalized: CFStringCompareFlags = 32;
pub const CFStringCompareFlags_kCFCompareNumerically: CFStringCompareFlags = 64;
pub const CFStringCompareFlags_kCFCompareDiacriticInsensitive: CFStringCompareFlags = 128;
pub const CFStringCompareFlags_kCFCompareWidthInsensitive: CFStringCompareFlags = 256;
pub const CFStringCompareFlags_kCFCompareForcedOrdering: CFStringCompareFlags = 512;
pub type CFStringCompareFlags = CFOptionFlags;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    );
}
extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub const CFStringNormalizationForm_kCFStringNormalizationFormD: CFStringNormalizationForm = 0;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKD: CFStringNormalizationForm = 1;
pub const CFStringNormalizationForm_kCFStringNormalizationFormC: CFStringNormalizationForm = 2;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKC: CFStringNormalizationForm = 3;
pub type CFStringNormalizationForm = CFIndex;
extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneResetSystem();
}
extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleStandard: CFTimeZoneNameStyle = 0;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortStandard: CFTimeZoneNameStyle = 1;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleDaylightSaving: CFTimeZoneNameStyle = 2;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortDaylightSaving: CFTimeZoneNameStyle = 3;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleGeneric: CFTimeZoneNameStyle = 4;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortGeneric: CFTimeZoneNameStyle = 5;
pub type CFTimeZoneNameStyle = CFIndex;
extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub const CFCalendarUnit_kCFCalendarUnitEra: CFCalendarUnit = 2;
pub const CFCalendarUnit_kCFCalendarUnitYear: CFCalendarUnit = 4;
pub const CFCalendarUnit_kCFCalendarUnitMonth: CFCalendarUnit = 8;
pub const CFCalendarUnit_kCFCalendarUnitDay: CFCalendarUnit = 16;
pub const CFCalendarUnit_kCFCalendarUnitHour: CFCalendarUnit = 32;
pub const CFCalendarUnit_kCFCalendarUnitMinute: CFCalendarUnit = 64;
pub const CFCalendarUnit_kCFCalendarUnitSecond: CFCalendarUnit = 128;
pub const CFCalendarUnit_kCFCalendarUnitWeek: CFCalendarUnit = 256;
pub const CFCalendarUnit_kCFCalendarUnitWeekday: CFCalendarUnit = 512;
pub const CFCalendarUnit_kCFCalendarUnitWeekdayOrdinal: CFCalendarUnit = 1024;
pub const CFCalendarUnit_kCFCalendarUnitQuarter: CFCalendarUnit = 2048;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfMonth: CFCalendarUnit = 4096;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfYear: CFCalendarUnit = 8192;
pub const CFCalendarUnit_kCFCalendarUnitYearForWeekOfYear: CFCalendarUnit = 16384;
pub type CFCalendarUnit = CFOptionFlags;
extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = CFOptionFlags;
extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGVector {
    pub dx: CGFloat,
    pub dy: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
pub const CGRectEdge_CGRectMinXEdge: CGRectEdge = 0;
pub const CGRectEdge_CGRectMinYEdge: CGRectEdge = 1;
pub const CGRectEdge_CGRectMaxXEdge: CGRectEdge = 2;
pub const CGRectEdge_CGRectMaxYEdge: CGRectEdge = 3;
pub type CGRectEdge = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransform {
    pub a: CGFloat,
    pub b: CGFloat,
    pub c: CGFloat,
    pub d: CGFloat,
    pub tx: CGFloat,
    pub ty: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransformComponents {
    pub scale: CGSize,
    pub horizontalShear: CGFloat,
    pub rotation: CGFloat,
    pub translation: CGVector,
}
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub const CFDateFormatterStyle_kCFDateFormatterNoStyle: CFDateFormatterStyle = 0;
pub const CFDateFormatterStyle_kCFDateFormatterShortStyle: CFDateFormatterStyle = 1;
pub const CFDateFormatterStyle_kCFDateFormatterMediumStyle: CFDateFormatterStyle = 2;
pub const CFDateFormatterStyle_kCFDateFormatterLongStyle: CFDateFormatterStyle = 3;
pub const CFDateFormatterStyle_kCFDateFormatterFullStyle: CFDateFormatterStyle = 4;
pub type CFDateFormatterStyle = CFIndex;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithYear: CFISO8601DateFormatOptions = 1;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithMonth: CFISO8601DateFormatOptions = 2;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithWeekOfYear:
    CFISO8601DateFormatOptions = 4;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDay: CFISO8601DateFormatOptions = 16;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTime: CFISO8601DateFormatOptions = 32;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTimeZone: CFISO8601DateFormatOptions =
    64;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithSpaceBetweenDateAndTime:
    CFISO8601DateFormatOptions = 128;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDashSeparatorInDate:
    CFISO8601DateFormatOptions = 256;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTime:
    CFISO8601DateFormatOptions = 512;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTimeZone:
    CFISO8601DateFormatOptions = 1024;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFractionalSeconds:
    CFISO8601DateFormatOptions = 2048;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullDate: CFISO8601DateFormatOptions =
    275;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullTime: CFISO8601DateFormatOptions =
    1632;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithInternetDateTime:
    CFISO8601DateFormatOptions = 1907;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub const CFNumberType_kCFNumberSInt8Type: CFNumberType = 1;
pub const CFNumberType_kCFNumberSInt16Type: CFNumberType = 2;
pub const CFNumberType_kCFNumberSInt32Type: CFNumberType = 3;
pub const CFNumberType_kCFNumberSInt64Type: CFNumberType = 4;
pub const CFNumberType_kCFNumberFloat32Type: CFNumberType = 5;
pub const CFNumberType_kCFNumberFloat64Type: CFNumberType = 6;
pub const CFNumberType_kCFNumberCharType: CFNumberType = 7;
pub const CFNumberType_kCFNumberShortType: CFNumberType = 8;
pub const CFNumberType_kCFNumberIntType: CFNumberType = 9;
pub const CFNumberType_kCFNumberLongType: CFNumberType = 10;
pub const CFNumberType_kCFNumberLongLongType: CFNumberType = 11;
pub const CFNumberType_kCFNumberFloatType: CFNumberType = 12;
pub const CFNumberType_kCFNumberDoubleType: CFNumberType = 13;
pub const CFNumberType_kCFNumberCFIndexType: CFNumberType = 14;
pub const CFNumberType_kCFNumberNSIntegerType: CFNumberType = 15;
pub const CFNumberType_kCFNumberCGFloatType: CFNumberType = 16;
pub const CFNumberType_kCFNumberMaxType: CFNumberType = 16;
pub type CFNumberType = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub const CFNumberFormatterStyle_kCFNumberFormatterNoStyle: CFNumberFormatterStyle = 0;
pub const CFNumberFormatterStyle_kCFNumberFormatterDecimalStyle: CFNumberFormatterStyle = 1;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyStyle: CFNumberFormatterStyle = 2;
pub const CFNumberFormatterStyle_kCFNumberFormatterPercentStyle: CFNumberFormatterStyle = 3;
pub const CFNumberFormatterStyle_kCFNumberFormatterScientificStyle: CFNumberFormatterStyle = 4;
pub const CFNumberFormatterStyle_kCFNumberFormatterSpellOutStyle: CFNumberFormatterStyle = 5;
pub const CFNumberFormatterStyle_kCFNumberFormatterOrdinalStyle: CFNumberFormatterStyle = 6;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyISOCodeStyle: CFNumberFormatterStyle = 8;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyPluralStyle: CFNumberFormatterStyle = 9;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyAccountingStyle: CFNumberFormatterStyle =
    10;
pub type CFNumberFormatterStyle = CFIndex;
extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const CFNumberFormatterOptionFlags_kCFNumberFormatterParseIntegersOnly:
    CFNumberFormatterOptionFlags = 1;
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundCeiling:
    CFNumberFormatterRoundingMode = 0;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundFloor:
    CFNumberFormatterRoundingMode = 1;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundDown: CFNumberFormatterRoundingMode =
    2;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundUp: CFNumberFormatterRoundingMode =
    3;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfEven:
    CFNumberFormatterRoundingMode = 4;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfDown:
    CFNumberFormatterRoundingMode = 5;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfUp:
    CFNumberFormatterRoundingMode = 6;
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforePrefix:
    CFNumberFormatterPadPosition = 0;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterPrefix:
    CFNumberFormatterPadPosition = 1;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforeSuffix:
    CFNumberFormatterPadPosition = 2;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterSuffix:
    CFNumberFormatterPadPosition = 3;
pub type CFNumberFormatterPadPosition = CFIndex;
extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub const CFURLPathStyle_kCFURLPOSIXPathStyle: CFURLPathStyle = 0;
pub const CFURLPathStyle_kCFURLHFSPathStyle: CFURLPathStyle = 1;
pub const CFURLPathStyle_kCFURLWindowsPathStyle: CFURLPathStyle = 2;
pub type CFURLPathStyle = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub const CFURLComponentType_kCFURLComponentScheme: CFURLComponentType = 1;
pub const CFURLComponentType_kCFURLComponentNetLocation: CFURLComponentType = 2;
pub const CFURLComponentType_kCFURLComponentPath: CFURLComponentType = 3;
pub const CFURLComponentType_kCFURLComponentResourceSpecifier: CFURLComponentType = 4;
pub const CFURLComponentType_kCFURLComponentUser: CFURLComponentType = 5;
pub const CFURLComponentType_kCFURLComponentPassword: CFURLComponentType = 6;
pub const CFURLComponentType_kCFURLComponentUserInfo: CFURLComponentType = 7;
pub const CFURLComponentType_kCFURLComponentHost: CFURLComponentType = 8;
pub const CFURLComponentType_kCFURLComponentPort: CFURLComponentType = 9;
pub const CFURLComponentType_kCFURLComponentParameterString: CFURLComponentType = 10;
pub const CFURLComponentType_kCFURLComponentQuery: CFURLComponentType = 11;
pub const CFURLComponentType_kCFURLComponentFragment: CFURLComponentType = 12;
pub type CFURLComponentType = CFIndex;
extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationMinimalBookmarkMask:
    CFURLBookmarkCreationOptions = 512;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSuitableForBookmarkFile:
    CFURLBookmarkCreationOptions = 1024;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithSecurityScope:
    CFURLBookmarkCreationOptions = 2048;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    CFURLBookmarkCreationOptions = 4096;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithoutImplicitSecurityScope:
    CFURLBookmarkCreationOptions = 536870912;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationPreferFileIDResolutionMask:
    CFURLBookmarkCreationOptions = 256;
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithSecurityScope:
    CFURLBookmarkResolutionOptions = 1024;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutImplicitStartAccessing:
    CFURLBookmarkResolutionOptions = 32768;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub const CFRunLoopRunResult_kCFRunLoopRunFinished: CFRunLoopRunResult = 1;
pub const CFRunLoopRunResult_kCFRunLoopRunStopped: CFRunLoopRunResult = 2;
pub const CFRunLoopRunResult_kCFRunLoopRunTimedOut: CFRunLoopRunResult = 3;
pub const CFRunLoopRunResult_kCFRunLoopRunHandledSource: CFRunLoopRunResult = 4;
pub type CFRunLoopRunResult = SInt32;
pub const CFRunLoopActivity_kCFRunLoopEntry: CFRunLoopActivity = 1;
pub const CFRunLoopActivity_kCFRunLoopBeforeTimers: CFRunLoopActivity = 2;
pub const CFRunLoopActivity_kCFRunLoopBeforeSources: CFRunLoopActivity = 4;
pub const CFRunLoopActivity_kCFRunLoopBeforeWaiting: CFRunLoopActivity = 32;
pub const CFRunLoopActivity_kCFRunLoopAfterWaiting: CFRunLoopActivity = 64;
pub const CFRunLoopActivity_kCFRunLoopExit: CFRunLoopActivity = 128;
pub const CFRunLoopActivity_kCFRunLoopAllActivities: CFRunLoopActivity = 268435455;
pub type CFRunLoopActivity = CFOptionFlags;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub const CFSocketError_kCFSocketSuccess: CFSocketError = 0;
pub const CFSocketError_kCFSocketError: CFSocketError = -1;
pub const CFSocketError_kCFSocketTimeout: CFSocketError = -2;
pub type CFSocketError = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
pub const CFSocketCallBackType_kCFSocketNoCallBack: CFSocketCallBackType = 0;
pub const CFSocketCallBackType_kCFSocketReadCallBack: CFSocketCallBackType = 1;
pub const CFSocketCallBackType_kCFSocketAcceptCallBack: CFSocketCallBackType = 2;
pub const CFSocketCallBackType_kCFSocketDataCallBack: CFSocketCallBackType = 3;
pub const CFSocketCallBackType_kCFSocketConnectCallBack: CFSocketCallBackType = 4;
pub const CFSocketCallBackType_kCFSocketWriteCallBack: CFSocketCallBackType = 8;
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketAutomaticallyReenableReadCallBack: _bindgen_ty_21 = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: _bindgen_ty_21 = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: _bindgen_ty_21 = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: _bindgen_ty_21 = 8;
pub const kCFSocketLeaveErrors: _bindgen_ty_21 = 64;
pub const kCFSocketCloseOnInvalidate: _bindgen_ty_21 = 128;
pub type _bindgen_ty_21 = CFOptionFlags;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
pub type CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus_kCFStreamStatusNotOpen: CFStreamStatus = 0;
pub const CFStreamStatus_kCFStreamStatusOpening: CFStreamStatus = 1;
pub const CFStreamStatus_kCFStreamStatusOpen: CFStreamStatus = 2;
pub const CFStreamStatus_kCFStreamStatusReading: CFStreamStatus = 3;
pub const CFStreamStatus_kCFStreamStatusWriting: CFStreamStatus = 4;
pub const CFStreamStatus_kCFStreamStatusAtEnd: CFStreamStatus = 5;
pub const CFStreamStatus_kCFStreamStatusClosed: CFStreamStatus = 6;
pub const CFStreamStatus_kCFStreamStatusError: CFStreamStatus = 7;
pub type CFStreamStatus = CFIndex;
pub const CFStreamEventType_kCFStreamEventNone: CFStreamEventType = 0;
pub const CFStreamEventType_kCFStreamEventOpenCompleted: CFStreamEventType = 1;
pub const CFStreamEventType_kCFStreamEventHasBytesAvailable: CFStreamEventType = 2;
pub const CFStreamEventType_kCFStreamEventCanAcceptBytes: CFStreamEventType = 4;
pub const CFStreamEventType_kCFStreamEventErrorOccurred: CFStreamEventType = 8;
pub const CFStreamEventType_kCFStreamEventEndEncountered: CFStreamEventType = 16;
pub type CFStreamEventType = CFOptionFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub const CFStreamErrorDomain_kCFStreamErrorDomainCustom: CFStreamErrorDomain = -1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainPOSIX: CFStreamErrorDomain = 1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainMacOSStatus: CFStreamErrorDomain = 2;
pub type CFStreamErrorDomain = CFIndex;
extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub const CFPropertyListMutabilityOptions_kCFPropertyListImmutable:
    CFPropertyListMutabilityOptions = 0;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainers:
    CFPropertyListMutabilityOptions = 1;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainersAndLeaves:
    CFPropertyListMutabilityOptions = 2;
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub const CFPropertyListFormat_kCFPropertyListOpenStepFormat: CFPropertyListFormat = 1;
pub const CFPropertyListFormat_kCFPropertyListXMLFormat_v1_0: CFPropertyListFormat = 100;
pub const CFPropertyListFormat_kCFPropertyListBinaryFormat_v1_0: CFPropertyListFormat = 200;
pub type CFPropertyListFormat = CFIndex;
extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: _bindgen_ty_22 = 3840;
pub const kCFPropertyListReadUnknownVersionError: _bindgen_ty_22 = 3841;
pub const kCFPropertyListReadStreamError: _bindgen_ty_22 = 3842;
pub const kCFPropertyListWriteStreamError: _bindgen_ty_22 = 3851;
pub type _bindgen_ty_22 = CFIndex;
extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub const CFStringEncodings_kCFStringEncodingMacJapanese: CFStringEncodings = 1;
pub const CFStringEncodings_kCFStringEncodingMacChineseTrad: CFStringEncodings = 2;
pub const CFStringEncodings_kCFStringEncodingMacKorean: CFStringEncodings = 3;
pub const CFStringEncodings_kCFStringEncodingMacArabic: CFStringEncodings = 4;
pub const CFStringEncodings_kCFStringEncodingMacHebrew: CFStringEncodings = 5;
pub const CFStringEncodings_kCFStringEncodingMacGreek: CFStringEncodings = 6;
pub const CFStringEncodings_kCFStringEncodingMacCyrillic: CFStringEncodings = 7;
pub const CFStringEncodings_kCFStringEncodingMacDevanagari: CFStringEncodings = 9;
pub const CFStringEncodings_kCFStringEncodingMacGurmukhi: CFStringEncodings = 10;
pub const CFStringEncodings_kCFStringEncodingMacGujarati: CFStringEncodings = 11;
pub const CFStringEncodings_kCFStringEncodingMacOriya: CFStringEncodings = 12;
pub const CFStringEncodings_kCFStringEncodingMacBengali: CFStringEncodings = 13;
pub const CFStringEncodings_kCFStringEncodingMacTamil: CFStringEncodings = 14;
pub const CFStringEncodings_kCFStringEncodingMacTelugu: CFStringEncodings = 15;
pub const CFStringEncodings_kCFStringEncodingMacKannada: CFStringEncodings = 16;
pub const CFStringEncodings_kCFStringEncodingMacMalayalam: CFStringEncodings = 17;
pub const CFStringEncodings_kCFStringEncodingMacSinhalese: CFStringEncodings = 18;
pub const CFStringEncodings_kCFStringEncodingMacBurmese: CFStringEncodings = 19;
pub const CFStringEncodings_kCFStringEncodingMacKhmer: CFStringEncodings = 20;
pub const CFStringEncodings_kCFStringEncodingMacThai: CFStringEncodings = 21;
pub const CFStringEncodings_kCFStringEncodingMacLaotian: CFStringEncodings = 22;
pub const CFStringEncodings_kCFStringEncodingMacGeorgian: CFStringEncodings = 23;
pub const CFStringEncodings_kCFStringEncodingMacArmenian: CFStringEncodings = 24;
pub const CFStringEncodings_kCFStringEncodingMacChineseSimp: CFStringEncodings = 25;
pub const CFStringEncodings_kCFStringEncodingMacTibetan: CFStringEncodings = 26;
pub const CFStringEncodings_kCFStringEncodingMacMongolian: CFStringEncodings = 27;
pub const CFStringEncodings_kCFStringEncodingMacEthiopic: CFStringEncodings = 28;
pub const CFStringEncodings_kCFStringEncodingMacCentralEurRoman: CFStringEncodings = 29;
pub const CFStringEncodings_kCFStringEncodingMacVietnamese: CFStringEncodings = 30;
pub const CFStringEncodings_kCFStringEncodingMacExtArabic: CFStringEncodings = 31;
pub const CFStringEncodings_kCFStringEncodingMacSymbol: CFStringEncodings = 33;
pub const CFStringEncodings_kCFStringEncodingMacDingbats: CFStringEncodings = 34;
pub const CFStringEncodings_kCFStringEncodingMacTurkish: CFStringEncodings = 35;
pub const CFStringEncodings_kCFStringEncodingMacCroatian: CFStringEncodings = 36;
pub const CFStringEncodings_kCFStringEncodingMacIcelandic: CFStringEncodings = 37;
pub const CFStringEncodings_kCFStringEncodingMacRomanian: CFStringEncodings = 38;
pub const CFStringEncodings_kCFStringEncodingMacCeltic: CFStringEncodings = 39;
pub const CFStringEncodings_kCFStringEncodingMacGaelic: CFStringEncodings = 40;
pub const CFStringEncodings_kCFStringEncodingMacFarsi: CFStringEncodings = 140;
pub const CFStringEncodings_kCFStringEncodingMacUkrainian: CFStringEncodings = 152;
pub const CFStringEncodings_kCFStringEncodingMacInuit: CFStringEncodings = 236;
pub const CFStringEncodings_kCFStringEncodingMacVT100: CFStringEncodings = 252;
pub const CFStringEncodings_kCFStringEncodingMacHFS: CFStringEncodings = 255;
pub const CFStringEncodings_kCFStringEncodingISOLatin2: CFStringEncodings = 514;
pub const CFStringEncodings_kCFStringEncodingISOLatin3: CFStringEncodings = 515;
pub const CFStringEncodings_kCFStringEncodingISOLatin4: CFStringEncodings = 516;
pub const CFStringEncodings_kCFStringEncodingISOLatinCyrillic: CFStringEncodings = 517;
pub const CFStringEncodings_kCFStringEncodingISOLatinArabic: CFStringEncodings = 518;
pub const CFStringEncodings_kCFStringEncodingISOLatinGreek: CFStringEncodings = 519;
pub const CFStringEncodings_kCFStringEncodingISOLatinHebrew: CFStringEncodings = 520;
pub const CFStringEncodings_kCFStringEncodingISOLatin5: CFStringEncodings = 521;
pub const CFStringEncodings_kCFStringEncodingISOLatin6: CFStringEncodings = 522;
pub const CFStringEncodings_kCFStringEncodingISOLatinThai: CFStringEncodings = 523;
pub const CFStringEncodings_kCFStringEncodingISOLatin7: CFStringEncodings = 525;
pub const CFStringEncodings_kCFStringEncodingISOLatin8: CFStringEncodings = 526;
pub const CFStringEncodings_kCFStringEncodingISOLatin9: CFStringEncodings = 527;
pub const CFStringEncodings_kCFStringEncodingISOLatin10: CFStringEncodings = 528;
pub const CFStringEncodings_kCFStringEncodingDOSLatinUS: CFStringEncodings = 1024;
pub const CFStringEncodings_kCFStringEncodingDOSGreek: CFStringEncodings = 1029;
pub const CFStringEncodings_kCFStringEncodingDOSBalticRim: CFStringEncodings = 1030;
pub const CFStringEncodings_kCFStringEncodingDOSLatin1: CFStringEncodings = 1040;
pub const CFStringEncodings_kCFStringEncodingDOSGreek1: CFStringEncodings = 1041;
pub const CFStringEncodings_kCFStringEncodingDOSLatin2: CFStringEncodings = 1042;
pub const CFStringEncodings_kCFStringEncodingDOSCyrillic: CFStringEncodings = 1043;
pub const CFStringEncodings_kCFStringEncodingDOSTurkish: CFStringEncodings = 1044;
pub const CFStringEncodings_kCFStringEncodingDOSPortuguese: CFStringEncodings = 1045;
pub const CFStringEncodings_kCFStringEncodingDOSIcelandic: CFStringEncodings = 1046;
pub const CFStringEncodings_kCFStringEncodingDOSHebrew: CFStringEncodings = 1047;
pub const CFStringEncodings_kCFStringEncodingDOSCanadianFrench: CFStringEncodings = 1048;
pub const CFStringEncodings_kCFStringEncodingDOSArabic: CFStringEncodings = 1049;
pub const CFStringEncodings_kCFStringEncodingDOSNordic: CFStringEncodings = 1050;
pub const CFStringEncodings_kCFStringEncodingDOSRussian: CFStringEncodings = 1051;
pub const CFStringEncodings_kCFStringEncodingDOSGreek2: CFStringEncodings = 1052;
pub const CFStringEncodings_kCFStringEncodingDOSThai: CFStringEncodings = 1053;
pub const CFStringEncodings_kCFStringEncodingDOSJapanese: CFStringEncodings = 1056;
pub const CFStringEncodings_kCFStringEncodingDOSChineseSimplif: CFStringEncodings = 1057;
pub const CFStringEncodings_kCFStringEncodingDOSKorean: CFStringEncodings = 1058;
pub const CFStringEncodings_kCFStringEncodingDOSChineseTrad: CFStringEncodings = 1059;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin2: CFStringEncodings = 1281;
pub const CFStringEncodings_kCFStringEncodingWindowsCyrillic: CFStringEncodings = 1282;
pub const CFStringEncodings_kCFStringEncodingWindowsGreek: CFStringEncodings = 1283;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin5: CFStringEncodings = 1284;
pub const CFStringEncodings_kCFStringEncodingWindowsHebrew: CFStringEncodings = 1285;
pub const CFStringEncodings_kCFStringEncodingWindowsArabic: CFStringEncodings = 1286;
pub const CFStringEncodings_kCFStringEncodingWindowsBalticRim: CFStringEncodings = 1287;
pub const CFStringEncodings_kCFStringEncodingWindowsVietnamese: CFStringEncodings = 1288;
pub const CFStringEncodings_kCFStringEncodingWindowsKoreanJohab: CFStringEncodings = 1296;
pub const CFStringEncodings_kCFStringEncodingANSEL: CFStringEncodings = 1537;
pub const CFStringEncodings_kCFStringEncodingJIS_X0201_76: CFStringEncodings = 1568;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_83: CFStringEncodings = 1569;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_90: CFStringEncodings = 1570;
pub const CFStringEncodings_kCFStringEncodingJIS_X0212_90: CFStringEncodings = 1571;
pub const CFStringEncodings_kCFStringEncodingJIS_C6226_78: CFStringEncodings = 1572;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213: CFStringEncodings = 1576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_MenKuTen: CFStringEncodings = 1577;
pub const CFStringEncodings_kCFStringEncodingGB_2312_80: CFStringEncodings = 1584;
pub const CFStringEncodings_kCFStringEncodingGBK_95: CFStringEncodings = 1585;
pub const CFStringEncodings_kCFStringEncodingGB_18030_2000: CFStringEncodings = 1586;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_87: CFStringEncodings = 1600;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_92_Johab: CFStringEncodings = 1601;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P1: CFStringEncodings = 1617;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P2: CFStringEncodings = 1618;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P3: CFStringEncodings = 1619;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP: CFStringEncodings = 2080;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_2: CFStringEncodings = 2081;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_1: CFStringEncodings = 2082;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_3: CFStringEncodings = 2083;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN: CFStringEncodings = 2096;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN_EXT: CFStringEncodings = 2097;
pub const CFStringEncodings_kCFStringEncodingISO_2022_KR: CFStringEncodings = 2112;
pub const CFStringEncodings_kCFStringEncodingEUC_JP: CFStringEncodings = 2336;
pub const CFStringEncodings_kCFStringEncodingEUC_CN: CFStringEncodings = 2352;
pub const CFStringEncodings_kCFStringEncodingEUC_TW: CFStringEncodings = 2353;
pub const CFStringEncodings_kCFStringEncodingEUC_KR: CFStringEncodings = 2368;
pub const CFStringEncodings_kCFStringEncodingShiftJIS: CFStringEncodings = 2561;
pub const CFStringEncodings_kCFStringEncodingKOI8_R: CFStringEncodings = 2562;
pub const CFStringEncodings_kCFStringEncodingBig5: CFStringEncodings = 2563;
pub const CFStringEncodings_kCFStringEncodingMacRomanLatin1: CFStringEncodings = 2564;
pub const CFStringEncodings_kCFStringEncodingHZ_GB_2312: CFStringEncodings = 2565;
pub const CFStringEncodings_kCFStringEncodingBig5_HKSCS_1999: CFStringEncodings = 2566;
pub const CFStringEncodings_kCFStringEncodingVISCII: CFStringEncodings = 2567;
pub const CFStringEncodings_kCFStringEncodingKOI8_U: CFStringEncodings = 2568;
pub const CFStringEncodings_kCFStringEncodingBig5_E: CFStringEncodings = 2569;
pub const CFStringEncodings_kCFStringEncodingNextStepJapanese: CFStringEncodings = 2818;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_US: CFStringEncodings = 3073;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_CP037: CFStringEncodings = 3074;
pub const CFStringEncodings_kCFStringEncodingUTF7: CFStringEncodings = 67109120;
pub const CFStringEncodings_kCFStringEncodingUTF7_IMAP: CFStringEncodings = 2576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_00: CFStringEncodings = 1576;
pub type CFStringEncodings = CFIndex;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub const CFURLError_kCFURLUnknownError: CFURLError = -10;
pub const CFURLError_kCFURLUnknownSchemeError: CFURLError = -11;
pub const CFURLError_kCFURLResourceNotFoundError: CFURLError = -12;
pub const CFURLError_kCFURLResourceAccessViolationError: CFURLError = -13;
pub const CFURLError_kCFURLRemoteHostUnavailableError: CFURLError = -14;
pub const CFURLError_kCFURLImproperArgumentsError: CFURLError = -15;
pub const CFURLError_kCFURLUnknownPropertyKeyError: CFURLError = -16;
pub const CFURLError_kCFURLPropertyKeyUnavailableError: CFURLError = -17;
pub const CFURLError_kCFURLTimeoutError: CFURLError = -18;
pub type CFURLError = CFIndex;
extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: _bindgen_ty_23 = 7;
pub const kCFBundleExecutableArchitecturePPC: _bindgen_ty_23 = 18;
pub const kCFBundleExecutableArchitectureX86_64: _bindgen_ty_23 = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: _bindgen_ty_23 = 16777234;
pub const kCFBundleExecutableArchitectureARM64: _bindgen_ty_23 = 16777228;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: _bindgen_ty_24 = 0;
pub const kCFMessagePortSendTimeout: _bindgen_ty_24 = -1;
pub const kCFMessagePortReceiveTimeout: _bindgen_ty_24 = -2;
pub const kCFMessagePortIsInvalid: _bindgen_ty_24 = -3;
pub const kCFMessagePortTransportError: _bindgen_ty_24 = -4;
pub const kCFMessagePortBecameInvalidError: _bindgen_ty_24 = -5;
pub type _bindgen_ty_24 = SInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: NSObject);
}
extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDefaultBehavior: CFURLEnumeratorOptions = 0;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDescendRecursively: CFURLEnumeratorOptions = 1;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipInvisibles: CFURLEnumeratorOptions = 2;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateFileReferenceURLs: CFURLEnumeratorOptions =
    4;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipPackageContents: CFURLEnumeratorOptions = 8;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPreOrder:
    CFURLEnumeratorOptions = 16;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPostOrder:
    CFURLEnumeratorOptions = 32;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateRelativePathURLs: CFURLEnumeratorOptions =
    64;
pub type CFURLEnumeratorOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub const CFURLEnumeratorResult_kCFURLEnumeratorSuccess: CFURLEnumeratorResult = 1;
pub const CFURLEnumeratorResult_kCFURLEnumeratorEnd: CFURLEnumeratorResult = 2;
pub const CFURLEnumeratorResult_kCFURLEnumeratorError: CFURLEnumeratorResult = 3;
pub const CFURLEnumeratorResult_kCFURLEnumeratorDirectoryPostOrderSuccess: CFURLEnumeratorResult =
    4;
pub type CFURLEnumeratorResult = CFIndex;
extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwner: CFFileSecurityClearOptions = 1;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroup: CFFileSecurityClearOptions = 2;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearMode: CFFileSecurityClearOptions = 4;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwnerUUID: CFFileSecurityClearOptions = 8;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroupUUID: CFFileSecurityClearOptions = 16;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearAccessControlList:
    CFFileSecurityClearOptions = 32;
pub type CFFileSecurityClearOptions = CFOptionFlags;
extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: _bindgen_ty_25 = 0;
pub const kCFStringTokenizerUnitSentence: _bindgen_ty_25 = 1;
pub const kCFStringTokenizerUnitParagraph: _bindgen_ty_25 = 2;
pub const kCFStringTokenizerUnitLineBreak: _bindgen_ty_25 = 3;
pub const kCFStringTokenizerUnitWordBoundary: _bindgen_ty_25 = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: _bindgen_ty_25 = 65536;
pub const kCFStringTokenizerAttributeLanguage: _bindgen_ty_25 = 131072;
pub type _bindgen_ty_25 = CFOptionFlags;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNone: CFStringTokenizerTokenType = 0;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNormal: CFStringTokenizerTokenType = 1;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasSubTokensMask:
    CFStringTokenizerTokenType = 2;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasDerivedSubTokensMask:
    CFStringTokenizerTokenType = 4;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasHasNumbersMask:
    CFStringTokenizerTokenType = 8;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasNonLettersMask:
    CFStringTokenizerTokenType = 16;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenIsCJWordMask:
    CFStringTokenizerTokenType = 32;
pub type CFStringTokenizerTokenType = CFOptionFlags;
extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: _bindgen_ty_26 = 1;
pub const kCFFileDescriptorWriteCallBack: _bindgen_ty_26 = 2;
pub type _bindgen_ty_26 = CFOptionFlags;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: _bindgen_ty_27 = 0;
pub const kCFUserNotificationNoteAlertLevel: _bindgen_ty_27 = 1;
pub const kCFUserNotificationCautionAlertLevel: _bindgen_ty_27 = 2;
pub const kCFUserNotificationPlainAlertLevel: _bindgen_ty_27 = 3;
pub type _bindgen_ty_27 = CFOptionFlags;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_28 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_28 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_28 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_28 = 3;
pub type _bindgen_ty_28 = CFOptionFlags;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_29 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_29 = 64;
pub type _bindgen_ty_29 = CFOptionFlags;
extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub type HRESULT = SInt32;
pub type ULONG = UInt32;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type REFIID = CFUUIDBytes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknownVTbl {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
}
pub const kAudio_UnimplementedError: _bindgen_ty_30 = -4;
pub const kAudio_FileNotFoundError: _bindgen_ty_30 = -43;
pub const kAudio_FilePermissionError: _bindgen_ty_30 = -54;
pub const kAudio_TooManyFilesOpenError: _bindgen_ty_30 = -42;
pub const kAudio_BadFilePathError: _bindgen_ty_30 = 561017960;
pub const kAudio_ParamError: _bindgen_ty_30 = -50;
pub const kAudio_MemFullError: _bindgen_ty_30 = -108;
pub type _bindgen_ty_30 = OSStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioValueRange {
    pub mMinimum: Float64,
    pub mMaximum: Float64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioValueTranslation {
    pub mInputData: *mut ::std::os::raw::c_void,
    pub mInputDataSize: UInt32,
    pub mOutputData: *mut ::std::os::raw::c_void,
    pub mOutputDataSize: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBuffer {
    pub mNumberChannels: UInt32,
    pub mDataByteSize: UInt32,
    pub mData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBufferList {
    pub mNumberBuffers: UInt32,
    pub mBuffers: [AudioBuffer; 1usize],
}
pub type AudioSampleType = SInt16;
pub type AudioUnitSampleType = SInt32;
pub type AudioFormatID = UInt32;
pub type AudioFormatFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioStreamBasicDescription {
    pub mSampleRate: Float64,
    pub mFormatID: AudioFormatID,
    pub mFormatFlags: AudioFormatFlags,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mBytesPerFrame: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
    pub mReserved: UInt32,
}
pub const kAudioStreamAnyRate: Float64 = 0.0;
pub const kAudioFormatLinearPCM: _bindgen_ty_31 = 1819304813;
pub const kAudioFormatAC3: _bindgen_ty_31 = 1633889587;
pub const kAudioFormat60958AC3: _bindgen_ty_31 = 1667326771;
pub const kAudioFormatAppleIMA4: _bindgen_ty_31 = 1768775988;
pub const kAudioFormatMPEG4AAC: _bindgen_ty_31 = 1633772320;
pub const kAudioFormatMPEG4CELP: _bindgen_ty_31 = 1667591280;
pub const kAudioFormatMPEG4HVXC: _bindgen_ty_31 = 1752594531;
pub const kAudioFormatMPEG4TwinVQ: _bindgen_ty_31 = 1953986161;
pub const kAudioFormatMACE3: _bindgen_ty_31 = 1296122675;
pub const kAudioFormatMACE6: _bindgen_ty_31 = 1296122678;
pub const kAudioFormatULaw: _bindgen_ty_31 = 1970037111;
pub const kAudioFormatALaw: _bindgen_ty_31 = 1634492791;
pub const kAudioFormatQDesign: _bindgen_ty_31 = 1363430723;
pub const kAudioFormatQDesign2: _bindgen_ty_31 = 1363430706;
pub const kAudioFormatQUALCOMM: _bindgen_ty_31 = 1365470320;
pub const kAudioFormatMPEGLayer1: _bindgen_ty_31 = 778924081;
pub const kAudioFormatMPEGLayer2: _bindgen_ty_31 = 778924082;
pub const kAudioFormatMPEGLayer3: _bindgen_ty_31 = 778924083;
pub const kAudioFormatTimeCode: _bindgen_ty_31 = 1953066341;
pub const kAudioFormatMIDIStream: _bindgen_ty_31 = 1835623529;
pub const kAudioFormatParameterValueStream: _bindgen_ty_31 = 1634760307;
pub const kAudioFormatAppleLossless: _bindgen_ty_31 = 1634492771;
pub const kAudioFormatMPEG4AAC_HE: _bindgen_ty_31 = 1633772392;
pub const kAudioFormatMPEG4AAC_LD: _bindgen_ty_31 = 1633772396;
pub const kAudioFormatMPEG4AAC_ELD: _bindgen_ty_31 = 1633772389;
pub const kAudioFormatMPEG4AAC_ELD_SBR: _bindgen_ty_31 = 1633772390;
pub const kAudioFormatMPEG4AAC_ELD_V2: _bindgen_ty_31 = 1633772391;
pub const kAudioFormatMPEG4AAC_HE_V2: _bindgen_ty_31 = 1633772400;
pub const kAudioFormatMPEG4AAC_Spatial: _bindgen_ty_31 = 1633772403;
pub const kAudioFormatMPEGD_USAC: _bindgen_ty_31 = 1970495843;
pub const kAudioFormatAMR: _bindgen_ty_31 = 1935764850;
pub const kAudioFormatAMR_WB: _bindgen_ty_31 = 1935767394;
pub const kAudioFormatAudible: _bindgen_ty_31 = 1096107074;
pub const kAudioFormatiLBC: _bindgen_ty_31 = 1768710755;
pub const kAudioFormatDVIIntelIMA: _bindgen_ty_31 = 1836253201;
pub const kAudioFormatMicrosoftGSM: _bindgen_ty_31 = 1836253233;
pub const kAudioFormatAES3: _bindgen_ty_31 = 1634038579;
pub const kAudioFormatEnhancedAC3: _bindgen_ty_31 = 1700998451;
pub const kAudioFormatFLAC: _bindgen_ty_31 = 1718378851;
pub const kAudioFormatOpus: _bindgen_ty_31 = 1869641075;
pub type _bindgen_ty_31 = AudioFormatID;
pub const kAudioFormatFlagIsFloat: _bindgen_ty_32 = 1;
pub const kAudioFormatFlagIsBigEndian: _bindgen_ty_32 = 2;
pub const kAudioFormatFlagIsSignedInteger: _bindgen_ty_32 = 4;
pub const kAudioFormatFlagIsPacked: _bindgen_ty_32 = 8;
pub const kAudioFormatFlagIsAlignedHigh: _bindgen_ty_32 = 16;
pub const kAudioFormatFlagIsNonInterleaved: _bindgen_ty_32 = 32;
pub const kAudioFormatFlagIsNonMixable: _bindgen_ty_32 = 64;
pub const kAudioFormatFlagsAreAllClear: _bindgen_ty_32 = 2147483648;
pub const kLinearPCMFormatFlagIsFloat: _bindgen_ty_32 = 1;
pub const kLinearPCMFormatFlagIsBigEndian: _bindgen_ty_32 = 2;
pub const kLinearPCMFormatFlagIsSignedInteger: _bindgen_ty_32 = 4;
pub const kLinearPCMFormatFlagIsPacked: _bindgen_ty_32 = 8;
pub const kLinearPCMFormatFlagIsAlignedHigh: _bindgen_ty_32 = 16;
pub const kLinearPCMFormatFlagIsNonInterleaved: _bindgen_ty_32 = 32;
pub const kLinearPCMFormatFlagIsNonMixable: _bindgen_ty_32 = 64;
pub const kLinearPCMFormatFlagsSampleFractionShift: _bindgen_ty_32 = 7;
pub const kLinearPCMFormatFlagsSampleFractionMask: _bindgen_ty_32 = 8064;
pub const kLinearPCMFormatFlagsAreAllClear: _bindgen_ty_32 = 2147483648;
pub const kAppleLosslessFormatFlag_16BitSourceData: _bindgen_ty_32 = 1;
pub const kAppleLosslessFormatFlag_20BitSourceData: _bindgen_ty_32 = 2;
pub const kAppleLosslessFormatFlag_24BitSourceData: _bindgen_ty_32 = 3;
pub const kAppleLosslessFormatFlag_32BitSourceData: _bindgen_ty_32 = 4;
pub type _bindgen_ty_32 = AudioFormatFlags;
pub const kAudioFormatFlagsNativeEndian: _bindgen_ty_33 = 0;
pub const kAudioFormatFlagsCanonical: _bindgen_ty_33 = 12;
pub const kAudioFormatFlagsAudioUnitCanonical: _bindgen_ty_33 = 3116;
pub const kAudioFormatFlagsNativeFloatPacked: _bindgen_ty_33 = 9;
pub type _bindgen_ty_33 = AudioFormatFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioStreamPacketDescription {
    pub mStartOffset: SInt64,
    pub mVariableFramesInPacket: UInt32,
    pub mDataByteSize: UInt32,
}
pub const SMPTETimeType_kSMPTETimeType24: SMPTETimeType = 0;
pub const SMPTETimeType_kSMPTETimeType25: SMPTETimeType = 1;
pub const SMPTETimeType_kSMPTETimeType30Drop: SMPTETimeType = 2;
pub const SMPTETimeType_kSMPTETimeType30: SMPTETimeType = 3;
pub const SMPTETimeType_kSMPTETimeType2997: SMPTETimeType = 4;
pub const SMPTETimeType_kSMPTETimeType2997Drop: SMPTETimeType = 5;
pub const SMPTETimeType_kSMPTETimeType60: SMPTETimeType = 6;
pub const SMPTETimeType_kSMPTETimeType5994: SMPTETimeType = 7;
pub const SMPTETimeType_kSMPTETimeType60Drop: SMPTETimeType = 8;
pub const SMPTETimeType_kSMPTETimeType5994Drop: SMPTETimeType = 9;
pub const SMPTETimeType_kSMPTETimeType50: SMPTETimeType = 10;
pub const SMPTETimeType_kSMPTETimeType2398: SMPTETimeType = 11;
pub type SMPTETimeType = UInt32;
pub const SMPTETimeFlags_kSMPTETimeUnknown: SMPTETimeFlags = 0;
pub const SMPTETimeFlags_kSMPTETimeValid: SMPTETimeFlags = 1;
pub const SMPTETimeFlags_kSMPTETimeRunning: SMPTETimeFlags = 2;
pub type SMPTETimeFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SMPTETime {
    pub mSubframes: SInt16,
    pub mSubframeDivisor: SInt16,
    pub mCounter: UInt32,
    pub mType: SMPTETimeType,
    pub mFlags: SMPTETimeFlags,
    pub mHours: SInt16,
    pub mMinutes: SInt16,
    pub mSeconds: SInt16,
    pub mFrames: SInt16,
}
pub const AudioTimeStampFlags_kAudioTimeStampNothingValid: AudioTimeStampFlags = 0;
pub const AudioTimeStampFlags_kAudioTimeStampSampleTimeValid: AudioTimeStampFlags = 1;
pub const AudioTimeStampFlags_kAudioTimeStampHostTimeValid: AudioTimeStampFlags = 2;
pub const AudioTimeStampFlags_kAudioTimeStampRateScalarValid: AudioTimeStampFlags = 4;
pub const AudioTimeStampFlags_kAudioTimeStampWordClockTimeValid: AudioTimeStampFlags = 8;
pub const AudioTimeStampFlags_kAudioTimeStampSMPTETimeValid: AudioTimeStampFlags = 16;
pub const AudioTimeStampFlags_kAudioTimeStampSampleHostTimeValid: AudioTimeStampFlags = 3;
pub type AudioTimeStampFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioTimeStamp {
    pub mSampleTime: Float64,
    pub mHostTime: UInt64,
    pub mRateScalar: Float64,
    pub mWordClockTime: UInt64,
    pub mSMPTETime: SMPTETime,
    pub mFlags: AudioTimeStampFlags,
    pub mReserved: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioClassDescription {
    pub mType: OSType,
    pub mSubType: OSType,
    pub mManufacturer: OSType,
}
pub type AudioChannelLabel = UInt32;
pub type AudioChannelLayoutTag = UInt32;
pub const kAudioChannelLabel_Unknown: _bindgen_ty_34 = 4294967295;
pub const kAudioChannelLabel_Unused: _bindgen_ty_34 = 0;
pub const kAudioChannelLabel_UseCoordinates: _bindgen_ty_34 = 100;
pub const kAudioChannelLabel_Left: _bindgen_ty_34 = 1;
pub const kAudioChannelLabel_Right: _bindgen_ty_34 = 2;
pub const kAudioChannelLabel_Center: _bindgen_ty_34 = 3;
pub const kAudioChannelLabel_LFEScreen: _bindgen_ty_34 = 4;
pub const kAudioChannelLabel_LeftSurround: _bindgen_ty_34 = 5;
pub const kAudioChannelLabel_RightSurround: _bindgen_ty_34 = 6;
pub const kAudioChannelLabel_LeftCenter: _bindgen_ty_34 = 7;
pub const kAudioChannelLabel_RightCenter: _bindgen_ty_34 = 8;
pub const kAudioChannelLabel_CenterSurround: _bindgen_ty_34 = 9;
pub const kAudioChannelLabel_LeftSurroundDirect: _bindgen_ty_34 = 10;
pub const kAudioChannelLabel_RightSurroundDirect: _bindgen_ty_34 = 11;
pub const kAudioChannelLabel_TopCenterSurround: _bindgen_ty_34 = 12;
pub const kAudioChannelLabel_VerticalHeightLeft: _bindgen_ty_34 = 13;
pub const kAudioChannelLabel_VerticalHeightCenter: _bindgen_ty_34 = 14;
pub const kAudioChannelLabel_VerticalHeightRight: _bindgen_ty_34 = 15;
pub const kAudioChannelLabel_TopBackLeft: _bindgen_ty_34 = 16;
pub const kAudioChannelLabel_TopBackCenter: _bindgen_ty_34 = 17;
pub const kAudioChannelLabel_TopBackRight: _bindgen_ty_34 = 18;
pub const kAudioChannelLabel_RearSurroundLeft: _bindgen_ty_34 = 33;
pub const kAudioChannelLabel_RearSurroundRight: _bindgen_ty_34 = 34;
pub const kAudioChannelLabel_LeftWide: _bindgen_ty_34 = 35;
pub const kAudioChannelLabel_RightWide: _bindgen_ty_34 = 36;
pub const kAudioChannelLabel_LFE2: _bindgen_ty_34 = 37;
pub const kAudioChannelLabel_LeftTotal: _bindgen_ty_34 = 38;
pub const kAudioChannelLabel_RightTotal: _bindgen_ty_34 = 39;
pub const kAudioChannelLabel_HearingImpaired: _bindgen_ty_34 = 40;
pub const kAudioChannelLabel_Narration: _bindgen_ty_34 = 41;
pub const kAudioChannelLabel_Mono: _bindgen_ty_34 = 42;
pub const kAudioChannelLabel_DialogCentricMix: _bindgen_ty_34 = 43;
pub const kAudioChannelLabel_CenterSurroundDirect: _bindgen_ty_34 = 44;
pub const kAudioChannelLabel_Haptic: _bindgen_ty_34 = 45;
pub const kAudioChannelLabel_LeftTopFront: _bindgen_ty_34 = 13;
pub const kAudioChannelLabel_CenterTopFront: _bindgen_ty_34 = 14;
pub const kAudioChannelLabel_RightTopFront: _bindgen_ty_34 = 15;
pub const kAudioChannelLabel_LeftTopMiddle: _bindgen_ty_34 = 49;
pub const kAudioChannelLabel_CenterTopMiddle: _bindgen_ty_34 = 12;
pub const kAudioChannelLabel_RightTopMiddle: _bindgen_ty_34 = 51;
pub const kAudioChannelLabel_LeftTopRear: _bindgen_ty_34 = 52;
pub const kAudioChannelLabel_CenterTopRear: _bindgen_ty_34 = 53;
pub const kAudioChannelLabel_RightTopRear: _bindgen_ty_34 = 54;
pub const kAudioChannelLabel_LeftSideSurround: _bindgen_ty_34 = 55;
pub const kAudioChannelLabel_RightSideSurround: _bindgen_ty_34 = 56;
pub const kAudioChannelLabel_LeftBottom: _bindgen_ty_34 = 57;
pub const kAudioChannelLabel_RightBottom: _bindgen_ty_34 = 58;
pub const kAudioChannelLabel_CenterBottom: _bindgen_ty_34 = 59;
pub const kAudioChannelLabel_LeftTopSurround: _bindgen_ty_34 = 60;
pub const kAudioChannelLabel_RightTopSurround: _bindgen_ty_34 = 61;
pub const kAudioChannelLabel_LFE3: _bindgen_ty_34 = 62;
pub const kAudioChannelLabel_LeftBackSurround: _bindgen_ty_34 = 63;
pub const kAudioChannelLabel_RightBackSurround: _bindgen_ty_34 = 64;
pub const kAudioChannelLabel_LeftEdgeOfScreen: _bindgen_ty_34 = 65;
pub const kAudioChannelLabel_RightEdgeOfScreen: _bindgen_ty_34 = 66;
pub const kAudioChannelLabel_Ambisonic_W: _bindgen_ty_34 = 200;
pub const kAudioChannelLabel_Ambisonic_X: _bindgen_ty_34 = 201;
pub const kAudioChannelLabel_Ambisonic_Y: _bindgen_ty_34 = 202;
pub const kAudioChannelLabel_Ambisonic_Z: _bindgen_ty_34 = 203;
pub const kAudioChannelLabel_MS_Mid: _bindgen_ty_34 = 204;
pub const kAudioChannelLabel_MS_Side: _bindgen_ty_34 = 205;
pub const kAudioChannelLabel_XY_X: _bindgen_ty_34 = 206;
pub const kAudioChannelLabel_XY_Y: _bindgen_ty_34 = 207;
pub const kAudioChannelLabel_BinauralLeft: _bindgen_ty_34 = 208;
pub const kAudioChannelLabel_BinauralRight: _bindgen_ty_34 = 209;
pub const kAudioChannelLabel_HeadphonesLeft: _bindgen_ty_34 = 301;
pub const kAudioChannelLabel_HeadphonesRight: _bindgen_ty_34 = 302;
pub const kAudioChannelLabel_ClickTrack: _bindgen_ty_34 = 304;
pub const kAudioChannelLabel_ForeignLanguage: _bindgen_ty_34 = 305;
pub const kAudioChannelLabel_Discrete: _bindgen_ty_34 = 400;
pub const kAudioChannelLabel_Discrete_0: _bindgen_ty_34 = 65536;
pub const kAudioChannelLabel_Discrete_1: _bindgen_ty_34 = 65537;
pub const kAudioChannelLabel_Discrete_2: _bindgen_ty_34 = 65538;
pub const kAudioChannelLabel_Discrete_3: _bindgen_ty_34 = 65539;
pub const kAudioChannelLabel_Discrete_4: _bindgen_ty_34 = 65540;
pub const kAudioChannelLabel_Discrete_5: _bindgen_ty_34 = 65541;
pub const kAudioChannelLabel_Discrete_6: _bindgen_ty_34 = 65542;
pub const kAudioChannelLabel_Discrete_7: _bindgen_ty_34 = 65543;
pub const kAudioChannelLabel_Discrete_8: _bindgen_ty_34 = 65544;
pub const kAudioChannelLabel_Discrete_9: _bindgen_ty_34 = 65545;
pub const kAudioChannelLabel_Discrete_10: _bindgen_ty_34 = 65546;
pub const kAudioChannelLabel_Discrete_11: _bindgen_ty_34 = 65547;
pub const kAudioChannelLabel_Discrete_12: _bindgen_ty_34 = 65548;
pub const kAudioChannelLabel_Discrete_13: _bindgen_ty_34 = 65549;
pub const kAudioChannelLabel_Discrete_14: _bindgen_ty_34 = 65550;
pub const kAudioChannelLabel_Discrete_15: _bindgen_ty_34 = 65551;
pub const kAudioChannelLabel_Discrete_65535: _bindgen_ty_34 = 131071;
pub const kAudioChannelLabel_HOA_ACN: _bindgen_ty_34 = 500;
pub const kAudioChannelLabel_HOA_ACN_0: _bindgen_ty_34 = 131072;
pub const kAudioChannelLabel_HOA_ACN_1: _bindgen_ty_34 = 131073;
pub const kAudioChannelLabel_HOA_ACN_2: _bindgen_ty_34 = 131074;
pub const kAudioChannelLabel_HOA_ACN_3: _bindgen_ty_34 = 131075;
pub const kAudioChannelLabel_HOA_ACN_4: _bindgen_ty_34 = 131076;
pub const kAudioChannelLabel_HOA_ACN_5: _bindgen_ty_34 = 131077;
pub const kAudioChannelLabel_HOA_ACN_6: _bindgen_ty_34 = 131078;
pub const kAudioChannelLabel_HOA_ACN_7: _bindgen_ty_34 = 131079;
pub const kAudioChannelLabel_HOA_ACN_8: _bindgen_ty_34 = 131080;
pub const kAudioChannelLabel_HOA_ACN_9: _bindgen_ty_34 = 131081;
pub const kAudioChannelLabel_HOA_ACN_10: _bindgen_ty_34 = 131082;
pub const kAudioChannelLabel_HOA_ACN_11: _bindgen_ty_34 = 131083;
pub const kAudioChannelLabel_HOA_ACN_12: _bindgen_ty_34 = 131084;
pub const kAudioChannelLabel_HOA_ACN_13: _bindgen_ty_34 = 131085;
pub const kAudioChannelLabel_HOA_ACN_14: _bindgen_ty_34 = 131086;
pub const kAudioChannelLabel_HOA_ACN_15: _bindgen_ty_34 = 131087;
pub const kAudioChannelLabel_HOA_ACN_65024: _bindgen_ty_34 = 196096;
pub const kAudioChannelLabel_HOA_SN3D: _bindgen_ty_34 = 131072;
pub const kAudioChannelLabel_HOA_N3D: _bindgen_ty_34 = 196608;
pub const kAudioChannelLabel_Object: _bindgen_ty_34 = 262144;
pub const kAudioChannelLabel_BeginReserved: _bindgen_ty_34 = 4026531840;
pub const kAudioChannelLabel_EndReserved: _bindgen_ty_34 = 4294967294;
pub type _bindgen_ty_34 = AudioChannelLabel;
pub const AudioChannelBitmap_kAudioChannelBit_Left: AudioChannelBitmap = 1;
pub const AudioChannelBitmap_kAudioChannelBit_Right: AudioChannelBitmap = 2;
pub const AudioChannelBitmap_kAudioChannelBit_Center: AudioChannelBitmap = 4;
pub const AudioChannelBitmap_kAudioChannelBit_LFEScreen: AudioChannelBitmap = 8;
pub const AudioChannelBitmap_kAudioChannelBit_LeftSurround: AudioChannelBitmap = 16;
pub const AudioChannelBitmap_kAudioChannelBit_RightSurround: AudioChannelBitmap = 32;
pub const AudioChannelBitmap_kAudioChannelBit_LeftCenter: AudioChannelBitmap = 64;
pub const AudioChannelBitmap_kAudioChannelBit_RightCenter: AudioChannelBitmap = 128;
pub const AudioChannelBitmap_kAudioChannelBit_CenterSurround: AudioChannelBitmap = 256;
pub const AudioChannelBitmap_kAudioChannelBit_LeftSurroundDirect: AudioChannelBitmap = 512;
pub const AudioChannelBitmap_kAudioChannelBit_RightSurroundDirect: AudioChannelBitmap = 1024;
pub const AudioChannelBitmap_kAudioChannelBit_TopCenterSurround: AudioChannelBitmap = 2048;
pub const AudioChannelBitmap_kAudioChannelBit_VerticalHeightLeft: AudioChannelBitmap = 4096;
pub const AudioChannelBitmap_kAudioChannelBit_VerticalHeightCenter: AudioChannelBitmap = 8192;
pub const AudioChannelBitmap_kAudioChannelBit_VerticalHeightRight: AudioChannelBitmap = 16384;
pub const AudioChannelBitmap_kAudioChannelBit_TopBackLeft: AudioChannelBitmap = 32768;
pub const AudioChannelBitmap_kAudioChannelBit_TopBackCenter: AudioChannelBitmap = 65536;
pub const AudioChannelBitmap_kAudioChannelBit_TopBackRight: AudioChannelBitmap = 131072;
pub const AudioChannelBitmap_kAudioChannelBit_LeftTopFront: AudioChannelBitmap = 4096;
pub const AudioChannelBitmap_kAudioChannelBit_CenterTopFront: AudioChannelBitmap = 8192;
pub const AudioChannelBitmap_kAudioChannelBit_RightTopFront: AudioChannelBitmap = 16384;
pub const AudioChannelBitmap_kAudioChannelBit_LeftTopMiddle: AudioChannelBitmap = 2097152;
pub const AudioChannelBitmap_kAudioChannelBit_CenterTopMiddle: AudioChannelBitmap = 2048;
pub const AudioChannelBitmap_kAudioChannelBit_RightTopMiddle: AudioChannelBitmap = 8388608;
pub const AudioChannelBitmap_kAudioChannelBit_LeftTopRear: AudioChannelBitmap = 16777216;
pub const AudioChannelBitmap_kAudioChannelBit_CenterTopRear: AudioChannelBitmap = 33554432;
pub const AudioChannelBitmap_kAudioChannelBit_RightTopRear: AudioChannelBitmap = 67108864;
pub type AudioChannelBitmap = UInt32;
pub const AudioChannelFlags_kAudioChannelFlags_AllOff: AudioChannelFlags = 0;
pub const AudioChannelFlags_kAudioChannelFlags_RectangularCoordinates: AudioChannelFlags = 1;
pub const AudioChannelFlags_kAudioChannelFlags_SphericalCoordinates: AudioChannelFlags = 2;
pub const AudioChannelFlags_kAudioChannelFlags_Meters: AudioChannelFlags = 4;
pub type AudioChannelFlags = UInt32;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_LeftRight:
    AudioChannelCoordinateIndex = 0;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_BackFront:
    AudioChannelCoordinateIndex = 1;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_DownUp: AudioChannelCoordinateIndex =
    2;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_Azimuth:
    AudioChannelCoordinateIndex = 0;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_Elevation:
    AudioChannelCoordinateIndex = 1;
pub const AudioChannelCoordinateIndex_kAudioChannelCoordinates_Distance:
    AudioChannelCoordinateIndex = 2;
pub type AudioChannelCoordinateIndex = UInt32;
pub const kAudioChannelLayoutTag_UseChannelDescriptions: _bindgen_ty_35 = 0;
pub const kAudioChannelLayoutTag_UseChannelBitmap: _bindgen_ty_35 = 65536;
pub const kAudioChannelLayoutTag_Mono: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_Stereo: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_StereoHeadphones: _bindgen_ty_35 = 6684674;
pub const kAudioChannelLayoutTag_MatrixStereo: _bindgen_ty_35 = 6750210;
pub const kAudioChannelLayoutTag_MidSide: _bindgen_ty_35 = 6815746;
pub const kAudioChannelLayoutTag_XY: _bindgen_ty_35 = 6881282;
pub const kAudioChannelLayoutTag_Binaural: _bindgen_ty_35 = 6946818;
pub const kAudioChannelLayoutTag_Ambisonic_B_Format: _bindgen_ty_35 = 7012356;
pub const kAudioChannelLayoutTag_Quadraphonic: _bindgen_ty_35 = 7077892;
pub const kAudioChannelLayoutTag_Pentagonal: _bindgen_ty_35 = 7143429;
pub const kAudioChannelLayoutTag_Hexagonal: _bindgen_ty_35 = 7208966;
pub const kAudioChannelLayoutTag_Octagonal: _bindgen_ty_35 = 7274504;
pub const kAudioChannelLayoutTag_Cube: _bindgen_ty_35 = 7340040;
pub const kAudioChannelLayoutTag_MPEG_1_0: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_MPEG_2_0: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_MPEG_3_0_A: _bindgen_ty_35 = 7405571;
pub const kAudioChannelLayoutTag_MPEG_3_0_B: _bindgen_ty_35 = 7471107;
pub const kAudioChannelLayoutTag_MPEG_4_0_A: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_MPEG_4_0_B: _bindgen_ty_35 = 7602180;
pub const kAudioChannelLayoutTag_MPEG_5_0_A: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_MPEG_5_0_B: _bindgen_ty_35 = 7733253;
pub const kAudioChannelLayoutTag_MPEG_5_0_C: _bindgen_ty_35 = 7798789;
pub const kAudioChannelLayoutTag_MPEG_5_0_D: _bindgen_ty_35 = 7864325;
pub const kAudioChannelLayoutTag_MPEG_5_1_A: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_MPEG_5_1_B: _bindgen_ty_35 = 7995398;
pub const kAudioChannelLayoutTag_MPEG_5_1_C: _bindgen_ty_35 = 8060934;
pub const kAudioChannelLayoutTag_MPEG_5_1_D: _bindgen_ty_35 = 8126470;
pub const kAudioChannelLayoutTag_MPEG_6_1_A: _bindgen_ty_35 = 8192007;
pub const kAudioChannelLayoutTag_MPEG_7_1_A: _bindgen_ty_35 = 8257544;
pub const kAudioChannelLayoutTag_MPEG_7_1_B: _bindgen_ty_35 = 8323080;
pub const kAudioChannelLayoutTag_MPEG_7_1_C: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_Emagic_Default_7_1: _bindgen_ty_35 = 8454152;
pub const kAudioChannelLayoutTag_SMPTE_DTV: _bindgen_ty_35 = 8519688;
pub const kAudioChannelLayoutTag_ITU_1_0: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_ITU_2_0: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_ITU_2_1: _bindgen_ty_35 = 8585219;
pub const kAudioChannelLayoutTag_ITU_2_2: _bindgen_ty_35 = 8650756;
pub const kAudioChannelLayoutTag_ITU_3_0: _bindgen_ty_35 = 7405571;
pub const kAudioChannelLayoutTag_ITU_3_1: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_ITU_3_2: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_ITU_3_2_1: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_ITU_3_4_1: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_DVD_0: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_DVD_1: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_DVD_2: _bindgen_ty_35 = 8585219;
pub const kAudioChannelLayoutTag_DVD_3: _bindgen_ty_35 = 8650756;
pub const kAudioChannelLayoutTag_DVD_4: _bindgen_ty_35 = 8716291;
pub const kAudioChannelLayoutTag_DVD_5: _bindgen_ty_35 = 8781828;
pub const kAudioChannelLayoutTag_DVD_6: _bindgen_ty_35 = 8847365;
pub const kAudioChannelLayoutTag_DVD_7: _bindgen_ty_35 = 7405571;
pub const kAudioChannelLayoutTag_DVD_8: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_DVD_9: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_DVD_10: _bindgen_ty_35 = 8912900;
pub const kAudioChannelLayoutTag_DVD_11: _bindgen_ty_35 = 8978437;
pub const kAudioChannelLayoutTag_DVD_12: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_DVD_13: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_DVD_14: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_DVD_15: _bindgen_ty_35 = 8912900;
pub const kAudioChannelLayoutTag_DVD_16: _bindgen_ty_35 = 8978437;
pub const kAudioChannelLayoutTag_DVD_17: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_DVD_18: _bindgen_ty_35 = 9043973;
pub const kAudioChannelLayoutTag_DVD_19: _bindgen_ty_35 = 7733253;
pub const kAudioChannelLayoutTag_DVD_20: _bindgen_ty_35 = 7995398;
pub const kAudioChannelLayoutTag_AudioUnit_4: _bindgen_ty_35 = 7077892;
pub const kAudioChannelLayoutTag_AudioUnit_5: _bindgen_ty_35 = 7143429;
pub const kAudioChannelLayoutTag_AudioUnit_6: _bindgen_ty_35 = 7208966;
pub const kAudioChannelLayoutTag_AudioUnit_8: _bindgen_ty_35 = 7274504;
pub const kAudioChannelLayoutTag_AudioUnit_5_0: _bindgen_ty_35 = 7733253;
pub const kAudioChannelLayoutTag_AudioUnit_6_0: _bindgen_ty_35 = 9109510;
pub const kAudioChannelLayoutTag_AudioUnit_7_0: _bindgen_ty_35 = 9175047;
pub const kAudioChannelLayoutTag_AudioUnit_7_0_Front: _bindgen_ty_35 = 9699335;
pub const kAudioChannelLayoutTag_AudioUnit_5_1: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_AudioUnit_6_1: _bindgen_ty_35 = 8192007;
pub const kAudioChannelLayoutTag_AudioUnit_7_1: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_AudioUnit_7_1_Front: _bindgen_ty_35 = 8257544;
pub const kAudioChannelLayoutTag_AAC_3_0: _bindgen_ty_35 = 7471107;
pub const kAudioChannelLayoutTag_AAC_Quadraphonic: _bindgen_ty_35 = 7077892;
pub const kAudioChannelLayoutTag_AAC_4_0: _bindgen_ty_35 = 7602180;
pub const kAudioChannelLayoutTag_AAC_5_0: _bindgen_ty_35 = 7864325;
pub const kAudioChannelLayoutTag_AAC_5_1: _bindgen_ty_35 = 8126470;
pub const kAudioChannelLayoutTag_AAC_6_0: _bindgen_ty_35 = 9240582;
pub const kAudioChannelLayoutTag_AAC_6_1: _bindgen_ty_35 = 9306119;
pub const kAudioChannelLayoutTag_AAC_7_0: _bindgen_ty_35 = 9371655;
pub const kAudioChannelLayoutTag_AAC_7_1: _bindgen_ty_35 = 8323080;
pub const kAudioChannelLayoutTag_AAC_7_1_B: _bindgen_ty_35 = 11993096;
pub const kAudioChannelLayoutTag_AAC_7_1_C: _bindgen_ty_35 = 12058632;
pub const kAudioChannelLayoutTag_AAC_Octagonal: _bindgen_ty_35 = 9437192;
pub const kAudioChannelLayoutTag_TMH_10_2_std: _bindgen_ty_35 = 9502736;
pub const kAudioChannelLayoutTag_TMH_10_2_full: _bindgen_ty_35 = 9568277;
pub const kAudioChannelLayoutTag_AC3_1_0_1: _bindgen_ty_35 = 9764866;
pub const kAudioChannelLayoutTag_AC3_3_0: _bindgen_ty_35 = 9830403;
pub const kAudioChannelLayoutTag_AC3_3_1: _bindgen_ty_35 = 9895940;
pub const kAudioChannelLayoutTag_AC3_3_0_1: _bindgen_ty_35 = 9961476;
pub const kAudioChannelLayoutTag_AC3_2_1_1: _bindgen_ty_35 = 10027012;
pub const kAudioChannelLayoutTag_AC3_3_1_1: _bindgen_ty_35 = 10092549;
pub const kAudioChannelLayoutTag_EAC_6_0_A: _bindgen_ty_35 = 10158086;
pub const kAudioChannelLayoutTag_EAC_7_0_A: _bindgen_ty_35 = 10223623;
pub const kAudioChannelLayoutTag_EAC3_6_1_A: _bindgen_ty_35 = 10289159;
pub const kAudioChannelLayoutTag_EAC3_6_1_B: _bindgen_ty_35 = 10354695;
pub const kAudioChannelLayoutTag_EAC3_6_1_C: _bindgen_ty_35 = 10420231;
pub const kAudioChannelLayoutTag_EAC3_7_1_A: _bindgen_ty_35 = 10485768;
pub const kAudioChannelLayoutTag_EAC3_7_1_B: _bindgen_ty_35 = 10551304;
pub const kAudioChannelLayoutTag_EAC3_7_1_C: _bindgen_ty_35 = 10616840;
pub const kAudioChannelLayoutTag_EAC3_7_1_D: _bindgen_ty_35 = 10682376;
pub const kAudioChannelLayoutTag_EAC3_7_1_E: _bindgen_ty_35 = 10747912;
pub const kAudioChannelLayoutTag_EAC3_7_1_F: _bindgen_ty_35 = 10813448;
pub const kAudioChannelLayoutTag_EAC3_7_1_G: _bindgen_ty_35 = 10878984;
pub const kAudioChannelLayoutTag_EAC3_7_1_H: _bindgen_ty_35 = 10944520;
pub const kAudioChannelLayoutTag_DTS_3_1: _bindgen_ty_35 = 11010052;
pub const kAudioChannelLayoutTag_DTS_4_1: _bindgen_ty_35 = 11075589;
pub const kAudioChannelLayoutTag_DTS_6_0_A: _bindgen_ty_35 = 11141126;
pub const kAudioChannelLayoutTag_DTS_6_0_B: _bindgen_ty_35 = 11206662;
pub const kAudioChannelLayoutTag_DTS_6_0_C: _bindgen_ty_35 = 11272198;
pub const kAudioChannelLayoutTag_DTS_6_1_A: _bindgen_ty_35 = 11337735;
pub const kAudioChannelLayoutTag_DTS_6_1_B: _bindgen_ty_35 = 11403271;
pub const kAudioChannelLayoutTag_DTS_6_1_C: _bindgen_ty_35 = 11468807;
pub const kAudioChannelLayoutTag_DTS_7_0: _bindgen_ty_35 = 11534343;
pub const kAudioChannelLayoutTag_DTS_7_1: _bindgen_ty_35 = 11599880;
pub const kAudioChannelLayoutTag_DTS_8_0_A: _bindgen_ty_35 = 11665416;
pub const kAudioChannelLayoutTag_DTS_8_0_B: _bindgen_ty_35 = 11730952;
pub const kAudioChannelLayoutTag_DTS_8_1_A: _bindgen_ty_35 = 11796489;
pub const kAudioChannelLayoutTag_DTS_8_1_B: _bindgen_ty_35 = 11862025;
pub const kAudioChannelLayoutTag_DTS_6_1_D: _bindgen_ty_35 = 11927559;
pub const kAudioChannelLayoutTag_WAVE_2_1: _bindgen_ty_35 = 8716291;
pub const kAudioChannelLayoutTag_WAVE_3_0: _bindgen_ty_35 = 7405571;
pub const kAudioChannelLayoutTag_WAVE_4_0_A: _bindgen_ty_35 = 8650756;
pub const kAudioChannelLayoutTag_WAVE_4_0_B: _bindgen_ty_35 = 12124164;
pub const kAudioChannelLayoutTag_WAVE_5_0_A: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_WAVE_5_0_B: _bindgen_ty_35 = 12189701;
pub const kAudioChannelLayoutTag_WAVE_5_1_A: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_WAVE_5_1_B: _bindgen_ty_35 = 12255238;
pub const kAudioChannelLayoutTag_WAVE_6_1: _bindgen_ty_35 = 12320775;
pub const kAudioChannelLayoutTag_WAVE_7_1: _bindgen_ty_35 = 12386312;
pub const kAudioChannelLayoutTag_HOA_ACN_SN3D: _bindgen_ty_35 = 12451840;
pub const kAudioChannelLayoutTag_HOA_ACN_N3D: _bindgen_ty_35 = 12517376;
pub const kAudioChannelLayoutTag_Atmos_5_1_2: _bindgen_ty_35 = 12713992;
pub const kAudioChannelLayoutTag_Atmos_5_1_4: _bindgen_ty_35 = 12779530;
pub const kAudioChannelLayoutTag_Atmos_7_1_2: _bindgen_ty_35 = 12845066;
pub const kAudioChannelLayoutTag_Atmos_7_1_4: _bindgen_ty_35 = 12582924;
pub const kAudioChannelLayoutTag_Atmos_9_1_6: _bindgen_ty_35 = 12648464;
pub const kAudioChannelLayoutTag_Logic_Mono: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_Logic_Stereo: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_Logic_Quadraphonic: _bindgen_ty_35 = 7077892;
pub const kAudioChannelLayoutTag_Logic_4_0_A: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_Logic_4_0_B: _bindgen_ty_35 = 7602180;
pub const kAudioChannelLayoutTag_Logic_4_0_C: _bindgen_ty_35 = 12910596;
pub const kAudioChannelLayoutTag_Logic_5_0_A: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_Logic_5_0_B: _bindgen_ty_35 = 7733253;
pub const kAudioChannelLayoutTag_Logic_5_0_C: _bindgen_ty_35 = 7798789;
pub const kAudioChannelLayoutTag_Logic_5_0_D: _bindgen_ty_35 = 7864325;
pub const kAudioChannelLayoutTag_Logic_5_1_A: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_Logic_5_1_B: _bindgen_ty_35 = 7995398;
pub const kAudioChannelLayoutTag_Logic_5_1_C: _bindgen_ty_35 = 8060934;
pub const kAudioChannelLayoutTag_Logic_5_1_D: _bindgen_ty_35 = 8126470;
pub const kAudioChannelLayoutTag_Logic_6_0_A: _bindgen_ty_35 = 9240582;
pub const kAudioChannelLayoutTag_Logic_6_0_B: _bindgen_ty_35 = 12976134;
pub const kAudioChannelLayoutTag_Logic_6_0_C: _bindgen_ty_35 = 9109510;
pub const kAudioChannelLayoutTag_Logic_6_1_A: _bindgen_ty_35 = 9306119;
pub const kAudioChannelLayoutTag_Logic_6_1_B: _bindgen_ty_35 = 13041671;
pub const kAudioChannelLayoutTag_Logic_6_1_C: _bindgen_ty_35 = 8192007;
pub const kAudioChannelLayoutTag_Logic_6_1_D: _bindgen_ty_35 = 13107207;
pub const kAudioChannelLayoutTag_Logic_7_1_A: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_Logic_7_1_B: _bindgen_ty_35 = 13172744;
pub const kAudioChannelLayoutTag_Logic_7_1_C: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_A: _bindgen_ty_35 = 8257544;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_B: _bindgen_ty_35 = 8323080;
pub const kAudioChannelLayoutTag_Logic_7_1_SDDS_C: _bindgen_ty_35 = 8454152;
pub const kAudioChannelLayoutTag_Logic_Atmos_5_1_2: _bindgen_ty_35 = 12713992;
pub const kAudioChannelLayoutTag_Logic_Atmos_5_1_4: _bindgen_ty_35 = 12779530;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_2: _bindgen_ty_35 = 12845066;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_4_A: _bindgen_ty_35 = 12582924;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_4_B: _bindgen_ty_35 = 13238284;
pub const kAudioChannelLayoutTag_Logic_Atmos_7_1_6: _bindgen_ty_35 = 13303822;
pub const kAudioChannelLayoutTag_DiscreteInOrder: _bindgen_ty_35 = 9633792;
pub const kAudioChannelLayoutTag_CICP_1: _bindgen_ty_35 = 6553601;
pub const kAudioChannelLayoutTag_CICP_2: _bindgen_ty_35 = 6619138;
pub const kAudioChannelLayoutTag_CICP_3: _bindgen_ty_35 = 7405571;
pub const kAudioChannelLayoutTag_CICP_4: _bindgen_ty_35 = 7536644;
pub const kAudioChannelLayoutTag_CICP_5: _bindgen_ty_35 = 7667717;
pub const kAudioChannelLayoutTag_CICP_6: _bindgen_ty_35 = 7929862;
pub const kAudioChannelLayoutTag_CICP_7: _bindgen_ty_35 = 8323080;
pub const kAudioChannelLayoutTag_CICP_9: _bindgen_ty_35 = 8585219;
pub const kAudioChannelLayoutTag_CICP_10: _bindgen_ty_35 = 8650756;
pub const kAudioChannelLayoutTag_CICP_11: _bindgen_ty_35 = 8192007;
pub const kAudioChannelLayoutTag_CICP_12: _bindgen_ty_35 = 8388616;
pub const kAudioChannelLayoutTag_CICP_13: _bindgen_ty_35 = 13369368;
pub const kAudioChannelLayoutTag_CICP_14: _bindgen_ty_35 = 13434888;
pub const kAudioChannelLayoutTag_CICP_15: _bindgen_ty_35 = 13500428;
pub const kAudioChannelLayoutTag_CICP_16: _bindgen_ty_35 = 13565962;
pub const kAudioChannelLayoutTag_CICP_17: _bindgen_ty_35 = 13631500;
pub const kAudioChannelLayoutTag_CICP_18: _bindgen_ty_35 = 13697038;
pub const kAudioChannelLayoutTag_CICP_19: _bindgen_ty_35 = 13762572;
pub const kAudioChannelLayoutTag_CICP_20: _bindgen_ty_35 = 13828110;
pub const kAudioChannelLayoutTag_BeginReserved: _bindgen_ty_35 = 4026531840;
pub const kAudioChannelLayoutTag_EndReserved: _bindgen_ty_35 = 4294901759;
pub const kAudioChannelLayoutTag_Unknown: _bindgen_ty_35 = 4294901760;
pub type _bindgen_ty_35 = AudioChannelLayoutTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioChannelDescription {
    pub mChannelLabel: AudioChannelLabel,
    pub mChannelFlags: AudioChannelFlags,
    pub mCoordinates: [Float32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioChannelLayout {
    pub mChannelLayoutTag: AudioChannelLayoutTag,
    pub mChannelBitmap: AudioChannelBitmap,
    pub mNumberChannelDescriptions: UInt32,
    pub mChannelDescriptions: [AudioChannelDescription; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFormatListItem {
    pub mASBD: AudioStreamBasicDescription,
    pub mChannelLayoutTag: AudioChannelLayoutTag,
}
pub const MPEG4ObjectID_kMPEG4Object_AAC_Main: MPEG4ObjectID = 1;
pub const MPEG4ObjectID_kMPEG4Object_AAC_LC: MPEG4ObjectID = 2;
pub const MPEG4ObjectID_kMPEG4Object_AAC_SSR: MPEG4ObjectID = 3;
pub const MPEG4ObjectID_kMPEG4Object_AAC_LTP: MPEG4ObjectID = 4;
pub const MPEG4ObjectID_kMPEG4Object_AAC_SBR: MPEG4ObjectID = 5;
pub const MPEG4ObjectID_kMPEG4Object_AAC_Scalable: MPEG4ObjectID = 6;
pub const MPEG4ObjectID_kMPEG4Object_TwinVQ: MPEG4ObjectID = 7;
pub const MPEG4ObjectID_kMPEG4Object_CELP: MPEG4ObjectID = 8;
pub const MPEG4ObjectID_kMPEG4Object_HVXC: MPEG4ObjectID = 9;
pub type MPEG4ObjectID = ::std::os::raw::c_long;
pub type AVAudioInteger = ::std::os::raw::c_long;
pub type AVAudioUInteger = ::std::os::raw::c_ulong;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AVAudioSession(pub id);
impl std::ops::Deref for AVAudioSession {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AVAudioSession {}
impl AVAudioSession {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AVAudioSession), alloc) })
    }
}
impl IAVAudioSession for AVAudioSession {}
pub trait IAVAudioSession: Sized + std::ops::Deref {}
pub type AudioSessionID = u32;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeNone: AVAudioSessionErrorCode = 0;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeMediaServicesFailed:
    AVAudioSessionErrorCode = 1836282486;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeIsBusy: AVAudioSessionErrorCode =
    560030580;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeIncompatibleCategory:
    AVAudioSessionErrorCode = 560161140;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeCannotInterruptOthers:
    AVAudioSessionErrorCode = 560557684;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeMissingEntitlement:
    AVAudioSessionErrorCode = 1701737535;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeSiriIsRecording: AVAudioSessionErrorCode =
    1936290409;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeCannotStartPlaying:
    AVAudioSessionErrorCode = 561015905;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeCannotStartRecording:
    AVAudioSessionErrorCode = 561145187;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeBadParam: AVAudioSessionErrorCode = -50;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeInsufficientPriority:
    AVAudioSessionErrorCode = 561017449;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeResourceNotAvailable:
    AVAudioSessionErrorCode = 561145203;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeUnspecified: AVAudioSessionErrorCode =
    2003329396;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeExpiredSession: AVAudioSessionErrorCode =
    561210739;
pub const AVAudioSessionErrorCode_AVAudioSessionErrorCodeSessionNotActive: AVAudioSessionErrorCode =
    1768841571;
pub type AVAudioSessionErrorCode = AVAudioInteger;
pub const AVAudioSessionErrorInsufficientPriority: _bindgen_ty_36 = 561017449;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecCertificate {
    _unused: [u8; 0],
}
pub type SecCertificateRef = *mut __SecCertificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecIdentity {
    _unused: [u8; 0],
}
pub type SecIdentityRef = *mut __SecIdentity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKey {
    _unused: [u8; 0],
}
pub type SecKeyRef = *mut __SecKey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecPolicy {
    _unused: [u8; 0],
}
pub type SecPolicyRef = *mut __SecPolicy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecAccessControl {
    _unused: [u8; 0],
}
pub type SecAccessControlRef = *mut __SecAccessControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychain {
    _unused: [u8; 0],
}
pub type SecKeychainRef = *mut __SecKeychain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychainItem {
    _unused: [u8; 0],
}
pub type SecKeychainItemRef = *mut __SecKeychainItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychainSearch {
    _unused: [u8; 0],
}
pub type SecKeychainSearchRef = *mut __SecKeychainSearch;
pub type SecKeychainAttrType = OSType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttribute {
    pub tag: SecKeychainAttrType,
    pub length: UInt32,
    pub data: *mut ::std::os::raw::c_void,
}
pub type SecKeychainAttributePtr = *mut SecKeychainAttribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttributeList {
    pub count: UInt32,
    pub attr: *mut SecKeychainAttribute,
}
pub type SecKeychainStatus = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecTrustedApplication {
    _unused: [u8; 0],
}
pub type SecTrustedApplicationRef = *mut __SecTrustedApplication;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecAccess {
    _unused: [u8; 0],
}
pub type SecAccessRef = *mut __SecAccess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecACL {
    _unused: [u8; 0],
}
pub type SecACLRef = *mut __SecACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecPassword {
    _unused: [u8; 0],
}
pub type SecPasswordRef = *mut __SecPassword;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttributeInfo {
    pub count: UInt32,
    pub tag: *mut UInt32,
    pub format: *mut UInt32,
}
extern "C" {
    pub fn SecCopyErrorMessageString(
        status: OSStatus,
        reserved: *mut ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const errSecSuccess: _bindgen_ty_37 = 0;
pub const errSecUnimplemented: _bindgen_ty_37 = -4;
pub const errSecDiskFull: _bindgen_ty_37 = -34;
pub const errSecDskFull: _bindgen_ty_37 = -34;
pub const errSecIO: _bindgen_ty_37 = -36;
pub const errSecOpWr: _bindgen_ty_37 = -49;
pub const errSecParam: _bindgen_ty_37 = -50;
pub const errSecWrPerm: _bindgen_ty_37 = -61;
pub const errSecAllocate: _bindgen_ty_37 = -108;
pub const errSecUserCanceled: _bindgen_ty_37 = -128;
pub const errSecBadReq: _bindgen_ty_37 = -909;
pub const errSecInternalComponent: _bindgen_ty_37 = -2070;
pub const errSecCoreFoundationUnknown: _bindgen_ty_37 = -4960;
pub const errSecMissingEntitlement: _bindgen_ty_37 = -34018;
pub const errSecRestrictedAPI: _bindgen_ty_37 = -34020;
pub const errSecNotAvailable: _bindgen_ty_37 = -25291;
pub const errSecReadOnly: _bindgen_ty_37 = -25292;
pub const errSecAuthFailed: _bindgen_ty_37 = -25293;
pub const errSecNoSuchKeychain: _bindgen_ty_37 = -25294;
pub const errSecInvalidKeychain: _bindgen_ty_37 = -25295;
pub const errSecDuplicateKeychain: _bindgen_ty_37 = -25296;
pub const errSecDuplicateCallback: _bindgen_ty_37 = -25297;
pub const errSecInvalidCallback: _bindgen_ty_37 = -25298;
pub const errSecDuplicateItem: _bindgen_ty_37 = -25299;
pub const errSecItemNotFound: _bindgen_ty_37 = -25300;
pub const errSecBufferTooSmall: _bindgen_ty_37 = -25301;
pub const errSecDataTooLarge: _bindgen_ty_37 = -25302;
pub const errSecNoSuchAttr: _bindgen_ty_37 = -25303;
pub const errSecInvalidItemRef: _bindgen_ty_37 = -25304;
pub const errSecInvalidSearchRef: _bindgen_ty_37 = -25305;
pub const errSecNoSuchClass: _bindgen_ty_37 = -25306;
pub const errSecNoDefaultKeychain: _bindgen_ty_37 = -25307;
pub const errSecInteractionNotAllowed: _bindgen_ty_37 = -25308;
pub const errSecReadOnlyAttr: _bindgen_ty_37 = -25309;
pub const errSecWrongSecVersion: _bindgen_ty_37 = -25310;
pub const errSecKeySizeNotAllowed: _bindgen_ty_37 = -25311;
pub const errSecNoStorageModule: _bindgen_ty_37 = -25312;
pub const errSecNoCertificateModule: _bindgen_ty_37 = -25313;
pub const errSecNoPolicyModule: _bindgen_ty_37 = -25314;
pub const errSecInteractionRequired: _bindgen_ty_37 = -25315;
pub const errSecDataNotAvailable: _bindgen_ty_37 = -25316;
pub const errSecDataNotModifiable: _bindgen_ty_37 = -25317;
pub const errSecCreateChainFailed: _bindgen_ty_37 = -25318;
pub const errSecInvalidPrefsDomain: _bindgen_ty_37 = -25319;
pub const errSecInDarkWake: _bindgen_ty_37 = -25320;
pub const errSecACLNotSimple: _bindgen_ty_37 = -25240;
pub const errSecPolicyNotFound: _bindgen_ty_37 = -25241;
pub const errSecInvalidTrustSetting: _bindgen_ty_37 = -25242;
pub const errSecNoAccessForItem: _bindgen_ty_37 = -25243;
pub const errSecInvalidOwnerEdit: _bindgen_ty_37 = -25244;
pub const errSecTrustNotAvailable: _bindgen_ty_37 = -25245;
pub const errSecUnsupportedFormat: _bindgen_ty_37 = -25256;
pub const errSecUnknownFormat: _bindgen_ty_37 = -25257;
pub const errSecKeyIsSensitive: _bindgen_ty_37 = -25258;
pub const errSecMultiplePrivKeys: _bindgen_ty_37 = -25259;
pub const errSecPassphraseRequired: _bindgen_ty_37 = -25260;
pub const errSecInvalidPasswordRef: _bindgen_ty_37 = -25261;
pub const errSecInvalidTrustSettings: _bindgen_ty_37 = -25262;
pub const errSecNoTrustSettings: _bindgen_ty_37 = -25263;
pub const errSecPkcs12VerifyFailure: _bindgen_ty_37 = -25264;
pub const errSecNotSigner: _bindgen_ty_37 = -26267;
pub const errSecDecode: _bindgen_ty_37 = -26275;
pub const errSecServiceNotAvailable: _bindgen_ty_37 = -67585;
pub const errSecInsufficientClientID: _bindgen_ty_37 = -67586;
pub const errSecDeviceReset: _bindgen_ty_37 = -67587;
pub const errSecDeviceFailed: _bindgen_ty_37 = -67588;
pub const errSecAppleAddAppACLSubject: _bindgen_ty_37 = -67589;
pub const errSecApplePublicKeyIncomplete: _bindgen_ty_37 = -67590;
pub const errSecAppleSignatureMismatch: _bindgen_ty_37 = -67591;
pub const errSecAppleInvalidKeyStartDate: _bindgen_ty_37 = -67592;
pub const errSecAppleInvalidKeyEndDate: _bindgen_ty_37 = -67593;
pub const errSecConversionError: _bindgen_ty_37 = -67594;
pub const errSecAppleSSLv2Rollback: _bindgen_ty_37 = -67595;
pub const errSecQuotaExceeded: _bindgen_ty_37 = -67596;
pub const errSecFileTooBig: _bindgen_ty_37 = -67597;
pub const errSecInvalidDatabaseBlob: _bindgen_ty_37 = -67598;
pub const errSecInvalidKeyBlob: _bindgen_ty_37 = -67599;
pub const errSecIncompatibleDatabaseBlob: _bindgen_ty_37 = -67600;
pub const errSecIncompatibleKeyBlob: _bindgen_ty_37 = -67601;
pub const errSecHostNameMismatch: _bindgen_ty_37 = -67602;
pub const errSecUnknownCriticalExtensionFlag: _bindgen_ty_37 = -67603;
pub const errSecNoBasicConstraints: _bindgen_ty_37 = -67604;
pub const errSecNoBasicConstraintsCA: _bindgen_ty_37 = -67605;
pub const errSecInvalidAuthorityKeyID: _bindgen_ty_37 = -67606;
pub const errSecInvalidSubjectKeyID: _bindgen_ty_37 = -67607;
pub const errSecInvalidKeyUsageForPolicy: _bindgen_ty_37 = -67608;
pub const errSecInvalidExtendedKeyUsage: _bindgen_ty_37 = -67609;
pub const errSecInvalidIDLinkage: _bindgen_ty_37 = -67610;
pub const errSecPathLengthConstraintExceeded: _bindgen_ty_37 = -67611;
pub const errSecInvalidRoot: _bindgen_ty_37 = -67612;
pub const errSecCRLExpired: _bindgen_ty_37 = -67613;
pub const errSecCRLNotValidYet: _bindgen_ty_37 = -67614;
pub const errSecCRLNotFound: _bindgen_ty_37 = -67615;
pub const errSecCRLServerDown: _bindgen_ty_37 = -67616;
pub const errSecCRLBadURI: _bindgen_ty_37 = -67617;
pub const errSecUnknownCertExtension: _bindgen_ty_37 = -67618;
pub const errSecUnknownCRLExtension: _bindgen_ty_37 = -67619;
pub const errSecCRLNotTrusted: _bindgen_ty_37 = -67620;
pub const errSecCRLPolicyFailed: _bindgen_ty_37 = -67621;
pub const errSecIDPFailure: _bindgen_ty_37 = -67622;
pub const errSecSMIMEEmailAddressesNotFound: _bindgen_ty_37 = -67623;
pub const errSecSMIMEBadExtendedKeyUsage: _bindgen_ty_37 = -67624;
pub const errSecSMIMEBadKeyUsage: _bindgen_ty_37 = -67625;
pub const errSecSMIMEKeyUsageNotCritical: _bindgen_ty_37 = -67626;
pub const errSecSMIMENoEmailAddress: _bindgen_ty_37 = -67627;
pub const errSecSMIMESubjAltNameNotCritical: _bindgen_ty_37 = -67628;
pub const errSecSSLBadExtendedKeyUsage: _bindgen_ty_37 = -67629;
pub const errSecOCSPBadResponse: _bindgen_ty_37 = -67630;
pub const errSecOCSPBadRequest: _bindgen_ty_37 = -67631;
pub const errSecOCSPUnavailable: _bindgen_ty_37 = -67632;
pub const errSecOCSPStatusUnrecognized: _bindgen_ty_37 = -67633;
pub const errSecEndOfData: _bindgen_ty_37 = -67634;
pub const errSecIncompleteCertRevocationCheck: _bindgen_ty_37 = -67635;
pub const errSecNetworkFailure: _bindgen_ty_37 = -67636;
pub const errSecOCSPNotTrustedToAnchor: _bindgen_ty_37 = -67637;
pub const errSecRecordModified: _bindgen_ty_37 = -67638;
pub const errSecOCSPSignatureError: _bindgen_ty_37 = -67639;
pub const errSecOCSPNoSigner: _bindgen_ty_37 = -67640;
pub const errSecOCSPResponderMalformedReq: _bindgen_ty_37 = -67641;
pub const errSecOCSPResponderInternalError: _bindgen_ty_37 = -67642;
pub const errSecOCSPResponderTryLater: _bindgen_ty_37 = -67643;
pub const errSecOCSPResponderSignatureRequired: _bindgen_ty_37 = -67644;
pub const errSecOCSPResponderUnauthorized: _bindgen_ty_37 = -67645;
pub const errSecOCSPResponseNonceMismatch: _bindgen_ty_37 = -67646;
pub const errSecCodeSigningBadCertChainLength: _bindgen_ty_37 = -67647;
pub const errSecCodeSigningNoBasicConstraints: _bindgen_ty_37 = -67648;
pub const errSecCodeSigningBadPathLengthConstraint: _bindgen_ty_37 = -67649;
pub const errSecCodeSigningNoExtendedKeyUsage: _bindgen_ty_37 = -67650;
pub const errSecCodeSigningDevelopment: _bindgen_ty_37 = -67651;
pub const errSecResourceSignBadCertChainLength: _bindgen_ty_37 = -67652;
pub const errSecResourceSignBadExtKeyUsage: _bindgen_ty_37 = -67653;
pub const errSecTrustSettingDeny: _bindgen_ty_37 = -67654;
pub const errSecInvalidSubjectName: _bindgen_ty_37 = -67655;
pub const errSecUnknownQualifiedCertStatement: _bindgen_ty_37 = -67656;
pub const errSecMobileMeRequestQueued: _bindgen_ty_37 = -67657;
pub const errSecMobileMeRequestRedirected: _bindgen_ty_37 = -67658;
pub const errSecMobileMeServerError: _bindgen_ty_37 = -67659;
pub const errSecMobileMeServerNotAvailable: _bindgen_ty_37 = -67660;
pub const errSecMobileMeServerAlreadyExists: _bindgen_ty_37 = -67661;
pub const errSecMobileMeServerServiceErr: _bindgen_ty_37 = -67662;
pub const errSecMobileMeRequestAlreadyPending: _bindgen_ty_37 = -67663;
pub const errSecMobileMeNoRequestPending: _bindgen_ty_37 = -67664;
pub const errSecMobileMeCSRVerifyFailure: _bindgen_ty_37 = -67665;
pub const errSecMobileMeFailedConsistencyCheck: _bindgen_ty_37 = -67666;
pub const errSecNotInitialized: _bindgen_ty_37 = -67667;
pub const errSecInvalidHandleUsage: _bindgen_ty_37 = -67668;
pub const errSecPVCReferentNotFound: _bindgen_ty_37 = -67669;
pub const errSecFunctionIntegrityFail: _bindgen_ty_37 = -67670;
pub const errSecInternalError: _bindgen_ty_37 = -67671;
pub const errSecMemoryError: _bindgen_ty_37 = -67672;
pub const errSecInvalidData: _bindgen_ty_37 = -67673;
pub const errSecMDSError: _bindgen_ty_37 = -67674;
pub const errSecInvalidPointer: _bindgen_ty_37 = -67675;
pub const errSecSelfCheckFailed: _bindgen_ty_37 = -67676;
pub const errSecFunctionFailed: _bindgen_ty_37 = -67677;
pub const errSecModuleManifestVerifyFailed: _bindgen_ty_37 = -67678;
pub const errSecInvalidGUID: _bindgen_ty_37 = -67679;
pub const errSecInvalidHandle: _bindgen_ty_37 = -67680;
pub const errSecInvalidDBList: _bindgen_ty_37 = -67681;
pub const errSecInvalidPassthroughID: _bindgen_ty_37 = -67682;
pub const errSecInvalidNetworkAddress: _bindgen_ty_37 = -67683;
pub const errSecCRLAlreadySigned: _bindgen_ty_37 = -67684;
pub const errSecInvalidNumberOfFields: _bindgen_ty_37 = -67685;
pub const errSecVerificationFailure: _bindgen_ty_37 = -67686;
pub const errSecUnknownTag: _bindgen_ty_37 = -67687;
pub const errSecInvalidSignature: _bindgen_ty_37 = -67688;
pub const errSecInvalidName: _bindgen_ty_37 = -67689;
pub const errSecInvalidCertificateRef: _bindgen_ty_37 = -67690;
pub const errSecInvalidCertificateGroup: _bindgen_ty_37 = -67691;
pub const errSecTagNotFound: _bindgen_ty_37 = -67692;
pub const errSecInvalidQuery: _bindgen_ty_37 = -67693;
pub const errSecInvalidValue: _bindgen_ty_37 = -67694;
pub const errSecCallbackFailed: _bindgen_ty_37 = -67695;
pub const errSecACLDeleteFailed: _bindgen_ty_37 = -67696;
pub const errSecACLReplaceFailed: _bindgen_ty_37 = -67697;
pub const errSecACLAddFailed: _bindgen_ty_37 = -67698;
pub const errSecACLChangeFailed: _bindgen_ty_37 = -67699;
pub const errSecInvalidAccessCredentials: _bindgen_ty_37 = -67700;
pub const errSecInvalidRecord: _bindgen_ty_37 = -67701;
pub const errSecInvalidACL: _bindgen_ty_37 = -67702;
pub const errSecInvalidSampleValue: _bindgen_ty_37 = -67703;
pub const errSecIncompatibleVersion: _bindgen_ty_37 = -67704;
pub const errSecPrivilegeNotGranted: _bindgen_ty_37 = -67705;
pub const errSecInvalidScope: _bindgen_ty_37 = -67706;
pub const errSecPVCAlreadyConfigured: _bindgen_ty_37 = -67707;
pub const errSecInvalidPVC: _bindgen_ty_37 = -67708;
pub const errSecEMMLoadFailed: _bindgen_ty_37 = -67709;
pub const errSecEMMUnloadFailed: _bindgen_ty_37 = -67710;
pub const errSecAddinLoadFailed: _bindgen_ty_37 = -67711;
pub const errSecInvalidKeyRef: _bindgen_ty_37 = -67712;
pub const errSecInvalidKeyHierarchy: _bindgen_ty_37 = -67713;
pub const errSecAddinUnloadFailed: _bindgen_ty_37 = -67714;
pub const errSecLibraryReferenceNotFound: _bindgen_ty_37 = -67715;
pub const errSecInvalidAddinFunctionTable: _bindgen_ty_37 = -67716;
pub const errSecInvalidServiceMask: _bindgen_ty_37 = -67717;
pub const errSecModuleNotLoaded: _bindgen_ty_37 = -67718;
pub const errSecInvalidSubServiceID: _bindgen_ty_37 = -67719;
pub const errSecAttributeNotInContext: _bindgen_ty_37 = -67720;
pub const errSecModuleManagerInitializeFailed: _bindgen_ty_37 = -67721;
pub const errSecModuleManagerNotFound: _bindgen_ty_37 = -67722;
pub const errSecEventNotificationCallbackNotFound: _bindgen_ty_37 = -67723;
pub const errSecInputLengthError: _bindgen_ty_37 = -67724;
pub const errSecOutputLengthError: _bindgen_ty_37 = -67725;
pub const errSecPrivilegeNotSupported: _bindgen_ty_37 = -67726;
pub const errSecDeviceError: _bindgen_ty_37 = -67727;
pub const errSecAttachHandleBusy: _bindgen_ty_37 = -67728;
pub const errSecNotLoggedIn: _bindgen_ty_37 = -67729;
pub const errSecAlgorithmMismatch: _bindgen_ty_37 = -67730;
pub const errSecKeyUsageIncorrect: _bindgen_ty_37 = -67731;
pub const errSecKeyBlobTypeIncorrect: _bindgen_ty_37 = -67732;
pub const errSecKeyHeaderInconsistent: _bindgen_ty_37 = -67733;
pub const errSecUnsupportedKeyFormat: _bindgen_ty_37 = -67734;
pub const errSecUnsupportedKeySize: _bindgen_ty_37 = -67735;
pub const errSecInvalidKeyUsageMask: _bindgen_ty_37 = -67736;
pub const errSecUnsupportedKeyUsageMask: _bindgen_ty_37 = -67737;
pub const errSecInvalidKeyAttributeMask: _bindgen_ty_37 = -67738;
pub const errSecUnsupportedKeyAttributeMask: _bindgen_ty_37 = -67739;
pub const errSecInvalidKeyLabel: _bindgen_ty_37 = -67740;
pub const errSecUnsupportedKeyLabel: _bindgen_ty_37 = -67741;
pub const errSecInvalidKeyFormat: _bindgen_ty_37 = -67742;
pub const errSecUnsupportedVectorOfBuffers: _bindgen_ty_37 = -67743;
pub const errSecInvalidInputVector: _bindgen_ty_37 = -67744;
pub const errSecInvalidOutputVector: _bindgen_ty_37 = -67745;
pub const errSecInvalidContext: _bindgen_ty_37 = -67746;
pub const errSecInvalidAlgorithm: _bindgen_ty_37 = -67747;
pub const errSecInvalidAttributeKey: _bindgen_ty_37 = -67748;
pub const errSecMissingAttributeKey: _bindgen_ty_37 = -67749;
pub const errSecInvalidAttributeInitVector: _bindgen_ty_37 = -67750;
pub const errSecMissingAttributeInitVector: _bindgen_ty_37 = -67751;
pub const errSecInvalidAttributeSalt: _bindgen_ty_37 = -67752;
pub const errSecMissingAttributeSalt: _bindgen_ty_37 = -67753;
pub const errSecInvalidAttributePadding: _bindgen_ty_37 = -67754;
pub const errSecMissingAttributePadding: _bindgen_ty_37 = -67755;
pub const errSecInvalidAttributeRandom: _bindgen_ty_37 = -67756;
pub const errSecMissingAttributeRandom: _bindgen_ty_37 = -67757;
pub const errSecInvalidAttributeSeed: _bindgen_ty_37 = -67758;
pub const errSecMissingAttributeSeed: _bindgen_ty_37 = -67759;
pub const errSecInvalidAttributePassphrase: _bindgen_ty_37 = -67760;
pub const errSecMissingAttributePassphrase: _bindgen_ty_37 = -67761;
pub const errSecInvalidAttributeKeyLength: _bindgen_ty_37 = -67762;
pub const errSecMissingAttributeKeyLength: _bindgen_ty_37 = -67763;
pub const errSecInvalidAttributeBlockSize: _bindgen_ty_37 = -67764;
pub const errSecMissingAttributeBlockSize: _bindgen_ty_37 = -67765;
pub const errSecInvalidAttributeOutputSize: _bindgen_ty_37 = -67766;
pub const errSecMissingAttributeOutputSize: _bindgen_ty_37 = -67767;
pub const errSecInvalidAttributeRounds: _bindgen_ty_37 = -67768;
pub const errSecMissingAttributeRounds: _bindgen_ty_37 = -67769;
pub const errSecInvalidAlgorithmParms: _bindgen_ty_37 = -67770;
pub const errSecMissingAlgorithmParms: _bindgen_ty_37 = -67771;
pub const errSecInvalidAttributeLabel: _bindgen_ty_37 = -67772;
pub const errSecMissingAttributeLabel: _bindgen_ty_37 = -67773;
pub const errSecInvalidAttributeKeyType: _bindgen_ty_37 = -67774;
pub const errSecMissingAttributeKeyType: _bindgen_ty_37 = -67775;
pub const errSecInvalidAttributeMode: _bindgen_ty_37 = -67776;
pub const errSecMissingAttributeMode: _bindgen_ty_37 = -67777;
pub const errSecInvalidAttributeEffectiveBits: _bindgen_ty_37 = -67778;
pub const errSecMissingAttributeEffectiveBits: _bindgen_ty_37 = -67779;
pub const errSecInvalidAttributeStartDate: _bindgen_ty_37 = -67780;
pub const errSecMissingAttributeStartDate: _bindgen_ty_37 = -67781;
pub const errSecInvalidAttributeEndDate: _bindgen_ty_37 = -67782;
pub const errSecMissingAttributeEndDate: _bindgen_ty_37 = -67783;
pub const errSecInvalidAttributeVersion: _bindgen_ty_37 = -67784;
pub const errSecMissingAttributeVersion: _bindgen_ty_37 = -67785;
pub const errSecInvalidAttributePrime: _bindgen_ty_37 = -67786;
pub const errSecMissingAttributePrime: _bindgen_ty_37 = -67787;
pub const errSecInvalidAttributeBase: _bindgen_ty_37 = -67788;
pub const errSecMissingAttributeBase: _bindgen_ty_37 = -67789;
pub const errSecInvalidAttributeSubprime: _bindgen_ty_37 = -67790;
pub const errSecMissingAttributeSubprime: _bindgen_ty_37 = -67791;
pub const errSecInvalidAttributeIterationCount: _bindgen_ty_37 = -67792;
pub const errSecMissingAttributeIterationCount: _bindgen_ty_37 = -67793;
pub const errSecInvalidAttributeDLDBHandle: _bindgen_ty_37 = -67794;
pub const errSecMissingAttributeDLDBHandle: _bindgen_ty_37 = -67795;
pub const errSecInvalidAttributeAccessCredentials: _bindgen_ty_37 = -67796;
pub const errSecMissingAttributeAccessCredentials: _bindgen_ty_37 = -67797;
pub const errSecInvalidAttributePublicKeyFormat: _bindgen_ty_37 = -67798;
pub const errSecMissingAttributePublicKeyFormat: _bindgen_ty_37 = -67799;
pub const errSecInvalidAttributePrivateKeyFormat: _bindgen_ty_37 = -67800;
pub const errSecMissingAttributePrivateKeyFormat: _bindgen_ty_37 = -67801;
pub const errSecInvalidAttributeSymmetricKeyFormat: _bindgen_ty_37 = -67802;
pub const errSecMissingAttributeSymmetricKeyFormat: _bindgen_ty_37 = -67803;
pub const errSecInvalidAttributeWrappedKeyFormat: _bindgen_ty_37 = -67804;
pub const errSecMissingAttributeWrappedKeyFormat: _bindgen_ty_37 = -67805;
pub const errSecStagedOperationInProgress: _bindgen_ty_37 = -67806;
pub const errSecStagedOperationNotStarted: _bindgen_ty_37 = -67807;
pub const errSecVerifyFailed: _bindgen_ty_37 = -67808;
pub const errSecQuerySizeUnknown: _bindgen_ty_37 = -67809;
pub const errSecBlockSizeMismatch: _bindgen_ty_37 = -67810;
pub const errSecPublicKeyInconsistent: _bindgen_ty_37 = -67811;
pub const errSecDeviceVerifyFailed: _bindgen_ty_37 = -67812;
pub const errSecInvalidLoginName: _bindgen_ty_37 = -67813;
pub const errSecAlreadyLoggedIn: _bindgen_ty_37 = -67814;
pub const errSecInvalidDigestAlgorithm: _bindgen_ty_37 = -67815;
pub const errSecInvalidCRLGroup: _bindgen_ty_37 = -67816;
pub const errSecCertificateCannotOperate: _bindgen_ty_37 = -67817;
pub const errSecCertificateExpired: _bindgen_ty_37 = -67818;
pub const errSecCertificateNotValidYet: _bindgen_ty_37 = -67819;
pub const errSecCertificateRevoked: _bindgen_ty_37 = -67820;
pub const errSecCertificateSuspended: _bindgen_ty_37 = -67821;
pub const errSecInsufficientCredentials: _bindgen_ty_37 = -67822;
pub const errSecInvalidAction: _bindgen_ty_37 = -67823;
pub const errSecInvalidAuthority: _bindgen_ty_37 = -67824;
pub const errSecVerifyActionFailed: _bindgen_ty_37 = -67825;
pub const errSecInvalidCertAuthority: _bindgen_ty_37 = -67826;
pub const errSecInvalidCRLAuthority: _bindgen_ty_37 = -67827;
pub const errSecInvaldCRLAuthority: _bindgen_ty_37 = -67827;
pub const errSecInvalidCRLEncoding: _bindgen_ty_37 = -67828;
pub const errSecInvalidCRLType: _bindgen_ty_37 = -67829;
pub const errSecInvalidCRL: _bindgen_ty_37 = -67830;
pub const errSecInvalidFormType: _bindgen_ty_37 = -67831;
pub const errSecInvalidID: _bindgen_ty_37 = -67832;
pub const errSecInvalidIdentifier: _bindgen_ty_37 = -67833;
pub const errSecInvalidIndex: _bindgen_ty_37 = -67834;
pub const errSecInvalidPolicyIdentifiers: _bindgen_ty_37 = -67835;
pub const errSecInvalidTimeString: _bindgen_ty_37 = -67836;
pub const errSecInvalidReason: _bindgen_ty_37 = -67837;
pub const errSecInvalidRequestInputs: _bindgen_ty_37 = -67838;
pub const errSecInvalidResponseVector: _bindgen_ty_37 = -67839;
pub const errSecInvalidStopOnPolicy: _bindgen_ty_37 = -67840;
pub const errSecInvalidTuple: _bindgen_ty_37 = -67841;
pub const errSecMultipleValuesUnsupported: _bindgen_ty_37 = -67842;
pub const errSecNotTrusted: _bindgen_ty_37 = -67843;
pub const errSecNoDefaultAuthority: _bindgen_ty_37 = -67844;
pub const errSecRejectedForm: _bindgen_ty_37 = -67845;
pub const errSecRequestLost: _bindgen_ty_37 = -67846;
pub const errSecRequestRejected: _bindgen_ty_37 = -67847;
pub const errSecUnsupportedAddressType: _bindgen_ty_37 = -67848;
pub const errSecUnsupportedService: _bindgen_ty_37 = -67849;
pub const errSecInvalidTupleGroup: _bindgen_ty_37 = -67850;
pub const errSecInvalidBaseACLs: _bindgen_ty_37 = -67851;
pub const errSecInvalidTupleCredentials: _bindgen_ty_37 = -67852;
pub const errSecInvalidTupleCredendtials: _bindgen_ty_37 = -67852;
pub const errSecInvalidEncoding: _bindgen_ty_37 = -67853;
pub const errSecInvalidValidityPeriod: _bindgen_ty_37 = -67854;
pub const errSecInvalidRequestor: _bindgen_ty_37 = -67855;
pub const errSecRequestDescriptor: _bindgen_ty_37 = -67856;
pub const errSecInvalidBundleInfo: _bindgen_ty_37 = -67857;
pub const errSecInvalidCRLIndex: _bindgen_ty_37 = -67858;
pub const errSecNoFieldValues: _bindgen_ty_37 = -67859;
pub const errSecUnsupportedFieldFormat: _bindgen_ty_37 = -67860;
pub const errSecUnsupportedIndexInfo: _bindgen_ty_37 = -67861;
pub const errSecUnsupportedLocality: _bindgen_ty_37 = -67862;
pub const errSecUnsupportedNumAttributes: _bindgen_ty_37 = -67863;
pub const errSecUnsupportedNumIndexes: _bindgen_ty_37 = -67864;
pub const errSecUnsupportedNumRecordTypes: _bindgen_ty_37 = -67865;
pub const errSecFieldSpecifiedMultiple: _bindgen_ty_37 = -67866;
pub const errSecIncompatibleFieldFormat: _bindgen_ty_37 = -67867;
pub const errSecInvalidParsingModule: _bindgen_ty_37 = -67868;
pub const errSecDatabaseLocked: _bindgen_ty_37 = -67869;
pub const errSecDatastoreIsOpen: _bindgen_ty_37 = -67870;
pub const errSecMissingValue: _bindgen_ty_37 = -67871;
pub const errSecUnsupportedQueryLimits: _bindgen_ty_37 = -67872;
pub const errSecUnsupportedNumSelectionPreds: _bindgen_ty_37 = -67873;
pub const errSecUnsupportedOperator: _bindgen_ty_37 = -67874;
pub const errSecInvalidDBLocation: _bindgen_ty_37 = -67875;
pub const errSecInvalidAccessRequest: _bindgen_ty_37 = -67876;
pub const errSecInvalidIndexInfo: _bindgen_ty_37 = -67877;
pub const errSecInvalidNewOwner: _bindgen_ty_37 = -67878;
pub const errSecInvalidModifyMode: _bindgen_ty_37 = -67879;
pub const errSecMissingRequiredExtension: _bindgen_ty_37 = -67880;
pub const errSecExtendedKeyUsageNotCritical: _bindgen_ty_37 = -67881;
pub const errSecTimestampMissing: _bindgen_ty_37 = -67882;
pub const errSecTimestampInvalid: _bindgen_ty_37 = -67883;
pub const errSecTimestampNotTrusted: _bindgen_ty_37 = -67884;
pub const errSecTimestampServiceNotAvailable: _bindgen_ty_37 = -67885;
pub const errSecTimestampBadAlg: _bindgen_ty_37 = -67886;
pub const errSecTimestampBadRequest: _bindgen_ty_37 = -67887;
pub const errSecTimestampBadDataFormat: _bindgen_ty_37 = -67888;
pub const errSecTimestampTimeNotAvailable: _bindgen_ty_37 = -67889;
pub const errSecTimestampUnacceptedPolicy: _bindgen_ty_37 = -67890;
pub const errSecTimestampUnacceptedExtension: _bindgen_ty_37 = -67891;
pub const errSecTimestampAddInfoNotAvailable: _bindgen_ty_37 = -67892;
pub const errSecTimestampSystemFailure: _bindgen_ty_37 = -67893;
pub const errSecSigningTimeMissing: _bindgen_ty_37 = -67894;
pub const errSecTimestampRejection: _bindgen_ty_37 = -67895;
pub const errSecTimestampWaiting: _bindgen_ty_37 = -67896;
pub const errSecTimestampRevocationWarning: _bindgen_ty_37 = -67897;
pub const errSecTimestampRevocationNotification: _bindgen_ty_37 = -67898;
pub const errSecCertificatePolicyNotAllowed: _bindgen_ty_37 = -67899;
pub const errSecCertificateNameNotAllowed: _bindgen_ty_37 = -67900;
pub const errSecCertificateValidityPeriodTooLong: _bindgen_ty_37 = -67901;
pub const errSecCertificateIsCA: _bindgen_ty_37 = -67902;
pub const errSecCertificateDuplicateExtension: _bindgen_ty_37 = -67903;
pub type _bindgen_ty_37 = OSStatus;
pub const errSSLProtocol: _bindgen_ty_38 = -9800;
pub const errSSLNegotiation: _bindgen_ty_38 = -9801;
pub const errSSLFatalAlert: _bindgen_ty_38 = -9802;
pub const errSSLWouldBlock: _bindgen_ty_38 = -9803;
pub const errSSLSessionNotFound: _bindgen_ty_38 = -9804;
pub const errSSLClosedGraceful: _bindgen_ty_38 = -9805;
pub const errSSLClosedAbort: _bindgen_ty_38 = -9806;
pub const errSSLXCertChainInvalid: _bindgen_ty_38 = -9807;
pub const errSSLBadCert: _bindgen_ty_38 = -9808;
pub const errSSLCrypto: _bindgen_ty_38 = -9809;
pub const errSSLInternal: _bindgen_ty_38 = -9810;
pub const errSSLModuleAttach: _bindgen_ty_38 = -9811;
pub const errSSLUnknownRootCert: _bindgen_ty_38 = -9812;
pub const errSSLNoRootCert: _bindgen_ty_38 = -9813;
pub const errSSLCertExpired: _bindgen_ty_38 = -9814;
pub const errSSLCertNotYetValid: _bindgen_ty_38 = -9815;
pub const errSSLClosedNoNotify: _bindgen_ty_38 = -9816;
pub const errSSLBufferOverflow: _bindgen_ty_38 = -9817;
pub const errSSLBadCipherSuite: _bindgen_ty_38 = -9818;
pub const errSSLPeerUnexpectedMsg: _bindgen_ty_38 = -9819;
pub const errSSLPeerBadRecordMac: _bindgen_ty_38 = -9820;
pub const errSSLPeerDecryptionFail: _bindgen_ty_38 = -9821;
pub const errSSLPeerRecordOverflow: _bindgen_ty_38 = -9822;
pub const errSSLPeerDecompressFail: _bindgen_ty_38 = -9823;
pub const errSSLPeerHandshakeFail: _bindgen_ty_38 = -9824;
pub const errSSLPeerBadCert: _bindgen_ty_38 = -9825;
pub const errSSLPeerUnsupportedCert: _bindgen_ty_38 = -9826;
pub const errSSLPeerCertRevoked: _bindgen_ty_38 = -9827;
pub const errSSLPeerCertExpired: _bindgen_ty_38 = -9828;
pub const errSSLPeerCertUnknown: _bindgen_ty_38 = -9829;
pub const errSSLIllegalParam: _bindgen_ty_38 = -9830;
pub const errSSLPeerUnknownCA: _bindgen_ty_38 = -9831;
pub const errSSLPeerAccessDenied: _bindgen_ty_38 = -9832;
pub const errSSLPeerDecodeError: _bindgen_ty_38 = -9833;
pub const errSSLPeerDecryptError: _bindgen_ty_38 = -9834;
pub const errSSLPeerExportRestriction: _bindgen_ty_38 = -9835;
pub const errSSLPeerProtocolVersion: _bindgen_ty_38 = -9836;
pub const errSSLPeerInsufficientSecurity: _bindgen_ty_38 = -9837;
pub const errSSLPeerInternalError: _bindgen_ty_38 = -9838;
pub const errSSLPeerUserCancelled: _bindgen_ty_38 = -9839;
pub const errSSLPeerNoRenegotiation: _bindgen_ty_38 = -9840;
pub const errSSLPeerAuthCompleted: _bindgen_ty_38 = -9841;
pub const errSSLClientCertRequested: _bindgen_ty_38 = -9842;
pub const errSSLHostNameMismatch: _bindgen_ty_38 = -9843;
pub const errSSLConnectionRefused: _bindgen_ty_38 = -9844;
pub const errSSLDecryptionFail: _bindgen_ty_38 = -9845;
pub const errSSLBadRecordMac: _bindgen_ty_38 = -9846;
pub const errSSLRecordOverflow: _bindgen_ty_38 = -9847;
pub const errSSLBadConfiguration: _bindgen_ty_38 = -9848;
pub const errSSLUnexpectedRecord: _bindgen_ty_38 = -9849;
pub const errSSLWeakPeerEphemeralDHKey: _bindgen_ty_38 = -9850;
pub const errSSLClientHelloReceived: _bindgen_ty_38 = -9851;
pub const errSSLTransportReset: _bindgen_ty_38 = -9852;
pub const errSSLNetworkTimeout: _bindgen_ty_38 = -9853;
pub const errSSLConfigurationFailed: _bindgen_ty_38 = -9854;
pub const errSSLUnsupportedExtension: _bindgen_ty_38 = -9855;
pub const errSSLUnexpectedMessage: _bindgen_ty_38 = -9856;
pub const errSSLDecompressFail: _bindgen_ty_38 = -9857;
pub const errSSLHandshakeFail: _bindgen_ty_38 = -9858;
pub const errSSLDecodeError: _bindgen_ty_38 = -9859;
pub const errSSLInappropriateFallback: _bindgen_ty_38 = -9860;
pub const errSSLMissingExtension: _bindgen_ty_38 = -9861;
pub const errSSLBadCertificateStatusResponse: _bindgen_ty_38 = -9862;
pub const errSSLCertificateRequired: _bindgen_ty_38 = -9863;
pub const errSSLUnknownPSKIdentity: _bindgen_ty_38 = -9864;
pub const errSSLUnrecognizedName: _bindgen_ty_38 = -9865;
pub const errSSLATSViolation: _bindgen_ty_38 = -9880;
pub const errSSLATSMinimumVersionViolation: _bindgen_ty_38 = -9881;
pub const errSSLATSCiphersuiteViolation: _bindgen_ty_38 = -9882;
pub const errSSLATSMinimumKeySizeViolation: _bindgen_ty_38 = -9883;
pub const errSSLATSLeafCertificateHashAlgorithmViolation: _bindgen_ty_38 = -9884;
pub const errSSLATSCertificateHashAlgorithmViolation: _bindgen_ty_38 = -9885;
pub const errSSLATSCertificateTrustViolation: _bindgen_ty_38 = -9886;
pub const errSSLEarlyDataRejected: _bindgen_ty_38 = -9890;
pub type _bindgen_ty_38 = OSStatus;
extern "C" {
    pub fn SecCertificateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecCertificateCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
    ) -> SecCertificateRef;
}
extern "C" {
    pub fn SecCertificateCopyData(certificate: SecCertificateRef) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopySubjectSummary(certificate: SecCertificateRef) -> CFStringRef;
}
extern "C" {
    pub fn SecCertificateCopyCommonName(
        certificate: SecCertificateRef,
        commonName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyEmailAddresses(
        certificate: SecCertificateRef,
        emailAddresses: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedIssuerSequence(certificate: SecCertificateRef) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedSubjectSequence(certificate: SecCertificateRef)
        -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopyKey(certificate: SecCertificateRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecCertificateCopyPublicKey(certificate: SecCertificateRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecCertificateCopySerialNumberData(
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopySerialNumber(certificate: SecCertificateRef) -> CFDataRef;
}
extern "C" {
    pub fn SecIdentityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecIdentityCopyCertificate(
        identityRef: SecIdentityRef,
        certificateRef: *mut SecCertificateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopyPrivateKey(
        identityRef: SecIdentityRef,
        privateKeyRef: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessControlGetTypeID() -> CFTypeID;
}
pub const SecAccessControlCreateFlags_kSecAccessControlUserPresence: SecAccessControlCreateFlags =
    1;
pub const SecAccessControlCreateFlags_kSecAccessControlBiometryAny: SecAccessControlCreateFlags = 2;
pub const SecAccessControlCreateFlags_kSecAccessControlTouchIDAny: SecAccessControlCreateFlags = 2;
pub const SecAccessControlCreateFlags_kSecAccessControlBiometryCurrentSet:
    SecAccessControlCreateFlags = 8;
pub const SecAccessControlCreateFlags_kSecAccessControlTouchIDCurrentSet:
    SecAccessControlCreateFlags = 8;
pub const SecAccessControlCreateFlags_kSecAccessControlDevicePasscode: SecAccessControlCreateFlags =
    16;
pub const SecAccessControlCreateFlags_kSecAccessControlWatch: SecAccessControlCreateFlags = 32;
pub const SecAccessControlCreateFlags_kSecAccessControlOr: SecAccessControlCreateFlags = 16384;
pub const SecAccessControlCreateFlags_kSecAccessControlAnd: SecAccessControlCreateFlags = 32768;
pub const SecAccessControlCreateFlags_kSecAccessControlPrivateKeyUsage:
    SecAccessControlCreateFlags = 1073741824;
pub const SecAccessControlCreateFlags_kSecAccessControlApplicationPassword:
    SecAccessControlCreateFlags = 2147483648;
pub type SecAccessControlCreateFlags = CFOptionFlags;
extern "C" {
    pub fn SecAccessControlCreateWithFlags(
        allocator: CFAllocatorRef,
        protection: CFTypeRef,
        flags: SecAccessControlCreateFlags,
        error: *mut CFErrorRef,
    ) -> SecAccessControlRef;
}
extern "C" {
    pub static kSecClass: CFStringRef;
}
extern "C" {
    pub static kSecClassInternetPassword: CFStringRef;
}
extern "C" {
    pub static kSecClassGenericPassword: CFStringRef;
}
extern "C" {
    pub static kSecClassCertificate: CFStringRef;
}
extern "C" {
    pub static kSecClassKey: CFStringRef;
}
extern "C" {
    pub static kSecClassIdentity: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessible: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccess: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessControl: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessGroup: CFStringRef;
}
extern "C" {
    pub static kSecAttrSynchronizable: CFStringRef;
}
extern "C" {
    pub static kSecAttrSynchronizableAny: CFStringRef;
}
extern "C" {
    pub static kSecAttrCreationDate: CFStringRef;
}
extern "C" {
    pub static kSecAttrModificationDate: CFStringRef;
}
extern "C" {
    pub static kSecAttrDescription: CFStringRef;
}
extern "C" {
    pub static kSecAttrComment: CFStringRef;
}
extern "C" {
    pub static kSecAttrCreator: CFStringRef;
}
extern "C" {
    pub static kSecAttrType: CFStringRef;
}
extern "C" {
    pub static kSecAttrLabel: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsInvisible: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsNegative: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccount: CFStringRef;
}
extern "C" {
    pub static kSecAttrService: CFStringRef;
}
extern "C" {
    pub static kSecAttrGeneric: CFStringRef;
}
extern "C" {
    pub static kSecAttrSecurityDomain: CFStringRef;
}
extern "C" {
    pub static kSecAttrServer: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocol: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationType: CFStringRef;
}
extern "C" {
    pub static kSecAttrPort: CFStringRef;
}
extern "C" {
    pub static kSecAttrPath: CFStringRef;
}
extern "C" {
    pub static kSecAttrSubject: CFStringRef;
}
extern "C" {
    pub static kSecAttrIssuer: CFStringRef;
}
extern "C" {
    pub static kSecAttrSerialNumber: CFStringRef;
}
extern "C" {
    pub static kSecAttrSubjectKeyID: CFStringRef;
}
extern "C" {
    pub static kSecAttrPublicKeyHash: CFStringRef;
}
extern "C" {
    pub static kSecAttrCertificateType: CFStringRef;
}
extern "C" {
    pub static kSecAttrCertificateEncoding: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClass: CFStringRef;
}
extern "C" {
    pub static kSecAttrApplicationLabel: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsPermanent: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsSensitive: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsExtractable: CFStringRef;
}
extern "C" {
    pub static kSecAttrApplicationTag: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyType: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRF: CFStringRef;
}
extern "C" {
    pub static kSecAttrSalt: CFStringRef;
}
extern "C" {
    pub static kSecAttrRounds: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeySizeInBits: CFStringRef;
}
extern "C" {
    pub static kSecAttrEffectiveKeySize: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanEncrypt: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanDecrypt: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanDerive: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanSign: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanVerify: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanWrap: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanUnwrap: CFStringRef;
}
extern "C" {
    pub static kSecAttrSyncViewHint: CFStringRef;
}
extern "C" {
    pub static kSecAttrTokenID: CFStringRef;
}
extern "C" {
    pub static kSecAttrPersistantReference: CFStringRef;
}
extern "C" {
    pub static kSecAttrPersistentReference: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenUnlocked: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAfterFirstUnlock: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAlways: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenUnlockedThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAlwaysThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPAccount: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIRC: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolNNTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolPOP3: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSMTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSOCKS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIMAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolLDAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolAppleTalk: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolAFP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolTelnet: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSSH: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPSProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSMB: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolRTSP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolRTSPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolDAAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolEPPC: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIPP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolNNTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolLDAPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolTelnetS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIMAPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIRCS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolPOP3S: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeNTLM: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeMSN: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeDPA: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeRPA: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTTPBasic: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTTPDigest: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTMLForm: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeDefault: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassPublic: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassPrivate: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassSymmetric: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeDSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeAES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeDES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyType3DES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRC4: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRC2: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeCAST: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeECDSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeEC: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeECSECPrimeRandom: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA1: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA224: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA256: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA384: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA512: CFStringRef;
}
extern "C" {
    pub static kSecMatchPolicy: CFStringRef;
}
extern "C" {
    pub static kSecMatchItemList: CFStringRef;
}
extern "C" {
    pub static kSecMatchSearchList: CFStringRef;
}
extern "C" {
    pub static kSecMatchIssuers: CFStringRef;
}
extern "C" {
    pub static kSecMatchEmailAddressIfPresent: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectContains: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectStartsWith: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectEndsWith: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectWholeString: CFStringRef;
}
extern "C" {
    pub static kSecMatchCaseInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchDiacriticInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchWidthInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchTrustedOnly: CFStringRef;
}
extern "C" {
    pub static kSecMatchValidOnDate: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimit: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimitOne: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimitAll: CFStringRef;
}
extern "C" {
    pub static kSecReturnData: CFStringRef;
}
extern "C" {
    pub static kSecReturnAttributes: CFStringRef;
}
extern "C" {
    pub static kSecReturnRef: CFStringRef;
}
extern "C" {
    pub static kSecReturnPersistentRef: CFStringRef;
}
extern "C" {
    pub static kSecValueData: CFStringRef;
}
extern "C" {
    pub static kSecValueRef: CFStringRef;
}
extern "C" {
    pub static kSecValuePersistentRef: CFStringRef;
}
extern "C" {
    pub static kSecUseItemList: CFStringRef;
}
extern "C" {
    pub static kSecUseKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseOperationPrompt: CFStringRef;
}
extern "C" {
    pub static kSecUseNoAuthenticationUI: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUI: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationContext: CFStringRef;
}
extern "C" {
    pub static kSecUseDataProtectionKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseUserIndependentKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUIAllow: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUIFail: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUISkip: CFStringRef;
}
extern "C" {
    pub static kSecAttrTokenIDSecureEnclave: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessGroupToken: CFStringRef;
}
extern "C" {
    pub fn SecItemCopyMatching(query: CFDictionaryRef, result: *mut CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemAdd(attributes: CFDictionaryRef, result: *mut CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemUpdate(query: CFDictionaryRef, attributesToUpdate: CFDictionaryRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemDelete(query: CFDictionaryRef) -> OSStatus;
}
pub const SecPadding_kSecPaddingNone: SecPadding = 0;
pub const SecPadding_kSecPaddingPKCS1: SecPadding = 1;
pub const SecPadding_kSecPaddingOAEP: SecPadding = 2;
pub const SecPadding_kSecPaddingSigRaw: SecPadding = 16384;
pub const SecPadding_kSecPaddingPKCS1MD2: SecPadding = 32768;
pub const SecPadding_kSecPaddingPKCS1MD5: SecPadding = 32769;
pub const SecPadding_kSecPaddingPKCS1SHA1: SecPadding = 32770;
pub const SecPadding_kSecPaddingPKCS1SHA224: SecPadding = 32771;
pub const SecPadding_kSecPaddingPKCS1SHA256: SecPadding = 32772;
pub const SecPadding_kSecPaddingPKCS1SHA384: SecPadding = 32773;
pub const SecPadding_kSecPaddingPKCS1SHA512: SecPadding = 32774;
pub type SecPadding = u32;
extern "C" {
    pub static kSecPrivateKeyAttrs: CFStringRef;
}
extern "C" {
    pub static kSecPublicKeyAttrs: CFStringRef;
}
extern "C" {
    pub fn SecKeyGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecKeyGeneratePair(
        parameters: CFDictionaryRef,
        publicKey: *mut SecKeyRef,
        privateKey: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyRawSign(
        key: SecKeyRef,
        padding: SecPadding,
        dataToSign: *const u8,
        dataToSignLen: usize,
        sig: *mut u8,
        sigLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyRawVerify(
        key: SecKeyRef,
        padding: SecPadding,
        signedData: *const u8,
        signedDataLen: usize,
        sig: *const u8,
        sigLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyEncrypt(
        key: SecKeyRef,
        padding: SecPadding,
        plainText: *const u8,
        plainTextLen: usize,
        cipherText: *mut u8,
        cipherTextLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyDecrypt(
        key: SecKeyRef,
        padding: SecPadding,
        cipherText: *const u8,
        cipherTextLen: usize,
        plainText: *mut u8,
        plainTextLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyCreateRandomKey(parameters: CFDictionaryRef, error: *mut CFErrorRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyCreateWithData(
        keyData: CFDataRef,
        attributes: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyGetBlockSize(key: SecKeyRef) -> usize;
}
extern "C" {
    pub fn SecKeyCopyExternalRepresentation(key: SecKeyRef, error: *mut CFErrorRef) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyCopyAttributes(key: SecKeyRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecKeyCopyPublicKey(key: SecKeyRef) -> SecKeyRef;
}
pub type SecKeyAlgorithm = CFStringRef;
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureRaw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureRFC4754: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionRaw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionPKCS1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandard: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactor: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub fn SecKeyCreateSignature(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        dataToSign: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyVerifySignature(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        signedData: CFDataRef,
        signature: CFDataRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SecKeyCreateEncryptedData(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        plaintext: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyCreateDecryptedData(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        ciphertext: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type SecKeyKeyExchangeParameter = CFStringRef;
extern "C" {
    pub static kSecKeyKeyExchangeParameterRequestedSize: SecKeyKeyExchangeParameter;
}
extern "C" {
    pub static kSecKeyKeyExchangeParameterSharedInfo: SecKeyKeyExchangeParameter;
}
extern "C" {
    pub fn SecKeyCopyKeyExchangeResult(
        privateKey: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        publicKey: SecKeyRef,
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub const SecKeyOperationType_kSecKeyOperationTypeSign: SecKeyOperationType = 0;
pub const SecKeyOperationType_kSecKeyOperationTypeVerify: SecKeyOperationType = 1;
pub const SecKeyOperationType_kSecKeyOperationTypeEncrypt: SecKeyOperationType = 2;
pub const SecKeyOperationType_kSecKeyOperationTypeDecrypt: SecKeyOperationType = 3;
pub const SecKeyOperationType_kSecKeyOperationTypeKeyExchange: SecKeyOperationType = 4;
pub type SecKeyOperationType = CFIndex;
extern "C" {
    pub fn SecKeyIsAlgorithmSupported(
        key: SecKeyRef,
        operation: SecKeyOperationType,
        algorithm: SecKeyAlgorithm,
    ) -> Boolean;
}
extern "C" {
    pub static kSecPolicyAppleX509Basic: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleSSL: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleSMIME: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleEAP: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleIPsec: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePKINITClient: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePKINITServer: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleCodeSigning: CFStringRef;
}
extern "C" {
    pub static kSecPolicyMacAppStoreReceipt: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleIDValidation: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleTimeStamping: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleRevocation: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePassbookSigning: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePayIssuerEncryption: CFStringRef;
}
extern "C" {
    pub static kSecPolicyOid: CFStringRef;
}
extern "C" {
    pub static kSecPolicyName: CFStringRef;
}
extern "C" {
    pub static kSecPolicyClient: CFStringRef;
}
extern "C" {
    pub static kSecPolicyRevocationFlags: CFStringRef;
}
extern "C" {
    pub static kSecPolicyTeamIdentifier: CFStringRef;
}
extern "C" {
    pub fn SecPolicyGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecPolicyCopyProperties(policyRef: SecPolicyRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecPolicyCreateBasicX509() -> SecPolicyRef;
}
extern "C" {
    pub fn SecPolicyCreateSSL(server: Boolean, hostname: CFStringRef) -> SecPolicyRef;
}
pub const kSecRevocationOCSPMethod: _bindgen_ty_39 = 1;
pub const kSecRevocationCRLMethod: _bindgen_ty_39 = 2;
pub const kSecRevocationPreferCRL: _bindgen_ty_39 = 4;
pub const kSecRevocationRequirePositiveResponse: _bindgen_ty_39 = 8;
pub const kSecRevocationNetworkAccessDisabled: _bindgen_ty_39 = 16;
pub const kSecRevocationUseAnyAvailableMethod: _bindgen_ty_39 = 3;
pub type _bindgen_ty_39 = CFOptionFlags;
extern "C" {
    pub fn SecPolicyCreateRevocation(revocationFlags: CFOptionFlags) -> SecPolicyRef;
}
extern "C" {
    pub fn SecPolicyCreateWithProperties(
        policyIdentifier: CFTypeRef,
        properties: CFDictionaryRef,
    ) -> SecPolicyRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecRandom {
    _unused: [u8; 0],
}
pub type SecRandomRef = *const __SecRandom;
extern "C" {
    pub static kSecRandomDefault: SecRandomRef;
}
extern "C" {
    pub fn SecRandomCopyBytes(
        rnd: SecRandomRef,
        count: usize,
        bytes: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static kSecImportExportPassphrase: CFStringRef;
}
extern "C" {
    pub static kSecImportExportKeychain: CFStringRef;
}
extern "C" {
    pub static kSecImportExportAccess: CFStringRef;
}
extern "C" {
    pub static kSecImportItemLabel: CFStringRef;
}
extern "C" {
    pub static kSecImportItemKeyID: CFStringRef;
}
extern "C" {
    pub static kSecImportItemTrust: CFStringRef;
}
extern "C" {
    pub static kSecImportItemCertChain: CFStringRef;
}
extern "C" {
    pub static kSecImportItemIdentity: CFStringRef;
}
extern "C" {
    pub fn SecPKCS12Import(
        pkcs12_data: CFDataRef,
        options: CFDictionaryRef,
        items: *mut CFArrayRef,
    ) -> OSStatus;
}
pub const SecTrustResultType_kSecTrustResultInvalid: SecTrustResultType = 0;
pub const SecTrustResultType_kSecTrustResultProceed: SecTrustResultType = 1;
pub const SecTrustResultType_kSecTrustResultConfirm: SecTrustResultType = 2;
pub const SecTrustResultType_kSecTrustResultDeny: SecTrustResultType = 3;
pub const SecTrustResultType_kSecTrustResultUnspecified: SecTrustResultType = 4;
pub const SecTrustResultType_kSecTrustResultRecoverableTrustFailure: SecTrustResultType = 5;
pub const SecTrustResultType_kSecTrustResultFatalTrustFailure: SecTrustResultType = 6;
pub const SecTrustResultType_kSecTrustResultOtherError: SecTrustResultType = 7;
pub type SecTrustResultType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecTrust {
    _unused: [u8; 0],
}
pub type SecTrustRef = *mut __SecTrust;
extern "C" {
    pub static kSecPropertyTypeTitle: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeError: CFStringRef;
}
extern "C" {
    pub static kSecTrustEvaluationDate: CFStringRef;
}
extern "C" {
    pub static kSecTrustExtendedValidation: CFStringRef;
}
extern "C" {
    pub static kSecTrustOrganizationName: CFStringRef;
}
extern "C" {
    pub static kSecTrustResultValue: CFStringRef;
}
extern "C" {
    pub static kSecTrustRevocationChecked: CFStringRef;
}
extern "C" {
    pub static kSecTrustRevocationValidUntilDate: CFStringRef;
}
extern "C" {
    pub static kSecTrustCertificateTransparency: CFStringRef;
}
extern "C" {
    pub static kSecTrustCertificateTransparencyWhiteList: CFStringRef;
}
pub type SecTrustCallback = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecTrustGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecTrustCreateWithCertificates(
        certificates: CFTypeRef,
        policies: CFTypeRef,
        trust: *mut SecTrustRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetPolicies(trust: SecTrustRef, policies: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyPolicies(trust: SecTrustRef, policies: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: *mut Boolean)
        -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetAnchorCertificates(
        trust: SecTrustRef,
        anchorCertificates: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetAnchorCertificatesOnly(
        trust: SecTrustRef,
        anchorCertificatesOnly: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyCustomAnchorCertificates(
        trust: SecTrustRef,
        anchors: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetVerifyDate(trust: SecTrustRef, verifyDate: CFDateRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetVerifyTime(trust: SecTrustRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn SecTrustEvaluate(trust: SecTrustRef, result: *mut SecTrustResultType) -> OSStatus;
}
extern "C" {
    pub fn SecTrustEvaluateAsync(
        trust: SecTrustRef,
        queue: NSObject,
        result: SecTrustCallback,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustEvaluateWithError(trust: SecTrustRef, error: *mut CFErrorRef) -> bool;
}
pub type SecTrustWithErrorCallback = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecTrustEvaluateAsyncWithError(
        trust: SecTrustRef,
        queue: NSObject,
        result: SecTrustWithErrorCallback,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetTrustResult(trust: SecTrustRef, result: *mut SecTrustResultType) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyPublicKey(trust: SecTrustRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecTrustCopyKey(trust: SecTrustRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecTrustGetCertificateCount(trust: SecTrustRef) -> CFIndex;
}
extern "C" {
    pub fn SecTrustGetCertificateAtIndex(trust: SecTrustRef, ix: CFIndex) -> SecCertificateRef;
}
extern "C" {
    pub fn SecTrustCopyExceptions(trust: SecTrustRef) -> CFDataRef;
}
extern "C" {
    pub fn SecTrustSetExceptions(trust: SecTrustRef, exceptions: CFDataRef) -> bool;
}
extern "C" {
    pub fn SecTrustCopyProperties(trust: SecTrustRef) -> CFArrayRef;
}
extern "C" {
    pub fn SecTrustCopyResult(trust: SecTrustRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecTrustSetOCSPResponse(trust: SecTrustRef, responseData: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetSignedCertificateTimestamps(
        trust: SecTrustRef,
        sctArray: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyCertificateChain(trust: SecTrustRef) -> CFArrayRef;
}
extern "C" {
    pub static kSecSharedPassword: CFStringRef;
}
extern "C" {
    pub fn SecAddSharedWebCredential(
        fqdn: CFStringRef,
        account: CFStringRef,
        password: CFStringRef,
        completionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SecRequestSharedWebCredential(
        fqdn: CFStringRef,
        account: CFStringRef,
        completionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SecCreateSharedWebCredentialPassword() -> CFStringRef;
}
extern "C" {
    pub fn sec_retain(obj: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sec_release(obj: *mut ::std::os::raw::c_void);
}
pub trait POS_sec_object: Sized + std::ops::Deref {}
pub type sec_object_t = NSObject;
pub type SSLCipherSuite = u16;
pub const SSL_NULL_WITH_NULL_NULL: _bindgen_ty_40 = 0;
pub const SSL_RSA_WITH_NULL_MD5: _bindgen_ty_40 = 1;
pub const SSL_RSA_WITH_NULL_SHA: _bindgen_ty_40 = 2;
pub const SSL_RSA_EXPORT_WITH_RC4_40_MD5: _bindgen_ty_40 = 3;
pub const SSL_RSA_WITH_RC4_128_MD5: _bindgen_ty_40 = 4;
pub const SSL_RSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 5;
pub const SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5: _bindgen_ty_40 = 6;
pub const SSL_RSA_WITH_IDEA_CBC_SHA: _bindgen_ty_40 = 7;
pub const SSL_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 8;
pub const SSL_RSA_WITH_DES_CBC_SHA: _bindgen_ty_40 = 9;
pub const SSL_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 10;
pub const SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 11;
pub const SSL_DH_DSS_WITH_DES_CBC_SHA: _bindgen_ty_40 = 12;
pub const SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 13;
pub const SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 14;
pub const SSL_DH_RSA_WITH_DES_CBC_SHA: _bindgen_ty_40 = 15;
pub const SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 16;
pub const SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 17;
pub const SSL_DHE_DSS_WITH_DES_CBC_SHA: _bindgen_ty_40 = 18;
pub const SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 19;
pub const SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 20;
pub const SSL_DHE_RSA_WITH_DES_CBC_SHA: _bindgen_ty_40 = 21;
pub const SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 22;
pub const SSL_DH_anon_EXPORT_WITH_RC4_40_MD5: _bindgen_ty_40 = 23;
pub const SSL_DH_anon_WITH_RC4_128_MD5: _bindgen_ty_40 = 24;
pub const SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_40 = 25;
pub const SSL_DH_anon_WITH_DES_CBC_SHA: _bindgen_ty_40 = 26;
pub const SSL_DH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 27;
pub const SSL_FORTEZZA_DMS_WITH_NULL_SHA: _bindgen_ty_40 = 28;
pub const SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA: _bindgen_ty_40 = 29;
pub const TLS_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 47;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 48;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 50;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 51;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 52;
pub const TLS_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 53;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 54;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 55;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 56;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 57;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 58;
pub const TLS_ECDH_ECDSA_WITH_NULL_SHA: _bindgen_ty_40 = 49153;
pub const TLS_ECDH_ECDSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 49154;
pub const TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 49155;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49156;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49157;
pub const TLS_ECDHE_ECDSA_WITH_NULL_SHA: _bindgen_ty_40 = 49158;
pub const TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 49159;
pub const TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 49160;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49161;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49162;
pub const TLS_ECDH_RSA_WITH_NULL_SHA: _bindgen_ty_40 = 49163;
pub const TLS_ECDH_RSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 49164;
pub const TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 49165;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49166;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49167;
pub const TLS_ECDHE_RSA_WITH_NULL_SHA: _bindgen_ty_40 = 49168;
pub const TLS_ECDHE_RSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 49169;
pub const TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 49170;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49171;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49172;
pub const TLS_ECDH_anon_WITH_NULL_SHA: _bindgen_ty_40 = 49173;
pub const TLS_ECDH_anon_WITH_RC4_128_SHA: _bindgen_ty_40 = 49174;
pub const TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 49175;
pub const TLS_ECDH_anon_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49176;
pub const TLS_ECDH_anon_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49177;
pub const TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 49205;
pub const TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 49206;
pub const TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_40 = 52395;
pub const TLS_NULL_WITH_NULL_NULL: _bindgen_ty_40 = 0;
pub const TLS_RSA_WITH_NULL_MD5: _bindgen_ty_40 = 1;
pub const TLS_RSA_WITH_NULL_SHA: _bindgen_ty_40 = 2;
pub const TLS_RSA_WITH_RC4_128_MD5: _bindgen_ty_40 = 4;
pub const TLS_RSA_WITH_RC4_128_SHA: _bindgen_ty_40 = 5;
pub const TLS_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 10;
pub const TLS_RSA_WITH_NULL_SHA256: _bindgen_ty_40 = 59;
pub const TLS_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 60;
pub const TLS_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 61;
pub const TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 13;
pub const TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 16;
pub const TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 19;
pub const TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 22;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 62;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 63;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 64;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 103;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 104;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 105;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 106;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 107;
pub const TLS_DH_anon_WITH_RC4_128_MD5: _bindgen_ty_40 = 24;
pub const TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 27;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 108;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA256: _bindgen_ty_40 = 109;
pub const TLS_PSK_WITH_RC4_128_SHA: _bindgen_ty_40 = 138;
pub const TLS_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 139;
pub const TLS_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 140;
pub const TLS_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 141;
pub const TLS_DHE_PSK_WITH_RC4_128_SHA: _bindgen_ty_40 = 142;
pub const TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 143;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 144;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 145;
pub const TLS_RSA_PSK_WITH_RC4_128_SHA: _bindgen_ty_40 = 146;
pub const TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_40 = 147;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_40 = 148;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_40 = 149;
pub const TLS_PSK_WITH_NULL_SHA: _bindgen_ty_40 = 44;
pub const TLS_DHE_PSK_WITH_NULL_SHA: _bindgen_ty_40 = 45;
pub const TLS_RSA_PSK_WITH_NULL_SHA: _bindgen_ty_40 = 46;
pub const TLS_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 156;
pub const TLS_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 157;
pub const TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 158;
pub const TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 159;
pub const TLS_DH_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 160;
pub const TLS_DH_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 161;
pub const TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 162;
pub const TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 163;
pub const TLS_DH_DSS_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 164;
pub const TLS_DH_DSS_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 165;
pub const TLS_DH_anon_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 166;
pub const TLS_DH_anon_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 167;
pub const TLS_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 168;
pub const TLS_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 169;
pub const TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 170;
pub const TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 171;
pub const TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 172;
pub const TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 173;
pub const TLS_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 174;
pub const TLS_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 175;
pub const TLS_PSK_WITH_NULL_SHA256: _bindgen_ty_40 = 176;
pub const TLS_PSK_WITH_NULL_SHA384: _bindgen_ty_40 = 177;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 178;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 179;
pub const TLS_DHE_PSK_WITH_NULL_SHA256: _bindgen_ty_40 = 180;
pub const TLS_DHE_PSK_WITH_NULL_SHA384: _bindgen_ty_40 = 181;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 182;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 183;
pub const TLS_RSA_PSK_WITH_NULL_SHA256: _bindgen_ty_40 = 184;
pub const TLS_RSA_PSK_WITH_NULL_SHA384: _bindgen_ty_40 = 185;
pub const TLS_AES_128_GCM_SHA256: _bindgen_ty_40 = 4865;
pub const TLS_AES_256_GCM_SHA384: _bindgen_ty_40 = 4866;
pub const TLS_CHACHA20_POLY1305_SHA256: _bindgen_ty_40 = 4867;
pub const TLS_AES_128_CCM_SHA256: _bindgen_ty_40 = 4868;
pub const TLS_AES_128_CCM_8_SHA256: _bindgen_ty_40 = 4869;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 49187;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 49188;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 49189;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 49190;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 49191;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 49192;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_40 = 49193;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_40 = 49194;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 49195;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 49196;
pub const TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 49197;
pub const TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 49198;
pub const TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 49199;
pub const TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 49200;
pub const TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_40 = 49201;
pub const TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_40 = 49202;
pub const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_40 = 52392;
pub const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_40 = 52393;
pub const TLS_EMPTY_RENEGOTIATION_INFO_SCSV: _bindgen_ty_40 = 255;
pub const SSL_RSA_WITH_RC2_CBC_MD5: _bindgen_ty_40 = 65408;
pub const SSL_RSA_WITH_IDEA_CBC_MD5: _bindgen_ty_40 = 65409;
pub const SSL_RSA_WITH_DES_CBC_MD5: _bindgen_ty_40 = 65410;
pub const SSL_RSA_WITH_3DES_EDE_CBC_MD5: _bindgen_ty_40 = 65411;
pub const SSL_NO_SUCH_CIPHERSUITE: _bindgen_ty_40 = 65535;
pub type _bindgen_ty_40 = SSLCipherSuite;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupDefault: SSLCiphersuiteGroup = 0;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupCompatibility: SSLCiphersuiteGroup = 1;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupLegacy: SSLCiphersuiteGroup = 2;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupATS: SSLCiphersuiteGroup = 3;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupATSCompatibility: SSLCiphersuiteGroup = 4;
pub type SSLCiphersuiteGroup = ::std::os::raw::c_int;
pub trait POS_sec_trust: Sized + std::ops::Deref {}
pub type sec_trust_t = NSObject;
pub trait POS_sec_identity: Sized + std::ops::Deref {}
pub type sec_identity_t = NSObject;
pub trait POS_sec_certificate: Sized + std::ops::Deref {}
pub type sec_certificate_t = NSObject;
pub const tls_protocol_version_t_tls_protocol_version_TLSv10: tls_protocol_version_t = 769;
pub const tls_protocol_version_t_tls_protocol_version_TLSv11: tls_protocol_version_t = 770;
pub const tls_protocol_version_t_tls_protocol_version_TLSv12: tls_protocol_version_t = 771;
pub const tls_protocol_version_t_tls_protocol_version_TLSv13: tls_protocol_version_t = 772;
pub const tls_protocol_version_t_tls_protocol_version_DTLSv10: tls_protocol_version_t = 65279;
pub const tls_protocol_version_t_tls_protocol_version_DTLSv12: tls_protocol_version_t = 65277;
pub type tls_protocol_version_t = u16;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t = 10;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t = 47;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t = 53;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t = 156;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t = 157;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t = 60;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256: tls_ciphersuite_t = 61;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t =
    49160;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t =
    49161;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t =
    49162;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t =
    49170;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t =
    49171;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t =
    49172;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t =
    49187;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: tls_ciphersuite_t =
    49188;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t =
    49191;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384: tls_ciphersuite_t =
    49192;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t =
    49195;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t =
    49196;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t =
    49199;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t =
    49200;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    tls_ciphersuite_t = 52392;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    tls_ciphersuite_t = 52393;
pub const tls_ciphersuite_t_tls_ciphersuite_AES_128_GCM_SHA256: tls_ciphersuite_t = 4865;
pub const tls_ciphersuite_t_tls_ciphersuite_AES_256_GCM_SHA384: tls_ciphersuite_t = 4866;
pub const tls_ciphersuite_t_tls_ciphersuite_CHACHA20_POLY1305_SHA256: tls_ciphersuite_t = 4867;
pub type tls_ciphersuite_t = u16;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_default: tls_ciphersuite_group_t = 0;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_compatibility: tls_ciphersuite_group_t = 1;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_legacy: tls_ciphersuite_group_t = 2;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats: tls_ciphersuite_group_t = 3;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats_compatibility: tls_ciphersuite_group_t =
    4;
pub type tls_ciphersuite_group_t = u16;
pub const SSLProtocol_kSSLProtocolUnknown: SSLProtocol = 0;
pub const SSLProtocol_kTLSProtocol1: SSLProtocol = 4;
pub const SSLProtocol_kTLSProtocol11: SSLProtocol = 7;
pub const SSLProtocol_kTLSProtocol12: SSLProtocol = 8;
pub const SSLProtocol_kDTLSProtocol1: SSLProtocol = 9;
pub const SSLProtocol_kTLSProtocol13: SSLProtocol = 10;
pub const SSLProtocol_kDTLSProtocol12: SSLProtocol = 11;
pub const SSLProtocol_kTLSProtocolMaxSupported: SSLProtocol = 999;
pub const SSLProtocol_kSSLProtocol2: SSLProtocol = 1;
pub const SSLProtocol_kSSLProtocol3: SSLProtocol = 2;
pub const SSLProtocol_kSSLProtocol3Only: SSLProtocol = 3;
pub const SSLProtocol_kTLSProtocol1Only: SSLProtocol = 5;
pub const SSLProtocol_kSSLProtocolAll: SSLProtocol = 6;
pub type SSLProtocol = ::std::os::raw::c_int;
extern "C" {
    pub fn sec_trust_create(trust: SecTrustRef) -> sec_trust_t;
}
extern "C" {
    pub fn sec_trust_copy_ref(trust: NSObject) -> SecTrustRef;
}
extern "C" {
    pub fn sec_identity_create(identity: SecIdentityRef) -> sec_identity_t;
}
extern "C" {
    pub fn sec_identity_create_with_certificates(
        identity: SecIdentityRef,
        certificates: CFArrayRef,
    ) -> sec_identity_t;
}
extern "C" {
    pub fn sec_identity_access_certificates(
        identity: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_identity_copy_ref(identity: NSObject) -> SecIdentityRef;
}
extern "C" {
    pub fn sec_identity_copy_certificates_ref(identity: NSObject) -> CFArrayRef;
}
extern "C" {
    pub fn sec_certificate_create(certificate: SecCertificateRef) -> sec_certificate_t;
}
extern "C" {
    pub fn sec_certificate_copy_ref(certificate: NSObject) -> SecCertificateRef;
}
pub trait POS_sec_protocol_metadata: Sized + std::ops::Deref {}
pub type sec_protocol_metadata_t = NSObject;
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_protocol(
        metadata: NSObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sec_protocol_metadata_copy_peer_public_key(metadata: NSObject) -> dispatch_data_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_tls_protocol_version(
        metadata: NSObject,
    ) -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_protocol_version(metadata: NSObject)
        -> SSLProtocol;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(
        metadata: NSObject,
    ) -> tls_ciphersuite_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_ciphersuite(metadata: NSObject) -> SSLCipherSuite;
}
extern "C" {
    pub fn sec_protocol_metadata_get_early_data_accepted(metadata: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_peer_certificate_chain(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_ocsp_response(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_supported_signature_algorithms(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_distinguished_names(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_pre_shared_keys(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_get_server_name(
        metadata: NSObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sec_protocol_metadata_peers_are_equal(metadataA: NSObject, metadataB: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_challenge_parameters_are_equal(
        metadataA: NSObject,
        metadataB: NSObject,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_create_secret(
        metadata: NSObject,
        label_len: usize,
        label: *const ::std::os::raw::c_char,
        exporter_length: usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn sec_protocol_metadata_create_secret_with_context(
        metadata: NSObject,
        label_len: usize,
        label: *const ::std::os::raw::c_char,
        context_len: usize,
        context: *const u8,
        exporter_length: usize,
    ) -> dispatch_data_t;
}
pub trait POS_sec_protocol_options: Sized + std::ops::Deref {}
pub type sec_protocol_options_t = NSObject;
extern "C" {
    pub fn sec_protocol_options_are_equal(optionsA: NSObject, optionsB: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_set_local_identity(options: NSObject, identity: NSObject);
}
extern "C" {
    pub fn sec_protocol_options_append_tls_ciphersuite(
        options: NSObject,
        ciphersuite: tls_ciphersuite_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_tls_ciphersuite(options: NSObject, ciphersuite: SSLCipherSuite);
}
extern "C" {
    pub fn sec_protocol_options_append_tls_ciphersuite_group(
        options: NSObject,
        group: tls_ciphersuite_group_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_tls_ciphersuite_group(
        options: NSObject,
        group: SSLCiphersuiteGroup,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_min_version(options: NSObject, version: SSLProtocol);
}
extern "C" {
    pub fn sec_protocol_options_set_min_tls_protocol_version(
        options: NSObject,
        version: tls_protocol_version_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_get_default_min_tls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_default_min_dtls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_set_tls_max_version(options: NSObject, version: SSLProtocol);
}
extern "C" {
    pub fn sec_protocol_options_set_max_tls_protocol_version(
        options: NSObject,
        version: tls_protocol_version_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_get_default_max_tls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_default_max_dtls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_enable_encrypted_client_hello(options: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_get_quic_use_legacy_codepoint(options: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_add_tls_application_protocol(
        options: NSObject,
        application_protocol: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_server_name(
        options: NSObject,
        server_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_diffie_hellman_parameters(
        options: NSObject,
        params: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_pre_shared_key(
        options: NSObject,
        psk: NSObject,
        psk_identity: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_pre_shared_key_identity_hint(
        options: NSObject,
        psk_identity_hint: NSObject,
    );
}
pub type sec_protocol_pre_shared_key_selection_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_pre_shared_key_selection_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn sec_protocol_options_set_pre_shared_key_selection_block(
        options: NSObject,
        psk_selection_block: sec_protocol_pre_shared_key_selection_t,
        psk_selection_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_tickets_enabled(options: NSObject, tickets_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_is_fallback_attempt(
        options: NSObject,
        is_fallback_attempt: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_resumption_enabled(
        options: NSObject,
        resumption_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_false_start_enabled(
        options: NSObject,
        false_start_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_ocsp_enabled(options: NSObject, ocsp_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_sct_enabled(options: NSObject, sct_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_renegotiation_enabled(
        options: NSObject,
        renegotiation_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_peer_authentication_required(
        options: NSObject,
        peer_authentication_required: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_peer_authentication_optional(
        options: NSObject,
        peer_authentication_optional: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_enable_encrypted_client_hello(
        options: NSObject,
        enable_encrypted_client_hello: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_quic_use_legacy_codepoint(
        options: NSObject,
        quic_use_legacy_codepoint: bool,
    );
}
pub type sec_protocol_key_update_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_key_update_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_challenge_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_challenge_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_verify_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_verify_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn sec_protocol_options_set_key_update_block(
        options: NSObject,
        key_update_block: sec_protocol_key_update_t,
        key_update_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_challenge_block(
        options: NSObject,
        challenge_block: sec_protocol_challenge_t,
        challenge_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_verify_block(
        options: NSObject,
        verify_block: sec_protocol_verify_t,
        verify_block_queue: NSObject,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SSLContext {
    _unused: [u8; 0],
}
pub type SSLContextRef = *mut SSLContext;
pub type SSLConnectionRef = *const ::std::os::raw::c_void;
pub const SSLSessionOption_kSSLSessionOptionBreakOnServerAuth: SSLSessionOption = 0;
pub const SSLSessionOption_kSSLSessionOptionBreakOnCertRequested: SSLSessionOption = 1;
pub const SSLSessionOption_kSSLSessionOptionBreakOnClientAuth: SSLSessionOption = 2;
pub const SSLSessionOption_kSSLSessionOptionFalseStart: SSLSessionOption = 3;
pub const SSLSessionOption_kSSLSessionOptionSendOneByteRecord: SSLSessionOption = 4;
pub const SSLSessionOption_kSSLSessionOptionAllowServerIdentityChange: SSLSessionOption = 5;
pub const SSLSessionOption_kSSLSessionOptionFallback: SSLSessionOption = 6;
pub const SSLSessionOption_kSSLSessionOptionBreakOnClientHello: SSLSessionOption = 7;
pub const SSLSessionOption_kSSLSessionOptionAllowRenegotiation: SSLSessionOption = 8;
pub const SSLSessionOption_kSSLSessionOptionEnableSessionTickets: SSLSessionOption = 9;
pub type SSLSessionOption = ::std::os::raw::c_int;
pub const SSLSessionState_kSSLIdle: SSLSessionState = 0;
pub const SSLSessionState_kSSLHandshake: SSLSessionState = 1;
pub const SSLSessionState_kSSLConnected: SSLSessionState = 2;
pub const SSLSessionState_kSSLClosed: SSLSessionState = 3;
pub const SSLSessionState_kSSLAborted: SSLSessionState = 4;
pub type SSLSessionState = ::std::os::raw::c_int;
pub const SSLClientCertificateState_kSSLClientCertNone: SSLClientCertificateState = 0;
pub const SSLClientCertificateState_kSSLClientCertRequested: SSLClientCertificateState = 1;
pub const SSLClientCertificateState_kSSLClientCertSent: SSLClientCertificateState = 2;
pub const SSLClientCertificateState_kSSLClientCertRejected: SSLClientCertificateState = 3;
pub type SSLClientCertificateState = ::std::os::raw::c_int;
pub type SSLReadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        connection: SSLConnectionRef,
        data: *mut ::std::os::raw::c_void,
        dataLength: *mut usize,
    ) -> OSStatus,
>;
pub type SSLWriteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        connection: SSLConnectionRef,
        data: *const ::std::os::raw::c_void,
        dataLength: *mut usize,
    ) -> OSStatus,
>;
pub const SSLProtocolSide_kSSLServerSide: SSLProtocolSide = 0;
pub const SSLProtocolSide_kSSLClientSide: SSLProtocolSide = 1;
pub type SSLProtocolSide = ::std::os::raw::c_int;
pub const SSLConnectionType_kSSLStreamType: SSLConnectionType = 0;
pub const SSLConnectionType_kSSLDatagramType: SSLConnectionType = 1;
pub type SSLConnectionType = ::std::os::raw::c_int;
extern "C" {
    pub static kSSLSessionConfig_default: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_ATSv1: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_ATSv1_noPFS: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_standard: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_RC4_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_RC4_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_legacy: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_legacy_DHE: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_anonymous: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_3DES_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_3DES_fallback: CFStringRef;
}
extern "C" {
    pub fn SSLContextGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SSLCreateContext(
        alloc: CFAllocatorRef,
        protocolSide: SSLProtocolSide,
        connectionType: SSLConnectionType,
    ) -> SSLContextRef;
}
extern "C" {
    pub fn SSLGetSessionState(context: SSLContextRef, state: *mut SSLSessionState) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionOption(
        context: SSLContextRef,
        option: SSLSessionOption,
        value: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetSessionOption(
        context: SSLContextRef,
        option: SSLSessionOption,
        value: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetIOFuncs(
        context: SSLContextRef,
        readFunc: SSLReadFunc,
        writeFunc: SSLWriteFunc,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionConfig(context: SSLContextRef, config: CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersionMin(context: SSLContextRef, minVersion: SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersionMin(
        context: SSLContextRef,
        minVersion: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersionMax(context: SSLContextRef, maxVersion: SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersionMax(
        context: SSLContextRef,
        maxVersion: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetCertificate(context: SSLContextRef, certRefs: CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetConnection(context: SSLContextRef, connection: SSLConnectionRef) -> OSStatus;
}
extern "C" {
    pub fn SSLGetConnection(context: SSLContextRef, connection: *mut SSLConnectionRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetPeerDomainName(
        context: SSLContextRef,
        peerName: *const ::std::os::raw::c_char,
        peerNameLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerDomainNameLength(context: SSLContextRef, peerNameLen: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerDomainName(
        context: SSLContextRef,
        peerName: *mut ::std::os::raw::c_char,
        peerNameLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyRequestedPeerNameLength(ctx: SSLContextRef, peerNameLen: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyRequestedPeerName(
        context: SSLContextRef,
        peerName: *mut ::std::os::raw::c_char,
        peerNameLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetDatagramHelloCookie(
        dtlsContext: SSLContextRef,
        cookie: *const ::std::os::raw::c_void,
        cookieLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: *mut usize)
        -> OSStatus;
}
extern "C" {
    pub fn SSLGetNegotiatedProtocolVersion(
        context: SSLContextRef,
        protocol: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNumberSupportedCiphers(context: SSLContextRef, numCiphers: *mut usize)
        -> OSStatus;
}
extern "C" {
    pub fn SSLGetSupportedCiphers(
        context: SSLContextRef,
        ciphers: *mut SSLCipherSuite,
        numCiphers: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNumberEnabledCiphers(context: SSLContextRef, numCiphers: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLSetEnabledCiphers(
        context: SSLContextRef,
        ciphers: *const SSLCipherSuite,
        numCiphers: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetEnabledCiphers(
        context: SSLContextRef,
        ciphers: *mut SSLCipherSuite,
        numCiphers: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionTicketsEnabled(context: SSLContextRef, enabled: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyPeerTrust(context: SSLContextRef, trust: *mut SecTrustRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetPeerID(
        context: SSLContextRef,
        peerID: *const ::std::os::raw::c_void,
        peerIDLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerID(
        context: SSLContextRef,
        peerID: *mut *const ::std::os::raw::c_void,
        peerIDLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNegotiatedCipher(
        context: SSLContextRef,
        cipherSuite: *mut SSLCipherSuite,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetALPNProtocols(context: SSLContextRef, protocols: CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyALPNProtocols(context: SSLContextRef, protocols: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetOCSPResponse(context: SSLContextRef, response: CFDataRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetEncryptionCertificate(context: SSLContextRef, certRefs: CFArrayRef) -> OSStatus;
}
pub const SSLAuthenticate_kNeverAuthenticate: SSLAuthenticate = 0;
pub const SSLAuthenticate_kAlwaysAuthenticate: SSLAuthenticate = 1;
pub const SSLAuthenticate_kTryAuthenticate: SSLAuthenticate = 2;
pub type SSLAuthenticate = ::std::os::raw::c_int;
extern "C" {
    pub fn SSLSetClientSideAuthenticate(context: SSLContextRef, auth: SSLAuthenticate) -> OSStatus;
}
extern "C" {
    pub fn SSLAddDistinguishedName(
        context: SSLContextRef,
        derDN: *const ::std::os::raw::c_void,
        derDNLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyDistinguishedNames(context: SSLContextRef, names: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLGetClientCertificateState(
        context: SSLContextRef,
        clientState: *mut SSLClientCertificateState,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLHandshake(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLReHandshake(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLWrite(
        context: SSLContextRef,
        data: *const ::std::os::raw::c_void,
        dataLength: usize,
        processed: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLRead(
        context: SSLContextRef,
        data: *mut ::std::os::raw::c_void,
        dataLength: usize,
        processed: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetBufferedReadSize(context: SSLContextRef, bufferSize: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetDatagramWriteSize(dtlsContext: SSLContextRef, bufSize: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLClose(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetError(context: SSLContextRef, status: OSStatus) -> OSStatus;
}
extern "C" {
    pub static kCFErrorDomainCFNetwork: CFStringRef;
}
extern "C" {
    pub static kCFErrorDomainWinSock: CFStringRef;
}
pub const CFNetworkErrors_kCFHostErrorHostNotFound: CFNetworkErrors = 1;
pub const CFNetworkErrors_kCFHostErrorUnknown: CFNetworkErrors = 2;
pub const CFNetworkErrors_kCFSOCKSErrorUnknownClientVersion: CFNetworkErrors = 100;
pub const CFNetworkErrors_kCFSOCKSErrorUnsupportedServerVersion: CFNetworkErrors = 101;
pub const CFNetworkErrors_kCFSOCKS4ErrorRequestFailed: CFNetworkErrors = 110;
pub const CFNetworkErrors_kCFSOCKS4ErrorIdentdFailed: CFNetworkErrors = 111;
pub const CFNetworkErrors_kCFSOCKS4ErrorIdConflict: CFNetworkErrors = 112;
pub const CFNetworkErrors_kCFSOCKS4ErrorUnknownStatusCode: CFNetworkErrors = 113;
pub const CFNetworkErrors_kCFSOCKS5ErrorBadState: CFNetworkErrors = 120;
pub const CFNetworkErrors_kCFSOCKS5ErrorBadResponseAddr: CFNetworkErrors = 121;
pub const CFNetworkErrors_kCFSOCKS5ErrorBadCredentials: CFNetworkErrors = 122;
pub const CFNetworkErrors_kCFSOCKS5ErrorUnsupportedNegotiationMethod: CFNetworkErrors = 123;
pub const CFNetworkErrors_kCFSOCKS5ErrorNoAcceptableMethod: CFNetworkErrors = 124;
pub const CFNetworkErrors_kCFFTPErrorUnexpectedStatusCode: CFNetworkErrors = 200;
pub const CFNetworkErrors_kCFErrorHTTPAuthenticationTypeUnsupported: CFNetworkErrors = 300;
pub const CFNetworkErrors_kCFErrorHTTPBadCredentials: CFNetworkErrors = 301;
pub const CFNetworkErrors_kCFErrorHTTPConnectionLost: CFNetworkErrors = 302;
pub const CFNetworkErrors_kCFErrorHTTPParseFailure: CFNetworkErrors = 303;
pub const CFNetworkErrors_kCFErrorHTTPRedirectionLoopDetected: CFNetworkErrors = 304;
pub const CFNetworkErrors_kCFErrorHTTPBadURL: CFNetworkErrors = 305;
pub const CFNetworkErrors_kCFErrorHTTPProxyConnectionFailure: CFNetworkErrors = 306;
pub const CFNetworkErrors_kCFErrorHTTPBadProxyCredentials: CFNetworkErrors = 307;
pub const CFNetworkErrors_kCFErrorPACFileError: CFNetworkErrors = 308;
pub const CFNetworkErrors_kCFErrorPACFileAuth: CFNetworkErrors = 309;
pub const CFNetworkErrors_kCFErrorHTTPSProxyConnectionFailure: CFNetworkErrors = 310;
pub const CFNetworkErrors_kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod:
    CFNetworkErrors = 311;
pub const CFNetworkErrors_kCFURLErrorBackgroundSessionInUseByAnotherProcess: CFNetworkErrors = -996;
pub const CFNetworkErrors_kCFURLErrorBackgroundSessionWasDisconnected: CFNetworkErrors = -997;
pub const CFNetworkErrors_kCFURLErrorUnknown: CFNetworkErrors = -998;
pub const CFNetworkErrors_kCFURLErrorCancelled: CFNetworkErrors = -999;
pub const CFNetworkErrors_kCFURLErrorBadURL: CFNetworkErrors = -1000;
pub const CFNetworkErrors_kCFURLErrorTimedOut: CFNetworkErrors = -1001;
pub const CFNetworkErrors_kCFURLErrorUnsupportedURL: CFNetworkErrors = -1002;
pub const CFNetworkErrors_kCFURLErrorCannotFindHost: CFNetworkErrors = -1003;
pub const CFNetworkErrors_kCFURLErrorCannotConnectToHost: CFNetworkErrors = -1004;
pub const CFNetworkErrors_kCFURLErrorNetworkConnectionLost: CFNetworkErrors = -1005;
pub const CFNetworkErrors_kCFURLErrorDNSLookupFailed: CFNetworkErrors = -1006;
pub const CFNetworkErrors_kCFURLErrorHTTPTooManyRedirects: CFNetworkErrors = -1007;
pub const CFNetworkErrors_kCFURLErrorResourceUnavailable: CFNetworkErrors = -1008;
pub const CFNetworkErrors_kCFURLErrorNotConnectedToInternet: CFNetworkErrors = -1009;
pub const CFNetworkErrors_kCFURLErrorRedirectToNonExistentLocation: CFNetworkErrors = -1010;
pub const CFNetworkErrors_kCFURLErrorBadServerResponse: CFNetworkErrors = -1011;
pub const CFNetworkErrors_kCFURLErrorUserCancelledAuthentication: CFNetworkErrors = -1012;
pub const CFNetworkErrors_kCFURLErrorUserAuthenticationRequired: CFNetworkErrors = -1013;
pub const CFNetworkErrors_kCFURLErrorZeroByteResource: CFNetworkErrors = -1014;
pub const CFNetworkErrors_kCFURLErrorCannotDecodeRawData: CFNetworkErrors = -1015;
pub const CFNetworkErrors_kCFURLErrorCannotDecodeContentData: CFNetworkErrors = -1016;
pub const CFNetworkErrors_kCFURLErrorCannotParseResponse: CFNetworkErrors = -1017;
pub const CFNetworkErrors_kCFURLErrorInternationalRoamingOff: CFNetworkErrors = -1018;
pub const CFNetworkErrors_kCFURLErrorCallIsActive: CFNetworkErrors = -1019;
pub const CFNetworkErrors_kCFURLErrorDataNotAllowed: CFNetworkErrors = -1020;
pub const CFNetworkErrors_kCFURLErrorRequestBodyStreamExhausted: CFNetworkErrors = -1021;
pub const CFNetworkErrors_kCFURLErrorAppTransportSecurityRequiresSecureConnection: CFNetworkErrors =
    -1022;
pub const CFNetworkErrors_kCFURLErrorFileDoesNotExist: CFNetworkErrors = -1100;
pub const CFNetworkErrors_kCFURLErrorFileIsDirectory: CFNetworkErrors = -1101;
pub const CFNetworkErrors_kCFURLErrorNoPermissionsToReadFile: CFNetworkErrors = -1102;
pub const CFNetworkErrors_kCFURLErrorDataLengthExceedsMaximum: CFNetworkErrors = -1103;
pub const CFNetworkErrors_kCFURLErrorFileOutsideSafeArea: CFNetworkErrors = -1104;
pub const CFNetworkErrors_kCFURLErrorSecureConnectionFailed: CFNetworkErrors = -1200;
pub const CFNetworkErrors_kCFURLErrorServerCertificateHasBadDate: CFNetworkErrors = -1201;
pub const CFNetworkErrors_kCFURLErrorServerCertificateUntrusted: CFNetworkErrors = -1202;
pub const CFNetworkErrors_kCFURLErrorServerCertificateHasUnknownRoot: CFNetworkErrors = -1203;
pub const CFNetworkErrors_kCFURLErrorServerCertificateNotYetValid: CFNetworkErrors = -1204;
pub const CFNetworkErrors_kCFURLErrorClientCertificateRejected: CFNetworkErrors = -1205;
pub const CFNetworkErrors_kCFURLErrorClientCertificateRequired: CFNetworkErrors = -1206;
pub const CFNetworkErrors_kCFURLErrorCannotLoadFromNetwork: CFNetworkErrors = -2000;
pub const CFNetworkErrors_kCFURLErrorCannotCreateFile: CFNetworkErrors = -3000;
pub const CFNetworkErrors_kCFURLErrorCannotOpenFile: CFNetworkErrors = -3001;
pub const CFNetworkErrors_kCFURLErrorCannotCloseFile: CFNetworkErrors = -3002;
pub const CFNetworkErrors_kCFURLErrorCannotWriteToFile: CFNetworkErrors = -3003;
pub const CFNetworkErrors_kCFURLErrorCannotRemoveFile: CFNetworkErrors = -3004;
pub const CFNetworkErrors_kCFURLErrorCannotMoveFile: CFNetworkErrors = -3005;
pub const CFNetworkErrors_kCFURLErrorDownloadDecodingFailedMidStream: CFNetworkErrors = -3006;
pub const CFNetworkErrors_kCFURLErrorDownloadDecodingFailedToComplete: CFNetworkErrors = -3007;
pub const CFNetworkErrors_kCFHTTPCookieCannotParseCookieFile: CFNetworkErrors = -4000;
pub const CFNetworkErrors_kCFNetServiceErrorUnknown: CFNetworkErrors = -72000;
pub const CFNetworkErrors_kCFNetServiceErrorCollision: CFNetworkErrors = -72001;
pub const CFNetworkErrors_kCFNetServiceErrorNotFound: CFNetworkErrors = -72002;
pub const CFNetworkErrors_kCFNetServiceErrorInProgress: CFNetworkErrors = -72003;
pub const CFNetworkErrors_kCFNetServiceErrorBadArgument: CFNetworkErrors = -72004;
pub const CFNetworkErrors_kCFNetServiceErrorCancel: CFNetworkErrors = -72005;
pub const CFNetworkErrors_kCFNetServiceErrorInvalid: CFNetworkErrors = -72006;
pub const CFNetworkErrors_kCFNetServiceErrorTimeout: CFNetworkErrors = -72007;
pub const CFNetworkErrors_kCFNetServiceErrorDNSServiceFailure: CFNetworkErrors = -73000;
pub type CFNetworkErrors = ::std::os::raw::c_int;
extern "C" {
    pub static kCFURLErrorFailingURLErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLErrorFailingURLStringErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFGetAddrInfoFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFSOCKSStatusCodeKey: CFStringRef;
}
extern "C" {
    pub static kCFSOCKSVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFSOCKSNegotiationMethodKey: CFStringRef;
}
extern "C" {
    pub static kCFDNSServiceFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFFTPStatusCodeKey: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFHost {
    _unused: [u8; 0],
}
pub type CFHostRef = *mut __CFHost;
extern "C" {
    pub static kCFStreamErrorDomainNetDB: SInt32;
}
extern "C" {
    pub static kCFStreamErrorDomainSystemConfiguration: SInt32;
}
pub const CFHostInfoType_kCFHostAddresses: CFHostInfoType = 0;
pub const CFHostInfoType_kCFHostNames: CFHostInfoType = 1;
pub const CFHostInfoType_kCFHostReachability: CFHostInfoType = 2;
pub type CFHostInfoType = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CFHostClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
}
pub type CFHostClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        theHost: CFHostRef,
        typeInfo: CFHostInfoType,
        error: *const CFStreamError,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFHostGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFHostCreateWithName(allocator: CFAllocatorRef, hostname: CFStringRef) -> CFHostRef;
}
extern "C" {
    pub fn CFHostCreateWithAddress(allocator: CFAllocatorRef, addr: CFDataRef) -> CFHostRef;
}
extern "C" {
    pub fn CFHostCreateCopy(alloc: CFAllocatorRef, host: CFHostRef) -> CFHostRef;
}
extern "C" {
    pub fn CFHostStartInfoResolution(
        theHost: CFHostRef,
        info: CFHostInfoType,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHostGetAddressing(theHost: CFHostRef, hasBeenResolved: *mut Boolean) -> CFArrayRef;
}
extern "C" {
    pub fn CFHostGetNames(theHost: CFHostRef, hasBeenResolved: *mut Boolean) -> CFArrayRef;
}
extern "C" {
    pub fn CFHostGetReachability(theHost: CFHostRef, hasBeenResolved: *mut Boolean) -> CFDataRef;
}
extern "C" {
    pub fn CFHostCancelInfoResolution(theHost: CFHostRef, info: CFHostInfoType);
}
extern "C" {
    pub fn CFHostSetClient(
        theHost: CFHostRef,
        clientCB: CFHostClientCallBack,
        clientContext: *mut CFHostClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHostScheduleWithRunLoop(
        theHost: CFHostRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFHostUnscheduleFromRunLoop(
        theHost: CFHostRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNetService {
    _unused: [u8; 0],
}
pub type CFNetServiceRef = *mut __CFNetService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNetServiceMonitor {
    _unused: [u8; 0],
}
pub type CFNetServiceMonitorRef = *mut __CFNetServiceMonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNetServiceBrowser {
    _unused: [u8; 0],
}
pub type CFNetServiceBrowserRef = *mut __CFNetServiceBrowser;
extern "C" {
    pub static kCFStreamErrorDomainMach: SInt32;
}
extern "C" {
    pub static kCFStreamErrorDomainNetServices: SInt32;
}
pub const CFNetServicesError_kCFNetServicesErrorUnknown: CFNetServicesError = -72000;
pub const CFNetServicesError_kCFNetServicesErrorCollision: CFNetServicesError = -72001;
pub const CFNetServicesError_kCFNetServicesErrorNotFound: CFNetServicesError = -72002;
pub const CFNetServicesError_kCFNetServicesErrorInProgress: CFNetServicesError = -72003;
pub const CFNetServicesError_kCFNetServicesErrorBadArgument: CFNetServicesError = -72004;
pub const CFNetServicesError_kCFNetServicesErrorCancel: CFNetServicesError = -72005;
pub const CFNetServicesError_kCFNetServicesErrorInvalid: CFNetServicesError = -72006;
pub const CFNetServicesError_kCFNetServicesErrorTimeout: CFNetServicesError = -72007;
pub const CFNetServicesError_kCFNetServicesErrorMissingRequiredConfiguration: CFNetServicesError =
    -72008;
pub type CFNetServicesError = ::std::os::raw::c_int;
pub const CFNetServiceMonitorType_kCFNetServiceMonitorTXT: CFNetServiceMonitorType = 1;
pub type CFNetServiceMonitorType = ::std::os::raw::c_int;
pub const CFNetServiceRegisterFlags_kCFNetServiceFlagNoAutoRename: CFNetServiceRegisterFlags = 1;
pub type CFNetServiceRegisterFlags = CFOptionFlags;
pub const CFNetServiceBrowserFlags_kCFNetServiceFlagMoreComing: CFNetServiceBrowserFlags = 1;
pub const CFNetServiceBrowserFlags_kCFNetServiceFlagIsDomain: CFNetServiceBrowserFlags = 2;
pub const CFNetServiceBrowserFlags_kCFNetServiceFlagIsDefault: CFNetServiceBrowserFlags = 4;
pub const CFNetServiceBrowserFlags_kCFNetServiceFlagIsRegistrationDomain: CFNetServiceBrowserFlags =
    4;
pub const CFNetServiceBrowserFlags_kCFNetServiceFlagRemove: CFNetServiceBrowserFlags = 8;
pub type CFNetServiceBrowserFlags = CFOptionFlags;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CFNetServiceClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
}
pub type CFNetServiceClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        theService: CFNetServiceRef,
        error: *mut CFStreamError,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFNetServiceMonitorClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        theMonitor: CFNetServiceMonitorRef,
        theService: CFNetServiceRef,
        typeInfo: CFNetServiceMonitorType,
        rdata: CFDataRef,
        error: *mut CFStreamError,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFNetServiceBrowserClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        browser: CFNetServiceBrowserRef,
        flags: CFOptionFlags,
        domainOrService: CFTypeRef,
        error: *mut CFStreamError,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFNetServiceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNetServiceMonitorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNetServiceBrowserGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNetServiceCreate(
        alloc: CFAllocatorRef,
        domain: CFStringRef,
        serviceType: CFStringRef,
        name: CFStringRef,
        port: SInt32,
    ) -> CFNetServiceRef;
}
extern "C" {
    pub fn CFNetServiceCreateCopy(
        alloc: CFAllocatorRef,
        service: CFNetServiceRef,
    ) -> CFNetServiceRef;
}
extern "C" {
    pub fn CFNetServiceGetDomain(theService: CFNetServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNetServiceGetType(theService: CFNetServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNetServiceGetName(theService: CFNetServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNetServiceRegisterWithOptions(
        theService: CFNetServiceRef,
        options: CFOptionFlags,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceResolveWithTimeout(
        theService: CFNetServiceRef,
        timeout: CFTimeInterval,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceCancel(theService: CFNetServiceRef);
}
extern "C" {
    pub fn CFNetServiceGetTargetHost(theService: CFNetServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNetServiceGetPortNumber(theService: CFNetServiceRef) -> SInt32;
}
extern "C" {
    pub fn CFNetServiceGetAddressing(theService: CFNetServiceRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFNetServiceGetTXTData(theService: CFNetServiceRef) -> CFDataRef;
}
extern "C" {
    pub fn CFNetServiceSetTXTData(theService: CFNetServiceRef, txtRecord: CFDataRef) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceCreateDictionaryWithTXTData(
        alloc: CFAllocatorRef,
        txtRecord: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFNetServiceCreateTXTDataWithDictionary(
        alloc: CFAllocatorRef,
        keyValuePairs: CFDictionaryRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFNetServiceSetClient(
        theService: CFNetServiceRef,
        clientCB: CFNetServiceClientCallBack,
        clientContext: *mut CFNetServiceClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceScheduleWithRunLoop(
        theService: CFNetServiceRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceUnscheduleFromRunLoop(
        theService: CFNetServiceRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceMonitorCreate(
        alloc: CFAllocatorRef,
        theService: CFNetServiceRef,
        clientCB: CFNetServiceMonitorClientCallBack,
        clientContext: *mut CFNetServiceClientContext,
    ) -> CFNetServiceMonitorRef;
}
extern "C" {
    pub fn CFNetServiceMonitorInvalidate(monitor: CFNetServiceMonitorRef);
}
extern "C" {
    pub fn CFNetServiceMonitorStart(
        monitor: CFNetServiceMonitorRef,
        recordType: CFNetServiceMonitorType,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceMonitorStop(monitor: CFNetServiceMonitorRef, error: *mut CFStreamError);
}
extern "C" {
    pub fn CFNetServiceMonitorScheduleWithRunLoop(
        monitor: CFNetServiceMonitorRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceMonitorUnscheduleFromRunLoop(
        monitor: CFNetServiceMonitorRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceBrowserCreate(
        alloc: CFAllocatorRef,
        clientCB: CFNetServiceBrowserClientCallBack,
        clientContext: *mut CFNetServiceClientContext,
    ) -> CFNetServiceBrowserRef;
}
extern "C" {
    pub fn CFNetServiceBrowserInvalidate(browser: CFNetServiceBrowserRef);
}
extern "C" {
    pub fn CFNetServiceBrowserSearchForDomains(
        browser: CFNetServiceBrowserRef,
        registrationDomains: Boolean,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceBrowserSearchForServices(
        browser: CFNetServiceBrowserRef,
        domain: CFStringRef,
        serviceType: CFStringRef,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceBrowserStopSearch(
        browser: CFNetServiceBrowserRef,
        error: *mut CFStreamError,
    );
}
extern "C" {
    pub fn CFNetServiceBrowserScheduleWithRunLoop(
        browser: CFNetServiceBrowserRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceBrowserUnscheduleFromRunLoop(
        browser: CFNetServiceBrowserRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn CFNetServiceRegister(theService: CFNetServiceRef, error: *mut CFStreamError) -> Boolean;
}
extern "C" {
    pub fn CFNetServiceResolve(theService: CFNetServiceRef, error: *mut CFStreamError) -> Boolean;
}
extern "C" {
    pub static kCFStreamPropertySSLContext: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertySSLPeerTrust: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLValidatesCertificateChain: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertySSLSettings: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLLevel: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLPeerName: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLCertificates: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLIsServer: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceType: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeVideo: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeVoice: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeBackground: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeResponsiveData: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeCallSignaling: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeAVStreaming: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeResponsiveAV: CFStringRef;
}
extern "C" {
    pub static kCFStreamNetworkServiceTypeVoIP: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyNoCellular: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyConnectionIsCellular: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyAllowExpensiveNetworkAccess: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyConnectionIsExpensive: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyAllowConstrainedNetworkAccess: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainWinSock: CFIndex;
}
pub const kCFStreamErrorSOCKSSubDomainNone: _bindgen_ty_41 = 0;
pub const kCFStreamErrorSOCKSSubDomainVersionCode: _bindgen_ty_41 = 1;
pub const kCFStreamErrorSOCKS4SubDomainResponse: _bindgen_ty_41 = 2;
pub const kCFStreamErrorSOCKS5SubDomainUserPass: _bindgen_ty_41 = 3;
pub const kCFStreamErrorSOCKS5SubDomainMethod: _bindgen_ty_41 = 4;
pub const kCFStreamErrorSOCKS5SubDomainResponse: _bindgen_ty_41 = 5;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const kCFStreamErrorSOCKS5BadResponseAddr: _bindgen_ty_42 = 1;
pub const kCFStreamErrorSOCKS5BadState: _bindgen_ty_42 = 2;
pub const kCFStreamErrorSOCKSUnknownClientVersion: _bindgen_ty_42 = 3;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const kCFStreamErrorSOCKS4RequestFailed: _bindgen_ty_43 = 91;
pub const kCFStreamErrorSOCKS4IdentdFailed: _bindgen_ty_43 = 92;
pub const kCFStreamErrorSOCKS4IdConflict: _bindgen_ty_43 = 93;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const kSOCKS5NoAcceptableMethod: _bindgen_ty_44 = 255;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
extern "C" {
    pub static kCFStreamPropertyProxyLocalBypass: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertySocketRemoteHost: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertySocketRemoteNetService: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertySocketExtendedBackgroundIdleMode: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToCFHost(
        alloc: CFAllocatorRef,
        host: CFHostRef,
        port: SInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToNetService(
        alloc: CFAllocatorRef,
        service: CFNetServiceRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub static kCFStreamPropertySSLPeerCertificates: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLAllowsExpiredCertificates: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLAllowsExpiredRoots: CFStringRef;
}
extern "C" {
    pub static kCFStreamSSLAllowsAnyRoot: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainFTP: SInt32;
}
extern "C" {
    pub static kCFStreamPropertyFTPUserName: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPUsePassiveMode: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPResourceSize: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPFetchResourceInfo: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPFileTransferOffset: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPAttemptPersistentConnection: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPProxy: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPProxyHost: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPProxyPort: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPProxyUser: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyFTPProxyPassword: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceMode: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceName: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceOwner: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceGroup: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceLink: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceSize: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceType: CFStringRef;
}
extern "C" {
    pub static kCFFTPResourceModDate: CFStringRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFTPURL(alloc: CFAllocatorRef, ftpURL: CFURLRef)
        -> CFReadStreamRef;
}
extern "C" {
    pub fn CFFTPCreateParsedResourceListing(
        alloc: CFAllocatorRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
        parsed: *mut CFDictionaryRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFTPURL(
        alloc: CFAllocatorRef,
        ftpURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub static kCFHTTPVersion1_0: CFStringRef;
}
extern "C" {
    pub static kCFHTTPVersion1_1: CFStringRef;
}
extern "C" {
    pub static kCFHTTPVersion2_0: CFStringRef;
}
extern "C" {
    pub static kCFHTTPVersion3_0: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeBasic: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeDigest: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeNTLM: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeKerberos: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeNegotiate: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeNegotiate2: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationSchemeXMobileMeAuthToken: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFHTTPMessage {
    _unused: [u8; 0],
}
pub type CFHTTPMessageRef = *mut __CFHTTPMessage;
extern "C" {
    pub fn CFHTTPMessageGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFHTTPMessageCreateRequest(
        alloc: CFAllocatorRef,
        requestMethod: CFStringRef,
        url: CFURLRef,
        httpVersion: CFStringRef,
    ) -> CFHTTPMessageRef;
}
extern "C" {
    pub fn CFHTTPMessageCreateResponse(
        alloc: CFAllocatorRef,
        statusCode: CFIndex,
        statusDescription: CFStringRef,
        httpVersion: CFStringRef,
    ) -> CFHTTPMessageRef;
}
extern "C" {
    pub fn CFHTTPMessageCreateEmpty(alloc: CFAllocatorRef, isRequest: Boolean) -> CFHTTPMessageRef;
}
extern "C" {
    pub fn CFHTTPMessageCreateCopy(
        alloc: CFAllocatorRef,
        message: CFHTTPMessageRef,
    ) -> CFHTTPMessageRef;
}
extern "C" {
    pub fn CFHTTPMessageIsRequest(message: CFHTTPMessageRef) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageCopyVersion(message: CFHTTPMessageRef) -> CFStringRef;
}
extern "C" {
    pub fn CFHTTPMessageCopyBody(message: CFHTTPMessageRef) -> CFDataRef;
}
extern "C" {
    pub fn CFHTTPMessageSetBody(message: CFHTTPMessageRef, bodyData: CFDataRef);
}
extern "C" {
    pub fn CFHTTPMessageCopyHeaderFieldValue(
        message: CFHTTPMessageRef,
        headerField: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFHTTPMessageCopyAllHeaderFields(message: CFHTTPMessageRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFHTTPMessageSetHeaderFieldValue(
        message: CFHTTPMessageRef,
        headerField: CFStringRef,
        value: CFStringRef,
    );
}
extern "C" {
    pub fn CFHTTPMessageAppendBytes(
        message: CFHTTPMessageRef,
        newBytes: *const UInt8,
        numBytes: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageIsHeaderComplete(message: CFHTTPMessageRef) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageCopySerializedMessage(message: CFHTTPMessageRef) -> CFDataRef;
}
extern "C" {
    pub fn CFHTTPMessageCopyRequestURL(request: CFHTTPMessageRef) -> CFURLRef;
}
extern "C" {
    pub fn CFHTTPMessageCopyRequestMethod(request: CFHTTPMessageRef) -> CFStringRef;
}
extern "C" {
    pub fn CFHTTPMessageAddAuthentication(
        request: CFHTTPMessageRef,
        authenticationFailureResponse: CFHTTPMessageRef,
        username: CFStringRef,
        password: CFStringRef,
        authenticationScheme: CFStringRef,
        forProxy: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageGetResponseStatusCode(response: CFHTTPMessageRef) -> CFIndex;
}
extern "C" {
    pub fn CFHTTPMessageCopyResponseStatusLine(response: CFHTTPMessageRef) -> CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainHTTP: SInt32;
}
pub const CFStreamErrorHTTP_kCFStreamErrorHTTPParseFailure: CFStreamErrorHTTP = -1;
pub const CFStreamErrorHTTP_kCFStreamErrorHTTPRedirectionLoop: CFStreamErrorHTTP = -2;
pub const CFStreamErrorHTTP_kCFStreamErrorHTTPBadURL: CFStreamErrorHTTP = -3;
pub type CFStreamErrorHTTP = ::std::os::raw::c_int;
extern "C" {
    pub static kCFStreamPropertyHTTPResponseHeader: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPFinalURL: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPFinalRequest: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPProxy: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPProxyHost: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPProxyPort: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPSProxyHost: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPSProxyPort: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPShouldAutoredirect: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPAttemptPersistentConnection: CFStringRef;
}
extern "C" {
    pub static kCFStreamPropertyHTTPRequestBytesWrittenCount: CFStringRef;
}
extern "C" {
    pub fn CFReadStreamCreateForHTTPRequest(
        alloc: CFAllocatorRef,
        request: CFHTTPMessageRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateForStreamedHTTPRequest(
        alloc: CFAllocatorRef,
        requestHeaders: CFHTTPMessageRef,
        requestBody: CFReadStreamRef,
    ) -> CFReadStreamRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CFHTTPAuthentication {
    _unused: [u8; 0],
}
pub type CFHTTPAuthenticationRef = *mut _CFHTTPAuthentication;
pub const CFStreamErrorHTTPAuthentication_kCFStreamErrorHTTPAuthenticationTypeUnsupported:
    CFStreamErrorHTTPAuthentication = -1000;
pub const CFStreamErrorHTTPAuthentication_kCFStreamErrorHTTPAuthenticationBadUserName:
    CFStreamErrorHTTPAuthentication = -1001;
pub const CFStreamErrorHTTPAuthentication_kCFStreamErrorHTTPAuthenticationBadPassword:
    CFStreamErrorHTTPAuthentication = -1002;
pub type CFStreamErrorHTTPAuthentication = ::std::os::raw::c_int;
extern "C" {
    pub static kCFHTTPAuthenticationUsername: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationPassword: CFStringRef;
}
extern "C" {
    pub static kCFHTTPAuthenticationAccountDomain: CFStringRef;
}
extern "C" {
    pub fn CFHTTPAuthenticationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFHTTPAuthenticationCreateFromResponse(
        alloc: CFAllocatorRef,
        response: CFHTTPMessageRef,
    ) -> CFHTTPAuthenticationRef;
}
extern "C" {
    pub fn CFHTTPAuthenticationIsValid(
        auth: CFHTTPAuthenticationRef,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPAuthenticationAppliesToRequest(
        auth: CFHTTPAuthenticationRef,
        request: CFHTTPMessageRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPAuthenticationRequiresOrderedRequests(auth: CFHTTPAuthenticationRef) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageApplyCredentials(
        request: CFHTTPMessageRef,
        auth: CFHTTPAuthenticationRef,
        username: CFStringRef,
        password: CFStringRef,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPMessageApplyCredentialDictionary(
        request: CFHTTPMessageRef,
        auth: CFHTTPAuthenticationRef,
        dict: CFDictionaryRef,
        error: *mut CFStreamError,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPAuthenticationCopyRealm(auth: CFHTTPAuthenticationRef) -> CFStringRef;
}
extern "C" {
    pub fn CFHTTPAuthenticationCopyDomains(auth: CFHTTPAuthenticationRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFHTTPAuthenticationCopyMethod(auth: CFHTTPAuthenticationRef) -> CFStringRef;
}
extern "C" {
    pub fn CFHTTPAuthenticationRequiresUserNameAndPassword(
        auth: CFHTTPAuthenticationRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFHTTPAuthenticationRequiresAccountDomain(auth: CFHTTPAuthenticationRef) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNetDiagnostic {
    _unused: [u8; 0],
}
pub type CFNetDiagnosticRef = *mut __CFNetDiagnostic;
pub const CFNetDiagnosticStatusValues_kCFNetDiagnosticNoErr: CFNetDiagnosticStatusValues = 0;
pub const CFNetDiagnosticStatusValues_kCFNetDiagnosticErr: CFNetDiagnosticStatusValues = -66560;
pub const CFNetDiagnosticStatusValues_kCFNetDiagnosticConnectionUp: CFNetDiagnosticStatusValues =
    -66559;
pub const CFNetDiagnosticStatusValues_kCFNetDiagnosticConnectionIndeterminate:
    CFNetDiagnosticStatusValues = -66558;
pub const CFNetDiagnosticStatusValues_kCFNetDiagnosticConnectionDown: CFNetDiagnosticStatusValues =
    -66557;
pub type CFNetDiagnosticStatusValues = ::std::os::raw::c_int;
pub type CFNetDiagnosticStatus = CFIndex;
extern "C" {
    pub fn CFNetDiagnosticCreateWithStreams(
        alloc: CFAllocatorRef,
        readStream: CFReadStreamRef,
        writeStream: CFWriteStreamRef,
    ) -> CFNetDiagnosticRef;
}
extern "C" {
    pub fn CFNetDiagnosticCreateWithURL(alloc: CFAllocatorRef, url: CFURLRef)
        -> CFNetDiagnosticRef;
}
extern "C" {
    pub fn CFNetDiagnosticSetName(details: CFNetDiagnosticRef, name: CFStringRef);
}
extern "C" {
    pub fn CFNetDiagnosticDiagnoseProblemInteractively(
        details: CFNetDiagnosticRef,
    ) -> CFNetDiagnosticStatus;
}
extern "C" {
    pub fn CFNetDiagnosticCopyNetworkStatusPassively(
        details: CFNetDiagnosticRef,
        description: *mut CFStringRef,
    ) -> CFNetDiagnosticStatus;
}
extern "C" {
    pub fn CFNetworkCopySystemProxySettings() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFNetworkCopyProxiesForURL(url: CFURLRef, proxySettings: CFDictionaryRef) -> CFArrayRef;
}
pub type CFProxyAutoConfigurationResultCallback = ::std::option::Option<
    unsafe extern "C" fn(
        client: *mut ::std::os::raw::c_void,
        proxyList: CFArrayRef,
        error: CFErrorRef,
    ),
>;
extern "C" {
    pub fn CFNetworkCopyProxiesForAutoConfigurationScript(
        proxyAutoConfigurationScript: CFStringRef,
        targetURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFNetworkExecuteProxyAutoConfigurationScript(
        proxyAutoConfigurationScript: CFStringRef,
        targetURL: CFURLRef,
        cb: CFProxyAutoConfigurationResultCallback,
        clientContext: *mut CFStreamClientContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFNetworkExecuteProxyAutoConfigurationURL(
        proxyAutoConfigURL: CFURLRef,
        targetURL: CFURLRef,
        cb: CFProxyAutoConfigurationResultCallback,
        clientContext: *mut CFStreamClientContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub static kCFProxyTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyHostNameKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyPortNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyAutoConfigurationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyAutoConfigurationJavaScriptKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyUsernameKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyPasswordKey: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeNone: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeHTTP: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeHTTPS: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeSOCKS: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeFTP: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeAutoConfigurationURL: CFStringRef;
}
extern "C" {
    pub static kCFProxyTypeAutoConfigurationJavaScript: CFStringRef;
}
extern "C" {
    pub static kCFProxyAutoConfigurationHTTPResponseKey: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesExceptionsList: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesExcludeSimpleHostnames: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesFTPEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesFTPPassive: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesFTPPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesFTPProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesGopherEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesGopherPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesGopherProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPSEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPSPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesHTTPSProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesRTSPEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesRTSPPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesRTSPProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesSOCKSEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesSOCKSPort: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesSOCKSProxy: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesProxyAutoConfigEnable: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesProxyAutoConfigURLString: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesProxyAutoConfigJavaScript: CFStringRef;
}
extern "C" {
    pub static kCFNetworkProxiesProxyAutoDiscoveryEnable: CFStringRef;
}
extern "C" {
    pub static mut NSFoundationVersionNumber: f64;
}
pub type NSExceptionName = NSString;
pub type NSRunLoopMode = NSString;
extern "C" {
    pub fn NSStringFromSelector(aSelector: objc::runtime::Sel) -> NSString;
}
extern "C" {
    pub fn NSSelectorFromString(aSelectorName: NSString) -> objc::runtime::Sel;
}
extern "C" {
    pub fn NSStringFromClass(aClass: Class) -> NSString;
}
extern "C" {
    pub fn NSClassFromString(aClassName: NSString) -> Class;
}
extern "C" {
    pub fn NSStringFromProtocol(proto: Protocol) -> NSString;
}
extern "C" {
    pub fn NSProtocolFromString(namestr: NSString) -> Protocol;
}
extern "C" {
    pub fn NSGetSizeAndAlignment(
        typePtr: *const ::std::os::raw::c_char,
        sizep: *mut NSUInteger,
        alignp: *mut NSUInteger,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSLog(format: id, ...);
}
extern "C" {
    pub fn NSLogv(format: id, args: __builtin_va_list);
}
pub const NSComparisonResult_NSOrderedAscending: NSComparisonResult = -1;
pub const NSComparisonResult_NSOrderedSame: NSComparisonResult = 0;
pub const NSComparisonResult_NSOrderedDescending: NSComparisonResult = 1;
pub type NSComparisonResult = NSInteger;
pub type NSComparator = *mut ::std::os::raw::c_void;
pub const NSEnumerationOptions_NSEnumerationConcurrent: NSEnumerationOptions = 1;
pub const NSEnumerationOptions_NSEnumerationReverse: NSEnumerationOptions = 2;
pub type NSEnumerationOptions = NSUInteger;
pub const NSSortOptions_NSSortConcurrent: NSSortOptions = 1;
pub const NSSortOptions_NSSortStable: NSSortOptions = 16;
pub type NSSortOptions = NSUInteger;
pub const NSQualityOfService_NSQualityOfServiceUserInteractive: NSQualityOfService = 33;
pub const NSQualityOfService_NSQualityOfServiceUserInitiated: NSQualityOfService = 25;
pub const NSQualityOfService_NSQualityOfServiceUtility: NSQualityOfService = 17;
pub const NSQualityOfService_NSQualityOfServiceBackground: NSQualityOfService = 9;
pub const NSQualityOfService_NSQualityOfServiceDefault: NSQualityOfService = -1;
pub type NSQualityOfService = NSInteger;
pub const NSNotFound: NSInteger = 9223372036854775807;
pub type NSZone = _NSZone;
extern "C" {
    pub fn NSDefaultMallocZone() -> *mut NSZone;
}
extern "C" {
    pub fn NSCreateZone(
        startSize: NSUInteger,
        granularity: NSUInteger,
        canFree: BOOL,
    ) -> *mut NSZone;
}
extern "C" {
    pub fn NSRecycleZone(zone: *mut NSZone);
}
extern "C" {
    pub fn NSSetZoneName(zone: *mut NSZone, name: NSString);
}
extern "C" {
    pub fn NSZoneName(zone: *mut NSZone) -> NSString;
}
extern "C" {
    pub fn NSZoneFromPointer(ptr: *mut ::std::os::raw::c_void) -> *mut NSZone;
}
extern "C" {
    pub fn NSZoneMalloc(zone: *mut NSZone, size: NSUInteger) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSZoneCalloc(
        zone: *mut NSZone,
        numElems: NSUInteger,
        byteSize: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSZoneRealloc(
        zone: *mut NSZone,
        ptr: *mut ::std::os::raw::c_void,
        size: NSUInteger,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSZoneFree(zone: *mut NSZone, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn NSPageSize() -> NSUInteger;
}
extern "C" {
    pub fn NSLogPageSize() -> NSUInteger;
}
extern "C" {
    pub fn NSRoundUpToMultipleOfPageSize(bytes: NSUInteger) -> NSUInteger;
}
extern "C" {
    pub fn NSRoundDownToMultipleOfPageSize(bytes: NSUInteger) -> NSUInteger;
}
extern "C" {
    pub fn NSAllocateMemoryPages(bytes: NSUInteger) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSDeallocateMemoryPages(ptr: *mut ::std::os::raw::c_void, bytes: NSUInteger);
}
extern "C" {
    pub fn NSCopyMemoryPages(
        source: *const ::std::os::raw::c_void,
        dest: *mut ::std::os::raw::c_void,
        bytes: NSUInteger,
    );
}
extern "C" {
    pub fn NSRealMemoryAvailable() -> NSUInteger;
}
pub trait PNSCopying: Sized + std::ops::Deref {
    unsafe fn copyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copyWithZone: zone)
    }
}
pub trait PNSMutableCopying: Sized + std::ops::Deref {
    unsafe fn mutableCopyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopyWithZone: zone)
    }
}
pub trait PNSCoding: Sized + std::ops::Deref {
    unsafe fn encodeWithCoder_(&self, coder: NSCoder)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeWithCoder: coder)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
pub trait PNSSecureCoding: Sized + std::ops::Deref {
    unsafe fn supportsSecureCoding() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSecureCoding), supportsSecureCoding)
    }
}
impl NSObject_NSCoderMethods for NSObject {}
pub trait NSObject_NSCoderMethods: Sized + std::ops::Deref {
    unsafe fn replacementObjectForCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForCoder: coder)
    }
    unsafe fn awakeAfterUsingCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, awakeAfterUsingCoder: coder)
    }
    unsafe fn classForCoder(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForCoder)
    }
    unsafe fn version() -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), version)
    }
    unsafe fn setVersion_(aVersion: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), setVersion: aVersion)
    }
}
pub trait PNSDiscardableContent: Sized + std::ops::Deref {
    unsafe fn beginContentAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, beginContentAccess)
    }
    unsafe fn endContentAccess(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endContentAccess)
    }
    unsafe fn discardContentIfPossible(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, discardContentIfPossible)
    }
    unsafe fn isContentDiscarded(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isContentDiscarded)
    }
}
impl NSObject_NSDiscardableContentProxy for NSObject {}
pub trait NSObject_NSDiscardableContentProxy: Sized + std::ops::Deref {
    unsafe fn autoContentAccessingProxy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autoContentAccessingProxy)
    }
}
extern "C" {
    pub fn NSAllocateObject(aClass: Class, extraBytes: NSUInteger, zone: *mut NSZone) -> id;
}
extern "C" {
    pub fn NSDeallocateObject(object: id);
}
extern "C" {
    pub fn NSCopyObject(object: id, extraBytes: NSUInteger, zone: *mut NSZone) -> id;
}
extern "C" {
    pub fn NSShouldRetainWithZone(anObject: id, requestedZone: *mut NSZone) -> BOOL;
}
extern "C" {
    pub fn NSIncrementExtraRefCount(object: id);
}
extern "C" {
    pub fn NSDecrementExtraRefCountWasZero(object: id) -> BOOL;
}
extern "C" {
    pub fn NSExtraRefCount(object: id) -> NSUInteger;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSFastEnumerationState {
    pub state: ::std::os::raw::c_ulong,
    pub itemsPtr: *mut id,
    pub mutationsPtr: *mut ::std::os::raw::c_ulong,
    pub extra: [::std::os::raw::c_ulong; 5usize],
}
pub trait PNSFastEnumeration: Sized + std::ops::Deref {
    unsafe fn countByEnumeratingWithState_objects_count_(
        &self,
        state: *mut NSFastEnumerationState,
        buffer: *mut id,
        len: NSUInteger,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , countByEnumeratingWithState : state objects : buffer count : len)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSEnumerator(pub id);
impl std::ops::Deref for NSEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSEnumerator {}
impl NSEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSEnumerator), alloc) })
    }
}
impl PNSFastEnumeration for NSEnumerator {}
impl INSObject for NSEnumerator {}
impl PNSObject for NSEnumerator {}
impl From<NSEnumerator> for NSObject {
    fn from(child: NSEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSEnumerator, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSEnumerator)) };
        if is_kind_of {
            Ok(NSEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSEnumerator {}
pub trait INSEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn nextObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nextObject)
    }
}
impl<ObjectType: 'static> NSEnumerator_NSExtendedEnumerator<ObjectType> for NSEnumerator {}
pub trait NSEnumerator_NSExtendedEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn allObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allObjects)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSValue(pub id);
impl std::ops::Deref for NSValue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSValue {}
impl NSValue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSValue), alloc) })
    }
}
impl PNSCopying for NSValue {}
impl PNSSecureCoding for NSValue {}
impl INSObject for NSValue {}
impl PNSObject for NSValue {}
impl From<NSValue> for NSObject {
    fn from(child: NSValue) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSValue {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSValue, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSValue)) };
        if is_kind_of {
            Ok(NSValue(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSValue")
        }
    }
}
impl INSValue for NSValue {}
pub trait INSValue: Sized + std::ops::Deref {
    unsafe fn getValue_size_(&self, value: *mut ::std::os::raw::c_void, size: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getValue : value size : size)
    }
    unsafe fn initWithBytes_objCType_(
        &self,
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytes : value objCType : type_)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn objCType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objCType)
    }
}
impl NSValue_NSValueCreation for NSValue {}
pub trait NSValue_NSValueCreation: Sized + std::ops::Deref {
    unsafe fn valueWithBytes_objCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValue) , valueWithBytes : value objCType : type_)
    }
    unsafe fn value_withObjCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValue) , value : value withObjCType : type_)
    }
}
impl NSValue_NSValueExtensionMethods for NSValue {}
pub trait NSValue_NSValueExtensionMethods: Sized + std::ops::Deref {
    unsafe fn isEqualToValue_(&self, value: NSValue) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToValue: value)
    }
    unsafe fn nonretainedObjectValue(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nonretainedObjectValue)
    }
    unsafe fn pointerValue(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointerValue)
    }
    unsafe fn valueWithNonretainedObject_(anObject: id) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithNonretainedObject: anObject)
    }
    unsafe fn valueWithPointer_(pointer: *const ::std::os::raw::c_void) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithPointer: pointer)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumber), alloc) })
    }
}
impl INSValue for NSNumber {}
impl PNSCopying for NSNumber {}
impl PNSSecureCoding for NSNumber {}
impl From<NSNumber> for NSValue {
    fn from(child: NSNumber) -> NSValue {
        NSValue(child.0)
    }
}
impl std::convert::TryFrom<NSValue> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSValue) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSValue cannot be downcasted to NSNumber")
        }
    }
}
impl INSObject for NSNumber {}
impl PNSObject for NSNumber {}
impl From<NSNumber> for NSObject {
    fn from(child: NSNumber) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNumber")
        }
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn initWithChar_(&self, value: ::std::os::raw::c_char) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithChar: value)
    }
    unsafe fn initWithUnsignedChar_(&self, value: ::std::os::raw::c_uchar) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedChar: value)
    }
    unsafe fn initWithShort_(&self, value: ::std::os::raw::c_short) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithShort: value)
    }
    unsafe fn initWithUnsignedShort_(&self, value: ::std::os::raw::c_ushort) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedShort: value)
    }
    unsafe fn initWithInt_(&self, value: ::std::os::raw::c_int) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithInt: value)
    }
    unsafe fn initWithUnsignedInt_(&self, value: ::std::os::raw::c_uint) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedInt: value)
    }
    unsafe fn initWithLong_(&self, value: ::std::os::raw::c_long) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLong: value)
    }
    unsafe fn initWithUnsignedLong_(&self, value: ::std::os::raw::c_ulong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedLong: value)
    }
    unsafe fn initWithLongLong_(&self, value: ::std::os::raw::c_longlong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLongLong: value)
    }
    unsafe fn initWithUnsignedLongLong_(&self, value: ::std::os::raw::c_ulonglong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedLongLong: value)
    }
    unsafe fn initWithFloat_(&self, value: f32) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFloat: value)
    }
    unsafe fn initWithDouble_(&self, value: f64) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithDouble: value)
    }
    unsafe fn initWithBool_(&self, value: BOOL) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithBool: value)
    }
    unsafe fn initWithInteger_(&self, value: NSInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithInteger: value)
    }
    unsafe fn initWithUnsignedInteger_(&self, value: NSUInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedInteger: value)
    }
    unsafe fn compare_(&self, otherNumber: NSNumber) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: otherNumber)
    }
    unsafe fn isEqualToNumber_(&self, number: NSNumber) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToNumber: number)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn charValue(&self) -> ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, charValue)
    }
    unsafe fn unsignedCharValue(&self) -> ::std::os::raw::c_uchar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedCharValue)
    }
    unsafe fn shortValue(&self) -> ::std::os::raw::c_short
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortValue)
    }
    unsafe fn unsignedShortValue(&self) -> ::std::os::raw::c_ushort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedShortValue)
    }
    unsafe fn intValue(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intValue)
    }
    unsafe fn unsignedIntValue(&self) -> ::std::os::raw::c_uint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedIntValue)
    }
    unsafe fn longValue(&self) -> ::std::os::raw::c_long
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longValue)
    }
    unsafe fn unsignedLongValue(&self) -> ::std::os::raw::c_ulong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedLongValue)
    }
    unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longLongValue)
    }
    unsafe fn unsignedLongLongValue(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedLongLongValue)
    }
    unsafe fn floatValue(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, floatValue)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
    unsafe fn boolValue(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, boolValue)
    }
    unsafe fn integerValue(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, integerValue)
    }
    unsafe fn unsignedIntegerValue(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedIntegerValue)
    }
    unsafe fn stringValue(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringValue)
    }
}
impl NSNumber_NSNumberCreation for NSNumber {}
pub trait NSNumber_NSNumberCreation: Sized + std::ops::Deref {
    unsafe fn numberWithChar_(value: ::std::os::raw::c_char) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithChar: value)
    }
    unsafe fn numberWithUnsignedChar_(value: ::std::os::raw::c_uchar) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedChar: value)
    }
    unsafe fn numberWithShort_(value: ::std::os::raw::c_short) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithShort: value)
    }
    unsafe fn numberWithUnsignedShort_(value: ::std::os::raw::c_ushort) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedShort: value)
    }
    unsafe fn numberWithInt_(value: ::std::os::raw::c_int) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithInt: value)
    }
    unsafe fn numberWithUnsignedInt_(value: ::std::os::raw::c_uint) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedInt: value)
    }
    unsafe fn numberWithLong_(value: ::std::os::raw::c_long) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithLong: value)
    }
    unsafe fn numberWithUnsignedLong_(value: ::std::os::raw::c_ulong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedLong: value)
    }
    unsafe fn numberWithLongLong_(value: ::std::os::raw::c_longlong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithLongLong: value)
    }
    unsafe fn numberWithUnsignedLongLong_(value: ::std::os::raw::c_ulonglong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedLongLong: value)
    }
    unsafe fn numberWithFloat_(value: f32) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithFloat: value)
    }
    unsafe fn numberWithDouble_(value: f64) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithDouble: value)
    }
    unsafe fn numberWithBool_(value: BOOL) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithBool: value)
    }
    unsafe fn numberWithInteger_(value: NSInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithInteger: value)
    }
    unsafe fn numberWithUnsignedInteger_(value: NSUInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumber), numberWithUnsignedInteger: value)
    }
}
impl NSValue_NSDeprecated for NSValue {}
pub trait NSValue_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn getValue_(&self, value: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getValue: value)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSRange {
    pub location: NSUInteger,
    pub length: NSUInteger,
}
pub type NSRange = _NSRange;
pub type NSRangePointer = *mut NSRange;
extern "C" {
    pub fn NSUnionRange(range1: NSRange, range2: NSRange) -> NSRange;
}
extern "C" {
    pub fn NSIntersectionRange(range1: NSRange, range2: NSRange) -> NSRange;
}
extern "C" {
    pub fn NSStringFromRange(range: NSRange) -> NSString;
}
extern "C" {
    pub fn NSRangeFromString(aString: NSString) -> NSRange;
}
impl NSValue_NSValueRangeExtensions for NSValue {}
pub trait NSValue_NSValueRangeExtensions: Sized + std::ops::Deref {
    unsafe fn rangeValue(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeValue)
    }
    unsafe fn valueWithRange_(range: NSRange) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithRange: range)
    }
}
pub const NSCollectionChangeType_NSCollectionChangeInsert: NSCollectionChangeType = 0;
pub const NSCollectionChangeType_NSCollectionChangeRemove: NSCollectionChangeType = 1;
pub type NSCollectionChangeType = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrderedCollectionChange(pub id);
impl std::ops::Deref for NSOrderedCollectionChange {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionChange {}
impl NSOrderedCollectionChange {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrderedCollectionChange), alloc) })
    }
}
impl INSObject for NSOrderedCollectionChange {}
impl PNSObject for NSOrderedCollectionChange {}
impl From<NSOrderedCollectionChange> for NSObject {
    fn from(child: NSOrderedCollectionChange) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionChange {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionChange, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedCollectionChange)) };
        if is_kind_of {
            Ok(NSOrderedCollectionChange(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionChange")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionChange<ObjectType> for NSOrderedCollectionChange {}
pub trait INSOrderedCollectionChange<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn init(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObject_type_index_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObject : anObject type : type_ index : index)
    }
    unsafe fn initWithObject_type_index_associatedIndex_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObject : anObject type : type_ index : index associatedIndex : associatedIndex)
    }
    unsafe fn object(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, object)
    }
    unsafe fn changeType(&self) -> NSCollectionChangeType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, changeType)
    }
    unsafe fn index(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, index)
    }
    unsafe fn associatedIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, associatedIndex)
    }
    unsafe fn changeWithObject_type_index_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject type : type_ index : index)
    }
    unsafe fn changeWithObject_type_index_associatedIndex_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject type : type_ index : index associatedIndex : associatedIndex)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSIndexSet(pub id);
impl std::ops::Deref for NSIndexSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSIndexSet {}
impl NSIndexSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSIndexSet), alloc) })
    }
}
impl PNSCopying for NSIndexSet {}
impl PNSMutableCopying for NSIndexSet {}
impl PNSSecureCoding for NSIndexSet {}
impl INSObject for NSIndexSet {}
impl PNSObject for NSIndexSet {}
impl From<NSIndexSet> for NSObject {
    fn from(child: NSIndexSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSIndexSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSIndexSet)) };
        if is_kind_of {
            Ok(NSIndexSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSIndexSet")
        }
    }
}
impl INSIndexSet for NSIndexSet {}
pub trait INSIndexSet: Sized + std::ops::Deref {
    unsafe fn initWithIndexesInRange_(&self, range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndexesInRange: range)
    }
    unsafe fn initWithIndexSet_(&self, indexSet: NSIndexSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndexSet: indexSet)
    }
    unsafe fn initWithIndex_(&self, value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndex: value)
    }
    unsafe fn isEqualToIndexSet_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToIndexSet: indexSet)
    }
    unsafe fn indexGreaterThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexGreaterThanIndex: value)
    }
    unsafe fn indexLessThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexLessThanIndex: value)
    }
    unsafe fn indexGreaterThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexGreaterThanOrEqualToIndex: value)
    }
    unsafe fn indexLessThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexLessThanOrEqualToIndex: value)
    }
    unsafe fn getIndexes_maxCount_inIndexRange_(
        &self,
        indexBuffer: *mut NSUInteger,
        bufferSize: NSUInteger,
        range: NSRangePointer,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getIndexes : indexBuffer maxCount : bufferSize inIndexRange : range)
    }
    unsafe fn countOfIndexesInRange_(&self, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfIndexesInRange: range)
    }
    unsafe fn containsIndex_(&self, value: NSUInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndex: value)
    }
    unsafe fn containsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndexesInRange: range)
    }
    unsafe fn containsIndexes_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndexes: indexSet)
    }
    unsafe fn intersectsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsIndexesInRange: range)
    }
    unsafe fn enumerateIndexesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateIndexesUsingBlock: block)
    }
    unsafe fn enumerateIndexesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateIndexesWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateIndexesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateIndexesInRange : range options : opts usingBlock : block)
    }
    unsafe fn indexPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexPassingTest: predicate)
    }
    unsafe fn indexWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexInRange : range options : opts passingTest : predicate)
    }
    unsafe fn indexesPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexesPassingTest: predicate)
    }
    unsafe fn indexesWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexesInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesInRange : range options : opts passingTest : predicate)
    }
    unsafe fn enumerateRangesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateRangesUsingBlock: block)
    }
    unsafe fn enumerateRangesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateRangesWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateRangesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateRangesInRange : range options : opts usingBlock : block)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn firstIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstIndex)
    }
    unsafe fn lastIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastIndex)
    }
    unsafe fn indexSet() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSet)
    }
    unsafe fn indexSetWithIndex_(value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSetWithIndex: value)
    }
    unsafe fn indexSetWithIndexesInRange_(range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSetWithIndexesInRange: range)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableIndexSet(pub id);
impl std::ops::Deref for NSMutableIndexSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableIndexSet {}
impl NSMutableIndexSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableIndexSet), alloc) })
    }
}
impl INSIndexSet for NSMutableIndexSet {}
impl PNSCopying for NSMutableIndexSet {}
impl PNSMutableCopying for NSMutableIndexSet {}
impl PNSSecureCoding for NSMutableIndexSet {}
impl From<NSMutableIndexSet> for NSIndexSet {
    fn from(child: NSMutableIndexSet) -> NSIndexSet {
        NSIndexSet(child.0)
    }
}
impl std::convert::TryFrom<NSIndexSet> for NSMutableIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSIndexSet) -> Result<NSMutableIndexSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableIndexSet)) };
        if is_kind_of {
            Ok(NSMutableIndexSet(parent.0))
        } else {
            Err("This NSIndexSet cannot be downcasted to NSMutableIndexSet")
        }
    }
}
impl INSObject for NSMutableIndexSet {}
impl PNSObject for NSMutableIndexSet {}
impl From<NSMutableIndexSet> for NSObject {
    fn from(child: NSMutableIndexSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableIndexSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableIndexSet)) };
        if is_kind_of {
            Ok(NSMutableIndexSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableIndexSet")
        }
    }
}
impl INSMutableIndexSet for NSMutableIndexSet {}
pub trait INSMutableIndexSet: Sized + std::ops::Deref {
    unsafe fn addIndexes_(&self, indexSet: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addIndexes: indexSet)
    }
    unsafe fn removeIndexes_(&self, indexSet: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeIndexes: indexSet)
    }
    unsafe fn removeAllIndexes(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllIndexes)
    }
    unsafe fn addIndex_(&self, value: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addIndex: value)
    }
    unsafe fn removeIndex_(&self, value: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeIndex: value)
    }
    unsafe fn addIndexesInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addIndexesInRange: range)
    }
    unsafe fn removeIndexesInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeIndexesInRange: range)
    }
    unsafe fn shiftIndexesStartingAtIndex_by_(&self, index: NSUInteger, delta: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , shiftIndexesStartingAtIndex : index by : delta)
    }
}
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitInsertedObjects : NSOrderedCollectionDifferenceCalculationOptions = 1 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitRemovedObjects : NSOrderedCollectionDifferenceCalculationOptions = 2 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationInferMoves : NSOrderedCollectionDifferenceCalculationOptions = 4 ;
pub type NSOrderedCollectionDifferenceCalculationOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrderedCollectionDifference(pub id);
impl std::ops::Deref for NSOrderedCollectionDifference {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionDifference {}
impl NSOrderedCollectionDifference {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrderedCollectionDifference), alloc) })
    }
}
impl PNSFastEnumeration for NSOrderedCollectionDifference {}
impl INSObject for NSOrderedCollectionDifference {}
impl PNSObject for NSOrderedCollectionDifference {}
impl From<NSOrderedCollectionDifference> for NSObject {
    fn from(child: NSOrderedCollectionDifference) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionDifference {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionDifference, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedCollectionDifference)) };
        if is_kind_of {
            Ok(NSOrderedCollectionDifference(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionDifference")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionDifference<ObjectType>
    for NSOrderedCollectionDifference
{
}
pub trait INSOrderedCollectionDifference<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithChanges_(&self, changes: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithChanges: changes)
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
        changes: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects additionalChanges : changes)
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects)
    }
    unsafe fn differenceByTransformingChangesWithBlock_(
        &self,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, differenceByTransformingChangesWithBlock: block)
    }
    unsafe fn inverseDifference(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inverseDifference)
    }
    unsafe fn insertions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, insertions)
    }
    unsafe fn removals(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removals)
    }
    unsafe fn hasChanges(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasChanges)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSArray), alloc) })
    }
}
impl PNSCopying for NSArray {}
impl PNSMutableCopying for NSArray {}
impl PNSSecureCoding for NSArray {}
impl PNSFastEnumeration for NSArray {}
impl INSObject for NSArray {}
impl PNSObject for NSArray {}
impl From<NSArray> for NSObject {
    fn from(child: NSArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSArray)) };
        if is_kind_of {
            Ok(NSArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSArray")
        }
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSArray {}
pub trait INSArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectAtIndex_(&self, index: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndex: index)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(
        &self,
        objects: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
impl<ObjectType: 'static> NSArray_NSExtendedArray<ObjectType> for NSArray {}
pub trait NSArray_NSExtendedArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn arrayByAddingObject_(&self, anObject: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arrayByAddingObject: anObject)
    }
    unsafe fn arrayByAddingObjectsFromArray_(&self, otherArray: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arrayByAddingObjectsFromArray: otherArray)
    }
    unsafe fn componentsJoinedByString_(&self, separator: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentsJoinedByString: separator)
    }
    unsafe fn containsObject_(&self, anObject: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsObject: anObject)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithLocale : locale indent : level)
    }
    unsafe fn firstObjectCommonWithArray_(&self, otherArray: NSArray) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstObjectCommonWithArray: otherArray)
    }
    unsafe fn getObjects_range_(&self, objects: *mut id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjects : objects range : range)
    }
    unsafe fn indexOfObject_(&self, anObject: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObject: anObject)
    }
    unsafe fn indexOfObject_inRange_(&self, anObject: id, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObject : anObject inRange : range)
    }
    unsafe fn indexOfObjectIdenticalTo_(&self, anObject: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObjectIdenticalTo: anObject)
    }
    unsafe fn indexOfObjectIdenticalTo_inRange_(&self, anObject: id, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectIdenticalTo : anObject inRange : range)
    }
    unsafe fn isEqualToArray_(&self, otherArray: NSArray) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToArray: otherArray)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn reverseObjectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reverseObjectEnumerator)
    }
    unsafe fn sortedArrayUsingFunction_context_(
        &self,
        comparator: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortedArrayUsingFunction : comparator context : context)
    }
    unsafe fn sortedArrayUsingFunction_context_hint_(
        &self,
        comparator: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
        hint: NSData,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortedArrayUsingFunction : comparator context : context hint : hint)
    }
    unsafe fn sortedArrayUsingSelector_(&self, comparator: objc::runtime::Sel) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingSelector: comparator)
    }
    unsafe fn subarrayWithRange_(&self, range: NSRange) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subarrayWithRange: range)
    }
    unsafe fn writeToURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url error : error)
    }
    unsafe fn makeObjectsPerformSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, makeObjectsPerformSelector: aSelector)
    }
    unsafe fn makeObjectsPerformSelector_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        argument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , makeObjectsPerformSelector : aSelector withObject : argument)
    }
    unsafe fn objectsAtIndexes_(&self, indexes: NSIndexSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsAtIndexes: indexes)
    }
    unsafe fn objectAtIndexedSubscript_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndexedSubscript: idx)
    }
    unsafe fn enumerateObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateObjectsUsingBlock: block)
    }
    unsafe fn enumerateObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateObjectsAtIndexes_options_usingBlock_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsAtIndexes : s options : opts usingBlock : block)
    }
    unsafe fn indexOfObjectPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObjectPassingTest: predicate)
    }
    unsafe fn indexOfObjectWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexOfObjectAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsPassingTest_(
        &self,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexesOfObjectsPassingTest: predicate)
    }
    unsafe fn indexesOfObjectsWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn sortedArrayUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingComparator: cmptr)
    }
    unsafe fn sortedArrayWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortedArrayWithOptions : opts usingComparator : cmptr)
    }
    unsafe fn indexOfObject_inSortedRange_options_usingComparator_(
        &self,
        obj: id,
        r: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObject : obj inSortedRange : r options : opts usingComparator : cmp)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn firstObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstObject)
    }
    unsafe fn lastObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastObject)
    }
    unsafe fn sortedArrayHint(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayHint)
    }
}
pub const NSBinarySearchingOptions_NSBinarySearchingFirstEqual: NSBinarySearchingOptions = 256;
pub const NSBinarySearchingOptions_NSBinarySearchingLastEqual: NSBinarySearchingOptions = 512;
pub const NSBinarySearchingOptions_NSBinarySearchingInsertionIndex: NSBinarySearchingOptions = 1024;
pub type NSBinarySearchingOptions = NSUInteger;
impl<ObjectType: 'static> NSArray_NSArrayCreation<ObjectType> for NSArray {}
pub trait NSArray_NSArrayCreation<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithObjects_(&self, firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObjects: firstObj)
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithArray: array)
    }
    unsafe fn initWithArray_copyItems_(&self, array: NSArray, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithArray : array copyItems : flag)
    }
    unsafe fn initWithContentsOfURL_error_(&self, url: NSURL, error: *mut NSError) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfURL : url error : error)
    }
    unsafe fn array() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), array)
    }
    unsafe fn arrayWithObject_(anObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), arrayWithObject: anObject)
    }
    unsafe fn arrayWithObjects_count_(objects: *const *mut u64, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSArray) , arrayWithObjects : objects count : cnt)
    }
    unsafe fn arrayWithObjects_(firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), arrayWithObjects: firstObj)
    }
    unsafe fn arrayWithArray_(array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), arrayWithArray: array)
    }
    unsafe fn arrayWithContentsOfURL_error_(url: NSURL, error: *mut NSError) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSArray) , arrayWithContentsOfURL : url error : error)
    }
}
impl<ObjectType: 'static> NSArray_NSArrayDiffing<ObjectType> for NSArray {}
pub trait NSArray_NSArrayDiffing<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn differenceFromArray_withOptions_usingEquivalenceTest_(
        &self,
        other: NSArray,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromArray : other withOptions : options usingEquivalenceTest : block)
    }
    unsafe fn differenceFromArray_withOptions_(
        &self,
        other: NSArray,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromArray : other withOptions : options)
    }
    unsafe fn differenceFromArray_(&self, other: NSArray) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, differenceFromArray: other)
    }
    unsafe fn arrayByApplyingDifference_(
        &self,
        difference: NSOrderedCollectionDifference,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arrayByApplyingDifference: difference)
    }
}
impl<ObjectType: 'static> NSArray_NSDeprecated<ObjectType> for NSArray {}
pub trait NSArray_NSDeprecated<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn getObjects_(&self, objects: *mut id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getObjects: objects)
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile)
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url atomically : atomically)
    }
    unsafe fn arrayWithContentsOfFile_(path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), arrayWithContentsOfFile: path)
    }
    unsafe fn arrayWithContentsOfURL_(url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArray), arrayWithContentsOfURL: url)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableArray(pub id);
impl std::ops::Deref for NSMutableArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableArray {}
impl NSMutableArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableArray), alloc) })
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSMutableArray {}
impl PNSCopying for NSMutableArray {}
impl PNSMutableCopying for NSMutableArray {}
impl PNSSecureCoding for NSMutableArray {}
impl PNSFastEnumeration for NSMutableArray {}
impl INSObject for NSMutableArray {}
impl PNSObject for NSMutableArray {}
impl From<NSMutableArray> for NSObject {
    fn from(child: NSMutableArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableArray)) };
        if is_kind_of {
            Ok(NSMutableArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableArray")
        }
    }
}
impl<ObjectType: 'static> INSMutableArray<ObjectType> for NSMutableArray {}
pub trait INSMutableArray<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: anObject)
    }
    unsafe fn insertObject_atIndex_(&self, anObject: id, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObject : anObject atIndex : index)
    }
    unsafe fn removeLastObject(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeLastObject)
    }
    unsafe fn removeObjectAtIndex_(&self, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectAtIndex: index)
    }
    unsafe fn replaceObjectAtIndex_withObject_(&self, index: NSUInteger, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectAtIndex : index withObject : anObject)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
impl<ObjectType: 'static> NSMutableArray_NSExtendedMutableArray<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSExtendedMutableArray<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObjectsFromArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObjectsFromArray: otherArray)
    }
    unsafe fn exchangeObjectAtIndex_withObjectAtIndex_(&self, idx1: NSUInteger, idx2: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , exchangeObjectAtIndex : idx1 withObjectAtIndex : idx2)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn removeObject_inRange_(&self, anObject: id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObject : anObject inRange : range)
    }
    unsafe fn removeObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: anObject)
    }
    unsafe fn removeObjectIdenticalTo_inRange_(&self, anObject: id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObjectIdenticalTo : anObject inRange : range)
    }
    unsafe fn removeObjectIdenticalTo_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectIdenticalTo: anObject)
    }
    unsafe fn removeObjectsFromIndices_numIndices_(&self, indices: *mut NSUInteger, cnt: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObjectsFromIndices : indices numIndices : cnt)
    }
    unsafe fn removeObjectsInArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsInArray: otherArray)
    }
    unsafe fn removeObjectsInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsInRange: range)
    }
    unsafe fn replaceObjectsInRange_withObjectsFromArray_range_(
        &self,
        range: NSRange,
        otherArray: NSArray,
        otherRange: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectsInRange : range withObjectsFromArray : otherArray range : otherRange)
    }
    unsafe fn replaceObjectsInRange_withObjectsFromArray_(
        &self,
        range: NSRange,
        otherArray: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectsInRange : range withObjectsFromArray : otherArray)
    }
    unsafe fn setArray_(&self, otherArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setArray: otherArray)
    }
    unsafe fn sortUsingFunction_context_(
        &self,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: id,
                arg2: id,
                arg3: *mut ::std::os::raw::c_void,
            ) -> NSInteger,
        >,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortUsingFunction : compare context : context)
    }
    unsafe fn sortUsingSelector_(&self, comparator: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortUsingSelector: comparator)
    }
    unsafe fn insertObjects_atIndexes_(&self, objects: NSArray, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObjects : objects atIndexes : indexes)
    }
    unsafe fn removeObjectsAtIndexes_(&self, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsAtIndexes: indexes)
    }
    unsafe fn replaceObjectsAtIndexes_withObjects_(&self, indexes: NSIndexSet, objects: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectsAtIndexes : indexes withObjects : objects)
    }
    unsafe fn setObject_atIndexedSubscript_(&self, obj: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj atIndexedSubscript : idx)
    }
    unsafe fn sortUsingComparator_(&self, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortUsingComparator: cmptr)
    }
    unsafe fn sortWithOptions_usingComparator_(&self, opts: NSSortOptions, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortWithOptions : opts usingComparator : cmptr)
    }
}
impl<ObjectType: 'static> NSMutableArray_NSMutableArrayCreation<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSMutableArrayCreation<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn arrayWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableArray), arrayWithCapacity: numItems)
    }
    unsafe fn arrayWithContentsOfFile_(path: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableArray), arrayWithContentsOfFile: path)
    }
    unsafe fn arrayWithContentsOfURL_(url: NSURL) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableArray), arrayWithContentsOfURL: url)
    }
}
impl<ObjectType: 'static> NSMutableArray_NSMutableArrayDiffing<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSMutableArrayDiffing<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn applyDifference_(&self, difference: NSOrderedCollectionDifference)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, applyDifference: difference)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAutoreleasePool(pub id);
impl std::ops::Deref for NSAutoreleasePool {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAutoreleasePool {}
impl NSAutoreleasePool {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAutoreleasePool), alloc) })
    }
}
impl INSObject for NSAutoreleasePool {}
impl PNSObject for NSAutoreleasePool {}
impl From<NSAutoreleasePool> for NSObject {
    fn from(child: NSAutoreleasePool) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAutoreleasePool {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAutoreleasePool, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSAutoreleasePool)) };
        if is_kind_of {
            Ok(NSAutoreleasePool(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAutoreleasePool")
        }
    }
}
impl INSAutoreleasePool for NSAutoreleasePool {}
pub trait INSAutoreleasePool: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: anObject)
    }
    unsafe fn drain(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, drain)
    }
    unsafe fn class_addObject_(anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAutoreleasePool), addObject: anObject)
    }
}
pub type unichar = ::std::os::raw::c_ushort;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityAll:
    NSItemProviderRepresentationVisibility = 0;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityTeam:
    NSItemProviderRepresentationVisibility = 1;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityGroup:
    NSItemProviderRepresentationVisibility = 2;
pub const NSItemProviderRepresentationVisibility_NSItemProviderRepresentationVisibilityOwnProcess : NSItemProviderRepresentationVisibility = 3 ;
pub type NSItemProviderRepresentationVisibility = NSInteger;
pub const NSItemProviderFileOptions_NSItemProviderFileOptionOpenInPlace: NSItemProviderFileOptions =
    1;
pub type NSItemProviderFileOptions = NSInteger;
pub trait PNSItemProviderWriting: Sized + std::ops::Deref {
    unsafe fn itemProviderVisibilityForRepresentationWithTypeIdentifier_(
        &self,
        typeIdentifier: NSString,
    ) -> NSItemProviderRepresentationVisibility
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            itemProviderVisibilityForRepresentationWithTypeIdentifier: typeIdentifier
        )
    }
    unsafe fn loadDataWithTypeIdentifier_forItemProviderCompletionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadDataWithTypeIdentifier : typeIdentifier forItemProviderCompletionHandler : completionHandler)
    }
    unsafe fn writableTypeIdentifiersForItemProvider(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, writableTypeIdentifiersForItemProvider)
    }
    unsafe fn class_itemProviderVisibilityForRepresentationWithTypeIdentifier_(
        typeIdentifier: NSString,
    ) -> NSItemProviderRepresentationVisibility
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSItemProviderWriting),
            itemProviderVisibilityForRepresentationWithTypeIdentifier: typeIdentifier
        )
    }
    unsafe fn class_writableTypeIdentifiersForItemProvider() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSItemProviderWriting),
            writableTypeIdentifiersForItemProvider
        )
    }
}
pub trait PNSItemProviderReading: Sized + std::ops::Deref {
    unsafe fn objectWithItemProviderData_typeIdentifier_error_(
        data: NSData,
        typeIdentifier: NSString,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSItemProviderReading) , objectWithItemProviderData : data typeIdentifier : typeIdentifier error : outError)
    }
    unsafe fn readableTypeIdentifiersForItemProvider() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSItemProviderReading),
            readableTypeIdentifiersForItemProvider
        )
    }
}
pub type NSItemProviderCompletionHandler = *mut ::std::os::raw::c_void;
pub type NSItemProviderLoadHandler = *mut ::std::os::raw::c_void;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSItemProvider(pub id);
impl std::ops::Deref for NSItemProvider {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSItemProvider {}
impl NSItemProvider {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSItemProvider), alloc) })
    }
}
impl PNSCopying for NSItemProvider {}
impl INSObject for NSItemProvider {}
impl PNSObject for NSItemProvider {}
impl From<NSItemProvider> for NSObject {
    fn from(child: NSItemProvider) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSItemProvider {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSItemProvider, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSItemProvider)) };
        if is_kind_of {
            Ok(NSItemProvider(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSItemProvider")
        }
    }
}
impl INSItemProvider for NSItemProvider {}
pub trait INSItemProvider: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
        &self,
        typeIdentifier: NSString,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerDataRepresentationForTypeIdentifier : typeIdentifier visibility : visibility loadHandler : loadHandler)
    }
    unsafe fn registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
        &self,
        typeIdentifier: NSString,
        fileOptions: NSItemProviderFileOptions,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerFileRepresentationForTypeIdentifier : typeIdentifier fileOptions : fileOptions visibility : visibility loadHandler : loadHandler)
    }
    unsafe fn registeredTypeIdentifiersWithFileOptions_(
        &self,
        fileOptions: NSItemProviderFileOptions,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, registeredTypeIdentifiersWithFileOptions: fileOptions)
    }
    unsafe fn hasItemConformingToTypeIdentifier_(&self, typeIdentifier: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasItemConformingToTypeIdentifier: typeIdentifier)
    }
    unsafe fn hasRepresentationConformingToTypeIdentifier_fileOptions_(
        &self,
        typeIdentifier: NSString,
        fileOptions: NSItemProviderFileOptions,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , hasRepresentationConformingToTypeIdentifier : typeIdentifier fileOptions : fileOptions)
    }
    unsafe fn loadDataRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadDataRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
    }
    unsafe fn loadFileRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadFileRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
    }
    unsafe fn loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
        &self,
        typeIdentifier: NSString,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadInPlaceFileRepresentationForTypeIdentifier : typeIdentifier completionHandler : completionHandler)
    }
    unsafe fn initWithObject_(&self, object: *mut u64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObject: object)
    }
    unsafe fn registerObject_visibility_(
        &self,
        object: *mut u64,
        visibility: NSItemProviderRepresentationVisibility,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerObject : object visibility : visibility)
    }
    unsafe fn registerObjectOfClass_visibility_loadHandler_(
        &self,
        aClass: *mut u64,
        visibility: NSItemProviderRepresentationVisibility,
        loadHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerObjectOfClass : aClass visibility : visibility loadHandler : loadHandler)
    }
    unsafe fn canLoadObjectOfClass_(&self, aClass: *mut u64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canLoadObjectOfClass: aClass)
    }
    unsafe fn loadObjectOfClass_completionHandler_(
        &self,
        aClass: *mut u64,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadObjectOfClass : aClass completionHandler : completionHandler)
    }
    unsafe fn initWithItem_typeIdentifier_(
        &self,
        item: *mut u64,
        typeIdentifier: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithItem : item typeIdentifier : typeIdentifier)
    }
    unsafe fn initWithContentsOfURL_(&self, fileURL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: fileURL)
    }
    unsafe fn registerItemForTypeIdentifier_loadHandler_(
        &self,
        typeIdentifier: NSString,
        loadHandler: NSItemProviderLoadHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerItemForTypeIdentifier : typeIdentifier loadHandler : loadHandler)
    }
    unsafe fn loadItemForTypeIdentifier_options_completionHandler_(
        &self,
        typeIdentifier: NSString,
        options: NSDictionary,
        completionHandler: NSItemProviderCompletionHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadItemForTypeIdentifier : typeIdentifier options : options completionHandler : completionHandler)
    }
    unsafe fn registeredTypeIdentifiers(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, registeredTypeIdentifiers)
    }
    unsafe fn suggestedName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suggestedName)
    }
    unsafe fn setSuggestedName_(&self, suggestedName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSuggestedName: suggestedName)
    }
}
extern "C" {
    pub static NSItemProviderPreferredImageSizeKey: NSString;
}
impl NSItemProvider_NSPreviewSupport for NSItemProvider {}
pub trait NSItemProvider_NSPreviewSupport: Sized + std::ops::Deref {
    unsafe fn loadPreviewImageWithOptions_completionHandler_(
        &self,
        options: NSDictionary,
        completionHandler: NSItemProviderCompletionHandler,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , loadPreviewImageWithOptions : options completionHandler : completionHandler)
    }
    unsafe fn previewImageHandler(&self) -> NSItemProviderLoadHandler
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, previewImageHandler)
    }
    unsafe fn setPreviewImageHandler_(&self, previewImageHandler: NSItemProviderLoadHandler)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPreviewImageHandler: previewImageHandler)
    }
}
extern "C" {
    pub static NSExtensionJavaScriptPreprocessingResultsKey: NSString;
}
extern "C" {
    pub static NSExtensionJavaScriptFinalizeArgumentKey: NSString;
}
extern "C" {
    pub static NSItemProviderErrorDomain: NSString;
}
pub const NSItemProviderErrorCode_NSItemProviderUnknownError: NSItemProviderErrorCode = -1;
pub const NSItemProviderErrorCode_NSItemProviderItemUnavailableError: NSItemProviderErrorCode =
    -1000;
pub const NSItemProviderErrorCode_NSItemProviderUnexpectedValueClassError: NSItemProviderErrorCode =
    -1100;
pub const NSItemProviderErrorCode_NSItemProviderUnavailableCoercionError: NSItemProviderErrorCode =
    -1200;
pub type NSItemProviderErrorCode = NSInteger;
pub const NSStringCompareOptions_NSCaseInsensitiveSearch: NSStringCompareOptions = 1;
pub const NSStringCompareOptions_NSLiteralSearch: NSStringCompareOptions = 2;
pub const NSStringCompareOptions_NSBackwardsSearch: NSStringCompareOptions = 4;
pub const NSStringCompareOptions_NSAnchoredSearch: NSStringCompareOptions = 8;
pub const NSStringCompareOptions_NSNumericSearch: NSStringCompareOptions = 64;
pub const NSStringCompareOptions_NSDiacriticInsensitiveSearch: NSStringCompareOptions = 128;
pub const NSStringCompareOptions_NSWidthInsensitiveSearch: NSStringCompareOptions = 256;
pub const NSStringCompareOptions_NSForcedOrderingSearch: NSStringCompareOptions = 512;
pub const NSStringCompareOptions_NSRegularExpressionSearch: NSStringCompareOptions = 1024;
pub type NSStringCompareOptions = NSUInteger;
pub type NSStringEncoding = NSUInteger;
pub const NSASCIIStringEncoding: _bindgen_ty_45 = 1;
pub const NSNEXTSTEPStringEncoding: _bindgen_ty_45 = 2;
pub const NSJapaneseEUCStringEncoding: _bindgen_ty_45 = 3;
pub const NSUTF8StringEncoding: _bindgen_ty_45 = 4;
pub const NSISOLatin1StringEncoding: _bindgen_ty_45 = 5;
pub const NSSymbolStringEncoding: _bindgen_ty_45 = 6;
pub const NSNonLossyASCIIStringEncoding: _bindgen_ty_45 = 7;
pub const NSShiftJISStringEncoding: _bindgen_ty_45 = 8;
pub const NSISOLatin2StringEncoding: _bindgen_ty_45 = 9;
pub const NSUnicodeStringEncoding: _bindgen_ty_45 = 10;
pub const NSWindowsCP1251StringEncoding: _bindgen_ty_45 = 11;
pub const NSWindowsCP1252StringEncoding: _bindgen_ty_45 = 12;
pub const NSWindowsCP1253StringEncoding: _bindgen_ty_45 = 13;
pub const NSWindowsCP1254StringEncoding: _bindgen_ty_45 = 14;
pub const NSWindowsCP1250StringEncoding: _bindgen_ty_45 = 15;
pub const NSISO2022JPStringEncoding: _bindgen_ty_45 = 21;
pub const NSMacOSRomanStringEncoding: _bindgen_ty_45 = 30;
pub const NSUTF16StringEncoding: _bindgen_ty_45 = 10;
pub const NSUTF16BigEndianStringEncoding: _bindgen_ty_45 = 2415919360;
pub const NSUTF16LittleEndianStringEncoding: _bindgen_ty_45 = 2483028224;
pub const NSUTF32StringEncoding: _bindgen_ty_45 = 2348810496;
pub const NSUTF32BigEndianStringEncoding: _bindgen_ty_45 = 2550137088;
pub const NSUTF32LittleEndianStringEncoding: _bindgen_ty_45 = 2617245952;
pub type _bindgen_ty_45 = NSStringEncoding;
pub const NSStringEncodingConversionOptions_NSStringEncodingConversionAllowLossy:
    NSStringEncodingConversionOptions = 1;
pub const NSStringEncodingConversionOptions_NSStringEncodingConversionExternalRepresentation:
    NSStringEncodingConversionOptions = 2;
pub type NSStringEncodingConversionOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSString), alloc) })
    }
}
impl PNSCopying for NSString {}
impl PNSMutableCopying for NSString {}
impl PNSSecureCoding for NSString {}
impl INSObject for NSString {}
impl PNSObject for NSString {}
impl From<NSString> for NSObject {
    fn from(child: NSString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSString)) };
        if is_kind_of {
            Ok(NSString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSString")
        }
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {
    unsafe fn characterAtIndex_(&self, index: NSUInteger) -> unichar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, characterAtIndex: index)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
}
impl NSString_NSStringExtensionMethods for NSString {}
pub trait NSString_NSStringExtensionMethods: Sized + std::ops::Deref {
    unsafe fn substringFromIndex_(&self, from: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, substringFromIndex: from)
    }
    unsafe fn substringToIndex_(&self, to: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, substringToIndex: to)
    }
    unsafe fn substringWithRange_(&self, range: NSRange) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, substringWithRange: range)
    }
    unsafe fn getCharacters_range_(&self, buffer: *mut unichar, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCharacters : buffer range : range)
    }
    unsafe fn compare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: string)
    }
    unsafe fn compare_options_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compare : string options : mask)
    }
    unsafe fn compare_options_range_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToCompare: NSRange,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compare : string options : mask range : rangeOfReceiverToCompare)
    }
    unsafe fn compare_options_range_locale_(
        &self,
        string: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToCompare: NSRange,
        locale: id,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compare : string options : mask range : rangeOfReceiverToCompare locale : locale)
    }
    unsafe fn caseInsensitiveCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, caseInsensitiveCompare: string)
    }
    unsafe fn localizedCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedCompare: string)
    }
    unsafe fn localizedCaseInsensitiveCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedCaseInsensitiveCompare: string)
    }
    unsafe fn localizedStandardCompare_(&self, string: NSString) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStandardCompare: string)
    }
    unsafe fn isEqualToString_(&self, aString: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToString: aString)
    }
    unsafe fn hasPrefix_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasPrefix: str_)
    }
    unsafe fn hasSuffix_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasSuffix: str_)
    }
    unsafe fn commonPrefixWithString_options_(
        &self,
        str_: NSString,
        mask: NSStringCompareOptions,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , commonPrefixWithString : str_ options : mask)
    }
    unsafe fn containsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsString: str_)
    }
    unsafe fn localizedCaseInsensitiveContainsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedCaseInsensitiveContainsString: str_)
    }
    unsafe fn localizedStandardContainsString_(&self, str_: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStandardContainsString: str_)
    }
    unsafe fn localizedStandardRangeOfString_(&self, str_: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStandardRangeOfString: str_)
    }
    unsafe fn rangeOfString_(&self, searchString: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfString: searchString)
    }
    unsafe fn rangeOfString_options_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfString : searchString options : mask)
    }
    unsafe fn rangeOfString_options_range_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfString : searchString options : mask range : rangeOfReceiverToSearch)
    }
    unsafe fn rangeOfString_options_range_locale_(
        &self,
        searchString: NSString,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
        locale: NSLocale,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfString : searchString options : mask range : rangeOfReceiverToSearch locale : locale)
    }
    unsafe fn rangeOfCharacterFromSet_(&self, searchSet: NSCharacterSet) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfCharacterFromSet: searchSet)
    }
    unsafe fn rangeOfCharacterFromSet_options_(
        &self,
        searchSet: NSCharacterSet,
        mask: NSStringCompareOptions,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfCharacterFromSet : searchSet options : mask)
    }
    unsafe fn rangeOfCharacterFromSet_options_range_(
        &self,
        searchSet: NSCharacterSet,
        mask: NSStringCompareOptions,
        rangeOfReceiverToSearch: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfCharacterFromSet : searchSet options : mask range : rangeOfReceiverToSearch)
    }
    unsafe fn rangeOfComposedCharacterSequenceAtIndex_(&self, index: NSUInteger) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfComposedCharacterSequenceAtIndex: index)
    }
    unsafe fn rangeOfComposedCharacterSequencesForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfComposedCharacterSequencesForRange: range)
    }
    unsafe fn stringByAppendingString_(&self, aString: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAppendingString: aString)
    }
    unsafe fn stringByAppendingFormat_(&self, format: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAppendingFormat: format)
    }
    unsafe fn uppercaseStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, uppercaseStringWithLocale: locale)
    }
    unsafe fn lowercaseStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lowercaseStringWithLocale: locale)
    }
    unsafe fn capitalizedStringWithLocale_(&self, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, capitalizedStringWithLocale: locale)
    }
    unsafe fn getLineStart_end_contentsEnd_forRange_(
        &self,
        startPtr: *mut NSUInteger,
        lineEndPtr: *mut NSUInteger,
        contentsEndPtr: *mut NSUInteger,
        range: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getLineStart : startPtr end : lineEndPtr contentsEnd : contentsEndPtr forRange : range)
    }
    unsafe fn lineRangeForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lineRangeForRange: range)
    }
    unsafe fn getParagraphStart_end_contentsEnd_forRange_(
        &self,
        startPtr: *mut NSUInteger,
        parEndPtr: *mut NSUInteger,
        contentsEndPtr: *mut NSUInteger,
        range: NSRange,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getParagraphStart : startPtr end : parEndPtr contentsEnd : contentsEndPtr forRange : range)
    }
    unsafe fn paragraphRangeForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, paragraphRangeForRange: range)
    }
    unsafe fn enumerateSubstringsInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSStringEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateSubstringsInRange : range options : opts usingBlock : block)
    }
    unsafe fn enumerateLinesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateLinesUsingBlock: block)
    }
    unsafe fn dataUsingEncoding_allowLossyConversion_(
        &self,
        encoding: NSStringEncoding,
        lossy: BOOL,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dataUsingEncoding : encoding allowLossyConversion : lossy)
    }
    unsafe fn dataUsingEncoding_(&self, encoding: NSStringEncoding) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataUsingEncoding: encoding)
    }
    unsafe fn canBeConvertedToEncoding_(&self, encoding: NSStringEncoding) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canBeConvertedToEncoding: encoding)
    }
    unsafe fn cStringUsingEncoding_(
        &self,
        encoding: NSStringEncoding,
    ) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cStringUsingEncoding: encoding)
    }
    unsafe fn getCString_maxLength_encoding_(
        &self,
        buffer: *mut ::std::os::raw::c_char,
        maxBufferCount: NSUInteger,
        encoding: NSStringEncoding,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCString : buffer maxLength : maxBufferCount encoding : encoding)
    }
    unsafe fn getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        maxBufferCount: NSUInteger,
        usedBufferCount: *mut NSUInteger,
        encoding: NSStringEncoding,
        options: NSStringEncodingConversionOptions,
        range: NSRange,
        leftover: NSRangePointer,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getBytes : buffer maxLength : maxBufferCount usedLength : usedBufferCount encoding : encoding options : options range : range remainingRange : leftover)
    }
    unsafe fn maximumLengthOfBytesUsingEncoding_(&self, enc: NSStringEncoding) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumLengthOfBytesUsingEncoding: enc)
    }
    unsafe fn lengthOfBytesUsingEncoding_(&self, enc: NSStringEncoding) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lengthOfBytesUsingEncoding: enc)
    }
    unsafe fn componentsSeparatedByString_(&self, separator: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentsSeparatedByString: separator)
    }
    unsafe fn componentsSeparatedByCharactersInSet_(&self, separator: NSCharacterSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentsSeparatedByCharactersInSet: separator)
    }
    unsafe fn stringByTrimmingCharactersInSet_(&self, set: NSCharacterSet) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByTrimmingCharactersInSet: set)
    }
    unsafe fn stringByPaddingToLength_withString_startingAtIndex_(
        &self,
        newLength: NSUInteger,
        padString: NSString,
        padIndex: NSUInteger,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByPaddingToLength : newLength withString : padString startingAtIndex : padIndex)
    }
    unsafe fn stringByFoldingWithOptions_locale_(
        &self,
        options: NSStringCompareOptions,
        locale: NSLocale,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByFoldingWithOptions : options locale : locale)
    }
    unsafe fn stringByReplacingOccurrencesOfString_withString_options_range_(
        &self,
        target: NSString,
        replacement: NSString,
        options: NSStringCompareOptions,
        searchRange: NSRange,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByReplacingOccurrencesOfString : target withString : replacement options : options range : searchRange)
    }
    unsafe fn stringByReplacingOccurrencesOfString_withString_(
        &self,
        target: NSString,
        replacement: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByReplacingOccurrencesOfString : target withString : replacement)
    }
    unsafe fn stringByReplacingCharactersInRange_withString_(
        &self,
        range: NSRange,
        replacement: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByReplacingCharactersInRange : range withString : replacement)
    }
    unsafe fn stringByApplyingTransform_reverse_(
        &self,
        transform: NSString,
        reverse: BOOL,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByApplyingTransform : transform reverse : reverse)
    }
    unsafe fn writeToURL_atomically_encoding_error_(
        &self,
        url: NSURL,
        useAuxiliaryFile: BOOL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url atomically : useAuxiliaryFile encoding : enc error : error)
    }
    unsafe fn writeToFile_atomically_encoding_error_(
        &self,
        path: NSString,
        useAuxiliaryFile: BOOL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile encoding : enc error : error)
    }
    unsafe fn initWithCharactersNoCopy_length_freeWhenDone_(
        &self,
        characters: *mut unichar,
        length: NSUInteger,
        freeBuffer: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCharactersNoCopy : characters length : length freeWhenDone : freeBuffer)
    }
    unsafe fn initWithCharactersNoCopy_length_deallocator_(
        &self,
        chars: *mut unichar,
        len: NSUInteger,
        deallocator: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCharactersNoCopy : chars length : len deallocator : deallocator)
    }
    unsafe fn initWithCharacters_length_(
        &self,
        characters: *const unichar,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCharacters : characters length : length)
    }
    unsafe fn initWithUTF8String_(
        &self,
        nullTerminatedCString: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUTF8String: nullTerminatedCString)
    }
    unsafe fn initWithString_(&self, aString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: aString)
    }
    unsafe fn initWithFormat_(&self, format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFormat: format)
    }
    unsafe fn initWithFormat_arguments_(&self, format: NSString, argList: va_list) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format arguments : argList)
    }
    unsafe fn initWithFormat_locale_(&self, format: NSString, locale: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format locale : locale)
    }
    unsafe fn initWithFormat_locale_arguments_(
        &self,
        format: NSString,
        locale: id,
        argList: va_list,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format locale : locale arguments : argList)
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_locale_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        locale: id,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers locale : locale error : error)
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        argList: va_list,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers arguments : argList error : error)
    }
    unsafe fn initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
        &self,
        format: NSString,
        validFormatSpecifiers: NSString,
        locale: id,
        argList: va_list,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers locale : locale arguments : argList error : error)
    }
    unsafe fn initWithData_encoding_(
        &self,
        data: NSData,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithData : data encoding : encoding)
    }
    unsafe fn initWithBytes_length_encoding_(
        &self,
        bytes: *const ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytes : bytes length : len encoding : encoding)
    }
    unsafe fn initWithBytesNoCopy_length_encoding_freeWhenDone_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
        freeBuffer: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytesNoCopy : bytes length : len encoding : encoding freeWhenDone : freeBuffer)
    }
    unsafe fn initWithBytesNoCopy_length_encoding_deallocator_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        len: NSUInteger,
        encoding: NSStringEncoding,
        deallocator: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytesNoCopy : bytes length : len encoding : encoding deallocator : deallocator)
    }
    unsafe fn initWithCString_encoding_(
        &self,
        nullTerminatedCString: *const ::std::os::raw::c_char,
        encoding: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCString : nullTerminatedCString encoding : encoding)
    }
    unsafe fn initWithContentsOfURL_encoding_error_(
        &self,
        url: NSURL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfURL : url encoding : enc error : error)
    }
    unsafe fn initWithContentsOfFile_encoding_error_(
        &self,
        path: NSString,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfFile : path encoding : enc error : error)
    }
    unsafe fn initWithContentsOfURL_usedEncoding_error_(
        &self,
        url: NSURL,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfURL : url usedEncoding : enc error : error)
    }
    unsafe fn initWithContentsOfFile_usedEncoding_error_(
        &self,
        path: NSString,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfFile : path usedEncoding : enc error : error)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
    unsafe fn floatValue(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, floatValue)
    }
    unsafe fn intValue(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intValue)
    }
    unsafe fn integerValue(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, integerValue)
    }
    unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longLongValue)
    }
    unsafe fn boolValue(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, boolValue)
    }
    unsafe fn uppercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, uppercaseString)
    }
    unsafe fn lowercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lowercaseString)
    }
    unsafe fn capitalizedString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, capitalizedString)
    }
    unsafe fn localizedUppercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedUppercaseString)
    }
    unsafe fn localizedLowercaseString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedLowercaseString)
    }
    unsafe fn localizedCapitalizedString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedCapitalizedString)
    }
    unsafe fn UTF8String(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, UTF8String)
    }
    unsafe fn fastestEncoding(&self) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fastestEncoding)
    }
    unsafe fn smallestEncoding(&self) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, smallestEncoding)
    }
    unsafe fn decomposedStringWithCanonicalMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decomposedStringWithCanonicalMapping)
    }
    unsafe fn precomposedStringWithCanonicalMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, precomposedStringWithCanonicalMapping)
    }
    unsafe fn decomposedStringWithCompatibilityMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decomposedStringWithCompatibilityMapping)
    }
    unsafe fn precomposedStringWithCompatibilityMapping(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, precomposedStringWithCompatibilityMapping)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn localizedNameOfStringEncoding_(encoding: NSStringEncoding) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), localizedNameOfStringEncoding: encoding)
    }
    unsafe fn string() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), string)
    }
    unsafe fn stringWithString_(string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), stringWithString: string)
    }
    unsafe fn stringWithCharacters_length_(
        characters: *const unichar,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithCharacters : characters length : length)
    }
    unsafe fn stringWithUTF8String_(
        nullTerminatedCString: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSString),
            stringWithUTF8String: nullTerminatedCString
        )
    }
    unsafe fn stringWithFormat_(format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), stringWithFormat: format)
    }
    unsafe fn localizedStringWithFormat_(format: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), localizedStringWithFormat: format)
    }
    unsafe fn stringWithValidatedFormat_validFormatSpecifiers_error_(
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
    }
    unsafe fn localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
        format: NSString,
        validFormatSpecifiers: NSString,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , localizedStringWithValidatedFormat : format validFormatSpecifiers : validFormatSpecifiers error : error)
    }
    unsafe fn stringWithCString_encoding_(
        c_string: *const ::std::os::raw::c_char,
        enc: NSStringEncoding,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithCString : c_string encoding : enc)
    }
    unsafe fn stringWithContentsOfURL_encoding_error_(
        url: NSURL,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithContentsOfURL : url encoding : enc error : error)
    }
    unsafe fn stringWithContentsOfFile_encoding_error_(
        path: NSString,
        enc: NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithContentsOfFile : path encoding : enc error : error)
    }
    unsafe fn stringWithContentsOfURL_usedEncoding_error_(
        url: NSURL,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithContentsOfURL : url usedEncoding : enc error : error)
    }
    unsafe fn stringWithContentsOfFile_usedEncoding_error_(
        path: NSString,
        enc: *mut NSStringEncoding,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithContentsOfFile : path usedEncoding : enc error : error)
    }
    unsafe fn availableStringEncodings() -> *const NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), availableStringEncodings)
    }
    unsafe fn defaultCStringEncoding() -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), defaultCStringEncoding)
    }
}
pub const NSStringEnumerationOptions_NSStringEnumerationByLines: NSStringEnumerationOptions = 0;
pub const NSStringEnumerationOptions_NSStringEnumerationByParagraphs: NSStringEnumerationOptions =
    1;
pub const NSStringEnumerationOptions_NSStringEnumerationByComposedCharacterSequences:
    NSStringEnumerationOptions = 2;
pub const NSStringEnumerationOptions_NSStringEnumerationByWords: NSStringEnumerationOptions = 3;
pub const NSStringEnumerationOptions_NSStringEnumerationBySentences: NSStringEnumerationOptions = 4;
pub const NSStringEnumerationOptions_NSStringEnumerationByCaretPositions:
    NSStringEnumerationOptions = 5;
pub const NSStringEnumerationOptions_NSStringEnumerationByDeletionClusters:
    NSStringEnumerationOptions = 6;
pub const NSStringEnumerationOptions_NSStringEnumerationReverse: NSStringEnumerationOptions = 256;
pub const NSStringEnumerationOptions_NSStringEnumerationSubstringNotRequired:
    NSStringEnumerationOptions = 512;
pub const NSStringEnumerationOptions_NSStringEnumerationLocalized: NSStringEnumerationOptions =
    1024;
pub type NSStringEnumerationOptions = NSUInteger;
pub type NSStringTransform = NSString;
extern "C" {
    pub static NSStringTransformLatinToKatakana: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToHiragana: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToHangul: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToArabic: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToHebrew: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToThai: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToCyrillic: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformLatinToGreek: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformToLatin: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformMandarinToLatin: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformHiraganaToKatakana: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformFullwidthToHalfwidth: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformToXMLHex: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformToUnicodeName: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformStripCombiningMarks: NSStringTransform;
}
extern "C" {
    pub static NSStringTransformStripDiacritics: NSStringTransform;
}
pub type NSStringEncodingDetectionOptionsKey = NSString;
impl NSString_NSStringEncodingDetection for NSString {}
pub trait NSString_NSStringEncodingDetection: Sized + std::ops::Deref {
    unsafe fn stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
        data: NSData,
        opts: NSDictionary,
        string: *mut NSString,
        usedLossyConversion: *mut BOOL,
    ) -> NSStringEncoding
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringEncodingForData : data encodingOptions : opts convertedString : string usedLossyConversion : usedLossyConversion)
    }
}
extern "C" {
    pub static NSStringEncodingDetectionSuggestedEncodingsKey: NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionDisallowedEncodingsKey: NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionUseOnlySuggestedEncodingsKey:
        NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionAllowLossyKey: NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionFromWindowsKey: NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionLossySubstitutionKey: NSStringEncodingDetectionOptionsKey;
}
extern "C" {
    pub static NSStringEncodingDetectionLikelyLanguageKey: NSStringEncodingDetectionOptionsKey;
}
impl NSString_NSItemProvider for NSString {}
pub trait NSString_NSItemProvider: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableString(pub id);
impl std::ops::Deref for NSMutableString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableString {}
impl NSMutableString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableString), alloc) })
    }
}
impl INSString for NSMutableString {}
impl PNSCopying for NSMutableString {}
impl PNSMutableCopying for NSMutableString {}
impl PNSSecureCoding for NSMutableString {}
impl From<NSMutableString> for NSString {
    fn from(child: NSMutableString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSMutableString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSMutableString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableString)) };
        if is_kind_of {
            Ok(NSMutableString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSMutableString")
        }
    }
}
impl INSObject for NSMutableString {}
impl PNSObject for NSMutableString {}
impl From<NSMutableString> for NSObject {
    fn from(child: NSMutableString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableString)) };
        if is_kind_of {
            Ok(NSMutableString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableString")
        }
    }
}
impl INSMutableString for NSMutableString {}
pub trait INSMutableString: Sized + std::ops::Deref {
    unsafe fn replaceCharactersInRange_withString_(&self, range: NSRange, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceCharactersInRange : range withString : aString)
    }
}
impl NSMutableString_NSMutableStringExtensionMethods for NSMutableString {}
pub trait NSMutableString_NSMutableStringExtensionMethods: Sized + std::ops::Deref {
    unsafe fn insertString_atIndex_(&self, aString: NSString, loc: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertString : aString atIndex : loc)
    }
    unsafe fn deleteCharactersInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deleteCharactersInRange: range)
    }
    unsafe fn appendString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appendString: aString)
    }
    unsafe fn appendFormat_(&self, format: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appendFormat: format)
    }
    unsafe fn setString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setString: aString)
    }
    unsafe fn replaceOccurrencesOfString_withString_options_range_(
        &self,
        target: NSString,
        replacement: NSString,
        options: NSStringCompareOptions,
        searchRange: NSRange,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceOccurrencesOfString : target withString : replacement options : options range : searchRange)
    }
    unsafe fn applyTransform_reverse_range_updatedRange_(
        &self,
        transform: NSString,
        reverse: BOOL,
        range: NSRange,
        resultingRange: NSRangePointer,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , applyTransform : transform reverse : reverse range : range updatedRange : resultingRange)
    }
    unsafe fn initWithCapacity_(&self, capacity: NSUInteger) -> NSMutableString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: capacity)
    }
    unsafe fn stringWithCapacity_(capacity: NSUInteger) -> NSMutableString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableString), stringWithCapacity: capacity)
    }
}
extern "C" {
    pub static NSCharacterConversionException: NSExceptionName;
}
extern "C" {
    pub static NSParseErrorException: NSExceptionName;
}
impl NSString_NSExtendedStringPropertyListParsing for NSString {}
pub trait NSString_NSExtendedStringPropertyListParsing: Sized + std::ops::Deref {
    unsafe fn propertyList(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, propertyList)
    }
    unsafe fn propertyListFromStringsFileFormat(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, propertyListFromStringsFileFormat)
    }
}
impl NSString_NSStringDeprecated for NSString {}
pub trait NSString_NSStringDeprecated: Sized + std::ops::Deref {
    unsafe fn cString(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cString)
    }
    unsafe fn lossyCString(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lossyCString)
    }
    unsafe fn cStringLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cStringLength)
    }
    unsafe fn getCString_(&self, bytes: *mut ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getCString: bytes)
    }
    unsafe fn getCString_maxLength_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        maxLength: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCString : bytes maxLength : maxLength)
    }
    unsafe fn getCString_maxLength_range_remainingRange_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        maxLength: NSUInteger,
        aRange: NSRange,
        leftoverRange: NSRangePointer,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCString : bytes maxLength : maxLength range : aRange remainingRange : leftoverRange)
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile)
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url atomically : atomically)
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn initWithCStringNoCopy_length_freeWhenDone_(
        &self,
        bytes: *mut ::std::os::raw::c_char,
        length: NSUInteger,
        freeBuffer: BOOL,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCStringNoCopy : bytes length : length freeWhenDone : freeBuffer)
    }
    unsafe fn initWithCString_length_(
        &self,
        bytes: *const ::std::os::raw::c_char,
        length: NSUInteger,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCString : bytes length : length)
    }
    unsafe fn initWithCString_(&self, bytes: *const ::std::os::raw::c_char) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCString: bytes)
    }
    unsafe fn getCharacters_(&self, buffer: *mut unichar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getCharacters: buffer)
    }
    unsafe fn stringWithContentsOfFile_(path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), stringWithContentsOfFile: path)
    }
    unsafe fn stringWithContentsOfURL_(url: NSURL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), stringWithContentsOfURL: url)
    }
    unsafe fn stringWithCString_length_(
        bytes: *const ::std::os::raw::c_char,
        length: NSUInteger,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSString) , stringWithCString : bytes length : length)
    }
    unsafe fn stringWithCString_(bytes: *const ::std::os::raw::c_char) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), stringWithCString: bytes)
    }
}
pub const NSProprietaryStringEncoding: _bindgen_ty_46 = 65536;
pub type _bindgen_ty_46 = NSStringEncoding;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSimpleCString(pub id);
impl std::ops::Deref for NSSimpleCString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSimpleCString {}
impl NSSimpleCString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSimpleCString), alloc) })
    }
}
impl INSString for NSSimpleCString {}
impl PNSCopying for NSSimpleCString {}
impl PNSMutableCopying for NSSimpleCString {}
impl PNSSecureCoding for NSSimpleCString {}
impl From<NSSimpleCString> for NSString {
    fn from(child: NSSimpleCString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSSimpleCString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSSimpleCString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSSimpleCString)) };
        if is_kind_of {
            Ok(NSSimpleCString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSSimpleCString")
        }
    }
}
impl INSObject for NSSimpleCString {}
impl PNSObject for NSSimpleCString {}
impl From<NSSimpleCString> for NSObject {
    fn from(child: NSSimpleCString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSimpleCString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSimpleCString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSSimpleCString)) };
        if is_kind_of {
            Ok(NSSimpleCString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSimpleCString")
        }
    }
}
impl INSSimpleCString for NSSimpleCString {}
pub trait INSSimpleCString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSConstantString(pub id);
impl std::ops::Deref for NSConstantString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSConstantString {}
impl NSConstantString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSConstantString), alloc) })
    }
}
impl INSSimpleCString for NSConstantString {}
impl From<NSConstantString> for NSSimpleCString {
    fn from(child: NSConstantString) -> NSSimpleCString {
        NSSimpleCString(child.0)
    }
}
impl std::convert::TryFrom<NSSimpleCString> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSSimpleCString) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSSimpleCString cannot be downcasted to NSConstantString")
        }
    }
}
impl INSString for NSConstantString {}
impl PNSCopying for NSConstantString {}
impl PNSMutableCopying for NSConstantString {}
impl PNSSecureCoding for NSConstantString {}
impl From<NSConstantString> for NSString {
    fn from(child: NSConstantString) -> NSString {
        NSString(child.0)
    }
}
impl std::convert::TryFrom<NSString> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSString) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSString cannot be downcasted to NSConstantString")
        }
    }
}
impl INSObject for NSConstantString {}
impl PNSObject for NSConstantString {}
impl From<NSConstantString> for NSObject {
    fn from(child: NSConstantString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSConstantString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSConstantString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSConstantString)) };
        if is_kind_of {
            Ok(NSConstantString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSConstantString")
        }
    }
}
impl INSConstantString for NSConstantString {}
pub trait INSConstantString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDictionary), alloc) })
    }
}
impl PNSCopying for NSDictionary {}
impl PNSMutableCopying for NSDictionary {}
impl PNSSecureCoding for NSDictionary {}
impl PNSFastEnumeration for NSDictionary {}
impl INSObject for NSDictionary {}
impl PNSObject for NSDictionary {}
impl From<NSDictionary> for NSObject {
    fn from(child: NSDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDictionary, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDictionary)) };
        if is_kind_of {
            Ok(NSDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType> for NSDictionary {}
pub trait INSDictionary<KeyType: 'static, ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, aKey: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: aKey)
    }
    unsafe fn keyEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyEnumerator)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_forKeys_count_(
        &self,
        objects: *const *mut u64,
        keys: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects forKeys : keys count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSExtendedDictionary<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSExtendedDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn allKeysForObject_(&self, anObject: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allKeysForObject: anObject)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithLocale : locale indent : level)
    }
    unsafe fn isEqualToDictionary_(&self, otherDictionary: NSDictionary) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToDictionary: otherDictionary)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn objectsForKeys_notFoundMarker_(&self, keys: NSArray, marker: id) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , objectsForKeys : keys notFoundMarker : marker)
    }
    unsafe fn writeToURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url error : error)
    }
    unsafe fn keysSortedByValueUsingSelector_(&self, comparator: objc::runtime::Sel) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keysSortedByValueUsingSelector: comparator)
    }
    unsafe fn getObjects_andKeys_count_(&self, objects: *mut id, keys: *mut id, count: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjects : objects andKeys : keys count : count)
    }
    unsafe fn objectForKeyedSubscript_(&self, key: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKeyedSubscript: key)
    }
    unsafe fn enumerateKeysAndObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateKeysAndObjectsUsingBlock: block)
    }
    unsafe fn enumerateKeysAndObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateKeysAndObjectsWithOptions : opts usingBlock : block)
    }
    unsafe fn keysSortedByValueUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keysSortedByValueUsingComparator: cmptr)
    }
    unsafe fn keysSortedByValueWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , keysSortedByValueWithOptions : opts usingComparator : cmptr)
    }
    unsafe fn keysOfEntriesPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keysOfEntriesPassingTest: predicate)
    }
    unsafe fn keysOfEntriesWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , keysOfEntriesWithOptions : opts passingTest : predicate)
    }
    unsafe fn allKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allKeys)
    }
    unsafe fn allValues(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allValues)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn descriptionInStringsFileFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionInStringsFileFormat)
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSDeprecated<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSDeprecated<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn getObjects_andKeys_(&self, objects: *mut id, keys: *mut id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjects : objects andKeys : keys)
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile)
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url atomically : atomically)
    }
    unsafe fn dictionaryWithContentsOfFile_(path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDictionary), dictionaryWithContentsOfFile: path)
    }
    unsafe fn dictionaryWithContentsOfURL_(url: NSURL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDictionary), dictionaryWithContentsOfURL: url)
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSDictionaryCreation<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSDictionaryCreation<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithObjectsAndKeys_(&self, firstObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObjectsAndKeys: firstObject)
    }
    unsafe fn initWithDictionary_(&self, otherDictionary: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithDictionary: otherDictionary)
    }
    unsafe fn initWithDictionary_copyItems_(
        &self,
        otherDictionary: NSDictionary,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDictionary : otherDictionary copyItems : flag)
    }
    unsafe fn initWithObjects_forKeys_(&self, objects: NSArray, keys: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects forKeys : keys)
    }
    unsafe fn initWithContentsOfURL_error_(&self, url: NSURL, error: *mut NSError) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfURL : url error : error)
    }
    unsafe fn dictionary() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDictionary), dictionary)
    }
    unsafe fn dictionaryWithObject_forKey_(object: id, key: *mut u64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDictionary) , dictionaryWithObject : object forKey : key)
    }
    unsafe fn dictionaryWithObjects_forKeys_count_(
        objects: *const *mut u64,
        keys: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDictionary) , dictionaryWithObjects : objects forKeys : keys count : cnt)
    }
    unsafe fn dictionaryWithObjectsAndKeys_(firstObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSDictionary),
            dictionaryWithObjectsAndKeys: firstObject
        )
    }
    unsafe fn dictionaryWithDictionary_(dict: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDictionary), dictionaryWithDictionary: dict)
    }
    unsafe fn dictionaryWithObjects_forKeys_(objects: NSArray, keys: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDictionary) , dictionaryWithObjects : objects forKeys : keys)
    }
    unsafe fn dictionaryWithContentsOfURL_error_(url: NSURL, error: *mut NSError) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDictionary) , dictionaryWithContentsOfURL : url error : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableDictionary(pub id);
impl std::ops::Deref for NSMutableDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableDictionary {}
impl NSMutableDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableDictionary), alloc) })
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
impl PNSCopying for NSMutableDictionary {}
impl PNSMutableCopying for NSMutableDictionary {}
impl PNSSecureCoding for NSMutableDictionary {}
impl PNSFastEnumeration for NSMutableDictionary {}
impl INSObject for NSMutableDictionary {}
impl PNSObject for NSMutableDictionary {}
impl From<NSMutableDictionary> for NSObject {
    fn from(child: NSMutableDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableDictionary, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableDictionary)) };
        if is_kind_of {
            Ok(NSMutableDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSMutableDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
pub trait INSMutableDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn removeObjectForKey_(&self, aKey: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: aKey)
    }
    unsafe fn setObject_forKey_(&self, anObject: id, aKey: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : anObject forKey : aKey)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSExtendedMutableDictionary<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSExtendedMutableDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addEntriesFromDictionary_(&self, otherDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addEntriesFromDictionary: otherDictionary)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn removeObjectsForKeys_(&self, keyArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsForKeys: keyArray)
    }
    unsafe fn setDictionary_(&self, otherDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDictionary: otherDictionary)
    }
    unsafe fn setObject_forKeyedSubscript_(&self, obj: id, key: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj forKeyedSubscript : key)
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSMutableDictionaryCreation<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSMutableDictionaryCreation<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn dictionaryWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableDictionary),
            dictionaryWithCapacity: numItems
        )
    }
    unsafe fn dictionaryWithContentsOfFile_(path: NSString) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableDictionary),
            dictionaryWithContentsOfFile: path
        )
    }
    unsafe fn dictionaryWithContentsOfURL_(url: NSURL) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableDictionary),
            dictionaryWithContentsOfURL: url
        )
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSDictionary_NSSharedKeySetDictionary<KeyType, ObjectType> for NSDictionary
{
}
pub trait NSDictionary_NSSharedKeySetDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn sharedKeySetForKeys_(keys: NSArray) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDictionary), sharedKeySetForKeys: keys)
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSSharedKeySetDictionary<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSSharedKeySetDictionary<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn dictionaryWithSharedKeySet_(keyset: id) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableDictionary),
            dictionaryWithSharedKeySet: keyset
        )
    }
}
impl<K: 'static, V: 'static> NSDictionary_NSGenericFastEnumeration<K, V> for NSDictionary {}
pub trait NSDictionary_NSGenericFastEnumeration<K: 'static, V: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn countByEnumeratingWithState_objects_count_(
        &self,
        state: *mut NSFastEnumerationState,
        buffer: *mut id,
        len: NSUInteger,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , countByEnumeratingWithState : state objects : buffer count : len)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSet), alloc) })
    }
}
impl PNSCopying for NSSet {}
impl PNSMutableCopying for NSSet {}
impl PNSSecureCoding for NSSet {}
impl PNSFastEnumeration for NSSet {}
impl INSObject for NSSet {}
impl PNSObject for NSSet {}
impl From<NSSet> for NSObject {
    fn from(child: NSSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSSet)) };
        if is_kind_of {
            Ok(NSSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSet")
        }
    }
}
impl<ObjectType: 'static> INSSet<ObjectType> for NSSet {}
pub trait INSSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn member_(&self, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, member: object)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(
        &self,
        objects: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
impl<ObjectType: 'static> NSSet_NSExtendedSet<ObjectType> for NSSet {}
pub trait NSSet_NSExtendedSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn anyObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, anyObject)
    }
    unsafe fn containsObject_(&self, anObject: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsObject: anObject)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn intersectsSet_(&self, otherSet: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsSet: otherSet)
    }
    unsafe fn isEqualToSet_(&self, otherSet: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToSet: otherSet)
    }
    unsafe fn isSubsetOfSet_(&self, otherSet: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfSet: otherSet)
    }
    unsafe fn makeObjectsPerformSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, makeObjectsPerformSelector: aSelector)
    }
    unsafe fn makeObjectsPerformSelector_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        argument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , makeObjectsPerformSelector : aSelector withObject : argument)
    }
    unsafe fn setByAddingObject_(&self, anObject: id) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setByAddingObject: anObject)
    }
    unsafe fn setByAddingObjectsFromSet_(&self, other: NSSet) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setByAddingObjectsFromSet: other)
    }
    unsafe fn setByAddingObjectsFromArray_(&self, other: NSArray) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setByAddingObjectsFromArray: other)
    }
    unsafe fn enumerateObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateObjectsUsingBlock: block)
    }
    unsafe fn enumerateObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsWithOptions : opts usingBlock : block)
    }
    unsafe fn objectsPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsPassingTest: predicate)
    }
    unsafe fn objectsWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , objectsWithOptions : opts passingTest : predicate)
    }
    unsafe fn allObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allObjects)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
}
impl<ObjectType: 'static> NSSet_NSSetCreation<ObjectType> for NSSet {}
pub trait NSSet_NSSetCreation<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithObjects_(&self, firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObjects: firstObj)
    }
    unsafe fn initWithSet_(&self, set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSet: set)
    }
    unsafe fn initWithSet_copyItems_(&self, set: NSSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSet : set copyItems : flag)
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithArray: array)
    }
    unsafe fn set() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSet), set)
    }
    unsafe fn setWithObject_(object: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSet), setWithObject: object)
    }
    unsafe fn setWithObjects_count_(objects: *const *mut u64, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSSet) , setWithObjects : objects count : cnt)
    }
    unsafe fn setWithObjects_(firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSet), setWithObjects: firstObj)
    }
    unsafe fn setWithSet_(set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSet), setWithSet: set)
    }
    unsafe fn setWithArray_(array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSet), setWithArray: array)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableSet(pub id);
impl std::ops::Deref for NSMutableSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableSet {}
impl NSMutableSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableSet), alloc) })
    }
}
impl<ObjectType: 'static> INSSet<ObjectType> for NSMutableSet {}
impl PNSCopying for NSMutableSet {}
impl PNSMutableCopying for NSMutableSet {}
impl PNSSecureCoding for NSMutableSet {}
impl PNSFastEnumeration for NSMutableSet {}
impl INSObject for NSMutableSet {}
impl PNSObject for NSMutableSet {}
impl From<NSMutableSet> for NSObject {
    fn from(child: NSMutableSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableSet)) };
        if is_kind_of {
            Ok(NSMutableSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableSet")
        }
    }
}
impl<ObjectType: 'static> INSMutableSet<ObjectType> for NSMutableSet {}
pub trait INSMutableSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: object)
    }
    unsafe fn removeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: object)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
}
impl<ObjectType: 'static> NSMutableSet_NSExtendedMutableSet<ObjectType> for NSMutableSet {}
pub trait NSMutableSet_NSExtendedMutableSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn addObjectsFromArray_(&self, array: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObjectsFromArray: array)
    }
    unsafe fn intersectSet_(&self, otherSet: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectSet: otherSet)
    }
    unsafe fn minusSet_(&self, otherSet: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minusSet: otherSet)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn unionSet_(&self, otherSet: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unionSet: otherSet)
    }
    unsafe fn setSet_(&self, otherSet: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSet: otherSet)
    }
}
impl<ObjectType: 'static> NSMutableSet_NSMutableSetCreation<ObjectType> for NSMutableSet {}
pub trait NSMutableSet_NSMutableSetCreation<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn setWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableSet), setWithCapacity: numItems)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCountedSet(pub id);
impl std::ops::Deref for NSCountedSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCountedSet {}
impl NSCountedSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCountedSet), alloc) })
    }
}
impl<ObjectType: 'static> INSMutableSet<ObjectType> for NSCountedSet {}
impl<ObjectType: 'static> INSSet<ObjectType> for NSCountedSet {}
impl PNSCopying for NSCountedSet {}
impl PNSMutableCopying for NSCountedSet {}
impl PNSSecureCoding for NSCountedSet {}
impl PNSFastEnumeration for NSCountedSet {}
impl INSObject for NSCountedSet {}
impl PNSObject for NSCountedSet {}
impl From<NSCountedSet> for NSObject {
    fn from(child: NSCountedSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCountedSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCountedSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCountedSet)) };
        if is_kind_of {
            Ok(NSCountedSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCountedSet")
        }
    }
}
impl<ObjectType: 'static> INSCountedSet<ObjectType> for NSCountedSet {}
pub trait INSCountedSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithArray: array)
    }
    unsafe fn initWithSet_(&self, set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSet: set)
    }
    unsafe fn countForObject_(&self, object: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countForObject: object)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn addObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: object)
    }
    unsafe fn removeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: object)
    }
}
pub type NSProgressKind = NSString;
pub type NSProgressUserInfoKey = NSString;
pub type NSProgressFileOperationKind = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSProgress(pub id);
impl std::ops::Deref for NSProgress {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSProgress {}
impl NSProgress {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSProgress), alloc) })
    }
}
impl INSObject for NSProgress {}
impl PNSObject for NSProgress {}
impl From<NSProgress> for NSObject {
    fn from(child: NSProgress) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSProgress {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSProgress, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSProgress)) };
        if is_kind_of {
            Ok(NSProgress(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSProgress")
        }
    }
}
impl INSProgress for NSProgress {}
pub trait INSProgress: Sized + std::ops::Deref {
    unsafe fn initWithParent_userInfo_(
        &self,
        parentProgressOrNil: NSProgress,
        userInfoOrNil: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithParent : parentProgressOrNil userInfo : userInfoOrNil)
    }
    unsafe fn becomeCurrentWithPendingUnitCount_(&self, unitCount: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, becomeCurrentWithPendingUnitCount: unitCount)
    }
    unsafe fn performAsCurrentWithPendingUnitCount_usingBlock_(
        &self,
        unitCount: i64,
        work: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performAsCurrentWithPendingUnitCount : unitCount usingBlock : work)
    }
    unsafe fn resignCurrent(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resignCurrent)
    }
    unsafe fn addChild_withPendingUnitCount_(&self, child: NSProgress, inUnitCount: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addChild : child withPendingUnitCount : inUnitCount)
    }
    unsafe fn setUserInfoObject_forKey_(&self, objectOrNil: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setUserInfoObject : objectOrNil forKey : key)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn pause(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pause)
    }
    unsafe fn resume(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resume)
    }
    unsafe fn publish(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, publish)
    }
    unsafe fn unpublish(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unpublish)
    }
    unsafe fn totalUnitCount(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, totalUnitCount)
    }
    unsafe fn setTotalUnitCount_(&self, totalUnitCount: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTotalUnitCount: totalUnitCount)
    }
    unsafe fn completedUnitCount(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, completedUnitCount)
    }
    unsafe fn setCompletedUnitCount_(&self, completedUnitCount: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCompletedUnitCount: completedUnitCount)
    }
    unsafe fn localizedDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedDescription)
    }
    unsafe fn setLocalizedDescription_(&self, localizedDescription: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocalizedDescription: localizedDescription)
    }
    unsafe fn localizedAdditionalDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedAdditionalDescription)
    }
    unsafe fn setLocalizedAdditionalDescription_(&self, localizedAdditionalDescription: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setLocalizedAdditionalDescription: localizedAdditionalDescription
        )
    }
    unsafe fn isCancellable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCancellable)
    }
    unsafe fn setCancellable_(&self, cancellable: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCancellable: cancellable)
    }
    unsafe fn isPausable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isPausable)
    }
    unsafe fn setPausable_(&self, pausable: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPausable: pausable)
    }
    unsafe fn isCancelled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCancelled)
    }
    unsafe fn isPaused(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isPaused)
    }
    unsafe fn cancellationHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancellationHandler)
    }
    unsafe fn setCancellationHandler_(&self, cancellationHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCancellationHandler: cancellationHandler)
    }
    unsafe fn pausingHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pausingHandler)
    }
    unsafe fn setPausingHandler_(&self, pausingHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPausingHandler: pausingHandler)
    }
    unsafe fn resumingHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resumingHandler)
    }
    unsafe fn setResumingHandler_(&self, resumingHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setResumingHandler: resumingHandler)
    }
    unsafe fn isIndeterminate(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isIndeterminate)
    }
    unsafe fn fractionCompleted(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fractionCompleted)
    }
    unsafe fn isFinished(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFinished)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn kind(&self) -> NSProgressKind
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, kind)
    }
    unsafe fn setKind_(&self, kind: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setKind: kind)
    }
    unsafe fn estimatedTimeRemaining(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, estimatedTimeRemaining)
    }
    unsafe fn setEstimatedTimeRemaining_(&self, estimatedTimeRemaining: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEstimatedTimeRemaining: estimatedTimeRemaining)
    }
    unsafe fn throughput(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, throughput)
    }
    unsafe fn setThroughput_(&self, throughput: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setThroughput: throughput)
    }
    unsafe fn fileOperationKind(&self) -> NSProgressFileOperationKind
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileOperationKind)
    }
    unsafe fn setFileOperationKind_(&self, fileOperationKind: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFileOperationKind: fileOperationKind)
    }
    unsafe fn fileURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileURL)
    }
    unsafe fn setFileURL_(&self, fileURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFileURL: fileURL)
    }
    unsafe fn fileTotalCount(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileTotalCount)
    }
    unsafe fn setFileTotalCount_(&self, fileTotalCount: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFileTotalCount: fileTotalCount)
    }
    unsafe fn fileCompletedCount(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileCompletedCount)
    }
    unsafe fn setFileCompletedCount_(&self, fileCompletedCount: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFileCompletedCount: fileCompletedCount)
    }
    unsafe fn isOld(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOld)
    }
    unsafe fn currentProgress() -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProgress), currentProgress)
    }
    unsafe fn progressWithTotalUnitCount_(unitCount: i64) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProgress), progressWithTotalUnitCount: unitCount)
    }
    unsafe fn discreteProgressWithTotalUnitCount_(unitCount: i64) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSProgress),
            discreteProgressWithTotalUnitCount: unitCount
        )
    }
    unsafe fn progressWithTotalUnitCount_parent_pendingUnitCount_(
        unitCount: i64,
        parent: NSProgress,
        portionOfParentTotalUnitCount: i64,
    ) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSProgress) , progressWithTotalUnitCount : unitCount parent : parent pendingUnitCount : portionOfParentTotalUnitCount)
    }
    unsafe fn addSubscriberForFileURL_withPublishingHandler_(
        url: NSURL,
        publishingHandler: NSProgressPublishingHandler,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSProgress) , addSubscriberForFileURL : url withPublishingHandler : publishingHandler)
    }
    unsafe fn removeSubscriber_(subscriber: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProgress), removeSubscriber: subscriber)
    }
}
pub type NSProgressUnpublishingHandler = *mut ::std::os::raw::c_void;
pub type NSProgressPublishingHandler = *mut ::std::os::raw::c_void;
pub trait PNSProgressReporting: Sized + std::ops::Deref {
    unsafe fn progress(&self) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, progress)
    }
}
extern "C" {
    pub static NSProgressEstimatedTimeRemainingKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressThroughputKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressKindFile: NSProgressKind;
}
extern "C" {
    pub static NSProgressFileOperationKindKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileOperationKindDownloading: NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileOperationKindDecompressingAfterDownloading:
        NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileOperationKindReceiving: NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileOperationKindCopying: NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileOperationKindUploading: NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileOperationKindDuplicating: NSProgressFileOperationKind;
}
extern "C" {
    pub static NSProgressFileURLKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileTotalCountKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileCompletedCountKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileAnimationImageKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileAnimationImageOriginalRectKey: NSProgressUserInfoKey;
}
extern "C" {
    pub static NSProgressFileIconKey: NSProgressUserInfoKey;
}
pub type NSNotificationName = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNotification(pub id);
impl std::ops::Deref for NSNotification {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNotification {}
impl NSNotification {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNotification), alloc) })
    }
}
impl PNSCopying for NSNotification {}
impl PNSCoding for NSNotification {}
impl INSObject for NSNotification {}
impl PNSObject for NSNotification {}
impl From<NSNotification> for NSObject {
    fn from(child: NSNotification) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNotification {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNotification, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNotification)) };
        if is_kind_of {
            Ok(NSNotification(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNotification")
        }
    }
}
impl INSNotification for NSNotification {}
pub trait INSNotification: Sized + std::ops::Deref {
    unsafe fn initWithName_object_userInfo_(
        &self,
        name: NSString,
        object: id,
        userInfo: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithName : name object : object userInfo : userInfo)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn name(&self) -> NSNotificationName
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn object(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, object)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
}
impl NSNotification_NSNotificationCreation for NSNotification {}
pub trait NSNotification_NSNotificationCreation: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn notificationWithName_object_(aName: NSString, anObject: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSNotification) , notificationWithName : aName object : anObject)
    }
    unsafe fn notificationWithName_object_userInfo_(
        aName: NSString,
        anObject: id,
        aUserInfo: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSNotification) , notificationWithName : aName object : anObject userInfo : aUserInfo)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNotificationCenter(pub id);
impl std::ops::Deref for NSNotificationCenter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNotificationCenter {}
impl NSNotificationCenter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNotificationCenter), alloc) })
    }
}
impl INSObject for NSNotificationCenter {}
impl PNSObject for NSNotificationCenter {}
impl From<NSNotificationCenter> for NSObject {
    fn from(child: NSNotificationCenter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNotificationCenter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNotificationCenter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSNotificationCenter)) };
        if is_kind_of {
            Ok(NSNotificationCenter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNotificationCenter")
        }
    }
}
impl INSNotificationCenter for NSNotificationCenter {}
pub trait INSNotificationCenter: Sized + std::ops::Deref {
    unsafe fn addObserver_selector_name_object_(
        &self,
        observer: id,
        aSelector: objc::runtime::Sel,
        aName: NSString,
        anObject: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer selector : aSelector name : aName object : anObject)
    }
    unsafe fn postNotification_(&self, notification: NSNotification)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, postNotification: notification)
    }
    unsafe fn postNotificationName_object_(&self, aName: NSString, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , postNotificationName : aName object : anObject)
    }
    unsafe fn postNotificationName_object_userInfo_(
        &self,
        aName: NSString,
        anObject: id,
        aUserInfo: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , postNotificationName : aName object : anObject userInfo : aUserInfo)
    }
    unsafe fn removeObserver_(&self, observer: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObserver: observer)
    }
    unsafe fn removeObserver_name_object_(&self, observer: id, aName: NSString, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer name : aName object : anObject)
    }
    unsafe fn addObserverForName_object_queue_usingBlock_(
        &self,
        name: NSString,
        obj: id,
        queue: NSOperationQueue,
        block: *mut ::std::os::raw::c_void,
    ) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserverForName : name object : obj queue : queue usingBlock : block)
    }
    unsafe fn defaultCenter() -> NSNotificationCenter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNotificationCenter), defaultCenter)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSBundle(pub id);
impl std::ops::Deref for NSBundle {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSBundle {}
impl NSBundle {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSBundle), alloc) })
    }
}
impl INSObject for NSBundle {}
impl PNSObject for NSBundle {}
impl From<NSBundle> for NSObject {
    fn from(child: NSBundle) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSBundle {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSBundle, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSBundle)) };
        if is_kind_of {
            Ok(NSBundle(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSBundle")
        }
    }
}
impl INSBundle for NSBundle {}
pub trait INSBundle: Sized + std::ops::Deref {
    unsafe fn initWithPath_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithPath: path)
    }
    unsafe fn initWithURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithURL: url)
    }
    unsafe fn load(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, load)
    }
    unsafe fn unload(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unload)
    }
    unsafe fn preflightAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, preflightAndReturnError: error)
    }
    unsafe fn loadAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, loadAndReturnError: error)
    }
    unsafe fn URLForAuxiliaryExecutable_(&self, executableName: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLForAuxiliaryExecutable: executableName)
    }
    unsafe fn pathForAuxiliaryExecutable_(&self, executableName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathForAuxiliaryExecutable: executableName)
    }
    unsafe fn URLForResource_withExtension_(&self, name: NSString, ext: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForResource : name withExtension : ext)
    }
    unsafe fn URLForResource_withExtension_subdirectory_(
        &self,
        name: NSString,
        ext: NSString,
        subpath: NSString,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForResource : name withExtension : ext subdirectory : subpath)
    }
    unsafe fn URLForResource_withExtension_subdirectory_localization_(
        &self,
        name: NSString,
        ext: NSString,
        subpath: NSString,
        localizationName: NSString,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForResource : name withExtension : ext subdirectory : subpath localization : localizationName)
    }
    unsafe fn URLsForResourcesWithExtension_subdirectory_(
        &self,
        ext: NSString,
        subpath: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLsForResourcesWithExtension : ext subdirectory : subpath)
    }
    unsafe fn URLsForResourcesWithExtension_subdirectory_localization_(
        &self,
        ext: NSString,
        subpath: NSString,
        localizationName: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLsForResourcesWithExtension : ext subdirectory : subpath localization : localizationName)
    }
    unsafe fn pathForResource_ofType_(&self, name: NSString, ext: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , pathForResource : name ofType : ext)
    }
    unsafe fn pathForResource_ofType_inDirectory_(
        &self,
        name: NSString,
        ext: NSString,
        subpath: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , pathForResource : name ofType : ext inDirectory : subpath)
    }
    unsafe fn pathForResource_ofType_inDirectory_forLocalization_(
        &self,
        name: NSString,
        ext: NSString,
        subpath: NSString,
        localizationName: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , pathForResource : name ofType : ext inDirectory : subpath forLocalization : localizationName)
    }
    unsafe fn pathsForResourcesOfType_inDirectory_(
        &self,
        ext: NSString,
        subpath: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , pathsForResourcesOfType : ext inDirectory : subpath)
    }
    unsafe fn pathsForResourcesOfType_inDirectory_forLocalization_(
        &self,
        ext: NSString,
        subpath: NSString,
        localizationName: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , pathsForResourcesOfType : ext inDirectory : subpath forLocalization : localizationName)
    }
    unsafe fn localizedStringForKey_value_table_(
        &self,
        key: NSString,
        value: NSString,
        tableName: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , localizedStringForKey : key value : value table : tableName)
    }
    unsafe fn localizedAttributedStringForKey_value_table_(
        &self,
        key: NSString,
        value: NSString,
        tableName: NSString,
    ) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , localizedAttributedStringForKey : key value : value table : tableName)
    }
    unsafe fn objectForInfoDictionaryKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForInfoDictionaryKey: key)
    }
    unsafe fn classNamed_(&self, className: NSString) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classNamed: className)
    }
    unsafe fn isLoaded(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLoaded)
    }
    unsafe fn bundleURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bundleURL)
    }
    unsafe fn resourceURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resourceURL)
    }
    unsafe fn executableURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, executableURL)
    }
    unsafe fn privateFrameworksURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, privateFrameworksURL)
    }
    unsafe fn sharedFrameworksURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sharedFrameworksURL)
    }
    unsafe fn sharedSupportURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sharedSupportURL)
    }
    unsafe fn builtInPlugInsURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, builtInPlugInsURL)
    }
    unsafe fn appStoreReceiptURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appStoreReceiptURL)
    }
    unsafe fn bundlePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bundlePath)
    }
    unsafe fn resourcePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resourcePath)
    }
    unsafe fn executablePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, executablePath)
    }
    unsafe fn privateFrameworksPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, privateFrameworksPath)
    }
    unsafe fn sharedFrameworksPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sharedFrameworksPath)
    }
    unsafe fn sharedSupportPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sharedSupportPath)
    }
    unsafe fn builtInPlugInsPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, builtInPlugInsPath)
    }
    unsafe fn bundleIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bundleIdentifier)
    }
    unsafe fn infoDictionary(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, infoDictionary)
    }
    unsafe fn localizedInfoDictionary(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedInfoDictionary)
    }
    unsafe fn principalClass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, principalClass)
    }
    unsafe fn preferredLocalizations(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, preferredLocalizations)
    }
    unsafe fn localizations(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizations)
    }
    unsafe fn developmentLocalization(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, developmentLocalization)
    }
    unsafe fn executableArchitectures(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, executableArchitectures)
    }
    unsafe fn bundleWithPath_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), bundleWithPath: path)
    }
    unsafe fn bundleWithURL_(url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), bundleWithURL: url)
    }
    unsafe fn bundleForClass_(aClass: Class) -> NSBundle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), bundleForClass: aClass)
    }
    unsafe fn bundleWithIdentifier_(identifier: NSString) -> NSBundle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), bundleWithIdentifier: identifier)
    }
    unsafe fn URLForResource_withExtension_subdirectory_inBundleWithURL_(
        name: NSString,
        ext: NSString,
        subpath: NSString,
        bundleURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSBundle) , URLForResource : name withExtension : ext subdirectory : subpath inBundleWithURL : bundleURL)
    }
    unsafe fn URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
        ext: NSString,
        subpath: NSString,
        bundleURL: NSURL,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSBundle) , URLsForResourcesWithExtension : ext subdirectory : subpath inBundleWithURL : bundleURL)
    }
    unsafe fn class_pathForResource_ofType_inDirectory_(
        name: NSString,
        ext: NSString,
        bundlePath: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSBundle) , pathForResource : name ofType : ext inDirectory : bundlePath)
    }
    unsafe fn class_pathsForResourcesOfType_inDirectory_(
        ext: NSString,
        bundlePath: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSBundle) , pathsForResourcesOfType : ext inDirectory : bundlePath)
    }
    unsafe fn preferredLocalizationsFromArray_(localizationsArray: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSBundle),
            preferredLocalizationsFromArray: localizationsArray
        )
    }
    unsafe fn preferredLocalizationsFromArray_forPreferences_(
        localizationsArray: NSArray,
        preferencesArray: NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSBundle) , preferredLocalizationsFromArray : localizationsArray forPreferences : preferencesArray)
    }
    unsafe fn mainBundle() -> NSBundle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), mainBundle)
    }
    unsafe fn allBundles() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), allBundles)
    }
    unsafe fn allFrameworks() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBundle), allFrameworks)
    }
}
pub const NSBundleExecutableArchitectureI386: _bindgen_ty_47 = 7;
pub const NSBundleExecutableArchitecturePPC: _bindgen_ty_47 = 18;
pub const NSBundleExecutableArchitectureX86_64: _bindgen_ty_47 = 16777223;
pub const NSBundleExecutableArchitecturePPC64: _bindgen_ty_47 = 16777234;
pub const NSBundleExecutableArchitectureARM64: _bindgen_ty_47 = 16777228;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
impl NSString_NSBundleExtensionMethods for NSString {}
pub trait NSString_NSBundleExtensionMethods: Sized + std::ops::Deref {
    unsafe fn variantFittingPresentationWidth_(&self, width: NSInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, variantFittingPresentationWidth: width)
    }
}
extern "C" {
    pub static NSBundleDidLoadNotification: NSNotificationName;
}
extern "C" {
    pub static NSLoadedClasses: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSBundleResourceRequest(pub id);
impl std::ops::Deref for NSBundleResourceRequest {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSBundleResourceRequest {}
impl NSBundleResourceRequest {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSBundleResourceRequest), alloc) })
    }
}
impl PNSProgressReporting for NSBundleResourceRequest {}
impl INSObject for NSBundleResourceRequest {}
impl PNSObject for NSBundleResourceRequest {}
impl From<NSBundleResourceRequest> for NSObject {
    fn from(child: NSBundleResourceRequest) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSBundleResourceRequest {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSBundleResourceRequest, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSBundleResourceRequest)) };
        if is_kind_of {
            Ok(NSBundleResourceRequest(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSBundleResourceRequest")
        }
    }
}
impl INSBundleResourceRequest for NSBundleResourceRequest {}
pub trait INSBundleResourceRequest: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithTags_(&self, tags: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTags: tags)
    }
    unsafe fn initWithTags_bundle_(&self, tags: NSSet, bundle: NSBundle) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTags : tags bundle : bundle)
    }
    unsafe fn beginAccessingResourcesWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            beginAccessingResourcesWithCompletionHandler: completionHandler
        )
    }
    unsafe fn conditionallyBeginAccessingResourcesWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            conditionallyBeginAccessingResourcesWithCompletionHandler: completionHandler
        )
    }
    unsafe fn endAccessingResources(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endAccessingResources)
    }
    unsafe fn loadingPriority(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, loadingPriority)
    }
    unsafe fn setLoadingPriority_(&self, loadingPriority: f64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLoadingPriority: loadingPriority)
    }
    unsafe fn tags(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tags)
    }
    unsafe fn bundle(&self) -> NSBundle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bundle)
    }
    unsafe fn progress(&self) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, progress)
    }
}
impl NSBundle_NSBundleResourceRequestAdditions for NSBundle {}
pub trait NSBundle_NSBundleResourceRequestAdditions: Sized + std::ops::Deref {
    unsafe fn setPreservationPriority_forTags_(&self, priority: f64, tags: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setPreservationPriority : priority forTags : tags)
    }
    unsafe fn preservationPriorityForTag_(&self, tag: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, preservationPriorityForTag: tag)
    }
}
extern "C" {
    pub static NSBundleResourceRequestLowDiskSpaceNotification: NSNotificationName;
}
extern "C" {
    pub static NSBundleResourceRequestLoadingPriorityUrgent: f64;
}
pub const NS_UnknownByteOrder: _bindgen_ty_48 = 0;
pub const NS_LittleEndian: _bindgen_ty_48 = 1;
pub const NS_BigEndian: _bindgen_ty_48 = 2;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSSwappedFloat {
    pub v: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSSwappedDouble {
    pub v: ::std::os::raw::c_ulonglong,
}
extern "C" {
    pub static NSSystemClockDidChangeNotification: NSNotificationName;
}
pub type NSTimeInterval = f64;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDate), alloc) })
    }
}
impl PNSCopying for NSDate {}
impl PNSSecureCoding for NSDate {}
impl INSObject for NSDate {}
impl PNSObject for NSDate {}
impl From<NSDate> for NSObject {
    fn from(child: NSDate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDate)) };
        if is_kind_of {
            Ok(NSDate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDate")
        }
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithTimeIntervalSinceReferenceDate_(&self, ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSinceReferenceDate: ti)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn timeIntervalSinceReferenceDate(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceReferenceDate)
    }
}
impl NSDate_NSExtendedDate for NSDate {}
pub trait NSDate_NSExtendedDate: Sized + std::ops::Deref {
    unsafe fn timeIntervalSinceDate_(&self, anotherDate: NSDate) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceDate: anotherDate)
    }
    unsafe fn addTimeInterval_(&self, seconds: NSTimeInterval) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addTimeInterval: seconds)
    }
    unsafe fn dateByAddingTimeInterval_(&self, ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateByAddingTimeInterval: ti)
    }
    unsafe fn earlierDate_(&self, anotherDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, earlierDate: anotherDate)
    }
    unsafe fn laterDate_(&self, anotherDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, laterDate: anotherDate)
    }
    unsafe fn compare_(&self, other: NSDate) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: other)
    }
    unsafe fn isEqualToDate_(&self, otherDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToDate: otherDate)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn timeIntervalSinceNow(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceNow)
    }
    unsafe fn timeIntervalSince1970(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSince1970)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn timeIntervalSinceReferenceDate() -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), timeIntervalSinceReferenceDate)
    }
}
impl NSDate_NSDateCreation for NSDate {}
pub trait NSDate_NSDateCreation: Sized + std::ops::Deref {
    unsafe fn initWithTimeIntervalSinceNow_(&self, secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSinceNow: secs)
    }
    unsafe fn initWithTimeIntervalSince1970_(&self, secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSince1970: secs)
    }
    unsafe fn initWithTimeInterval_sinceDate_(
        &self,
        secsToBeAdded: NSTimeInterval,
        date: NSDate,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTimeInterval : secsToBeAdded sinceDate : date)
    }
    unsafe fn date() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), date)
    }
    unsafe fn dateWithTimeIntervalSinceNow_(secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSinceNow: secs)
    }
    unsafe fn dateWithTimeIntervalSinceReferenceDate_(ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSinceReferenceDate: ti)
    }
    unsafe fn dateWithTimeIntervalSince1970_(secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSince1970: secs)
    }
    unsafe fn dateWithTimeInterval_sinceDate_(
        secsToBeAdded: NSTimeInterval,
        date: NSDate,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDate) , dateWithTimeInterval : secsToBeAdded sinceDate : date)
    }
    unsafe fn distantFuture() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), distantFuture)
    }
    unsafe fn distantPast() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), distantPast)
    }
    unsafe fn now() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), now)
    }
}
pub type NSCalendarIdentifier = NSString;
extern "C" {
    pub static NSCalendarIdentifierGregorian: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierBuddhist: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierChinese: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierCoptic: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierEthiopicAmeteMihret: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierEthiopicAmeteAlem: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierHebrew: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierISO8601: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierIndian: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierIslamic: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierIslamicCivil: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierJapanese: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierPersian: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierRepublicOfChina: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierIslamicTabular: NSCalendarIdentifier;
}
extern "C" {
    pub static NSCalendarIdentifierIslamicUmmAlQura: NSCalendarIdentifier;
}
pub const NSCalendarUnit_NSCalendarUnitEra: NSCalendarUnit = 2;
pub const NSCalendarUnit_NSCalendarUnitYear: NSCalendarUnit = 4;
pub const NSCalendarUnit_NSCalendarUnitMonth: NSCalendarUnit = 8;
pub const NSCalendarUnit_NSCalendarUnitDay: NSCalendarUnit = 16;
pub const NSCalendarUnit_NSCalendarUnitHour: NSCalendarUnit = 32;
pub const NSCalendarUnit_NSCalendarUnitMinute: NSCalendarUnit = 64;
pub const NSCalendarUnit_NSCalendarUnitSecond: NSCalendarUnit = 128;
pub const NSCalendarUnit_NSCalendarUnitWeekday: NSCalendarUnit = 512;
pub const NSCalendarUnit_NSCalendarUnitWeekdayOrdinal: NSCalendarUnit = 1024;
pub const NSCalendarUnit_NSCalendarUnitQuarter: NSCalendarUnit = 2048;
pub const NSCalendarUnit_NSCalendarUnitWeekOfMonth: NSCalendarUnit = 4096;
pub const NSCalendarUnit_NSCalendarUnitWeekOfYear: NSCalendarUnit = 8192;
pub const NSCalendarUnit_NSCalendarUnitYearForWeekOfYear: NSCalendarUnit = 16384;
pub const NSCalendarUnit_NSCalendarUnitNanosecond: NSCalendarUnit = 32768;
pub const NSCalendarUnit_NSCalendarUnitCalendar: NSCalendarUnit = 1048576;
pub const NSCalendarUnit_NSCalendarUnitTimeZone: NSCalendarUnit = 2097152;
pub const NSCalendarUnit_NSEraCalendarUnit: NSCalendarUnit = 2;
pub const NSCalendarUnit_NSYearCalendarUnit: NSCalendarUnit = 4;
pub const NSCalendarUnit_NSMonthCalendarUnit: NSCalendarUnit = 8;
pub const NSCalendarUnit_NSDayCalendarUnit: NSCalendarUnit = 16;
pub const NSCalendarUnit_NSHourCalendarUnit: NSCalendarUnit = 32;
pub const NSCalendarUnit_NSMinuteCalendarUnit: NSCalendarUnit = 64;
pub const NSCalendarUnit_NSSecondCalendarUnit: NSCalendarUnit = 128;
pub const NSCalendarUnit_NSWeekCalendarUnit: NSCalendarUnit = 256;
pub const NSCalendarUnit_NSWeekdayCalendarUnit: NSCalendarUnit = 512;
pub const NSCalendarUnit_NSWeekdayOrdinalCalendarUnit: NSCalendarUnit = 1024;
pub const NSCalendarUnit_NSQuarterCalendarUnit: NSCalendarUnit = 2048;
pub const NSCalendarUnit_NSWeekOfMonthCalendarUnit: NSCalendarUnit = 4096;
pub const NSCalendarUnit_NSWeekOfYearCalendarUnit: NSCalendarUnit = 8192;
pub const NSCalendarUnit_NSYearForWeekOfYearCalendarUnit: NSCalendarUnit = 16384;
pub const NSCalendarUnit_NSCalendarCalendarUnit: NSCalendarUnit = 1048576;
pub const NSCalendarUnit_NSTimeZoneCalendarUnit: NSCalendarUnit = 2097152;
pub type NSCalendarUnit = NSUInteger;
pub const NSCalendarOptions_NSCalendarWrapComponents: NSCalendarOptions = 1;
pub const NSCalendarOptions_NSCalendarMatchStrictly: NSCalendarOptions = 2;
pub const NSCalendarOptions_NSCalendarSearchBackwards: NSCalendarOptions = 4;
pub const NSCalendarOptions_NSCalendarMatchPreviousTimePreservingSmallerUnits: NSCalendarOptions =
    256;
pub const NSCalendarOptions_NSCalendarMatchNextTimePreservingSmallerUnits: NSCalendarOptions = 512;
pub const NSCalendarOptions_NSCalendarMatchNextTime: NSCalendarOptions = 1024;
pub const NSCalendarOptions_NSCalendarMatchFirst: NSCalendarOptions = 4096;
pub const NSCalendarOptions_NSCalendarMatchLast: NSCalendarOptions = 8192;
pub type NSCalendarOptions = NSUInteger;
pub const NSWrapCalendarComponents: _bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCalendar(pub id);
impl std::ops::Deref for NSCalendar {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCalendar {}
impl NSCalendar {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCalendar), alloc) })
    }
}
impl PNSCopying for NSCalendar {}
impl PNSSecureCoding for NSCalendar {}
impl INSObject for NSCalendar {}
impl PNSObject for NSCalendar {}
impl From<NSCalendar> for NSObject {
    fn from(child: NSCalendar) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCalendar {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCalendar, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCalendar)) };
        if is_kind_of {
            Ok(NSCalendar(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCalendar")
        }
    }
}
impl INSCalendar for NSCalendar {}
pub trait INSCalendar: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCalendarIdentifier_(&self, ident: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCalendarIdentifier: ident)
    }
    unsafe fn minimumRangeOfUnit_(&self, unit: NSCalendarUnit) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumRangeOfUnit: unit)
    }
    unsafe fn maximumRangeOfUnit_(&self, unit: NSCalendarUnit) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumRangeOfUnit: unit)
    }
    unsafe fn rangeOfUnit_inUnit_forDate_(
        &self,
        smaller: NSCalendarUnit,
        larger: NSCalendarUnit,
        date: NSDate,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfUnit : smaller inUnit : larger forDate : date)
    }
    unsafe fn ordinalityOfUnit_inUnit_forDate_(
        &self,
        smaller: NSCalendarUnit,
        larger: NSCalendarUnit,
        date: NSDate,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , ordinalityOfUnit : smaller inUnit : larger forDate : date)
    }
    unsafe fn rangeOfUnit_startDate_interval_forDate_(
        &self,
        unit: NSCalendarUnit,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfUnit : unit startDate : datep interval : tip forDate : date)
    }
    unsafe fn dateFromComponents_(&self, comps: NSDateComponents) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFromComponents: comps)
    }
    unsafe fn components_fromDate_(
        &self,
        unitFlags: NSCalendarUnit,
        date: NSDate,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDate : date)
    }
    unsafe fn dateByAddingComponents_toDate_options_(
        &self,
        comps: NSDateComponents,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateByAddingComponents : comps toDate : date options : opts)
    }
    unsafe fn components_fromDate_toDate_options_(
        &self,
        unitFlags: NSCalendarUnit,
        startingDate: NSDate,
        resultDate: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDate : startingDate toDate : resultDate options : opts)
    }
    unsafe fn getEra_year_month_day_fromDate_(
        &self,
        eraValuePointer: *mut NSInteger,
        yearValuePointer: *mut NSInteger,
        monthValuePointer: *mut NSInteger,
        dayValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getEra : eraValuePointer year : yearValuePointer month : monthValuePointer day : dayValuePointer fromDate : date)
    }
    unsafe fn getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
        &self,
        eraValuePointer: *mut NSInteger,
        yearValuePointer: *mut NSInteger,
        weekValuePointer: *mut NSInteger,
        weekdayValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getEra : eraValuePointer yearForWeekOfYear : yearValuePointer weekOfYear : weekValuePointer weekday : weekdayValuePointer fromDate : date)
    }
    unsafe fn getHour_minute_second_nanosecond_fromDate_(
        &self,
        hourValuePointer: *mut NSInteger,
        minuteValuePointer: *mut NSInteger,
        secondValuePointer: *mut NSInteger,
        nanosecondValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getHour : hourValuePointer minute : minuteValuePointer second : secondValuePointer nanosecond : nanosecondValuePointer fromDate : date)
    }
    unsafe fn component_fromDate_(&self, unit: NSCalendarUnit, date: NSDate) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , component : unit fromDate : date)
    }
    unsafe fn dateWithEra_year_month_day_hour_minute_second_nanosecond_(
        &self,
        eraValue: NSInteger,
        yearValue: NSInteger,
        monthValue: NSInteger,
        dayValue: NSInteger,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        nanosecondValue: NSInteger,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateWithEra : eraValue year : yearValue month : monthValue day : dayValue hour : hourValue minute : minuteValue second : secondValue nanosecond : nanosecondValue)
    }
    unsafe fn dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
        &self,
        eraValue: NSInteger,
        yearValue: NSInteger,
        weekValue: NSInteger,
        weekdayValue: NSInteger,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        nanosecondValue: NSInteger,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateWithEra : eraValue yearForWeekOfYear : yearValue weekOfYear : weekValue weekday : weekdayValue hour : hourValue minute : minuteValue second : secondValue nanosecond : nanosecondValue)
    }
    unsafe fn startOfDayForDate_(&self, date: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startOfDayForDate: date)
    }
    unsafe fn componentsInTimeZone_fromDate_(
        &self,
        timezone_: NSTimeZone,
        date: NSDate,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , componentsInTimeZone : timezone_ fromDate : date)
    }
    unsafe fn compareDate_toDate_toUnitGranularity_(
        &self,
        date1: NSDate,
        date2: NSDate,
        unit: NSCalendarUnit,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compareDate : date1 toDate : date2 toUnitGranularity : unit)
    }
    unsafe fn isDate_equalToDate_toUnitGranularity_(
        &self,
        date1: NSDate,
        date2: NSDate,
        unit: NSCalendarUnit,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isDate : date1 equalToDate : date2 toUnitGranularity : unit)
    }
    unsafe fn isDate_inSameDayAsDate_(&self, date1: NSDate, date2: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isDate : date1 inSameDayAsDate : date2)
    }
    unsafe fn isDateInToday_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInToday: date)
    }
    unsafe fn isDateInYesterday_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInYesterday: date)
    }
    unsafe fn isDateInTomorrow_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInTomorrow: date)
    }
    unsafe fn isDateInWeekend_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInWeekend: date)
    }
    unsafe fn rangeOfWeekendStartDate_interval_containingDate_(
        &self,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfWeekendStartDate : datep interval : tip containingDate : date)
    }
    unsafe fn nextWeekendStartDate_interval_options_afterDate_(
        &self,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        options: NSCalendarOptions,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextWeekendStartDate : datep interval : tip options : options afterDate : date)
    }
    unsafe fn components_fromDateComponents_toDateComponents_options_(
        &self,
        unitFlags: NSCalendarUnit,
        startingDateComp: NSDateComponents,
        resultDateComp: NSDateComponents,
        options: NSCalendarOptions,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDateComponents : startingDateComp toDateComponents : resultDateComp options : options)
    }
    unsafe fn dateByAddingUnit_value_toDate_options_(
        &self,
        unit: NSCalendarUnit,
        value: NSInteger,
        date: NSDate,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateByAddingUnit : unit value : value toDate : date options : options)
    }
    unsafe fn enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
        &self,
        start: NSDate,
        comps: NSDateComponents,
        opts: NSCalendarOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateDatesStartingAfterDate : start matchingComponents : comps options : opts usingBlock : block)
    }
    unsafe fn nextDateAfterDate_matchingComponents_options_(
        &self,
        date: NSDate,
        comps: NSDateComponents,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingComponents : comps options : options)
    }
    unsafe fn nextDateAfterDate_matchingUnit_value_options_(
        &self,
        date: NSDate,
        unit: NSCalendarUnit,
        value: NSInteger,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingUnit : unit value : value options : options)
    }
    unsafe fn nextDateAfterDate_matchingHour_minute_second_options_(
        &self,
        date: NSDate,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingHour : hourValue minute : minuteValue second : secondValue options : options)
    }
    unsafe fn dateBySettingUnit_value_ofDate_options_(
        &self,
        unit: NSCalendarUnit,
        v: NSInteger,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateBySettingUnit : unit value : v ofDate : date options : opts)
    }
    unsafe fn dateBySettingHour_minute_second_ofDate_options_(
        &self,
        h: NSInteger,
        m: NSInteger,
        s: NSInteger,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateBySettingHour : h minute : m second : s ofDate : date options : opts)
    }
    unsafe fn date_matchesComponents_(&self, date: NSDate, components: NSDateComponents) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , date : date matchesComponents : components)
    }
    unsafe fn calendarIdentifier(&self) -> NSCalendarIdentifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendarIdentifier)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn firstWeekday(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstWeekday)
    }
    unsafe fn setFirstWeekday_(&self, firstWeekday: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFirstWeekday: firstWeekday)
    }
    unsafe fn minimumDaysInFirstWeek(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumDaysInFirstWeek)
    }
    unsafe fn setMinimumDaysInFirstWeek_(&self, minimumDaysInFirstWeek: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimumDaysInFirstWeek: minimumDaysInFirstWeek)
    }
    unsafe fn eraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eraSymbols)
    }
    unsafe fn longEraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longEraSymbols)
    }
    unsafe fn monthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, monthSymbols)
    }
    unsafe fn shortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortMonthSymbols)
    }
    unsafe fn veryShortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortMonthSymbols)
    }
    unsafe fn standaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneMonthSymbols)
    }
    unsafe fn shortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneMonthSymbols)
    }
    unsafe fn veryShortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneMonthSymbols)
    }
    unsafe fn weekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdaySymbols)
    }
    unsafe fn shortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortWeekdaySymbols)
    }
    unsafe fn veryShortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortWeekdaySymbols)
    }
    unsafe fn standaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneWeekdaySymbols)
    }
    unsafe fn shortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneWeekdaySymbols)
    }
    unsafe fn veryShortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneWeekdaySymbols)
    }
    unsafe fn quarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarterSymbols)
    }
    unsafe fn shortQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortQuarterSymbols)
    }
    unsafe fn standaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneQuarterSymbols)
    }
    unsafe fn shortStandaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneQuarterSymbols)
    }
    unsafe fn AMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, AMSymbol)
    }
    unsafe fn PMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, PMSymbol)
    }
    unsafe fn calendarWithIdentifier_(calendarIdentifierConstant: NSString) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCalendar),
            calendarWithIdentifier: calendarIdentifierConstant
        )
    }
    unsafe fn currentCalendar() -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendar), currentCalendar)
    }
    unsafe fn autoupdatingCurrentCalendar() -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendar), autoupdatingCurrentCalendar)
    }
}
extern "C" {
    pub static NSCalendarDayChangedNotification: NSNotificationName;
}
pub const NSDateComponentUndefined: _bindgen_ty_50 = 9223372036854775807;
pub const NSUndefinedDateComponent: _bindgen_ty_50 = 9223372036854775807;
pub type _bindgen_ty_50 = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDateComponents(pub id);
impl std::ops::Deref for NSDateComponents {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateComponents {}
impl NSDateComponents {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDateComponents), alloc) })
    }
}
impl PNSCopying for NSDateComponents {}
impl PNSSecureCoding for NSDateComponents {}
impl INSObject for NSDateComponents {}
impl PNSObject for NSDateComponents {}
impl From<NSDateComponents> for NSObject {
    fn from(child: NSDateComponents) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateComponents {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateComponents, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponents)) };
        if is_kind_of {
            Ok(NSDateComponents(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateComponents")
        }
    }
}
impl INSDateComponents for NSDateComponents {}
pub trait INSDateComponents: Sized + std::ops::Deref {
    unsafe fn week(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, week)
    }
    unsafe fn setWeek_(&self, v: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeek: v)
    }
    unsafe fn setValue_forComponent_(&self, value: NSInteger, unit: NSCalendarUnit)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forComponent : unit)
    }
    unsafe fn valueForComponent_(&self, unit: NSCalendarUnit) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForComponent: unit)
    }
    unsafe fn isValidDateInCalendar_(&self, calendar: NSCalendar) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValidDateInCalendar: calendar)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn era(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, era)
    }
    unsafe fn setEra_(&self, era: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEra: era)
    }
    unsafe fn year(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, year)
    }
    unsafe fn setYear_(&self, year: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setYear: year)
    }
    unsafe fn month(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, month)
    }
    unsafe fn setMonth_(&self, month: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMonth: month)
    }
    unsafe fn day(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, day)
    }
    unsafe fn setDay_(&self, day: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDay: day)
    }
    unsafe fn hour(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hour)
    }
    unsafe fn setHour_(&self, hour: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHour: hour)
    }
    unsafe fn minute(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minute)
    }
    unsafe fn setMinute_(&self, minute: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinute: minute)
    }
    unsafe fn second(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, second)
    }
    unsafe fn setSecond_(&self, second: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSecond: second)
    }
    unsafe fn nanosecond(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nanosecond)
    }
    unsafe fn setNanosecond_(&self, nanosecond: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNanosecond: nanosecond)
    }
    unsafe fn weekday(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekday)
    }
    unsafe fn setWeekday_(&self, weekday: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekday: weekday)
    }
    unsafe fn weekdayOrdinal(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdayOrdinal)
    }
    unsafe fn setWeekdayOrdinal_(&self, weekdayOrdinal: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekdayOrdinal: weekdayOrdinal)
    }
    unsafe fn quarter(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarter)
    }
    unsafe fn setQuarter_(&self, quarter: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQuarter: quarter)
    }
    unsafe fn weekOfMonth(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekOfMonth)
    }
    unsafe fn setWeekOfMonth_(&self, weekOfMonth: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekOfMonth: weekOfMonth)
    }
    unsafe fn weekOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekOfYear)
    }
    unsafe fn setWeekOfYear_(&self, weekOfYear: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekOfYear: weekOfYear)
    }
    unsafe fn yearForWeekOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, yearForWeekOfYear)
    }
    unsafe fn setYearForWeekOfYear_(&self, yearForWeekOfYear: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setYearForWeekOfYear: yearForWeekOfYear)
    }
    unsafe fn isLeapMonth(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLeapMonth)
    }
    unsafe fn setLeapMonth_(&self, leapMonth: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLeapMonth: leapMonth)
    }
    unsafe fn date(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, date)
    }
    unsafe fn isValidDate(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValidDate)
    }
}
pub const NSOpenStepUnicodeReservedBase: _bindgen_ty_51 = 62464;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCharacterSet(pub id);
impl std::ops::Deref for NSCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCharacterSet {}
impl NSCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCharacterSet), alloc) })
    }
}
impl PNSCopying for NSCharacterSet {}
impl PNSMutableCopying for NSCharacterSet {}
impl PNSSecureCoding for NSCharacterSet {}
impl INSObject for NSCharacterSet {}
impl PNSObject for NSCharacterSet {}
impl From<NSCharacterSet> for NSObject {
    fn from(child: NSCharacterSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCharacterSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCharacterSet)) };
        if is_kind_of {
            Ok(NSCharacterSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCharacterSet")
        }
    }
}
impl INSCharacterSet for NSCharacterSet {}
pub trait INSCharacterSet: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn characterIsMember_(&self, aCharacter: unichar) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, characterIsMember: aCharacter)
    }
    unsafe fn longCharacterIsMember_(&self, theLongChar: UTF32Char) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longCharacterIsMember: theLongChar)
    }
    unsafe fn isSupersetOfSet_(&self, theOtherSet: NSCharacterSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSupersetOfSet: theOtherSet)
    }
    unsafe fn hasMemberInPlane_(&self, thePlane: u8) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasMemberInPlane: thePlane)
    }
    unsafe fn bitmapRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bitmapRepresentation)
    }
    unsafe fn invertedSet(&self) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invertedSet)
    }
    unsafe fn characterSetWithRange_(aRange: NSRange) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), characterSetWithRange: aRange)
    }
    unsafe fn characterSetWithCharactersInString_(aString: NSString) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCharacterSet),
            characterSetWithCharactersInString: aString
        )
    }
    unsafe fn characterSetWithBitmapRepresentation_(data: NSData) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCharacterSet),
            characterSetWithBitmapRepresentation: data
        )
    }
    unsafe fn characterSetWithContentsOfFile_(fName: NSString) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCharacterSet),
            characterSetWithContentsOfFile: fName
        )
    }
    unsafe fn controlCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), controlCharacterSet)
    }
    unsafe fn whitespaceCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), whitespaceCharacterSet)
    }
    unsafe fn whitespaceAndNewlineCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), whitespaceAndNewlineCharacterSet)
    }
    unsafe fn decimalDigitCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), decimalDigitCharacterSet)
    }
    unsafe fn letterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), letterCharacterSet)
    }
    unsafe fn lowercaseLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), lowercaseLetterCharacterSet)
    }
    unsafe fn uppercaseLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), uppercaseLetterCharacterSet)
    }
    unsafe fn nonBaseCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), nonBaseCharacterSet)
    }
    unsafe fn alphanumericCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), alphanumericCharacterSet)
    }
    unsafe fn decomposableCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), decomposableCharacterSet)
    }
    unsafe fn illegalCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), illegalCharacterSet)
    }
    unsafe fn punctuationCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), punctuationCharacterSet)
    }
    unsafe fn capitalizedLetterCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), capitalizedLetterCharacterSet)
    }
    unsafe fn symbolCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), symbolCharacterSet)
    }
    unsafe fn newlineCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), newlineCharacterSet)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableCharacterSet(pub id);
impl std::ops::Deref for NSMutableCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableCharacterSet {}
impl NSMutableCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableCharacterSet), alloc) })
    }
}
impl PNSCopying for NSMutableCharacterSet {}
impl PNSMutableCopying for NSMutableCharacterSet {}
impl PNSSecureCoding for NSMutableCharacterSet {}
impl INSCharacterSet for NSMutableCharacterSet {}
impl From<NSMutableCharacterSet> for NSCharacterSet {
    fn from(child: NSMutableCharacterSet) -> NSCharacterSet {
        NSCharacterSet(child.0)
    }
}
impl std::convert::TryFrom<NSCharacterSet> for NSMutableCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSCharacterSet) -> Result<NSMutableCharacterSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableCharacterSet)) };
        if is_kind_of {
            Ok(NSMutableCharacterSet(parent.0))
        } else {
            Err("This NSCharacterSet cannot be downcasted to NSMutableCharacterSet")
        }
    }
}
impl INSObject for NSMutableCharacterSet {}
impl PNSObject for NSMutableCharacterSet {}
impl From<NSMutableCharacterSet> for NSObject {
    fn from(child: NSMutableCharacterSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableCharacterSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableCharacterSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableCharacterSet)) };
        if is_kind_of {
            Ok(NSMutableCharacterSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableCharacterSet")
        }
    }
}
impl INSMutableCharacterSet for NSMutableCharacterSet {}
pub trait INSMutableCharacterSet: Sized + std::ops::Deref {
    unsafe fn addCharactersInRange_(&self, aRange: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addCharactersInRange: aRange)
    }
    unsafe fn removeCharactersInRange_(&self, aRange: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCharactersInRange: aRange)
    }
    unsafe fn addCharactersInString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addCharactersInString: aString)
    }
    unsafe fn removeCharactersInString_(&self, aString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCharactersInString: aString)
    }
    unsafe fn formUnionWithCharacterSet_(&self, otherSet: NSCharacterSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formUnionWithCharacterSet: otherSet)
    }
    unsafe fn formIntersectionWithCharacterSet_(&self, otherSet: NSCharacterSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formIntersectionWithCharacterSet: otherSet)
    }
    unsafe fn invert(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invert)
    }
    unsafe fn controlCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), controlCharacterSet)
    }
    unsafe fn whitespaceCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), whitespaceCharacterSet)
    }
    unsafe fn whitespaceAndNewlineCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableCharacterSet),
            whitespaceAndNewlineCharacterSet
        )
    }
    unsafe fn decimalDigitCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), decimalDigitCharacterSet)
    }
    unsafe fn letterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), letterCharacterSet)
    }
    unsafe fn lowercaseLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), lowercaseLetterCharacterSet)
    }
    unsafe fn uppercaseLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), uppercaseLetterCharacterSet)
    }
    unsafe fn nonBaseCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), nonBaseCharacterSet)
    }
    unsafe fn alphanumericCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), alphanumericCharacterSet)
    }
    unsafe fn decomposableCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), decomposableCharacterSet)
    }
    unsafe fn illegalCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), illegalCharacterSet)
    }
    unsafe fn punctuationCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), punctuationCharacterSet)
    }
    unsafe fn capitalizedLetterCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), capitalizedLetterCharacterSet)
    }
    unsafe fn symbolCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), symbolCharacterSet)
    }
    unsafe fn newlineCharacterSet() -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), newlineCharacterSet)
    }
    unsafe fn characterSetWithRange_(aRange: NSRange) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableCharacterSet), characterSetWithRange: aRange)
    }
    unsafe fn characterSetWithCharactersInString_(aString: NSString) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableCharacterSet),
            characterSetWithCharactersInString: aString
        )
    }
    unsafe fn characterSetWithBitmapRepresentation_(data: NSData) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableCharacterSet),
            characterSetWithBitmapRepresentation: data
        )
    }
    unsafe fn characterSetWithContentsOfFile_(fName: NSString) -> NSMutableCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableCharacterSet),
            characterSetWithContentsOfFile: fName
        )
    }
}
pub const NSDecodingFailurePolicy_NSDecodingFailurePolicyRaiseException: NSDecodingFailurePolicy =
    0;
pub const NSDecodingFailurePolicy_NSDecodingFailurePolicySetErrorAndReturn:
    NSDecodingFailurePolicy = 1;
pub type NSDecodingFailurePolicy = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCoder(pub id);
impl std::ops::Deref for NSCoder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCoder {}
impl NSCoder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCoder), alloc) })
    }
}
impl INSObject for NSCoder {}
impl PNSObject for NSCoder {}
impl From<NSCoder> for NSObject {
    fn from(child: NSCoder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCoder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCoder)) };
        if is_kind_of {
            Ok(NSCoder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCoder")
        }
    }
}
impl INSCoder for NSCoder {}
pub trait INSCoder: Sized + std::ops::Deref {
    unsafe fn encodeValueOfObjCType_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeValueOfObjCType : type_ at : addr)
    }
    unsafe fn encodeDataObject_(&self, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeDataObject: data)
    }
    unsafe fn decodeDataObject(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeDataObject)
    }
    unsafe fn decodeValueOfObjCType_at_size_(
        &self,
        type_: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        size: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeValueOfObjCType : type_ at : data size : size)
    }
    unsafe fn versionForClassName_(&self, className: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, versionForClassName: className)
    }
}
impl NSCoder_NSExtendedCoder for NSCoder {}
pub trait NSCoder_NSExtendedCoder: Sized + std::ops::Deref {
    unsafe fn encodeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeObject: object)
    }
    unsafe fn encodeRootObject_(&self, rootObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeRootObject: rootObject)
    }
    unsafe fn encodeBycopyObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeBycopyObject: anObject)
    }
    unsafe fn encodeByrefObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeByrefObject: anObject)
    }
    unsafe fn encodeConditionalObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeConditionalObject: object)
    }
    unsafe fn encodeValuesOfObjCTypes_(&self, types: *const ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeValuesOfObjCTypes: types)
    }
    unsafe fn encodeArrayOfObjCType_count_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        count: NSUInteger,
        array: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeArrayOfObjCType : type_ count : count at : array)
    }
    unsafe fn encodeBytes_length_(
        &self,
        byteaddr: *const ::std::os::raw::c_void,
        length: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBytes : byteaddr length : length)
    }
    unsafe fn decodeObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeObject)
    }
    unsafe fn decodeTopLevelObjectAndReturnError_(&self, error: *mut NSError) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeTopLevelObjectAndReturnError: error)
    }
    unsafe fn decodeValuesOfObjCTypes_(&self, types: *const ::std::os::raw::c_char)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeValuesOfObjCTypes: types)
    }
    unsafe fn decodeArrayOfObjCType_count_at_(
        &self,
        itemType: *const ::std::os::raw::c_char,
        count: NSUInteger,
        array: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeArrayOfObjCType : itemType count : count at : array)
    }
    unsafe fn decodeBytesWithReturnedLength_(
        &self,
        lengthp: *mut NSUInteger,
    ) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeBytesWithReturnedLength: lengthp)
    }
    unsafe fn setObjectZone_(&self, zone: *mut NSZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setObjectZone: zone)
    }
    unsafe fn objectZone(&self) -> *mut NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectZone)
    }
    unsafe fn encodeObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeObject : object forKey : key)
    }
    unsafe fn encodeConditionalObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeConditionalObject : object forKey : key)
    }
    unsafe fn encodeBool_forKey_(&self, value: BOOL, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBool : value forKey : key)
    }
    unsafe fn encodeInt_forKey_(&self, value: ::std::os::raw::c_int, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt : value forKey : key)
    }
    unsafe fn encodeInt32_forKey_(&self, value: i32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt32 : value forKey : key)
    }
    unsafe fn encodeInt64_forKey_(&self, value: i64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt64 : value forKey : key)
    }
    unsafe fn encodeFloat_forKey_(&self, value: f32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeFloat : value forKey : key)
    }
    unsafe fn encodeDouble_forKey_(&self, value: f64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeDouble : value forKey : key)
    }
    unsafe fn encodeBytes_length_forKey_(&self, bytes: *const u8, length: NSUInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBytes : bytes length : length forKey : key)
    }
    unsafe fn containsValueForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsValueForKey: key)
    }
    unsafe fn decodeObjectForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeObjectForKey: key)
    }
    unsafe fn decodeTopLevelObjectForKey_error_(&self, key: NSString, error: *mut NSError) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeTopLevelObjectForKey : key error : error)
    }
    unsafe fn decodeBoolForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeBoolForKey: key)
    }
    unsafe fn decodeIntForKey_(&self, key: NSString) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeIntForKey: key)
    }
    unsafe fn decodeInt32ForKey_(&self, key: NSString) -> i32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeInt32ForKey: key)
    }
    unsafe fn decodeInt64ForKey_(&self, key: NSString) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeInt64ForKey: key)
    }
    unsafe fn decodeFloatForKey_(&self, key: NSString) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeFloatForKey: key)
    }
    unsafe fn decodeDoubleForKey_(&self, key: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeDoubleForKey: key)
    }
    unsafe fn decodeBytesForKey_returnedLength_(
        &self,
        key: NSString,
        lengthp: *mut NSUInteger,
    ) -> *const u8
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeBytesForKey : key returnedLength : lengthp)
    }
    unsafe fn encodeInteger_forKey_(&self, value: NSInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInteger : value forKey : key)
    }
    unsafe fn decodeIntegerForKey_(&self, key: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeIntegerForKey: key)
    }
    unsafe fn decodeObjectOfClass_forKey_(&self, aClass: Class, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeObjectOfClass : aClass forKey : key)
    }
    unsafe fn decodeTopLevelObjectOfClass_forKey_error_(
        &self,
        aClass: Class,
        key: NSString,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeTopLevelObjectOfClass : aClass forKey : key error : error)
    }
    unsafe fn decodeArrayOfObjectsOfClass_forKey_(&self, cls: Class, key: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeArrayOfObjectsOfClass : cls forKey : key)
    }
    unsafe fn decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
        &self,
        keyCls: Class,
        objectCls: Class,
        key: NSString,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeDictionaryWithKeysOfClass : keyCls objectsOfClass : objectCls forKey : key)
    }
    unsafe fn decodeObjectOfClasses_forKey_(&self, classes: NSSet, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeObjectOfClasses : classes forKey : key)
    }
    unsafe fn decodeTopLevelObjectOfClasses_forKey_error_(
        &self,
        classes: NSSet,
        key: NSString,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeTopLevelObjectOfClasses : classes forKey : key error : error)
    }
    unsafe fn decodeArrayOfObjectsOfClasses_forKey_(&self, classes: NSSet, key: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeArrayOfObjectsOfClasses : classes forKey : key)
    }
    unsafe fn decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
        &self,
        keyClasses: NSSet,
        objectClasses: NSSet,
        key: NSString,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeDictionaryWithKeysOfClasses : keyClasses objectsOfClasses : objectClasses forKey : key)
    }
    unsafe fn decodePropertyListForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodePropertyListForKey: key)
    }
    unsafe fn failWithError_(&self, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, failWithError: error)
    }
    unsafe fn systemVersion(&self) -> ::std::os::raw::c_uint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, systemVersion)
    }
    unsafe fn allowsKeyedCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsKeyedCoding)
    }
    unsafe fn requiresSecureCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresSecureCoding)
    }
    unsafe fn allowedClasses(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowedClasses)
    }
    unsafe fn decodingFailurePolicy(&self) -> NSDecodingFailurePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodingFailurePolicy)
    }
    unsafe fn error(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, error)
    }
}
impl NSCoder_NSDeprecated for NSCoder {}
pub trait NSCoder_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn decodeValueOfObjCType_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeValueOfObjCType : type_ at : data)
    }
}
pub const NSDataReadingOptions_NSDataReadingMappedIfSafe: NSDataReadingOptions = 1;
pub const NSDataReadingOptions_NSDataReadingUncached: NSDataReadingOptions = 2;
pub const NSDataReadingOptions_NSDataReadingMappedAlways: NSDataReadingOptions = 8;
pub const NSDataReadingOptions_NSDataReadingMapped: NSDataReadingOptions = 1;
pub const NSDataReadingOptions_NSMappedRead: NSDataReadingOptions = 1;
pub const NSDataReadingOptions_NSUncachedRead: NSDataReadingOptions = 2;
pub type NSDataReadingOptions = NSUInteger;
pub const NSDataWritingOptions_NSDataWritingAtomic: NSDataWritingOptions = 1;
pub const NSDataWritingOptions_NSDataWritingWithoutOverwriting: NSDataWritingOptions = 2;
pub const NSDataWritingOptions_NSDataWritingFileProtectionNone: NSDataWritingOptions = 268435456;
pub const NSDataWritingOptions_NSDataWritingFileProtectionComplete: NSDataWritingOptions =
    536870912;
pub const NSDataWritingOptions_NSDataWritingFileProtectionCompleteUnlessOpen: NSDataWritingOptions =
    805306368;
pub const NSDataWritingOptions_NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication:
    NSDataWritingOptions = 1073741824;
pub const NSDataWritingOptions_NSDataWritingFileProtectionMask: NSDataWritingOptions = 4026531840;
pub const NSDataWritingOptions_NSAtomicWrite: NSDataWritingOptions = 1;
pub type NSDataWritingOptions = NSUInteger;
pub const NSDataSearchOptions_NSDataSearchBackwards: NSDataSearchOptions = 1;
pub const NSDataSearchOptions_NSDataSearchAnchored: NSDataSearchOptions = 2;
pub type NSDataSearchOptions = NSUInteger;
pub const NSDataBase64EncodingOptions_NSDataBase64Encoding64CharacterLineLength:
    NSDataBase64EncodingOptions = 1;
pub const NSDataBase64EncodingOptions_NSDataBase64Encoding76CharacterLineLength:
    NSDataBase64EncodingOptions = 2;
pub const NSDataBase64EncodingOptions_NSDataBase64EncodingEndLineWithCarriageReturn:
    NSDataBase64EncodingOptions = 16;
pub const NSDataBase64EncodingOptions_NSDataBase64EncodingEndLineWithLineFeed:
    NSDataBase64EncodingOptions = 32;
pub type NSDataBase64EncodingOptions = NSUInteger;
pub const NSDataBase64DecodingOptions_NSDataBase64DecodingIgnoreUnknownCharacters:
    NSDataBase64DecodingOptions = 1;
pub type NSDataBase64DecodingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSData), alloc) })
    }
}
impl PNSCopying for NSData {}
impl PNSMutableCopying for NSData {}
impl PNSSecureCoding for NSData {}
impl INSObject for NSData {}
impl PNSObject for NSData {}
impl From<NSData> for NSObject {
    fn from(child: NSData) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSData {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSData)) };
        if is_kind_of {
            Ok(NSData(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSData")
        }
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
    unsafe fn bytes(&self) -> *const ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bytes)
    }
}
impl NSData_NSExtendedData for NSData {}
pub trait NSData_NSExtendedData: Sized + std::ops::Deref {
    unsafe fn getBytes_length_(&self, buffer: *mut ::std::os::raw::c_void, length: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getBytes : buffer length : length)
    }
    unsafe fn getBytes_range_(&self, buffer: *mut ::std::os::raw::c_void, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getBytes : buffer range : range)
    }
    unsafe fn isEqualToData_(&self, other: NSData) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToData: other)
    }
    unsafe fn subdataWithRange_(&self, range: NSRange) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subdataWithRange: range)
    }
    unsafe fn writeToFile_atomically_(&self, path: NSString, useAuxiliaryFile: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path atomically : useAuxiliaryFile)
    }
    unsafe fn writeToURL_atomically_(&self, url: NSURL, atomically: BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url atomically : atomically)
    }
    unsafe fn writeToFile_options_error_(
        &self,
        path: NSString,
        writeOptionsMask: NSDataWritingOptions,
        errorPtr: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToFile : path options : writeOptionsMask error : errorPtr)
    }
    unsafe fn writeToURL_options_error_(
        &self,
        url: NSURL,
        writeOptionsMask: NSDataWritingOptions,
        errorPtr: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url options : writeOptionsMask error : errorPtr)
    }
    unsafe fn rangeOfData_options_range_(
        &self,
        dataToFind: NSData,
        mask: NSDataSearchOptions,
        searchRange: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfData : dataToFind options : mask range : searchRange)
    }
    unsafe fn enumerateByteRangesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateByteRangesUsingBlock: block)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
}
impl NSData_NSDataCreation for NSData {}
pub trait NSData_NSDataCreation: Sized + std::ops::Deref {
    unsafe fn initWithBytes_length_(
        &self,
        bytes: *const ::std::os::raw::c_void,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytes : bytes length : length)
    }
    unsafe fn initWithBytesNoCopy_length_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytesNoCopy : bytes length : length)
    }
    unsafe fn initWithBytesNoCopy_length_freeWhenDone_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        length: NSUInteger,
        b: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytesNoCopy : bytes length : length freeWhenDone : b)
    }
    unsafe fn initWithBytesNoCopy_length_deallocator_(
        &self,
        bytes: *mut ::std::os::raw::c_void,
        length: NSUInteger,
        deallocator: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytesNoCopy : bytes length : length deallocator : deallocator)
    }
    unsafe fn initWithContentsOfFile_options_error_(
        &self,
        path: NSString,
        readOptionsMask: NSDataReadingOptions,
        errorPtr: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfFile : path options : readOptionsMask error : errorPtr)
    }
    unsafe fn initWithContentsOfURL_options_error_(
        &self,
        url: NSURL,
        readOptionsMask: NSDataReadingOptions,
        errorPtr: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfURL : url options : readOptionsMask error : errorPtr)
    }
    unsafe fn initWithContentsOfFile_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfFile: path)
    }
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn initWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithData: data)
    }
    unsafe fn data() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSData), data)
    }
    unsafe fn dataWithBytes_length_(
        bytes: *const ::std::os::raw::c_void,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSData) , dataWithBytes : bytes length : length)
    }
    unsafe fn dataWithBytesNoCopy_length_(
        bytes: *mut ::std::os::raw::c_void,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSData) , dataWithBytesNoCopy : bytes length : length)
    }
    unsafe fn dataWithBytesNoCopy_length_freeWhenDone_(
        bytes: *mut ::std::os::raw::c_void,
        length: NSUInteger,
        b: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSData) , dataWithBytesNoCopy : bytes length : length freeWhenDone : b)
    }
    unsafe fn dataWithContentsOfFile_options_error_(
        path: NSString,
        readOptionsMask: NSDataReadingOptions,
        errorPtr: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSData) , dataWithContentsOfFile : path options : readOptionsMask error : errorPtr)
    }
    unsafe fn dataWithContentsOfURL_options_error_(
        url: NSURL,
        readOptionsMask: NSDataReadingOptions,
        errorPtr: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSData) , dataWithContentsOfURL : url options : readOptionsMask error : errorPtr)
    }
    unsafe fn dataWithContentsOfFile_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSData), dataWithContentsOfFile: path)
    }
    unsafe fn dataWithContentsOfURL_(url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSData), dataWithContentsOfURL: url)
    }
    unsafe fn dataWithData_(data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSData), dataWithData: data)
    }
}
impl NSData_NSDataBase64Encoding for NSData {}
pub trait NSData_NSDataBase64Encoding: Sized + std::ops::Deref {
    unsafe fn initWithBase64EncodedString_options_(
        &self,
        base64String: NSString,
        options: NSDataBase64DecodingOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBase64EncodedString : base64String options : options)
    }
    unsafe fn base64EncodedStringWithOptions_(
        &self,
        options: NSDataBase64EncodingOptions,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, base64EncodedStringWithOptions: options)
    }
    unsafe fn initWithBase64EncodedData_options_(
        &self,
        base64Data: NSData,
        options: NSDataBase64DecodingOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBase64EncodedData : base64Data options : options)
    }
    unsafe fn base64EncodedDataWithOptions_(&self, options: NSDataBase64EncodingOptions) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, base64EncodedDataWithOptions: options)
    }
}
pub const NSDataCompressionAlgorithm_NSDataCompressionAlgorithmLZFSE: NSDataCompressionAlgorithm =
    0;
pub const NSDataCompressionAlgorithm_NSDataCompressionAlgorithmLZ4: NSDataCompressionAlgorithm = 1;
pub const NSDataCompressionAlgorithm_NSDataCompressionAlgorithmLZMA: NSDataCompressionAlgorithm = 2;
pub const NSDataCompressionAlgorithm_NSDataCompressionAlgorithmZlib: NSDataCompressionAlgorithm = 3;
pub type NSDataCompressionAlgorithm = NSInteger;
impl NSData_NSDataCompression for NSData {}
pub trait NSData_NSDataCompression: Sized + std::ops::Deref {
    unsafe fn decompressedDataUsingAlgorithm_error_(
        &self,
        algorithm: NSDataCompressionAlgorithm,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decompressedDataUsingAlgorithm : algorithm error : error)
    }
    unsafe fn compressedDataUsingAlgorithm_error_(
        &self,
        algorithm: NSDataCompressionAlgorithm,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compressedDataUsingAlgorithm : algorithm error : error)
    }
}
impl NSData_NSDeprecated for NSData {}
pub trait NSData_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn getBytes_(&self, buffer: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getBytes: buffer)
    }
    unsafe fn initWithContentsOfMappedFile_(&self, path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfMappedFile: path)
    }
    unsafe fn initWithBase64Encoding_(&self, base64String: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithBase64Encoding: base64String)
    }
    unsafe fn base64Encoding(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, base64Encoding)
    }
    unsafe fn dataWithContentsOfMappedFile_(path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSData), dataWithContentsOfMappedFile: path)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableData(pub id);
impl std::ops::Deref for NSMutableData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableData {}
impl NSMutableData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableData), alloc) })
    }
}
impl INSData for NSMutableData {}
impl PNSCopying for NSMutableData {}
impl PNSMutableCopying for NSMutableData {}
impl PNSSecureCoding for NSMutableData {}
impl From<NSMutableData> for NSData {
    fn from(child: NSMutableData) -> NSData {
        NSData(child.0)
    }
}
impl std::convert::TryFrom<NSData> for NSMutableData {
    type Error = &'static str;
    fn try_from(parent: NSData) -> Result<NSMutableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableData)) };
        if is_kind_of {
            Ok(NSMutableData(parent.0))
        } else {
            Err("This NSData cannot be downcasted to NSMutableData")
        }
    }
}
impl INSObject for NSMutableData {}
impl PNSObject for NSMutableData {}
impl From<NSMutableData> for NSObject {
    fn from(child: NSMutableData) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableData {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableData)) };
        if is_kind_of {
            Ok(NSMutableData(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableData")
        }
    }
}
impl INSMutableData for NSMutableData {}
pub trait INSMutableData: Sized + std::ops::Deref {
    unsafe fn mutableBytes(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableBytes)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
    unsafe fn setLength_(&self, length: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLength: length)
    }
}
impl NSMutableData_NSExtendedMutableData for NSMutableData {}
pub trait NSMutableData_NSExtendedMutableData: Sized + std::ops::Deref {
    unsafe fn appendBytes_length_(&self, bytes: *const ::std::os::raw::c_void, length: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , appendBytes : bytes length : length)
    }
    unsafe fn appendData_(&self, other: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appendData: other)
    }
    unsafe fn increaseLengthBy_(&self, extraLength: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, increaseLengthBy: extraLength)
    }
    unsafe fn replaceBytesInRange_withBytes_(
        &self,
        range: NSRange,
        bytes: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceBytesInRange : range withBytes : bytes)
    }
    unsafe fn resetBytesInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resetBytesInRange: range)
    }
    unsafe fn setData_(&self, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setData: data)
    }
    unsafe fn replaceBytesInRange_withBytes_length_(
        &self,
        range: NSRange,
        replacementBytes: *const ::std::os::raw::c_void,
        replacementLength: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceBytesInRange : range withBytes : replacementBytes length : replacementLength)
    }
}
impl NSMutableData_NSMutableDataCreation for NSMutableData {}
pub trait NSMutableData_NSMutableDataCreation: Sized + std::ops::Deref {
    unsafe fn initWithCapacity_(&self, capacity: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: capacity)
    }
    unsafe fn initWithLength_(&self, length: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLength: length)
    }
    unsafe fn dataWithCapacity_(aNumItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableData), dataWithCapacity: aNumItems)
    }
    unsafe fn dataWithLength_(length: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMutableData), dataWithLength: length)
    }
}
impl NSMutableData_NSMutableDataCompression for NSMutableData {}
pub trait NSMutableData_NSMutableDataCompression: Sized + std::ops::Deref {
    unsafe fn decompressUsingAlgorithm_error_(
        &self,
        algorithm: NSDataCompressionAlgorithm,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decompressUsingAlgorithm : algorithm error : error)
    }
    unsafe fn compressUsingAlgorithm_error_(
        &self,
        algorithm: NSDataCompressionAlgorithm,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compressUsingAlgorithm : algorithm error : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPurgeableData(pub id);
impl std::ops::Deref for NSPurgeableData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPurgeableData {}
impl NSPurgeableData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPurgeableData), alloc) })
    }
}
impl PNSDiscardableContent for NSPurgeableData {}
impl INSMutableData for NSPurgeableData {}
impl From<NSPurgeableData> for NSMutableData {
    fn from(child: NSPurgeableData) -> NSMutableData {
        NSMutableData(child.0)
    }
}
impl std::convert::TryFrom<NSMutableData> for NSPurgeableData {
    type Error = &'static str;
    fn try_from(parent: NSMutableData) -> Result<NSPurgeableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPurgeableData)) };
        if is_kind_of {
            Ok(NSPurgeableData(parent.0))
        } else {
            Err("This NSMutableData cannot be downcasted to NSPurgeableData")
        }
    }
}
impl INSData for NSPurgeableData {}
impl PNSCopying for NSPurgeableData {}
impl PNSMutableCopying for NSPurgeableData {}
impl PNSSecureCoding for NSPurgeableData {}
impl From<NSPurgeableData> for NSData {
    fn from(child: NSPurgeableData) -> NSData {
        NSData(child.0)
    }
}
impl std::convert::TryFrom<NSData> for NSPurgeableData {
    type Error = &'static str;
    fn try_from(parent: NSData) -> Result<NSPurgeableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPurgeableData)) };
        if is_kind_of {
            Ok(NSPurgeableData(parent.0))
        } else {
            Err("This NSData cannot be downcasted to NSPurgeableData")
        }
    }
}
impl INSObject for NSPurgeableData {}
impl PNSObject for NSPurgeableData {}
impl From<NSPurgeableData> for NSObject {
    fn from(child: NSPurgeableData) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPurgeableData {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPurgeableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPurgeableData)) };
        if is_kind_of {
            Ok(NSPurgeableData(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPurgeableData")
        }
    }
}
impl INSPurgeableData for NSPurgeableData {}
pub trait INSPurgeableData: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDateInterval(pub id);
impl std::ops::Deref for NSDateInterval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateInterval {}
impl NSDateInterval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDateInterval), alloc) })
    }
}
impl PNSCopying for NSDateInterval {}
impl PNSSecureCoding for NSDateInterval {}
impl INSObject for NSDateInterval {}
impl PNSObject for NSDateInterval {}
impl From<NSDateInterval> for NSObject {
    fn from(child: NSDateInterval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateInterval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateInterval, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateInterval)) };
        if is_kind_of {
            Ok(NSDateInterval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateInterval")
        }
    }
}
impl INSDateInterval for NSDateInterval {}
pub trait INSDateInterval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn initWithStartDate_duration_(
        &self,
        startDate: NSDate,
        duration: NSTimeInterval,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithStartDate : startDate duration : duration)
    }
    unsafe fn initWithStartDate_endDate_(&self, startDate: NSDate, endDate: NSDate) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithStartDate : startDate endDate : endDate)
    }
    unsafe fn compare_(&self, dateInterval: NSDateInterval) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: dateInterval)
    }
    unsafe fn isEqualToDateInterval_(&self, dateInterval: NSDateInterval) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToDateInterval: dateInterval)
    }
    unsafe fn intersectsDateInterval_(&self, dateInterval: NSDateInterval) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsDateInterval: dateInterval)
    }
    unsafe fn intersectionWithDateInterval_(&self, dateInterval: NSDateInterval) -> NSDateInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectionWithDateInterval: dateInterval)
    }
    unsafe fn containsDate_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsDate: date)
    }
    unsafe fn startDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startDate)
    }
    unsafe fn endDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endDate)
    }
    unsafe fn duration(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, duration)
    }
}
pub type NSAttributedStringKey = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedString), alloc) })
    }
}
impl PNSCopying for NSAttributedString {}
impl PNSMutableCopying for NSAttributedString {}
impl PNSSecureCoding for NSAttributedString {}
impl INSObject for NSAttributedString {}
impl PNSObject for NSAttributedString {}
impl From<NSAttributedString> for NSObject {
    fn from(child: NSAttributedString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAttributedString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAttributedString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSAttributedString)) };
        if is_kind_of {
            Ok(NSAttributedString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAttributedString")
        }
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {
    unsafe fn attributesAtIndex_effectiveRange_(
        &self,
        location: NSUInteger,
        range: NSRangePointer,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesAtIndex : location effectiveRange : range)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
}
impl NSAttributedString_NSExtendedAttributedString for NSAttributedString {}
pub trait NSAttributedString_NSExtendedAttributedString: Sized + std::ops::Deref {
    unsafe fn attribute_atIndex_effectiveRange_(
        &self,
        attrName: NSString,
        location: NSUInteger,
        range: NSRangePointer,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attribute : attrName atIndex : location effectiveRange : range)
    }
    unsafe fn attributedSubstringFromRange_(&self, range: NSRange) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributedSubstringFromRange: range)
    }
    unsafe fn attributesAtIndex_longestEffectiveRange_inRange_(
        &self,
        location: NSUInteger,
        range: NSRangePointer,
        rangeLimit: NSRange,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesAtIndex : location longestEffectiveRange : range inRange : rangeLimit)
    }
    unsafe fn attribute_atIndex_longestEffectiveRange_inRange_(
        &self,
        attrName: NSString,
        location: NSUInteger,
        range: NSRangePointer,
        rangeLimit: NSRange,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attribute : attrName atIndex : location longestEffectiveRange : range inRange : rangeLimit)
    }
    unsafe fn isEqualToAttributedString_(&self, other: NSAttributedString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToAttributedString: other)
    }
    unsafe fn initWithString_(&self, str_: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: str_)
    }
    unsafe fn initWithString_attributes_(&self, str_: NSString, attrs: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : str_ attributes : attrs)
    }
    unsafe fn initWithAttributedString_(&self, attrStr: NSAttributedString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithAttributedString: attrStr)
    }
    unsafe fn enumerateAttributesInRange_options_usingBlock_(
        &self,
        enumerationRange: NSRange,
        opts: NSAttributedStringEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateAttributesInRange : enumerationRange options : opts usingBlock : block)
    }
    unsafe fn enumerateAttribute_inRange_options_usingBlock_(
        &self,
        attrName: NSString,
        enumerationRange: NSRange,
        opts: NSAttributedStringEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateAttribute : attrName inRange : enumerationRange options : opts usingBlock : block)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
}
pub const NSAttributedStringEnumerationOptions_NSAttributedStringEnumerationReverse:
    NSAttributedStringEnumerationOptions = 2;
pub const NSAttributedStringEnumerationOptions_NSAttributedStringEnumerationLongestEffectiveRangeNotRequired : NSAttributedStringEnumerationOptions = 1048576 ;
pub type NSAttributedStringEnumerationOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableAttributedString(pub id);
impl std::ops::Deref for NSMutableAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableAttributedString {}
impl NSMutableAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableAttributedString), alloc) })
    }
}
impl INSAttributedString for NSMutableAttributedString {}
impl PNSCopying for NSMutableAttributedString {}
impl PNSMutableCopying for NSMutableAttributedString {}
impl PNSSecureCoding for NSMutableAttributedString {}
impl From<NSMutableAttributedString> for NSAttributedString {
    fn from(child: NSMutableAttributedString) -> NSAttributedString {
        NSAttributedString(child.0)
    }
}
impl std::convert::TryFrom<NSAttributedString> for NSMutableAttributedString {
    type Error = &'static str;
    fn try_from(parent: NSAttributedString) -> Result<NSMutableAttributedString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableAttributedString)) };
        if is_kind_of {
            Ok(NSMutableAttributedString(parent.0))
        } else {
            Err("This NSAttributedString cannot be downcasted to NSMutableAttributedString")
        }
    }
}
impl INSObject for NSMutableAttributedString {}
impl PNSObject for NSMutableAttributedString {}
impl From<NSMutableAttributedString> for NSObject {
    fn from(child: NSMutableAttributedString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableAttributedString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableAttributedString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableAttributedString)) };
        if is_kind_of {
            Ok(NSMutableAttributedString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableAttributedString")
        }
    }
}
impl INSMutableAttributedString for NSMutableAttributedString {}
pub trait INSMutableAttributedString: Sized + std::ops::Deref {
    unsafe fn replaceCharactersInRange_withString_(&self, range: NSRange, str_: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceCharactersInRange : range withString : str_)
    }
    unsafe fn setAttributes_range_(&self, attrs: NSDictionary, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setAttributes : attrs range : range)
    }
}
impl NSMutableAttributedString_NSExtendedMutableAttributedString for NSMutableAttributedString {}
pub trait NSMutableAttributedString_NSExtendedMutableAttributedString:
    Sized + std::ops::Deref
{
    unsafe fn addAttribute_value_range_(&self, name: NSString, value: id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addAttribute : name value : value range : range)
    }
    unsafe fn addAttributes_range_(&self, attrs: NSDictionary, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addAttributes : attrs range : range)
    }
    unsafe fn removeAttribute_range_(&self, name: NSString, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeAttribute : name range : range)
    }
    unsafe fn replaceCharactersInRange_withAttributedString_(
        &self,
        range: NSRange,
        attrString: NSAttributedString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceCharactersInRange : range withAttributedString : attrString)
    }
    unsafe fn insertAttributedString_atIndex_(
        &self,
        attrString: NSAttributedString,
        loc: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertAttributedString : attrString atIndex : loc)
    }
    unsafe fn appendAttributedString_(&self, attrString: NSAttributedString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appendAttributedString: attrString)
    }
    unsafe fn deleteCharactersInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deleteCharactersInRange: range)
    }
    unsafe fn setAttributedString_(&self, attrString: NSAttributedString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAttributedString: attrString)
    }
    unsafe fn beginEditing(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, beginEditing)
    }
    unsafe fn endEditing(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endEditing)
    }
    unsafe fn mutableString(&self) -> NSMutableString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableString)
    }
}
pub const NSInlinePresentationIntent_NSInlinePresentationIntentEmphasized:
    NSInlinePresentationIntent = 1;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentStronglyEmphasized:
    NSInlinePresentationIntent = 2;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentCode: NSInlinePresentationIntent = 4;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentStrikethrough:
    NSInlinePresentationIntent = 32;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentSoftBreak:
    NSInlinePresentationIntent = 64;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentLineBreak:
    NSInlinePresentationIntent = 128;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentInlineHTML:
    NSInlinePresentationIntent = 256;
pub const NSInlinePresentationIntent_NSInlinePresentationIntentBlockHTML:
    NSInlinePresentationIntent = 512;
pub type NSInlinePresentationIntent = NSUInteger;
extern "C" {
    pub static NSInlinePresentationIntentAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSAlternateDescriptionAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSImageURLAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSLanguageIdentifierAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSMarkdownSourcePositionAttributeName: NSAttributedStringKey;
}
pub const NSAttributedStringMarkdownParsingFailurePolicy_NSAttributedStringMarkdownParsingFailureReturnError : NSAttributedStringMarkdownParsingFailurePolicy = 0 ;
pub const NSAttributedStringMarkdownParsingFailurePolicy_NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible : NSAttributedStringMarkdownParsingFailurePolicy = 1 ;
pub type NSAttributedStringMarkdownParsingFailurePolicy = NSInteger;
pub const NSAttributedStringMarkdownInterpretedSyntax_NSAttributedStringMarkdownInterpretedSyntaxFull : NSAttributedStringMarkdownInterpretedSyntax = 0 ;
pub const NSAttributedStringMarkdownInterpretedSyntax_NSAttributedStringMarkdownInterpretedSyntaxInlineOnly : NSAttributedStringMarkdownInterpretedSyntax = 1 ;
pub const NSAttributedStringMarkdownInterpretedSyntax_NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace : NSAttributedStringMarkdownInterpretedSyntax = 2 ;
pub type NSAttributedStringMarkdownInterpretedSyntax = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedStringMarkdownSourcePosition(pub id);
impl std::ops::Deref for NSAttributedStringMarkdownSourcePosition {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedStringMarkdownSourcePosition {}
impl NSAttributedStringMarkdownSourcePosition {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedStringMarkdownSourcePosition), alloc) })
    }
}
impl PNSCopying for NSAttributedStringMarkdownSourcePosition {}
impl PNSSecureCoding for NSAttributedStringMarkdownSourcePosition {}
impl INSObject for NSAttributedStringMarkdownSourcePosition {}
impl PNSObject for NSAttributedStringMarkdownSourcePosition {}
impl From<NSAttributedStringMarkdownSourcePosition> for NSObject {
    fn from(child: NSAttributedStringMarkdownSourcePosition) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAttributedStringMarkdownSourcePosition {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAttributedStringMarkdownSourcePosition, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSAttributedStringMarkdownSourcePosition)
            )
        };
        if is_kind_of {
            Ok(NSAttributedStringMarkdownSourcePosition(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAttributedStringMarkdownSourcePosition")
        }
    }
}
impl INSAttributedStringMarkdownSourcePosition for NSAttributedStringMarkdownSourcePosition {}
pub trait INSAttributedStringMarkdownSourcePosition: Sized + std::ops::Deref {
    unsafe fn initWithStartLine_startColumn_endLine_endColumn_(
        &self,
        startLine: NSInteger,
        startColumn: NSInteger,
        endLine: NSInteger,
        endColumn: NSInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithStartLine : startLine startColumn : startColumn endLine : endLine endColumn : endColumn)
    }
    unsafe fn rangeInString_(&self, string: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeInString: string)
    }
    unsafe fn startLine(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startLine)
    }
    unsafe fn startColumn(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startColumn)
    }
    unsafe fn endLine(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endLine)
    }
    unsafe fn endColumn(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endColumn)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedStringMarkdownParsingOptions(pub id);
impl std::ops::Deref for NSAttributedStringMarkdownParsingOptions {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedStringMarkdownParsingOptions {}
impl NSAttributedStringMarkdownParsingOptions {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedStringMarkdownParsingOptions), alloc) })
    }
}
impl PNSCopying for NSAttributedStringMarkdownParsingOptions {}
impl INSObject for NSAttributedStringMarkdownParsingOptions {}
impl PNSObject for NSAttributedStringMarkdownParsingOptions {}
impl From<NSAttributedStringMarkdownParsingOptions> for NSObject {
    fn from(child: NSAttributedStringMarkdownParsingOptions) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAttributedStringMarkdownParsingOptions {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAttributedStringMarkdownParsingOptions, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSAttributedStringMarkdownParsingOptions)
            )
        };
        if is_kind_of {
            Ok(NSAttributedStringMarkdownParsingOptions(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAttributedStringMarkdownParsingOptions")
        }
    }
}
impl INSAttributedStringMarkdownParsingOptions for NSAttributedStringMarkdownParsingOptions {}
pub trait INSAttributedStringMarkdownParsingOptions: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn allowsExtendedAttributes(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsExtendedAttributes)
    }
    unsafe fn setAllowsExtendedAttributes_(&self, allowsExtendedAttributes: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsExtendedAttributes: allowsExtendedAttributes)
    }
    unsafe fn interpretedSyntax(&self) -> NSAttributedStringMarkdownInterpretedSyntax
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, interpretedSyntax)
    }
    unsafe fn setInterpretedSyntax_(
        &self,
        interpretedSyntax: NSAttributedStringMarkdownInterpretedSyntax,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setInterpretedSyntax: interpretedSyntax)
    }
    unsafe fn failurePolicy(&self) -> NSAttributedStringMarkdownParsingFailurePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, failurePolicy)
    }
    unsafe fn setFailurePolicy_(
        &self,
        failurePolicy: NSAttributedStringMarkdownParsingFailurePolicy,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFailurePolicy: failurePolicy)
    }
    unsafe fn languageCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, languageCode)
    }
    unsafe fn setLanguageCode_(&self, languageCode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLanguageCode: languageCode)
    }
    unsafe fn appliesSourcePositionAttributes(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appliesSourcePositionAttributes)
    }
    unsafe fn setAppliesSourcePositionAttributes_(&self, appliesSourcePositionAttributes: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAppliesSourcePositionAttributes: appliesSourcePositionAttributes
        )
    }
}
impl NSAttributedString_NSAttributedStringCreateFromMarkdown for NSAttributedString {}
pub trait NSAttributedString_NSAttributedStringCreateFromMarkdown: Sized + std::ops::Deref {
    unsafe fn initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
        &self,
        markdownFile: NSURL,
        options: NSAttributedStringMarkdownParsingOptions,
        baseURL: NSURL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContentsOfMarkdownFileAtURL : markdownFile options : options baseURL : baseURL error : error)
    }
    unsafe fn initWithMarkdown_options_baseURL_error_(
        &self,
        markdown: NSData,
        options: NSAttributedStringMarkdownParsingOptions,
        baseURL: NSURL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMarkdown : markdown options : options baseURL : baseURL error : error)
    }
    unsafe fn initWithMarkdownString_options_baseURL_error_(
        &self,
        markdownString: NSString,
        options: NSAttributedStringMarkdownParsingOptions,
        baseURL: NSURL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMarkdownString : markdownString options : options baseURL : baseURL error : error)
    }
}
pub const NSAttributedStringFormattingOptions_NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging : NSAttributedStringFormattingOptions = 1 ;
pub const NSAttributedStringFormattingOptions_NSAttributedStringFormattingApplyReplacementIndexAttribute : NSAttributedStringFormattingOptions = 2 ;
pub type NSAttributedStringFormattingOptions = NSUInteger;
impl NSAttributedString_NSAttributedStringFormatting for NSAttributedString {}
pub trait NSAttributedString_NSAttributedStringFormatting: Sized + std::ops::Deref {
    unsafe fn initWithFormat_options_locale_(
        &self,
        format: NSAttributedString,
        options: NSAttributedStringFormattingOptions,
        locale: NSLocale,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format options : options locale : locale)
    }
    unsafe fn initWithFormat_options_locale_arguments_(
        &self,
        format: NSAttributedString,
        options: NSAttributedStringFormattingOptions,
        locale: NSLocale,
        arguments: va_list,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format options : options locale : locale arguments : arguments)
    }
    unsafe fn localizedAttributedStringWithFormat_(format: NSAttributedString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAttributedString),
            localizedAttributedStringWithFormat: format
        )
    }
    unsafe fn localizedAttributedStringWithFormat_options_(
        format: NSAttributedString,
        options: NSAttributedStringFormattingOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSAttributedString) , localizedAttributedStringWithFormat : format options : options)
    }
}
impl NSMutableAttributedString_NSMutableAttributedStringFormatting for NSMutableAttributedString {}
pub trait NSMutableAttributedString_NSMutableAttributedStringFormatting:
    Sized + std::ops::Deref
{
    unsafe fn appendLocalizedFormat_(&self, format: NSAttributedString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appendLocalizedFormat: format)
    }
}
extern "C" {
    pub static NSReplacementIndexAttributeName: NSAttributedStringKey;
}
impl NSAttributedString_NSMorphology for NSAttributedString {}
pub trait NSAttributedString_NSMorphology: Sized + std::ops::Deref {
    unsafe fn attributedStringByInflectingString(&self) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributedStringByInflectingString)
    }
}
extern "C" {
    pub static NSMorphologyAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSInflectionRuleAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSInflectionAlternativeAttributeName: NSAttributedStringKey;
}
extern "C" {
    pub static NSPresentationIntentAttributeName: NSAttributedStringKey;
}
pub const NSPresentationIntentKind_NSPresentationIntentKindParagraph: NSPresentationIntentKind = 0;
pub const NSPresentationIntentKind_NSPresentationIntentKindHeader: NSPresentationIntentKind = 1;
pub const NSPresentationIntentKind_NSPresentationIntentKindOrderedList: NSPresentationIntentKind =
    2;
pub const NSPresentationIntentKind_NSPresentationIntentKindUnorderedList: NSPresentationIntentKind =
    3;
pub const NSPresentationIntentKind_NSPresentationIntentKindListItem: NSPresentationIntentKind = 4;
pub const NSPresentationIntentKind_NSPresentationIntentKindCodeBlock: NSPresentationIntentKind = 5;
pub const NSPresentationIntentKind_NSPresentationIntentKindBlockQuote: NSPresentationIntentKind = 6;
pub const NSPresentationIntentKind_NSPresentationIntentKindThematicBreak: NSPresentationIntentKind =
    7;
pub const NSPresentationIntentKind_NSPresentationIntentKindTable: NSPresentationIntentKind = 8;
pub const NSPresentationIntentKind_NSPresentationIntentKindTableHeaderRow:
    NSPresentationIntentKind = 9;
pub const NSPresentationIntentKind_NSPresentationIntentKindTableRow: NSPresentationIntentKind = 10;
pub const NSPresentationIntentKind_NSPresentationIntentKindTableCell: NSPresentationIntentKind = 11;
pub type NSPresentationIntentKind = NSInteger;
pub const NSPresentationIntentTableColumnAlignment_NSPresentationIntentTableColumnAlignmentLeft:
    NSPresentationIntentTableColumnAlignment = 0;
pub const NSPresentationIntentTableColumnAlignment_NSPresentationIntentTableColumnAlignmentCenter : NSPresentationIntentTableColumnAlignment = 1 ;
pub const NSPresentationIntentTableColumnAlignment_NSPresentationIntentTableColumnAlignmentRight:
    NSPresentationIntentTableColumnAlignment = 2;
pub type NSPresentationIntentTableColumnAlignment = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPresentationIntent(pub id);
impl std::ops::Deref for NSPresentationIntent {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPresentationIntent {}
impl NSPresentationIntent {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPresentationIntent), alloc) })
    }
}
impl PNSCopying for NSPresentationIntent {}
impl PNSSecureCoding for NSPresentationIntent {}
impl INSObject for NSPresentationIntent {}
impl PNSObject for NSPresentationIntent {}
impl From<NSPresentationIntent> for NSObject {
    fn from(child: NSPresentationIntent) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPresentationIntent {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPresentationIntent, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSPresentationIntent)) };
        if is_kind_of {
            Ok(NSPresentationIntent(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPresentationIntent")
        }
    }
}
impl INSPresentationIntent for NSPresentationIntent {}
pub trait INSPresentationIntent: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn isEquivalentToPresentationIntent_(&self, other: NSPresentationIntent) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEquivalentToPresentationIntent: other)
    }
    unsafe fn intentKind(&self) -> NSPresentationIntentKind
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intentKind)
    }
    unsafe fn parentIntent(&self) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parentIntent)
    }
    unsafe fn identity(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, identity)
    }
    unsafe fn ordinal(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ordinal)
    }
    unsafe fn columnAlignments(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, columnAlignments)
    }
    unsafe fn columnCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, columnCount)
    }
    unsafe fn headerLevel(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, headerLevel)
    }
    unsafe fn languageHint(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, languageHint)
    }
    unsafe fn column(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, column)
    }
    unsafe fn row(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, row)
    }
    unsafe fn indentationLevel(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indentationLevel)
    }
    unsafe fn paragraphIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , paragraphIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn headerIntentWithIdentity_level_nestedInsideIntent_(
        identity: NSInteger,
        level: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , headerIntentWithIdentity : identity level : level nestedInsideIntent : parent)
    }
    unsafe fn codeBlockIntentWithIdentity_languageHint_nestedInsideIntent_(
        identity: NSInteger,
        languageHint: NSString,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , codeBlockIntentWithIdentity : identity languageHint : languageHint nestedInsideIntent : parent)
    }
    unsafe fn thematicBreakIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , thematicBreakIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn orderedListIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , orderedListIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn unorderedListIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , unorderedListIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn listItemIntentWithIdentity_ordinal_nestedInsideIntent_(
        identity: NSInteger,
        ordinal: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , listItemIntentWithIdentity : identity ordinal : ordinal nestedInsideIntent : parent)
    }
    unsafe fn blockQuoteIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , blockQuoteIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn tableIntentWithIdentity_columnCount_alignments_nestedInsideIntent_(
        identity: NSInteger,
        columnCount: NSInteger,
        alignments: NSArray,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , tableIntentWithIdentity : identity columnCount : columnCount alignments : alignments nestedInsideIntent : parent)
    }
    unsafe fn tableHeaderRowIntentWithIdentity_nestedInsideIntent_(
        identity: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , tableHeaderRowIntentWithIdentity : identity nestedInsideIntent : parent)
    }
    unsafe fn tableRowIntentWithIdentity_row_nestedInsideIntent_(
        identity: NSInteger,
        row: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , tableRowIntentWithIdentity : identity row : row nestedInsideIntent : parent)
    }
    unsafe fn tableCellIntentWithIdentity_column_nestedInsideIntent_(
        identity: NSInteger,
        column: NSInteger,
        parent: NSPresentationIntent,
    ) -> NSPresentationIntent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPresentationIntent) , tableCellIntentWithIdentity : identity column : column nestedInsideIntent : parent)
    }
}
pub const NSFormattingContext_NSFormattingContextUnknown: NSFormattingContext = 0;
pub const NSFormattingContext_NSFormattingContextDynamic: NSFormattingContext = 1;
pub const NSFormattingContext_NSFormattingContextStandalone: NSFormattingContext = 2;
pub const NSFormattingContext_NSFormattingContextListItem: NSFormattingContext = 3;
pub const NSFormattingContext_NSFormattingContextBeginningOfSentence: NSFormattingContext = 4;
pub const NSFormattingContext_NSFormattingContextMiddleOfSentence: NSFormattingContext = 5;
pub type NSFormattingContext = NSInteger;
pub const NSFormattingUnitStyle_NSFormattingUnitStyleShort: NSFormattingUnitStyle = 1;
pub const NSFormattingUnitStyle_NSFormattingUnitStyleMedium: NSFormattingUnitStyle = 2;
pub const NSFormattingUnitStyle_NSFormattingUnitStyleLong: NSFormattingUnitStyle = 3;
pub type NSFormattingUnitStyle = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFormatter(pub id);
impl std::ops::Deref for NSFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFormatter {}
impl NSFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFormatter), alloc) })
    }
}
impl PNSCopying for NSFormatter {}
impl PNSCoding for NSFormatter {}
impl INSObject for NSFormatter {}
impl PNSObject for NSFormatter {}
impl From<NSFormatter> for NSObject {
    fn from(child: NSFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFormatter)) };
        if is_kind_of {
            Ok(NSFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFormatter")
        }
    }
}
impl INSFormatter for NSFormatter {}
pub trait INSFormatter: Sized + std::ops::Deref {
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn attributedStringForObjectValue_withDefaultAttributes_(
        &self,
        obj: id,
        attrs: NSDictionary,
    ) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributedStringForObjectValue : obj withDefaultAttributes : attrs)
    }
    unsafe fn editingStringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, editingStringForObjectValue: obj)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn isPartialStringValid_newEditingString_errorDescription_(
        &self,
        partialString: NSString,
        newString: *mut NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isPartialStringValid : partialString newEditingString : newString errorDescription : error)
    }
    unsafe fn isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
        &self,
        partialStringPtr: *mut NSString,
        proposedSelRangePtr: NSRangePointer,
        origString: NSString,
        origSelRange: NSRange,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isPartialStringValid : partialStringPtr proposedSelectedRange : proposedSelRangePtr originalString : origString originalSelectedRange : origSelRange errorDescription : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDateFormatter(pub id);
impl std::ops::Deref for NSDateFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateFormatter {}
impl NSDateFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDateFormatter), alloc) })
    }
}
impl INSFormatter for NSDateFormatter {}
impl PNSCopying for NSDateFormatter {}
impl PNSCoding for NSDateFormatter {}
impl From<NSDateFormatter> for NSFormatter {
    fn from(child: NSDateFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateFormatter)) };
        if is_kind_of {
            Ok(NSDateFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateFormatter")
        }
    }
}
impl INSObject for NSDateFormatter {}
impl PNSObject for NSDateFormatter {}
impl From<NSDateFormatter> for NSObject {
    fn from(child: NSDateFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateFormatter)) };
        if is_kind_of {
            Ok(NSDateFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateFormatter")
        }
    }
}
impl INSDateFormatter for NSDateFormatter {}
pub trait INSDateFormatter: Sized + std::ops::Deref {
    unsafe fn getObjectValue_forString_range_error_(
        &self,
        obj: *mut id,
        string: NSString,
        rangep: *mut NSRange,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string range : rangep error : error)
    }
    unsafe fn stringFromDate_(&self, date: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDate: date)
    }
    unsafe fn dateFromString_(&self, string: NSString) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFromString: string)
    }
    unsafe fn setLocalizedDateFormatFromTemplate_(&self, dateFormatTemplate: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setLocalizedDateFormatFromTemplate: dateFormatTemplate
        )
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn dateFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFormat)
    }
    unsafe fn setDateFormat_(&self, dateFormat: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateFormat: dateFormat)
    }
    unsafe fn dateStyle(&self) -> NSDateFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateStyle)
    }
    unsafe fn setDateStyle_(&self, dateStyle: NSDateFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateStyle: dateStyle)
    }
    unsafe fn timeStyle(&self) -> NSDateFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeStyle)
    }
    unsafe fn setTimeStyle_(&self, timeStyle: NSDateFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeStyle: timeStyle)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn generatesCalendarDates(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, generatesCalendarDates)
    }
    unsafe fn setGeneratesCalendarDates_(&self, generatesCalendarDates: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGeneratesCalendarDates: generatesCalendarDates)
    }
    unsafe fn formatterBehavior(&self) -> NSDateFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formatterBehavior)
    }
    unsafe fn setFormatterBehavior_(&self, formatterBehavior: NSDateFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormatterBehavior: formatterBehavior)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn isLenient(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLenient)
    }
    unsafe fn setLenient_(&self, lenient: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLenient: lenient)
    }
    unsafe fn twoDigitStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, twoDigitStartDate)
    }
    unsafe fn setTwoDigitStartDate_(&self, twoDigitStartDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTwoDigitStartDate: twoDigitStartDate)
    }
    unsafe fn defaultDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, defaultDate)
    }
    unsafe fn setDefaultDate_(&self, defaultDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDefaultDate: defaultDate)
    }
    unsafe fn eraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eraSymbols)
    }
    unsafe fn setEraSymbols_(&self, eraSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEraSymbols: eraSymbols)
    }
    unsafe fn monthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, monthSymbols)
    }
    unsafe fn setMonthSymbols_(&self, monthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMonthSymbols: monthSymbols)
    }
    unsafe fn shortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortMonthSymbols)
    }
    unsafe fn setShortMonthSymbols_(&self, shortMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortMonthSymbols: shortMonthSymbols)
    }
    unsafe fn weekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdaySymbols)
    }
    unsafe fn setWeekdaySymbols_(&self, weekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekdaySymbols: weekdaySymbols)
    }
    unsafe fn shortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortWeekdaySymbols)
    }
    unsafe fn setShortWeekdaySymbols_(&self, shortWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortWeekdaySymbols: shortWeekdaySymbols)
    }
    unsafe fn AMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, AMSymbol)
    }
    unsafe fn setAMSymbol_(&self, AMSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAMSymbol: AMSymbol)
    }
    unsafe fn PMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, PMSymbol)
    }
    unsafe fn setPMSymbol_(&self, PMSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPMSymbol: PMSymbol)
    }
    unsafe fn longEraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longEraSymbols)
    }
    unsafe fn setLongEraSymbols_(&self, longEraSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLongEraSymbols: longEraSymbols)
    }
    unsafe fn veryShortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortMonthSymbols)
    }
    unsafe fn setVeryShortMonthSymbols_(&self, veryShortMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setVeryShortMonthSymbols: veryShortMonthSymbols)
    }
    unsafe fn standaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneMonthSymbols)
    }
    unsafe fn setStandaloneMonthSymbols_(&self, standaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneMonthSymbols: standaloneMonthSymbols)
    }
    unsafe fn shortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneMonthSymbols)
    }
    unsafe fn setShortStandaloneMonthSymbols_(&self, shortStandaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneMonthSymbols: shortStandaloneMonthSymbols
        )
    }
    unsafe fn veryShortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneMonthSymbols)
    }
    unsafe fn setVeryShortStandaloneMonthSymbols_(&self, veryShortStandaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setVeryShortStandaloneMonthSymbols: veryShortStandaloneMonthSymbols
        )
    }
    unsafe fn veryShortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortWeekdaySymbols)
    }
    unsafe fn setVeryShortWeekdaySymbols_(&self, veryShortWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setVeryShortWeekdaySymbols: veryShortWeekdaySymbols)
    }
    unsafe fn standaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneWeekdaySymbols)
    }
    unsafe fn setStandaloneWeekdaySymbols_(&self, standaloneWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneWeekdaySymbols: standaloneWeekdaySymbols)
    }
    unsafe fn shortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneWeekdaySymbols)
    }
    unsafe fn setShortStandaloneWeekdaySymbols_(&self, shortStandaloneWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneWeekdaySymbols: shortStandaloneWeekdaySymbols
        )
    }
    unsafe fn veryShortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneWeekdaySymbols)
    }
    unsafe fn setVeryShortStandaloneWeekdaySymbols_(
        &self,
        veryShortStandaloneWeekdaySymbols: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setVeryShortStandaloneWeekdaySymbols: veryShortStandaloneWeekdaySymbols
        )
    }
    unsafe fn quarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarterSymbols)
    }
    unsafe fn setQuarterSymbols_(&self, quarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQuarterSymbols: quarterSymbols)
    }
    unsafe fn shortQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortQuarterSymbols)
    }
    unsafe fn setShortQuarterSymbols_(&self, shortQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortQuarterSymbols: shortQuarterSymbols)
    }
    unsafe fn standaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneQuarterSymbols)
    }
    unsafe fn setStandaloneQuarterSymbols_(&self, standaloneQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneQuarterSymbols: standaloneQuarterSymbols)
    }
    unsafe fn shortStandaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneQuarterSymbols)
    }
    unsafe fn setShortStandaloneQuarterSymbols_(&self, shortStandaloneQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneQuarterSymbols: shortStandaloneQuarterSymbols
        )
    }
    unsafe fn gregorianStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, gregorianStartDate)
    }
    unsafe fn setGregorianStartDate_(&self, gregorianStartDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGregorianStartDate: gregorianStartDate)
    }
    unsafe fn doesRelativeDateFormatting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesRelativeDateFormatting)
    }
    unsafe fn setDoesRelativeDateFormatting_(&self, doesRelativeDateFormatting: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setDoesRelativeDateFormatting: doesRelativeDateFormatting
        )
    }
    unsafe fn localizedStringFromDate_dateStyle_timeStyle_(
        date: NSDate,
        dstyle: NSDateFormatterStyle,
        tstyle: NSDateFormatterStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateFormatter) , localizedStringFromDate : date dateStyle : dstyle timeStyle : tstyle)
    }
    unsafe fn dateFormatFromTemplate_options_locale_(
        tmplate: NSString,
        opts: NSUInteger,
        locale: NSLocale,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateFormatter) , dateFormatFromTemplate : tmplate options : opts locale : locale)
    }
    unsafe fn defaultFormatterBehavior() -> NSDateFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDateFormatter), defaultFormatterBehavior)
    }
    unsafe fn setDefaultFormatterBehavior_(defaultFormatterBehavior: NSDateFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSDateFormatter),
            setDefaultFormatterBehavior: defaultFormatterBehavior
        )
    }
}
pub const NSDateFormatterStyle_NSDateFormatterNoStyle: NSDateFormatterStyle = 0;
pub const NSDateFormatterStyle_NSDateFormatterShortStyle: NSDateFormatterStyle = 1;
pub const NSDateFormatterStyle_NSDateFormatterMediumStyle: NSDateFormatterStyle = 2;
pub const NSDateFormatterStyle_NSDateFormatterLongStyle: NSDateFormatterStyle = 3;
pub const NSDateFormatterStyle_NSDateFormatterFullStyle: NSDateFormatterStyle = 4;
pub type NSDateFormatterStyle = NSUInteger;
pub const NSDateFormatterBehavior_NSDateFormatterBehaviorDefault: NSDateFormatterBehavior = 0;
pub const NSDateFormatterBehavior_NSDateFormatterBehavior10_4: NSDateFormatterBehavior = 1040;
pub type NSDateFormatterBehavior = NSUInteger;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterNoStyle:
    NSDateIntervalFormatterStyle = 0;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterShortStyle:
    NSDateIntervalFormatterStyle = 1;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterMediumStyle:
    NSDateIntervalFormatterStyle = 2;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterLongStyle:
    NSDateIntervalFormatterStyle = 3;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterFullStyle:
    NSDateIntervalFormatterStyle = 4;
pub type NSDateIntervalFormatterStyle = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDateIntervalFormatter(pub id);
impl std::ops::Deref for NSDateIntervalFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateIntervalFormatter {}
impl NSDateIntervalFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDateIntervalFormatter), alloc) })
    }
}
impl INSFormatter for NSDateIntervalFormatter {}
impl PNSCopying for NSDateIntervalFormatter {}
impl PNSCoding for NSDateIntervalFormatter {}
impl From<NSDateIntervalFormatter> for NSFormatter {
    fn from(child: NSDateIntervalFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateIntervalFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateIntervalFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateIntervalFormatter)) };
        if is_kind_of {
            Ok(NSDateIntervalFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateIntervalFormatter")
        }
    }
}
impl INSObject for NSDateIntervalFormatter {}
impl PNSObject for NSDateIntervalFormatter {}
impl From<NSDateIntervalFormatter> for NSObject {
    fn from(child: NSDateIntervalFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateIntervalFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateIntervalFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateIntervalFormatter)) };
        if is_kind_of {
            Ok(NSDateIntervalFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateIntervalFormatter")
        }
    }
}
impl INSDateIntervalFormatter for NSDateIntervalFormatter {}
pub trait INSDateIntervalFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromDate_toDate_(&self, fromDate: NSDate, toDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromDate : fromDate toDate : toDate)
    }
    unsafe fn stringFromDateInterval_(&self, dateInterval: NSDateInterval) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDateInterval: dateInterval)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn dateTemplate(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateTemplate)
    }
    unsafe fn setDateTemplate_(&self, dateTemplate: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateTemplate: dateTemplate)
    }
    unsafe fn dateStyle(&self) -> NSDateIntervalFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateStyle)
    }
    unsafe fn setDateStyle_(&self, dateStyle: NSDateIntervalFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateStyle: dateStyle)
    }
    unsafe fn timeStyle(&self) -> NSDateIntervalFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeStyle)
    }
    unsafe fn setTimeStyle_(&self, timeStyle: NSDateIntervalFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeStyle: timeStyle)
    }
}
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithYear: NSISO8601DateFormatOptions = 1;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithMonth: NSISO8601DateFormatOptions = 2;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithWeekOfYear: NSISO8601DateFormatOptions =
    4;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithDay: NSISO8601DateFormatOptions = 16;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithTime: NSISO8601DateFormatOptions = 32;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithTimeZone: NSISO8601DateFormatOptions =
    64;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithSpaceBetweenDateAndTime:
    NSISO8601DateFormatOptions = 128;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithDashSeparatorInDate:
    NSISO8601DateFormatOptions = 256;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithColonSeparatorInTime:
    NSISO8601DateFormatOptions = 512;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithColonSeparatorInTimeZone:
    NSISO8601DateFormatOptions = 1024;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithFractionalSeconds:
    NSISO8601DateFormatOptions = 2048;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithFullDate: NSISO8601DateFormatOptions =
    275;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithFullTime: NSISO8601DateFormatOptions =
    1632;
pub const NSISO8601DateFormatOptions_NSISO8601DateFormatWithInternetDateTime:
    NSISO8601DateFormatOptions = 1907;
pub type NSISO8601DateFormatOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSISO8601DateFormatter(pub id);
impl std::ops::Deref for NSISO8601DateFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSISO8601DateFormatter {}
impl NSISO8601DateFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSISO8601DateFormatter), alloc) })
    }
}
impl PNSSecureCoding for NSISO8601DateFormatter {}
impl INSFormatter for NSISO8601DateFormatter {}
impl PNSCopying for NSISO8601DateFormatter {}
impl PNSCoding for NSISO8601DateFormatter {}
impl From<NSISO8601DateFormatter> for NSFormatter {
    fn from(child: NSISO8601DateFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSISO8601DateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSISO8601DateFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSISO8601DateFormatter)) };
        if is_kind_of {
            Ok(NSISO8601DateFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSISO8601DateFormatter")
        }
    }
}
impl INSObject for NSISO8601DateFormatter {}
impl PNSObject for NSISO8601DateFormatter {}
impl From<NSISO8601DateFormatter> for NSObject {
    fn from(child: NSISO8601DateFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSISO8601DateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSISO8601DateFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSISO8601DateFormatter)) };
        if is_kind_of {
            Ok(NSISO8601DateFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSISO8601DateFormatter")
        }
    }
}
impl INSISO8601DateFormatter for NSISO8601DateFormatter {}
pub trait INSISO8601DateFormatter: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn stringFromDate_(&self, date: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDate: date)
    }
    unsafe fn dateFromString_(&self, string: NSString) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFromString: string)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn formatOptions(&self) -> NSISO8601DateFormatOptions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formatOptions)
    }
    unsafe fn setFormatOptions_(&self, formatOptions: NSISO8601DateFormatOptions)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormatOptions: formatOptions)
    }
    unsafe fn stringFromDate_timeZone_formatOptions_(
        date: NSDate,
        timeZone: NSTimeZone,
        formatOptions: NSISO8601DateFormatOptions,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSISO8601DateFormatter) , stringFromDate : date timeZone : timeZone formatOptions : formatOptions)
    }
}
pub const NSMassFormatterUnit_NSMassFormatterUnitGram: NSMassFormatterUnit = 11;
pub const NSMassFormatterUnit_NSMassFormatterUnitKilogram: NSMassFormatterUnit = 14;
pub const NSMassFormatterUnit_NSMassFormatterUnitOunce: NSMassFormatterUnit = 1537;
pub const NSMassFormatterUnit_NSMassFormatterUnitPound: NSMassFormatterUnit = 1538;
pub const NSMassFormatterUnit_NSMassFormatterUnitStone: NSMassFormatterUnit = 1539;
pub type NSMassFormatterUnit = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMassFormatter(pub id);
impl std::ops::Deref for NSMassFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMassFormatter {}
impl NSMassFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMassFormatter), alloc) })
    }
}
impl INSFormatter for NSMassFormatter {}
impl PNSCopying for NSMassFormatter {}
impl PNSCoding for NSMassFormatter {}
impl From<NSMassFormatter> for NSFormatter {
    fn from(child: NSMassFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSMassFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSMassFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMassFormatter)) };
        if is_kind_of {
            Ok(NSMassFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSMassFormatter")
        }
    }
}
impl INSObject for NSMassFormatter {}
impl PNSObject for NSMassFormatter {}
impl From<NSMassFormatter> for NSObject {
    fn from(child: NSMassFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMassFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMassFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMassFormatter)) };
        if is_kind_of {
            Ok(NSMassFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMassFormatter")
        }
    }
}
impl INSMassFormatter for NSMassFormatter {}
pub trait INSMassFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromValue_unit_(&self, value: f64, unit: NSMassFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromValue : value unit : unit)
    }
    unsafe fn stringFromKilograms_(&self, numberInKilograms: f64) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromKilograms: numberInKilograms)
    }
    unsafe fn unitStringFromValue_unit_(&self, value: f64, unit: NSMassFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromValue : value unit : unit)
    }
    unsafe fn unitStringFromKilograms_usedUnit_(
        &self,
        numberInKilograms: f64,
        unitp: *mut NSMassFormatterUnit,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromKilograms : numberInKilograms usedUnit : unitp)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn numberFormatter(&self) -> NSNumberFormatter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberFormatter)
    }
    unsafe fn setNumberFormatter_(&self, numberFormatter: NSNumberFormatter)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumberFormatter: numberFormatter)
    }
    unsafe fn unitStyle(&self) -> NSFormattingUnitStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitStyle)
    }
    unsafe fn setUnitStyle_(&self, unitStyle: NSFormattingUnitStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitStyle: unitStyle)
    }
    unsafe fn isForPersonMassUse(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isForPersonMassUse)
    }
    unsafe fn setForPersonMassUse_(&self, forPersonMassUse: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setForPersonMassUse: forPersonMassUse)
    }
}
pub const NSLengthFormatterUnit_NSLengthFormatterUnitMillimeter: NSLengthFormatterUnit = 8;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitCentimeter: NSLengthFormatterUnit = 9;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitMeter: NSLengthFormatterUnit = 11;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitKilometer: NSLengthFormatterUnit = 14;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitInch: NSLengthFormatterUnit = 1281;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitFoot: NSLengthFormatterUnit = 1282;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitYard: NSLengthFormatterUnit = 1283;
pub const NSLengthFormatterUnit_NSLengthFormatterUnitMile: NSLengthFormatterUnit = 1284;
pub type NSLengthFormatterUnit = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLengthFormatter(pub id);
impl std::ops::Deref for NSLengthFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLengthFormatter {}
impl NSLengthFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLengthFormatter), alloc) })
    }
}
impl INSFormatter for NSLengthFormatter {}
impl PNSCopying for NSLengthFormatter {}
impl PNSCoding for NSLengthFormatter {}
impl From<NSLengthFormatter> for NSFormatter {
    fn from(child: NSLengthFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSLengthFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSLengthFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSLengthFormatter)) };
        if is_kind_of {
            Ok(NSLengthFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSLengthFormatter")
        }
    }
}
impl INSObject for NSLengthFormatter {}
impl PNSObject for NSLengthFormatter {}
impl From<NSLengthFormatter> for NSObject {
    fn from(child: NSLengthFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSLengthFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSLengthFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSLengthFormatter)) };
        if is_kind_of {
            Ok(NSLengthFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSLengthFormatter")
        }
    }
}
impl INSLengthFormatter for NSLengthFormatter {}
pub trait INSLengthFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromValue_unit_(&self, value: f64, unit: NSLengthFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromValue : value unit : unit)
    }
    unsafe fn stringFromMeters_(&self, numberInMeters: f64) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromMeters: numberInMeters)
    }
    unsafe fn unitStringFromValue_unit_(&self, value: f64, unit: NSLengthFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromValue : value unit : unit)
    }
    unsafe fn unitStringFromMeters_usedUnit_(
        &self,
        numberInMeters: f64,
        unitp: *mut NSLengthFormatterUnit,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromMeters : numberInMeters usedUnit : unitp)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn numberFormatter(&self) -> NSNumberFormatter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberFormatter)
    }
    unsafe fn setNumberFormatter_(&self, numberFormatter: NSNumberFormatter)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumberFormatter: numberFormatter)
    }
    unsafe fn unitStyle(&self) -> NSFormattingUnitStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitStyle)
    }
    unsafe fn setUnitStyle_(&self, unitStyle: NSFormattingUnitStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitStyle: unitStyle)
    }
    unsafe fn isForPersonHeightUse(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isForPersonHeightUse)
    }
    unsafe fn setForPersonHeightUse_(&self, forPersonHeightUse: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setForPersonHeightUse: forPersonHeightUse)
    }
}
pub const NSEnergyFormatterUnit_NSEnergyFormatterUnitJoule: NSEnergyFormatterUnit = 11;
pub const NSEnergyFormatterUnit_NSEnergyFormatterUnitKilojoule: NSEnergyFormatterUnit = 14;
pub const NSEnergyFormatterUnit_NSEnergyFormatterUnitCalorie: NSEnergyFormatterUnit = 1793;
pub const NSEnergyFormatterUnit_NSEnergyFormatterUnitKilocalorie: NSEnergyFormatterUnit = 1794;
pub type NSEnergyFormatterUnit = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSEnergyFormatter(pub id);
impl std::ops::Deref for NSEnergyFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSEnergyFormatter {}
impl NSEnergyFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSEnergyFormatter), alloc) })
    }
}
impl INSFormatter for NSEnergyFormatter {}
impl PNSCopying for NSEnergyFormatter {}
impl PNSCoding for NSEnergyFormatter {}
impl From<NSEnergyFormatter> for NSFormatter {
    fn from(child: NSEnergyFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSEnergyFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSEnergyFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSEnergyFormatter)) };
        if is_kind_of {
            Ok(NSEnergyFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSEnergyFormatter")
        }
    }
}
impl INSObject for NSEnergyFormatter {}
impl PNSObject for NSEnergyFormatter {}
impl From<NSEnergyFormatter> for NSObject {
    fn from(child: NSEnergyFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSEnergyFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSEnergyFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSEnergyFormatter)) };
        if is_kind_of {
            Ok(NSEnergyFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSEnergyFormatter")
        }
    }
}
impl INSEnergyFormatter for NSEnergyFormatter {}
pub trait INSEnergyFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromValue_unit_(&self, value: f64, unit: NSEnergyFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromValue : value unit : unit)
    }
    unsafe fn stringFromJoules_(&self, numberInJoules: f64) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromJoules: numberInJoules)
    }
    unsafe fn unitStringFromValue_unit_(&self, value: f64, unit: NSEnergyFormatterUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromValue : value unit : unit)
    }
    unsafe fn unitStringFromJoules_usedUnit_(
        &self,
        numberInJoules: f64,
        unitp: *mut NSEnergyFormatterUnit,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unitStringFromJoules : numberInJoules usedUnit : unitp)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn numberFormatter(&self) -> NSNumberFormatter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberFormatter)
    }
    unsafe fn setNumberFormatter_(&self, numberFormatter: NSNumberFormatter)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumberFormatter: numberFormatter)
    }
    unsafe fn unitStyle(&self) -> NSFormattingUnitStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitStyle)
    }
    unsafe fn setUnitStyle_(&self, unitStyle: NSFormattingUnitStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitStyle: unitStyle)
    }
    unsafe fn isForFoodEnergyUse(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isForFoodEnergyUse)
    }
    unsafe fn setForFoodEnergyUse_(&self, forFoodEnergyUse: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setForFoodEnergyUse: forFoodEnergyUse)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitConverter(pub id);
impl std::ops::Deref for NSUnitConverter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitConverter {}
impl NSUnitConverter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitConverter), alloc) })
    }
}
impl INSObject for NSUnitConverter {}
impl PNSObject for NSUnitConverter {}
impl From<NSUnitConverter> for NSObject {
    fn from(child: NSUnitConverter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitConverter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitConverter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConverter)) };
        if is_kind_of {
            Ok(NSUnitConverter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitConverter")
        }
    }
}
impl INSUnitConverter for NSUnitConverter {}
pub trait INSUnitConverter: Sized + std::ops::Deref {
    unsafe fn baseUnitValueFromValue_(&self, value: f64) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, baseUnitValueFromValue: value)
    }
    unsafe fn valueFromBaseUnitValue_(&self, baseUnitValue: f64) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueFromBaseUnitValue: baseUnitValue)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitConverterLinear(pub id);
impl std::ops::Deref for NSUnitConverterLinear {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitConverterLinear {}
impl NSUnitConverterLinear {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitConverterLinear), alloc) })
    }
}
impl PNSSecureCoding for NSUnitConverterLinear {}
impl INSUnitConverter for NSUnitConverterLinear {}
impl From<NSUnitConverterLinear> for NSUnitConverter {
    fn from(child: NSUnitConverterLinear) -> NSUnitConverter {
        NSUnitConverter(child.0)
    }
}
impl std::convert::TryFrom<NSUnitConverter> for NSUnitConverterLinear {
    type Error = &'static str;
    fn try_from(parent: NSUnitConverter) -> Result<NSUnitConverterLinear, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConverterLinear)) };
        if is_kind_of {
            Ok(NSUnitConverterLinear(parent.0))
        } else {
            Err("This NSUnitConverter cannot be downcasted to NSUnitConverterLinear")
        }
    }
}
impl INSObject for NSUnitConverterLinear {}
impl PNSObject for NSUnitConverterLinear {}
impl From<NSUnitConverterLinear> for NSObject {
    fn from(child: NSUnitConverterLinear) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitConverterLinear {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitConverterLinear, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConverterLinear)) };
        if is_kind_of {
            Ok(NSUnitConverterLinear(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitConverterLinear")
        }
    }
}
impl INSUnitConverterLinear for NSUnitConverterLinear {}
pub trait INSUnitConverterLinear: Sized + std::ops::Deref {
    unsafe fn initWithCoefficient_(&self, coefficient: f64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoefficient: coefficient)
    }
    unsafe fn initWithCoefficient_constant_(&self, coefficient: f64, constant: f64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithCoefficient : coefficient constant : constant)
    }
    unsafe fn coefficient(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, coefficient)
    }
    unsafe fn constant(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, constant)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnit(pub id);
impl std::ops::Deref for NSUnit {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnit {}
impl NSUnit {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnit), alloc) })
    }
}
impl PNSCopying for NSUnit {}
impl PNSSecureCoding for NSUnit {}
impl INSObject for NSUnit {}
impl PNSObject for NSUnit {}
impl From<NSUnit> for NSObject {
    fn from(child: NSUnit) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnit {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnit, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnit)) };
        if is_kind_of {
            Ok(NSUnit(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnit")
        }
    }
}
impl INSUnit for NSUnit {}
pub trait INSUnit: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithSymbol_(&self, symbol: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSymbol: symbol)
    }
    unsafe fn symbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, symbol)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnit), new)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDimension(pub id);
impl std::ops::Deref for NSDimension {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDimension {}
impl NSDimension {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDimension), alloc) })
    }
}
impl PNSSecureCoding for NSDimension {}
impl INSUnit for NSDimension {}
impl PNSCopying for NSDimension {}
impl From<NSDimension> for NSUnit {
    fn from(child: NSDimension) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSDimension {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSDimension, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDimension)) };
        if is_kind_of {
            Ok(NSDimension(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSDimension")
        }
    }
}
impl INSObject for NSDimension {}
impl PNSObject for NSDimension {}
impl From<NSDimension> for NSObject {
    fn from(child: NSDimension) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDimension {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDimension, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDimension)) };
        if is_kind_of {
            Ok(NSDimension(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDimension")
        }
    }
}
impl INSDimension for NSDimension {}
pub trait INSDimension: Sized + std::ops::Deref {
    unsafe fn initWithSymbol_converter_(
        &self,
        symbol: NSString,
        converter: NSUnitConverter,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSymbol : symbol converter : converter)
    }
    unsafe fn converter(&self) -> NSUnitConverter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, converter)
    }
    unsafe fn baseUnit() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDimension), baseUnit)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitAcceleration(pub id);
impl std::ops::Deref for NSUnitAcceleration {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitAcceleration {}
impl NSUnitAcceleration {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitAcceleration), alloc) })
    }
}
impl PNSSecureCoding for NSUnitAcceleration {}
impl INSDimension for NSUnitAcceleration {}
impl From<NSUnitAcceleration> for NSDimension {
    fn from(child: NSUnitAcceleration) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitAcceleration {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitAcceleration, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAcceleration)) };
        if is_kind_of {
            Ok(NSUnitAcceleration(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitAcceleration")
        }
    }
}
impl INSUnit for NSUnitAcceleration {}
impl PNSCopying for NSUnitAcceleration {}
impl From<NSUnitAcceleration> for NSUnit {
    fn from(child: NSUnitAcceleration) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitAcceleration {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitAcceleration, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAcceleration)) };
        if is_kind_of {
            Ok(NSUnitAcceleration(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitAcceleration")
        }
    }
}
impl INSObject for NSUnitAcceleration {}
impl PNSObject for NSUnitAcceleration {}
impl From<NSUnitAcceleration> for NSObject {
    fn from(child: NSUnitAcceleration) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitAcceleration {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitAcceleration, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAcceleration)) };
        if is_kind_of {
            Ok(NSUnitAcceleration(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitAcceleration")
        }
    }
}
impl INSUnitAcceleration for NSUnitAcceleration {}
pub trait INSUnitAcceleration: Sized + std::ops::Deref {
    unsafe fn metersPerSecondSquared() -> NSUnitAcceleration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAcceleration), metersPerSecondSquared)
    }
    unsafe fn gravity() -> NSUnitAcceleration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAcceleration), gravity)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitAngle(pub id);
impl std::ops::Deref for NSUnitAngle {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitAngle {}
impl NSUnitAngle {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitAngle), alloc) })
    }
}
impl PNSSecureCoding for NSUnitAngle {}
impl INSDimension for NSUnitAngle {}
impl From<NSUnitAngle> for NSDimension {
    fn from(child: NSUnitAngle) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitAngle {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitAngle, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAngle)) };
        if is_kind_of {
            Ok(NSUnitAngle(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitAngle")
        }
    }
}
impl INSUnit for NSUnitAngle {}
impl PNSCopying for NSUnitAngle {}
impl From<NSUnitAngle> for NSUnit {
    fn from(child: NSUnitAngle) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitAngle {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitAngle, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAngle)) };
        if is_kind_of {
            Ok(NSUnitAngle(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitAngle")
        }
    }
}
impl INSObject for NSUnitAngle {}
impl PNSObject for NSUnitAngle {}
impl From<NSUnitAngle> for NSObject {
    fn from(child: NSUnitAngle) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitAngle {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitAngle, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitAngle)) };
        if is_kind_of {
            Ok(NSUnitAngle(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitAngle")
        }
    }
}
impl INSUnitAngle for NSUnitAngle {}
pub trait INSUnitAngle: Sized + std::ops::Deref {
    unsafe fn degrees() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), degrees)
    }
    unsafe fn arcMinutes() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), arcMinutes)
    }
    unsafe fn arcSeconds() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), arcSeconds)
    }
    unsafe fn radians() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), radians)
    }
    unsafe fn gradians() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), gradians)
    }
    unsafe fn revolutions() -> NSUnitAngle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitAngle), revolutions)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitArea(pub id);
impl std::ops::Deref for NSUnitArea {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitArea {}
impl NSUnitArea {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitArea), alloc) })
    }
}
impl PNSSecureCoding for NSUnitArea {}
impl INSDimension for NSUnitArea {}
impl From<NSUnitArea> for NSDimension {
    fn from(child: NSUnitArea) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitArea {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitArea, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitArea)) };
        if is_kind_of {
            Ok(NSUnitArea(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitArea")
        }
    }
}
impl INSUnit for NSUnitArea {}
impl PNSCopying for NSUnitArea {}
impl From<NSUnitArea> for NSUnit {
    fn from(child: NSUnitArea) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitArea {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitArea, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitArea)) };
        if is_kind_of {
            Ok(NSUnitArea(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitArea")
        }
    }
}
impl INSObject for NSUnitArea {}
impl PNSObject for NSUnitArea {}
impl From<NSUnitArea> for NSObject {
    fn from(child: NSUnitArea) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitArea {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitArea, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitArea)) };
        if is_kind_of {
            Ok(NSUnitArea(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitArea")
        }
    }
}
impl INSUnitArea for NSUnitArea {}
pub trait INSUnitArea: Sized + std::ops::Deref {
    unsafe fn squareMegameters() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareMegameters)
    }
    unsafe fn squareKilometers() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareKilometers)
    }
    unsafe fn squareMeters() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareMeters)
    }
    unsafe fn squareCentimeters() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareCentimeters)
    }
    unsafe fn squareMillimeters() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareMillimeters)
    }
    unsafe fn squareMicrometers() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareMicrometers)
    }
    unsafe fn squareNanometers() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareNanometers)
    }
    unsafe fn squareInches() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareInches)
    }
    unsafe fn squareFeet() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareFeet)
    }
    unsafe fn squareYards() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareYards)
    }
    unsafe fn squareMiles() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), squareMiles)
    }
    unsafe fn acres() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), acres)
    }
    unsafe fn ares() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), ares)
    }
    unsafe fn hectares() -> NSUnitArea
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitArea), hectares)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitConcentrationMass(pub id);
impl std::ops::Deref for NSUnitConcentrationMass {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitConcentrationMass {}
impl NSUnitConcentrationMass {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitConcentrationMass), alloc) })
    }
}
impl PNSSecureCoding for NSUnitConcentrationMass {}
impl INSDimension for NSUnitConcentrationMass {}
impl From<NSUnitConcentrationMass> for NSDimension {
    fn from(child: NSUnitConcentrationMass) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitConcentrationMass {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitConcentrationMass, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConcentrationMass)) };
        if is_kind_of {
            Ok(NSUnitConcentrationMass(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitConcentrationMass")
        }
    }
}
impl INSUnit for NSUnitConcentrationMass {}
impl PNSCopying for NSUnitConcentrationMass {}
impl From<NSUnitConcentrationMass> for NSUnit {
    fn from(child: NSUnitConcentrationMass) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitConcentrationMass {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitConcentrationMass, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConcentrationMass)) };
        if is_kind_of {
            Ok(NSUnitConcentrationMass(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitConcentrationMass")
        }
    }
}
impl INSObject for NSUnitConcentrationMass {}
impl PNSObject for NSUnitConcentrationMass {}
impl From<NSUnitConcentrationMass> for NSObject {
    fn from(child: NSUnitConcentrationMass) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitConcentrationMass {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitConcentrationMass, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitConcentrationMass)) };
        if is_kind_of {
            Ok(NSUnitConcentrationMass(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitConcentrationMass")
        }
    }
}
impl INSUnitConcentrationMass for NSUnitConcentrationMass {}
pub trait INSUnitConcentrationMass: Sized + std::ops::Deref {
    unsafe fn millimolesPerLiterWithGramsPerMole_(gramsPerMole: f64) -> NSUnitConcentrationMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSUnitConcentrationMass),
            millimolesPerLiterWithGramsPerMole: gramsPerMole
        )
    }
    unsafe fn gramsPerLiter() -> NSUnitConcentrationMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitConcentrationMass), gramsPerLiter)
    }
    unsafe fn milligramsPerDeciliter() -> NSUnitConcentrationMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitConcentrationMass), milligramsPerDeciliter)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitDispersion(pub id);
impl std::ops::Deref for NSUnitDispersion {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitDispersion {}
impl NSUnitDispersion {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitDispersion), alloc) })
    }
}
impl PNSSecureCoding for NSUnitDispersion {}
impl INSDimension for NSUnitDispersion {}
impl From<NSUnitDispersion> for NSDimension {
    fn from(child: NSUnitDispersion) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitDispersion {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitDispersion, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDispersion)) };
        if is_kind_of {
            Ok(NSUnitDispersion(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitDispersion")
        }
    }
}
impl INSUnit for NSUnitDispersion {}
impl PNSCopying for NSUnitDispersion {}
impl From<NSUnitDispersion> for NSUnit {
    fn from(child: NSUnitDispersion) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitDispersion {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitDispersion, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDispersion)) };
        if is_kind_of {
            Ok(NSUnitDispersion(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitDispersion")
        }
    }
}
impl INSObject for NSUnitDispersion {}
impl PNSObject for NSUnitDispersion {}
impl From<NSUnitDispersion> for NSObject {
    fn from(child: NSUnitDispersion) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitDispersion {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitDispersion, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDispersion)) };
        if is_kind_of {
            Ok(NSUnitDispersion(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitDispersion")
        }
    }
}
impl INSUnitDispersion for NSUnitDispersion {}
pub trait INSUnitDispersion: Sized + std::ops::Deref {
    unsafe fn partsPerMillion() -> NSUnitDispersion
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDispersion), partsPerMillion)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitDuration(pub id);
impl std::ops::Deref for NSUnitDuration {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitDuration {}
impl NSUnitDuration {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitDuration), alloc) })
    }
}
impl PNSSecureCoding for NSUnitDuration {}
impl INSDimension for NSUnitDuration {}
impl From<NSUnitDuration> for NSDimension {
    fn from(child: NSUnitDuration) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitDuration {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitDuration, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDuration)) };
        if is_kind_of {
            Ok(NSUnitDuration(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitDuration")
        }
    }
}
impl INSUnit for NSUnitDuration {}
impl PNSCopying for NSUnitDuration {}
impl From<NSUnitDuration> for NSUnit {
    fn from(child: NSUnitDuration) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitDuration {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitDuration, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDuration)) };
        if is_kind_of {
            Ok(NSUnitDuration(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitDuration")
        }
    }
}
impl INSObject for NSUnitDuration {}
impl PNSObject for NSUnitDuration {}
impl From<NSUnitDuration> for NSObject {
    fn from(child: NSUnitDuration) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitDuration {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitDuration, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitDuration)) };
        if is_kind_of {
            Ok(NSUnitDuration(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitDuration")
        }
    }
}
impl INSUnitDuration for NSUnitDuration {}
pub trait INSUnitDuration: Sized + std::ops::Deref {
    unsafe fn hours() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), hours)
    }
    unsafe fn minutes() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), minutes)
    }
    unsafe fn seconds() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), seconds)
    }
    unsafe fn milliseconds() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), milliseconds)
    }
    unsafe fn microseconds() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), microseconds)
    }
    unsafe fn nanoseconds() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), nanoseconds)
    }
    unsafe fn picoseconds() -> NSUnitDuration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitDuration), picoseconds)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitElectricCharge(pub id);
impl std::ops::Deref for NSUnitElectricCharge {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitElectricCharge {}
impl NSUnitElectricCharge {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitElectricCharge), alloc) })
    }
}
impl PNSSecureCoding for NSUnitElectricCharge {}
impl INSDimension for NSUnitElectricCharge {}
impl From<NSUnitElectricCharge> for NSDimension {
    fn from(child: NSUnitElectricCharge) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitElectricCharge {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitElectricCharge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCharge)) };
        if is_kind_of {
            Ok(NSUnitElectricCharge(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitElectricCharge")
        }
    }
}
impl INSUnit for NSUnitElectricCharge {}
impl PNSCopying for NSUnitElectricCharge {}
impl From<NSUnitElectricCharge> for NSUnit {
    fn from(child: NSUnitElectricCharge) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitElectricCharge {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitElectricCharge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCharge)) };
        if is_kind_of {
            Ok(NSUnitElectricCharge(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitElectricCharge")
        }
    }
}
impl INSObject for NSUnitElectricCharge {}
impl PNSObject for NSUnitElectricCharge {}
impl From<NSUnitElectricCharge> for NSObject {
    fn from(child: NSUnitElectricCharge) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitElectricCharge {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitElectricCharge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCharge)) };
        if is_kind_of {
            Ok(NSUnitElectricCharge(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitElectricCharge")
        }
    }
}
impl INSUnitElectricCharge for NSUnitElectricCharge {}
pub trait INSUnitElectricCharge: Sized + std::ops::Deref {
    unsafe fn coulombs() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), coulombs)
    }
    unsafe fn megaampereHours() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), megaampereHours)
    }
    unsafe fn kiloampereHours() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), kiloampereHours)
    }
    unsafe fn ampereHours() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), ampereHours)
    }
    unsafe fn milliampereHours() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), milliampereHours)
    }
    unsafe fn microampereHours() -> NSUnitElectricCharge
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCharge), microampereHours)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitElectricCurrent(pub id);
impl std::ops::Deref for NSUnitElectricCurrent {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitElectricCurrent {}
impl NSUnitElectricCurrent {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitElectricCurrent), alloc) })
    }
}
impl PNSSecureCoding for NSUnitElectricCurrent {}
impl INSDimension for NSUnitElectricCurrent {}
impl From<NSUnitElectricCurrent> for NSDimension {
    fn from(child: NSUnitElectricCurrent) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitElectricCurrent {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitElectricCurrent, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCurrent)) };
        if is_kind_of {
            Ok(NSUnitElectricCurrent(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitElectricCurrent")
        }
    }
}
impl INSUnit for NSUnitElectricCurrent {}
impl PNSCopying for NSUnitElectricCurrent {}
impl From<NSUnitElectricCurrent> for NSUnit {
    fn from(child: NSUnitElectricCurrent) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitElectricCurrent {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitElectricCurrent, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCurrent)) };
        if is_kind_of {
            Ok(NSUnitElectricCurrent(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitElectricCurrent")
        }
    }
}
impl INSObject for NSUnitElectricCurrent {}
impl PNSObject for NSUnitElectricCurrent {}
impl From<NSUnitElectricCurrent> for NSObject {
    fn from(child: NSUnitElectricCurrent) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitElectricCurrent {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitElectricCurrent, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricCurrent)) };
        if is_kind_of {
            Ok(NSUnitElectricCurrent(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitElectricCurrent")
        }
    }
}
impl INSUnitElectricCurrent for NSUnitElectricCurrent {}
pub trait INSUnitElectricCurrent: Sized + std::ops::Deref {
    unsafe fn megaamperes() -> NSUnitElectricCurrent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCurrent), megaamperes)
    }
    unsafe fn kiloamperes() -> NSUnitElectricCurrent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCurrent), kiloamperes)
    }
    unsafe fn amperes() -> NSUnitElectricCurrent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCurrent), amperes)
    }
    unsafe fn milliamperes() -> NSUnitElectricCurrent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCurrent), milliamperes)
    }
    unsafe fn microamperes() -> NSUnitElectricCurrent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricCurrent), microamperes)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitElectricPotentialDifference(pub id);
impl std::ops::Deref for NSUnitElectricPotentialDifference {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitElectricPotentialDifference {}
impl NSUnitElectricPotentialDifference {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitElectricPotentialDifference), alloc) })
    }
}
impl PNSSecureCoding for NSUnitElectricPotentialDifference {}
impl INSDimension for NSUnitElectricPotentialDifference {}
impl From<NSUnitElectricPotentialDifference> for NSDimension {
    fn from(child: NSUnitElectricPotentialDifference) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitElectricPotentialDifference {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitElectricPotentialDifference, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSUnitElectricPotentialDifference)
            )
        };
        if is_kind_of {
            Ok(NSUnitElectricPotentialDifference(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitElectricPotentialDifference")
        }
    }
}
impl INSUnit for NSUnitElectricPotentialDifference {}
impl PNSCopying for NSUnitElectricPotentialDifference {}
impl From<NSUnitElectricPotentialDifference> for NSUnit {
    fn from(child: NSUnitElectricPotentialDifference) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitElectricPotentialDifference {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitElectricPotentialDifference, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSUnitElectricPotentialDifference)
            )
        };
        if is_kind_of {
            Ok(NSUnitElectricPotentialDifference(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitElectricPotentialDifference")
        }
    }
}
impl INSObject for NSUnitElectricPotentialDifference {}
impl PNSObject for NSUnitElectricPotentialDifference {}
impl From<NSUnitElectricPotentialDifference> for NSObject {
    fn from(child: NSUnitElectricPotentialDifference) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitElectricPotentialDifference {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitElectricPotentialDifference, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSUnitElectricPotentialDifference)
            )
        };
        if is_kind_of {
            Ok(NSUnitElectricPotentialDifference(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitElectricPotentialDifference")
        }
    }
}
impl INSUnitElectricPotentialDifference for NSUnitElectricPotentialDifference {}
pub trait INSUnitElectricPotentialDifference: Sized + std::ops::Deref {
    unsafe fn megavolts() -> NSUnitElectricPotentialDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricPotentialDifference), megavolts)
    }
    unsafe fn kilovolts() -> NSUnitElectricPotentialDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricPotentialDifference), kilovolts)
    }
    unsafe fn volts() -> NSUnitElectricPotentialDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricPotentialDifference), volts)
    }
    unsafe fn millivolts() -> NSUnitElectricPotentialDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricPotentialDifference), millivolts)
    }
    unsafe fn microvolts() -> NSUnitElectricPotentialDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricPotentialDifference), microvolts)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitElectricResistance(pub id);
impl std::ops::Deref for NSUnitElectricResistance {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitElectricResistance {}
impl NSUnitElectricResistance {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitElectricResistance), alloc) })
    }
}
impl PNSSecureCoding for NSUnitElectricResistance {}
impl INSDimension for NSUnitElectricResistance {}
impl From<NSUnitElectricResistance> for NSDimension {
    fn from(child: NSUnitElectricResistance) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitElectricResistance {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitElectricResistance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricResistance)) };
        if is_kind_of {
            Ok(NSUnitElectricResistance(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitElectricResistance")
        }
    }
}
impl INSUnit for NSUnitElectricResistance {}
impl PNSCopying for NSUnitElectricResistance {}
impl From<NSUnitElectricResistance> for NSUnit {
    fn from(child: NSUnitElectricResistance) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitElectricResistance {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitElectricResistance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricResistance)) };
        if is_kind_of {
            Ok(NSUnitElectricResistance(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitElectricResistance")
        }
    }
}
impl INSObject for NSUnitElectricResistance {}
impl PNSObject for NSUnitElectricResistance {}
impl From<NSUnitElectricResistance> for NSObject {
    fn from(child: NSUnitElectricResistance) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitElectricResistance {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitElectricResistance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitElectricResistance)) };
        if is_kind_of {
            Ok(NSUnitElectricResistance(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitElectricResistance")
        }
    }
}
impl INSUnitElectricResistance for NSUnitElectricResistance {}
pub trait INSUnitElectricResistance: Sized + std::ops::Deref {
    unsafe fn megaohms() -> NSUnitElectricResistance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricResistance), megaohms)
    }
    unsafe fn kiloohms() -> NSUnitElectricResistance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricResistance), kiloohms)
    }
    unsafe fn ohms() -> NSUnitElectricResistance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricResistance), ohms)
    }
    unsafe fn milliohms() -> NSUnitElectricResistance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricResistance), milliohms)
    }
    unsafe fn microohms() -> NSUnitElectricResistance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitElectricResistance), microohms)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitEnergy(pub id);
impl std::ops::Deref for NSUnitEnergy {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitEnergy {}
impl NSUnitEnergy {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitEnergy), alloc) })
    }
}
impl PNSSecureCoding for NSUnitEnergy {}
impl INSDimension for NSUnitEnergy {}
impl From<NSUnitEnergy> for NSDimension {
    fn from(child: NSUnitEnergy) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitEnergy {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitEnergy, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitEnergy)) };
        if is_kind_of {
            Ok(NSUnitEnergy(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitEnergy")
        }
    }
}
impl INSUnit for NSUnitEnergy {}
impl PNSCopying for NSUnitEnergy {}
impl From<NSUnitEnergy> for NSUnit {
    fn from(child: NSUnitEnergy) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitEnergy {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitEnergy, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitEnergy)) };
        if is_kind_of {
            Ok(NSUnitEnergy(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitEnergy")
        }
    }
}
impl INSObject for NSUnitEnergy {}
impl PNSObject for NSUnitEnergy {}
impl From<NSUnitEnergy> for NSObject {
    fn from(child: NSUnitEnergy) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitEnergy {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitEnergy, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitEnergy)) };
        if is_kind_of {
            Ok(NSUnitEnergy(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitEnergy")
        }
    }
}
impl INSUnitEnergy for NSUnitEnergy {}
pub trait INSUnitEnergy: Sized + std::ops::Deref {
    unsafe fn kilojoules() -> NSUnitEnergy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitEnergy), kilojoules)
    }
    unsafe fn joules() -> NSUnitEnergy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitEnergy), joules)
    }
    unsafe fn kilocalories() -> NSUnitEnergy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitEnergy), kilocalories)
    }
    unsafe fn calories() -> NSUnitEnergy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitEnergy), calories)
    }
    unsafe fn kilowattHours() -> NSUnitEnergy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitEnergy), kilowattHours)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitFrequency(pub id);
impl std::ops::Deref for NSUnitFrequency {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitFrequency {}
impl NSUnitFrequency {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitFrequency), alloc) })
    }
}
impl PNSSecureCoding for NSUnitFrequency {}
impl INSDimension for NSUnitFrequency {}
impl From<NSUnitFrequency> for NSDimension {
    fn from(child: NSUnitFrequency) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitFrequency {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitFrequency, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFrequency)) };
        if is_kind_of {
            Ok(NSUnitFrequency(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitFrequency")
        }
    }
}
impl INSUnit for NSUnitFrequency {}
impl PNSCopying for NSUnitFrequency {}
impl From<NSUnitFrequency> for NSUnit {
    fn from(child: NSUnitFrequency) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitFrequency {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitFrequency, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFrequency)) };
        if is_kind_of {
            Ok(NSUnitFrequency(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitFrequency")
        }
    }
}
impl INSObject for NSUnitFrequency {}
impl PNSObject for NSUnitFrequency {}
impl From<NSUnitFrequency> for NSObject {
    fn from(child: NSUnitFrequency) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitFrequency {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitFrequency, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFrequency)) };
        if is_kind_of {
            Ok(NSUnitFrequency(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitFrequency")
        }
    }
}
impl INSUnitFrequency for NSUnitFrequency {}
pub trait INSUnitFrequency: Sized + std::ops::Deref {
    unsafe fn terahertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), terahertz)
    }
    unsafe fn gigahertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), gigahertz)
    }
    unsafe fn megahertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), megahertz)
    }
    unsafe fn kilohertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), kilohertz)
    }
    unsafe fn hertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), hertz)
    }
    unsafe fn millihertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), millihertz)
    }
    unsafe fn microhertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), microhertz)
    }
    unsafe fn nanohertz() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), nanohertz)
    }
    unsafe fn framesPerSecond() -> NSUnitFrequency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFrequency), framesPerSecond)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitFuelEfficiency(pub id);
impl std::ops::Deref for NSUnitFuelEfficiency {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitFuelEfficiency {}
impl NSUnitFuelEfficiency {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitFuelEfficiency), alloc) })
    }
}
impl PNSSecureCoding for NSUnitFuelEfficiency {}
impl INSDimension for NSUnitFuelEfficiency {}
impl From<NSUnitFuelEfficiency> for NSDimension {
    fn from(child: NSUnitFuelEfficiency) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitFuelEfficiency {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitFuelEfficiency, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFuelEfficiency)) };
        if is_kind_of {
            Ok(NSUnitFuelEfficiency(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitFuelEfficiency")
        }
    }
}
impl INSUnit for NSUnitFuelEfficiency {}
impl PNSCopying for NSUnitFuelEfficiency {}
impl From<NSUnitFuelEfficiency> for NSUnit {
    fn from(child: NSUnitFuelEfficiency) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitFuelEfficiency {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitFuelEfficiency, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFuelEfficiency)) };
        if is_kind_of {
            Ok(NSUnitFuelEfficiency(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitFuelEfficiency")
        }
    }
}
impl INSObject for NSUnitFuelEfficiency {}
impl PNSObject for NSUnitFuelEfficiency {}
impl From<NSUnitFuelEfficiency> for NSObject {
    fn from(child: NSUnitFuelEfficiency) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitFuelEfficiency {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitFuelEfficiency, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitFuelEfficiency)) };
        if is_kind_of {
            Ok(NSUnitFuelEfficiency(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitFuelEfficiency")
        }
    }
}
impl INSUnitFuelEfficiency for NSUnitFuelEfficiency {}
pub trait INSUnitFuelEfficiency: Sized + std::ops::Deref {
    unsafe fn litersPer100Kilometers() -> NSUnitFuelEfficiency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFuelEfficiency), litersPer100Kilometers)
    }
    unsafe fn milesPerImperialGallon() -> NSUnitFuelEfficiency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFuelEfficiency), milesPerImperialGallon)
    }
    unsafe fn milesPerGallon() -> NSUnitFuelEfficiency
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitFuelEfficiency), milesPerGallon)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitInformationStorage(pub id);
impl std::ops::Deref for NSUnitInformationStorage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitInformationStorage {}
impl NSUnitInformationStorage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitInformationStorage), alloc) })
    }
}
impl PNSSecureCoding for NSUnitInformationStorage {}
impl INSDimension for NSUnitInformationStorage {}
impl From<NSUnitInformationStorage> for NSDimension {
    fn from(child: NSUnitInformationStorage) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitInformationStorage {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitInformationStorage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitInformationStorage)) };
        if is_kind_of {
            Ok(NSUnitInformationStorage(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitInformationStorage")
        }
    }
}
impl INSUnit for NSUnitInformationStorage {}
impl PNSCopying for NSUnitInformationStorage {}
impl From<NSUnitInformationStorage> for NSUnit {
    fn from(child: NSUnitInformationStorage) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitInformationStorage {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitInformationStorage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitInformationStorage)) };
        if is_kind_of {
            Ok(NSUnitInformationStorage(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitInformationStorage")
        }
    }
}
impl INSObject for NSUnitInformationStorage {}
impl PNSObject for NSUnitInformationStorage {}
impl From<NSUnitInformationStorage> for NSObject {
    fn from(child: NSUnitInformationStorage) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitInformationStorage {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitInformationStorage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitInformationStorage)) };
        if is_kind_of {
            Ok(NSUnitInformationStorage(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitInformationStorage")
        }
    }
}
impl INSUnitInformationStorage for NSUnitInformationStorage {}
pub trait INSUnitInformationStorage: Sized + std::ops::Deref {
    unsafe fn bytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), bytes)
    }
    unsafe fn bits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), bits)
    }
    unsafe fn nibbles() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), nibbles)
    }
    unsafe fn yottabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), yottabytes)
    }
    unsafe fn zettabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), zettabytes)
    }
    unsafe fn exabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), exabytes)
    }
    unsafe fn petabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), petabytes)
    }
    unsafe fn terabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), terabytes)
    }
    unsafe fn gigabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), gigabytes)
    }
    unsafe fn megabytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), megabytes)
    }
    unsafe fn kilobytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), kilobytes)
    }
    unsafe fn yottabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), yottabits)
    }
    unsafe fn zettabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), zettabits)
    }
    unsafe fn exabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), exabits)
    }
    unsafe fn petabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), petabits)
    }
    unsafe fn terabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), terabits)
    }
    unsafe fn gigabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), gigabits)
    }
    unsafe fn megabits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), megabits)
    }
    unsafe fn kilobits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), kilobits)
    }
    unsafe fn yobibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), yobibytes)
    }
    unsafe fn zebibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), zebibytes)
    }
    unsafe fn exbibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), exbibytes)
    }
    unsafe fn pebibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), pebibytes)
    }
    unsafe fn tebibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), tebibytes)
    }
    unsafe fn gibibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), gibibytes)
    }
    unsafe fn mebibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), mebibytes)
    }
    unsafe fn kibibytes() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), kibibytes)
    }
    unsafe fn yobibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), yobibits)
    }
    unsafe fn zebibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), zebibits)
    }
    unsafe fn exbibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), exbibits)
    }
    unsafe fn pebibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), pebibits)
    }
    unsafe fn tebibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), tebibits)
    }
    unsafe fn gibibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), gibibits)
    }
    unsafe fn mebibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), mebibits)
    }
    unsafe fn kibibits() -> NSUnitInformationStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitInformationStorage), kibibits)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitLength(pub id);
impl std::ops::Deref for NSUnitLength {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitLength {}
impl NSUnitLength {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitLength), alloc) })
    }
}
impl PNSSecureCoding for NSUnitLength {}
impl INSDimension for NSUnitLength {}
impl From<NSUnitLength> for NSDimension {
    fn from(child: NSUnitLength) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitLength {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitLength, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitLength)) };
        if is_kind_of {
            Ok(NSUnitLength(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitLength")
        }
    }
}
impl INSUnit for NSUnitLength {}
impl PNSCopying for NSUnitLength {}
impl From<NSUnitLength> for NSUnit {
    fn from(child: NSUnitLength) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitLength {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitLength, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitLength)) };
        if is_kind_of {
            Ok(NSUnitLength(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitLength")
        }
    }
}
impl INSObject for NSUnitLength {}
impl PNSObject for NSUnitLength {}
impl From<NSUnitLength> for NSObject {
    fn from(child: NSUnitLength) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitLength {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitLength, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitLength)) };
        if is_kind_of {
            Ok(NSUnitLength(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitLength")
        }
    }
}
impl INSUnitLength for NSUnitLength {}
pub trait INSUnitLength: Sized + std::ops::Deref {
    unsafe fn megameters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), megameters)
    }
    unsafe fn kilometers() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), kilometers)
    }
    unsafe fn hectometers() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), hectometers)
    }
    unsafe fn decameters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), decameters)
    }
    unsafe fn meters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), meters)
    }
    unsafe fn decimeters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), decimeters)
    }
    unsafe fn centimeters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), centimeters)
    }
    unsafe fn millimeters() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), millimeters)
    }
    unsafe fn micrometers() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), micrometers)
    }
    unsafe fn nanometers() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), nanometers)
    }
    unsafe fn picometers() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), picometers)
    }
    unsafe fn inches() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), inches)
    }
    unsafe fn feet() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), feet)
    }
    unsafe fn yards() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), yards)
    }
    unsafe fn miles() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), miles)
    }
    unsafe fn scandinavianMiles() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), scandinavianMiles)
    }
    unsafe fn lightyears() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), lightyears)
    }
    unsafe fn nauticalMiles() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), nauticalMiles)
    }
    unsafe fn fathoms() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), fathoms)
    }
    unsafe fn furlongs() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), furlongs)
    }
    unsafe fn astronomicalUnits() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), astronomicalUnits)
    }
    unsafe fn parsecs() -> NSUnitLength
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitLength), parsecs)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitIlluminance(pub id);
impl std::ops::Deref for NSUnitIlluminance {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitIlluminance {}
impl NSUnitIlluminance {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitIlluminance), alloc) })
    }
}
impl PNSSecureCoding for NSUnitIlluminance {}
impl INSDimension for NSUnitIlluminance {}
impl From<NSUnitIlluminance> for NSDimension {
    fn from(child: NSUnitIlluminance) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitIlluminance {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitIlluminance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitIlluminance)) };
        if is_kind_of {
            Ok(NSUnitIlluminance(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitIlluminance")
        }
    }
}
impl INSUnit for NSUnitIlluminance {}
impl PNSCopying for NSUnitIlluminance {}
impl From<NSUnitIlluminance> for NSUnit {
    fn from(child: NSUnitIlluminance) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitIlluminance {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitIlluminance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitIlluminance)) };
        if is_kind_of {
            Ok(NSUnitIlluminance(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitIlluminance")
        }
    }
}
impl INSObject for NSUnitIlluminance {}
impl PNSObject for NSUnitIlluminance {}
impl From<NSUnitIlluminance> for NSObject {
    fn from(child: NSUnitIlluminance) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitIlluminance {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitIlluminance, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitIlluminance)) };
        if is_kind_of {
            Ok(NSUnitIlluminance(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitIlluminance")
        }
    }
}
impl INSUnitIlluminance for NSUnitIlluminance {}
pub trait INSUnitIlluminance: Sized + std::ops::Deref {
    unsafe fn lux() -> NSUnitIlluminance
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitIlluminance), lux)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitMass(pub id);
impl std::ops::Deref for NSUnitMass {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitMass {}
impl NSUnitMass {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitMass), alloc) })
    }
}
impl PNSSecureCoding for NSUnitMass {}
impl INSDimension for NSUnitMass {}
impl From<NSUnitMass> for NSDimension {
    fn from(child: NSUnitMass) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitMass {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitMass, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitMass)) };
        if is_kind_of {
            Ok(NSUnitMass(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitMass")
        }
    }
}
impl INSUnit for NSUnitMass {}
impl PNSCopying for NSUnitMass {}
impl From<NSUnitMass> for NSUnit {
    fn from(child: NSUnitMass) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitMass {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitMass, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitMass)) };
        if is_kind_of {
            Ok(NSUnitMass(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitMass")
        }
    }
}
impl INSObject for NSUnitMass {}
impl PNSObject for NSUnitMass {}
impl From<NSUnitMass> for NSObject {
    fn from(child: NSUnitMass) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitMass {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitMass, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitMass)) };
        if is_kind_of {
            Ok(NSUnitMass(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitMass")
        }
    }
}
impl INSUnitMass for NSUnitMass {}
pub trait INSUnitMass: Sized + std::ops::Deref {
    unsafe fn kilograms() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), kilograms)
    }
    unsafe fn grams() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), grams)
    }
    unsafe fn decigrams() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), decigrams)
    }
    unsafe fn centigrams() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), centigrams)
    }
    unsafe fn milligrams() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), milligrams)
    }
    unsafe fn micrograms() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), micrograms)
    }
    unsafe fn nanograms() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), nanograms)
    }
    unsafe fn picograms() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), picograms)
    }
    unsafe fn ounces() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), ounces)
    }
    unsafe fn poundsMass() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), poundsMass)
    }
    unsafe fn stones() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), stones)
    }
    unsafe fn metricTons() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), metricTons)
    }
    unsafe fn shortTons() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), shortTons)
    }
    unsafe fn carats() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), carats)
    }
    unsafe fn ouncesTroy() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), ouncesTroy)
    }
    unsafe fn slugs() -> NSUnitMass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitMass), slugs)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitPower(pub id);
impl std::ops::Deref for NSUnitPower {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitPower {}
impl NSUnitPower {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitPower), alloc) })
    }
}
impl PNSSecureCoding for NSUnitPower {}
impl INSDimension for NSUnitPower {}
impl From<NSUnitPower> for NSDimension {
    fn from(child: NSUnitPower) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitPower {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitPower, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPower)) };
        if is_kind_of {
            Ok(NSUnitPower(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitPower")
        }
    }
}
impl INSUnit for NSUnitPower {}
impl PNSCopying for NSUnitPower {}
impl From<NSUnitPower> for NSUnit {
    fn from(child: NSUnitPower) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitPower {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitPower, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPower)) };
        if is_kind_of {
            Ok(NSUnitPower(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitPower")
        }
    }
}
impl INSObject for NSUnitPower {}
impl PNSObject for NSUnitPower {}
impl From<NSUnitPower> for NSObject {
    fn from(child: NSUnitPower) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitPower {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitPower, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPower)) };
        if is_kind_of {
            Ok(NSUnitPower(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitPower")
        }
    }
}
impl INSUnitPower for NSUnitPower {}
pub trait INSUnitPower: Sized + std::ops::Deref {
    unsafe fn terawatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), terawatts)
    }
    unsafe fn gigawatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), gigawatts)
    }
    unsafe fn megawatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), megawatts)
    }
    unsafe fn kilowatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), kilowatts)
    }
    unsafe fn watts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), watts)
    }
    unsafe fn milliwatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), milliwatts)
    }
    unsafe fn microwatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), microwatts)
    }
    unsafe fn nanowatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), nanowatts)
    }
    unsafe fn picowatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), picowatts)
    }
    unsafe fn femtowatts() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), femtowatts)
    }
    unsafe fn horsepower() -> NSUnitPower
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPower), horsepower)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitPressure(pub id);
impl std::ops::Deref for NSUnitPressure {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitPressure {}
impl NSUnitPressure {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitPressure), alloc) })
    }
}
impl PNSSecureCoding for NSUnitPressure {}
impl INSDimension for NSUnitPressure {}
impl From<NSUnitPressure> for NSDimension {
    fn from(child: NSUnitPressure) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitPressure {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitPressure, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPressure)) };
        if is_kind_of {
            Ok(NSUnitPressure(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitPressure")
        }
    }
}
impl INSUnit for NSUnitPressure {}
impl PNSCopying for NSUnitPressure {}
impl From<NSUnitPressure> for NSUnit {
    fn from(child: NSUnitPressure) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitPressure {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitPressure, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPressure)) };
        if is_kind_of {
            Ok(NSUnitPressure(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitPressure")
        }
    }
}
impl INSObject for NSUnitPressure {}
impl PNSObject for NSUnitPressure {}
impl From<NSUnitPressure> for NSObject {
    fn from(child: NSUnitPressure) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitPressure {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitPressure, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitPressure)) };
        if is_kind_of {
            Ok(NSUnitPressure(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitPressure")
        }
    }
}
impl INSUnitPressure for NSUnitPressure {}
pub trait INSUnitPressure: Sized + std::ops::Deref {
    unsafe fn newtonsPerMetersSquared() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), newtonsPerMetersSquared)
    }
    unsafe fn gigapascals() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), gigapascals)
    }
    unsafe fn megapascals() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), megapascals)
    }
    unsafe fn kilopascals() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), kilopascals)
    }
    unsafe fn hectopascals() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), hectopascals)
    }
    unsafe fn inchesOfMercury() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), inchesOfMercury)
    }
    unsafe fn bars() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), bars)
    }
    unsafe fn millibars() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), millibars)
    }
    unsafe fn millimetersOfMercury() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), millimetersOfMercury)
    }
    unsafe fn poundsForcePerSquareInch() -> NSUnitPressure
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitPressure), poundsForcePerSquareInch)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitSpeed(pub id);
impl std::ops::Deref for NSUnitSpeed {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitSpeed {}
impl NSUnitSpeed {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitSpeed), alloc) })
    }
}
impl PNSSecureCoding for NSUnitSpeed {}
impl INSDimension for NSUnitSpeed {}
impl From<NSUnitSpeed> for NSDimension {
    fn from(child: NSUnitSpeed) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitSpeed {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitSpeed, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitSpeed)) };
        if is_kind_of {
            Ok(NSUnitSpeed(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitSpeed")
        }
    }
}
impl INSUnit for NSUnitSpeed {}
impl PNSCopying for NSUnitSpeed {}
impl From<NSUnitSpeed> for NSUnit {
    fn from(child: NSUnitSpeed) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitSpeed {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitSpeed, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitSpeed)) };
        if is_kind_of {
            Ok(NSUnitSpeed(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitSpeed")
        }
    }
}
impl INSObject for NSUnitSpeed {}
impl PNSObject for NSUnitSpeed {}
impl From<NSUnitSpeed> for NSObject {
    fn from(child: NSUnitSpeed) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitSpeed {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitSpeed, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitSpeed)) };
        if is_kind_of {
            Ok(NSUnitSpeed(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitSpeed")
        }
    }
}
impl INSUnitSpeed for NSUnitSpeed {}
pub trait INSUnitSpeed: Sized + std::ops::Deref {
    unsafe fn metersPerSecond() -> NSUnitSpeed
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitSpeed), metersPerSecond)
    }
    unsafe fn kilometersPerHour() -> NSUnitSpeed
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitSpeed), kilometersPerHour)
    }
    unsafe fn milesPerHour() -> NSUnitSpeed
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitSpeed), milesPerHour)
    }
    unsafe fn knots() -> NSUnitSpeed
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitSpeed), knots)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitTemperature(pub id);
impl std::ops::Deref for NSUnitTemperature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitTemperature {}
impl NSUnitTemperature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitTemperature), alloc) })
    }
}
impl PNSSecureCoding for NSUnitTemperature {}
impl INSDimension for NSUnitTemperature {}
impl From<NSUnitTemperature> for NSDimension {
    fn from(child: NSUnitTemperature) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitTemperature {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitTemperature, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitTemperature)) };
        if is_kind_of {
            Ok(NSUnitTemperature(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitTemperature")
        }
    }
}
impl INSUnit for NSUnitTemperature {}
impl PNSCopying for NSUnitTemperature {}
impl From<NSUnitTemperature> for NSUnit {
    fn from(child: NSUnitTemperature) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitTemperature {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitTemperature, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitTemperature)) };
        if is_kind_of {
            Ok(NSUnitTemperature(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitTemperature")
        }
    }
}
impl INSObject for NSUnitTemperature {}
impl PNSObject for NSUnitTemperature {}
impl From<NSUnitTemperature> for NSObject {
    fn from(child: NSUnitTemperature) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitTemperature {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitTemperature, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitTemperature)) };
        if is_kind_of {
            Ok(NSUnitTemperature(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitTemperature")
        }
    }
}
impl INSUnitTemperature for NSUnitTemperature {}
pub trait INSUnitTemperature: Sized + std::ops::Deref {
    unsafe fn kelvin() -> NSUnitTemperature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitTemperature), kelvin)
    }
    unsafe fn celsius() -> NSUnitTemperature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitTemperature), celsius)
    }
    unsafe fn fahrenheit() -> NSUnitTemperature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitTemperature), fahrenheit)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUnitVolume(pub id);
impl std::ops::Deref for NSUnitVolume {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUnitVolume {}
impl NSUnitVolume {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUnitVolume), alloc) })
    }
}
impl PNSSecureCoding for NSUnitVolume {}
impl INSDimension for NSUnitVolume {}
impl From<NSUnitVolume> for NSDimension {
    fn from(child: NSUnitVolume) -> NSDimension {
        NSDimension(child.0)
    }
}
impl std::convert::TryFrom<NSDimension> for NSUnitVolume {
    type Error = &'static str;
    fn try_from(parent: NSDimension) -> Result<NSUnitVolume, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitVolume)) };
        if is_kind_of {
            Ok(NSUnitVolume(parent.0))
        } else {
            Err("This NSDimension cannot be downcasted to NSUnitVolume")
        }
    }
}
impl INSUnit for NSUnitVolume {}
impl PNSCopying for NSUnitVolume {}
impl From<NSUnitVolume> for NSUnit {
    fn from(child: NSUnitVolume) -> NSUnit {
        NSUnit(child.0)
    }
}
impl std::convert::TryFrom<NSUnit> for NSUnitVolume {
    type Error = &'static str;
    fn try_from(parent: NSUnit) -> Result<NSUnitVolume, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitVolume)) };
        if is_kind_of {
            Ok(NSUnitVolume(parent.0))
        } else {
            Err("This NSUnit cannot be downcasted to NSUnitVolume")
        }
    }
}
impl INSObject for NSUnitVolume {}
impl PNSObject for NSUnitVolume {}
impl From<NSUnitVolume> for NSObject {
    fn from(child: NSUnitVolume) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUnitVolume {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUnitVolume, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUnitVolume)) };
        if is_kind_of {
            Ok(NSUnitVolume(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUnitVolume")
        }
    }
}
impl INSUnitVolume for NSUnitVolume {}
pub trait INSUnitVolume: Sized + std::ops::Deref {
    unsafe fn megaliters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), megaliters)
    }
    unsafe fn kiloliters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), kiloliters)
    }
    unsafe fn liters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), liters)
    }
    unsafe fn deciliters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), deciliters)
    }
    unsafe fn centiliters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), centiliters)
    }
    unsafe fn milliliters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), milliliters)
    }
    unsafe fn cubicKilometers() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicKilometers)
    }
    unsafe fn cubicMeters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicMeters)
    }
    unsafe fn cubicDecimeters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicDecimeters)
    }
    unsafe fn cubicCentimeters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicCentimeters)
    }
    unsafe fn cubicMillimeters() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicMillimeters)
    }
    unsafe fn cubicInches() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicInches)
    }
    unsafe fn cubicFeet() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicFeet)
    }
    unsafe fn cubicYards() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicYards)
    }
    unsafe fn cubicMiles() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cubicMiles)
    }
    unsafe fn acreFeet() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), acreFeet)
    }
    unsafe fn bushels() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), bushels)
    }
    unsafe fn teaspoons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), teaspoons)
    }
    unsafe fn tablespoons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), tablespoons)
    }
    unsafe fn fluidOunces() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), fluidOunces)
    }
    unsafe fn cups() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), cups)
    }
    unsafe fn pints() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), pints)
    }
    unsafe fn quarts() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), quarts)
    }
    unsafe fn gallons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), gallons)
    }
    unsafe fn imperialTeaspoons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialTeaspoons)
    }
    unsafe fn imperialTablespoons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialTablespoons)
    }
    unsafe fn imperialFluidOunces() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialFluidOunces)
    }
    unsafe fn imperialPints() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialPints)
    }
    unsafe fn imperialQuarts() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialQuarts)
    }
    unsafe fn imperialGallons() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), imperialGallons)
    }
    unsafe fn metricCups() -> NSUnitVolume
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUnitVolume), metricCups)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMeasurement(pub id);
impl std::ops::Deref for NSMeasurement {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMeasurement {}
impl NSMeasurement {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMeasurement), alloc) })
    }
}
impl PNSCopying for NSMeasurement {}
impl PNSSecureCoding for NSMeasurement {}
impl INSObject for NSMeasurement {}
impl PNSObject for NSMeasurement {}
impl From<NSMeasurement> for NSObject {
    fn from(child: NSMeasurement) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMeasurement {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMeasurement, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMeasurement)) };
        if is_kind_of {
            Ok(NSMeasurement(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMeasurement")
        }
    }
}
impl<UnitType: 'static> INSMeasurement<UnitType> for NSMeasurement {}
pub trait INSMeasurement<UnitType: 'static>: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithDoubleValue_unit_(&self, doubleValue: f64, unit: NSUnit) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDoubleValue : doubleValue unit : unit)
    }
    unsafe fn canBeConvertedToUnit_(&self, unit: NSUnit) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canBeConvertedToUnit: unit)
    }
    unsafe fn measurementByConvertingToUnit_(&self, unit: NSUnit) -> NSMeasurement
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, measurementByConvertingToUnit: unit)
    }
    unsafe fn measurementByAddingMeasurement_(&self, measurement: NSMeasurement) -> NSMeasurement
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, measurementByAddingMeasurement: measurement)
    }
    unsafe fn measurementBySubtractingMeasurement_(
        &self,
        measurement: NSMeasurement,
    ) -> NSMeasurement
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, measurementBySubtractingMeasurement: measurement)
    }
    unsafe fn unit(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unit)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
}
pub const NSNumberFormatterBehavior_NSNumberFormatterBehaviorDefault: NSNumberFormatterBehavior = 0;
pub const NSNumberFormatterBehavior_NSNumberFormatterBehavior10_4: NSNumberFormatterBehavior = 1040;
pub type NSNumberFormatterBehavior = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumberFormatter(pub id);
impl std::ops::Deref for NSNumberFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumberFormatter {}
impl NSNumberFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumberFormatter), alloc) })
    }
}
impl INSFormatter for NSNumberFormatter {}
impl PNSCopying for NSNumberFormatter {}
impl PNSCoding for NSNumberFormatter {}
impl From<NSNumberFormatter> for NSFormatter {
    fn from(child: NSNumberFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSNumberFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSNumberFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSNumberFormatter)) };
        if is_kind_of {
            Ok(NSNumberFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSNumberFormatter")
        }
    }
}
impl INSObject for NSNumberFormatter {}
impl PNSObject for NSNumberFormatter {}
impl From<NSNumberFormatter> for NSObject {
    fn from(child: NSNumberFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNumberFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNumberFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSNumberFormatter)) };
        if is_kind_of {
            Ok(NSNumberFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNumberFormatter")
        }
    }
}
impl INSNumberFormatter for NSNumberFormatter {}
pub trait INSNumberFormatter: Sized + std::ops::Deref {
    unsafe fn getObjectValue_forString_range_error_(
        &self,
        obj: *mut id,
        string: NSString,
        rangep: *mut NSRange,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string range : rangep error : error)
    }
    unsafe fn stringFromNumber_(&self, number: NSNumber) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromNumber: number)
    }
    unsafe fn numberFromString_(&self, string: NSString) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberFromString: string)
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn numberStyle(&self) -> NSNumberFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberStyle)
    }
    unsafe fn setNumberStyle_(&self, numberStyle: NSNumberFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumberStyle: numberStyle)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn generatesDecimalNumbers(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, generatesDecimalNumbers)
    }
    unsafe fn setGeneratesDecimalNumbers_(&self, generatesDecimalNumbers: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGeneratesDecimalNumbers: generatesDecimalNumbers)
    }
    unsafe fn formatterBehavior(&self) -> NSNumberFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formatterBehavior)
    }
    unsafe fn setFormatterBehavior_(&self, formatterBehavior: NSNumberFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormatterBehavior: formatterBehavior)
    }
    unsafe fn negativeFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negativeFormat)
    }
    unsafe fn setNegativeFormat_(&self, negativeFormat: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNegativeFormat: negativeFormat)
    }
    unsafe fn textAttributesForNegativeValues(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForNegativeValues)
    }
    unsafe fn setTextAttributesForNegativeValues_(
        &self,
        textAttributesForNegativeValues: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTextAttributesForNegativeValues: textAttributesForNegativeValues
        )
    }
    unsafe fn positiveFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, positiveFormat)
    }
    unsafe fn setPositiveFormat_(&self, positiveFormat: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPositiveFormat: positiveFormat)
    }
    unsafe fn textAttributesForPositiveValues(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForPositiveValues)
    }
    unsafe fn setTextAttributesForPositiveValues_(
        &self,
        textAttributesForPositiveValues: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTextAttributesForPositiveValues: textAttributesForPositiveValues
        )
    }
    unsafe fn allowsFloats(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsFloats)
    }
    unsafe fn setAllowsFloats_(&self, allowsFloats: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsFloats: allowsFloats)
    }
    unsafe fn decimalSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalSeparator)
    }
    unsafe fn setDecimalSeparator_(&self, decimalSeparator: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDecimalSeparator: decimalSeparator)
    }
    unsafe fn alwaysShowsDecimalSeparator(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, alwaysShowsDecimalSeparator)
    }
    unsafe fn setAlwaysShowsDecimalSeparator_(&self, alwaysShowsDecimalSeparator: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAlwaysShowsDecimalSeparator: alwaysShowsDecimalSeparator
        )
    }
    unsafe fn currencyDecimalSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencyDecimalSeparator)
    }
    unsafe fn setCurrencyDecimalSeparator_(&self, currencyDecimalSeparator: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCurrencyDecimalSeparator: currencyDecimalSeparator)
    }
    unsafe fn usesGroupingSeparator(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, usesGroupingSeparator)
    }
    unsafe fn setUsesGroupingSeparator_(&self, usesGroupingSeparator: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUsesGroupingSeparator: usesGroupingSeparator)
    }
    unsafe fn groupingSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupingSeparator)
    }
    unsafe fn setGroupingSeparator_(&self, groupingSeparator: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGroupingSeparator: groupingSeparator)
    }
    unsafe fn zeroSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zeroSymbol)
    }
    unsafe fn setZeroSymbol_(&self, zeroSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setZeroSymbol: zeroSymbol)
    }
    unsafe fn textAttributesForZero(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForZero)
    }
    unsafe fn setTextAttributesForZero_(&self, textAttributesForZero: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTextAttributesForZero: textAttributesForZero)
    }
    unsafe fn nilSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nilSymbol)
    }
    unsafe fn setNilSymbol_(&self, nilSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNilSymbol: nilSymbol)
    }
    unsafe fn textAttributesForNil(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForNil)
    }
    unsafe fn setTextAttributesForNil_(&self, textAttributesForNil: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTextAttributesForNil: textAttributesForNil)
    }
    unsafe fn notANumberSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, notANumberSymbol)
    }
    unsafe fn setNotANumberSymbol_(&self, notANumberSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNotANumberSymbol: notANumberSymbol)
    }
    unsafe fn textAttributesForNotANumber(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForNotANumber)
    }
    unsafe fn setTextAttributesForNotANumber_(&self, textAttributesForNotANumber: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTextAttributesForNotANumber: textAttributesForNotANumber
        )
    }
    unsafe fn positiveInfinitySymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, positiveInfinitySymbol)
    }
    unsafe fn setPositiveInfinitySymbol_(&self, positiveInfinitySymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPositiveInfinitySymbol: positiveInfinitySymbol)
    }
    unsafe fn textAttributesForPositiveInfinity(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForPositiveInfinity)
    }
    unsafe fn setTextAttributesForPositiveInfinity_(
        &self,
        textAttributesForPositiveInfinity: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTextAttributesForPositiveInfinity: textAttributesForPositiveInfinity
        )
    }
    unsafe fn negativeInfinitySymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negativeInfinitySymbol)
    }
    unsafe fn setNegativeInfinitySymbol_(&self, negativeInfinitySymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNegativeInfinitySymbol: negativeInfinitySymbol)
    }
    unsafe fn textAttributesForNegativeInfinity(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textAttributesForNegativeInfinity)
    }
    unsafe fn setTextAttributesForNegativeInfinity_(
        &self,
        textAttributesForNegativeInfinity: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTextAttributesForNegativeInfinity: textAttributesForNegativeInfinity
        )
    }
    unsafe fn positivePrefix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, positivePrefix)
    }
    unsafe fn setPositivePrefix_(&self, positivePrefix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPositivePrefix: positivePrefix)
    }
    unsafe fn positiveSuffix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, positiveSuffix)
    }
    unsafe fn setPositiveSuffix_(&self, positiveSuffix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPositiveSuffix: positiveSuffix)
    }
    unsafe fn negativePrefix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negativePrefix)
    }
    unsafe fn setNegativePrefix_(&self, negativePrefix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNegativePrefix: negativePrefix)
    }
    unsafe fn negativeSuffix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negativeSuffix)
    }
    unsafe fn setNegativeSuffix_(&self, negativeSuffix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNegativeSuffix: negativeSuffix)
    }
    unsafe fn currencyCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencyCode)
    }
    unsafe fn setCurrencyCode_(&self, currencyCode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCurrencyCode: currencyCode)
    }
    unsafe fn currencySymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencySymbol)
    }
    unsafe fn setCurrencySymbol_(&self, currencySymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCurrencySymbol: currencySymbol)
    }
    unsafe fn internationalCurrencySymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, internationalCurrencySymbol)
    }
    unsafe fn setInternationalCurrencySymbol_(&self, internationalCurrencySymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setInternationalCurrencySymbol: internationalCurrencySymbol
        )
    }
    unsafe fn percentSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentSymbol)
    }
    unsafe fn setPercentSymbol_(&self, percentSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentSymbol: percentSymbol)
    }
    unsafe fn perMillSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, perMillSymbol)
    }
    unsafe fn setPerMillSymbol_(&self, perMillSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPerMillSymbol: perMillSymbol)
    }
    unsafe fn minusSign(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minusSign)
    }
    unsafe fn setMinusSign_(&self, minusSign: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinusSign: minusSign)
    }
    unsafe fn plusSign(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, plusSign)
    }
    unsafe fn setPlusSign_(&self, plusSign: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPlusSign: plusSign)
    }
    unsafe fn exponentSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, exponentSymbol)
    }
    unsafe fn setExponentSymbol_(&self, exponentSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setExponentSymbol: exponentSymbol)
    }
    unsafe fn groupingSize(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupingSize)
    }
    unsafe fn setGroupingSize_(&self, groupingSize: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGroupingSize: groupingSize)
    }
    unsafe fn secondaryGroupingSize(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secondaryGroupingSize)
    }
    unsafe fn setSecondaryGroupingSize_(&self, secondaryGroupingSize: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSecondaryGroupingSize: secondaryGroupingSize)
    }
    unsafe fn multiplier(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, multiplier)
    }
    unsafe fn setMultiplier_(&self, multiplier: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMultiplier: multiplier)
    }
    unsafe fn formatWidth(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formatWidth)
    }
    unsafe fn setFormatWidth_(&self, formatWidth: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormatWidth: formatWidth)
    }
    unsafe fn paddingCharacter(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, paddingCharacter)
    }
    unsafe fn setPaddingCharacter_(&self, paddingCharacter: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPaddingCharacter: paddingCharacter)
    }
    unsafe fn paddingPosition(&self) -> NSNumberFormatterPadPosition
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, paddingPosition)
    }
    unsafe fn setPaddingPosition_(&self, paddingPosition: NSNumberFormatterPadPosition)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPaddingPosition: paddingPosition)
    }
    unsafe fn roundingMode(&self) -> NSNumberFormatterRoundingMode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, roundingMode)
    }
    unsafe fn setRoundingMode_(&self, roundingMode: NSNumberFormatterRoundingMode)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRoundingMode: roundingMode)
    }
    unsafe fn roundingIncrement(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, roundingIncrement)
    }
    unsafe fn setRoundingIncrement_(&self, roundingIncrement: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRoundingIncrement: roundingIncrement)
    }
    unsafe fn minimumIntegerDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumIntegerDigits)
    }
    unsafe fn setMinimumIntegerDigits_(&self, minimumIntegerDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimumIntegerDigits: minimumIntegerDigits)
    }
    unsafe fn maximumIntegerDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumIntegerDigits)
    }
    unsafe fn setMaximumIntegerDigits_(&self, maximumIntegerDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumIntegerDigits: maximumIntegerDigits)
    }
    unsafe fn minimumFractionDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumFractionDigits)
    }
    unsafe fn setMinimumFractionDigits_(&self, minimumFractionDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimumFractionDigits: minimumFractionDigits)
    }
    unsafe fn maximumFractionDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumFractionDigits)
    }
    unsafe fn setMaximumFractionDigits_(&self, maximumFractionDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumFractionDigits: maximumFractionDigits)
    }
    unsafe fn minimum(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimum)
    }
    unsafe fn setMinimum_(&self, minimum: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimum: minimum)
    }
    unsafe fn maximum(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximum)
    }
    unsafe fn setMaximum_(&self, maximum: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximum: maximum)
    }
    unsafe fn currencyGroupingSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencyGroupingSeparator)
    }
    unsafe fn setCurrencyGroupingSeparator_(&self, currencyGroupingSeparator: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setCurrencyGroupingSeparator: currencyGroupingSeparator
        )
    }
    unsafe fn isLenient(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLenient)
    }
    unsafe fn setLenient_(&self, lenient: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLenient: lenient)
    }
    unsafe fn usesSignificantDigits(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, usesSignificantDigits)
    }
    unsafe fn setUsesSignificantDigits_(&self, usesSignificantDigits: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUsesSignificantDigits: usesSignificantDigits)
    }
    unsafe fn minimumSignificantDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumSignificantDigits)
    }
    unsafe fn setMinimumSignificantDigits_(&self, minimumSignificantDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimumSignificantDigits: minimumSignificantDigits)
    }
    unsafe fn maximumSignificantDigits(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumSignificantDigits)
    }
    unsafe fn setMaximumSignificantDigits_(&self, maximumSignificantDigits: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumSignificantDigits: maximumSignificantDigits)
    }
    unsafe fn isPartialStringValidationEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isPartialStringValidationEnabled)
    }
    unsafe fn setPartialStringValidationEnabled_(&self, partialStringValidationEnabled: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setPartialStringValidationEnabled: partialStringValidationEnabled
        )
    }
    unsafe fn localizedStringFromNumber_numberStyle_(
        num: NSNumber,
        nstyle: NSNumberFormatterStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSNumberFormatter) , localizedStringFromNumber : num numberStyle : nstyle)
    }
    unsafe fn defaultFormatterBehavior() -> NSNumberFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNumberFormatter), defaultFormatterBehavior)
    }
    unsafe fn setDefaultFormatterBehavior_(behavior: NSNumberFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSNumberFormatter),
            setDefaultFormatterBehavior: behavior
        )
    }
}
pub const NSNumberFormatterStyle_NSNumberFormatterNoStyle: NSNumberFormatterStyle = 0;
pub const NSNumberFormatterStyle_NSNumberFormatterDecimalStyle: NSNumberFormatterStyle = 1;
pub const NSNumberFormatterStyle_NSNumberFormatterCurrencyStyle: NSNumberFormatterStyle = 2;
pub const NSNumberFormatterStyle_NSNumberFormatterPercentStyle: NSNumberFormatterStyle = 3;
pub const NSNumberFormatterStyle_NSNumberFormatterScientificStyle: NSNumberFormatterStyle = 4;
pub const NSNumberFormatterStyle_NSNumberFormatterSpellOutStyle: NSNumberFormatterStyle = 5;
pub const NSNumberFormatterStyle_NSNumberFormatterOrdinalStyle: NSNumberFormatterStyle = 6;
pub const NSNumberFormatterStyle_NSNumberFormatterCurrencyISOCodeStyle: NSNumberFormatterStyle = 8;
pub const NSNumberFormatterStyle_NSNumberFormatterCurrencyPluralStyle: NSNumberFormatterStyle = 9;
pub const NSNumberFormatterStyle_NSNumberFormatterCurrencyAccountingStyle: NSNumberFormatterStyle =
    10;
pub type NSNumberFormatterStyle = NSUInteger;
pub const NSNumberFormatterPadPosition_NSNumberFormatterPadBeforePrefix:
    NSNumberFormatterPadPosition = 0;
pub const NSNumberFormatterPadPosition_NSNumberFormatterPadAfterPrefix:
    NSNumberFormatterPadPosition = 1;
pub const NSNumberFormatterPadPosition_NSNumberFormatterPadBeforeSuffix:
    NSNumberFormatterPadPosition = 2;
pub const NSNumberFormatterPadPosition_NSNumberFormatterPadAfterSuffix:
    NSNumberFormatterPadPosition = 3;
pub type NSNumberFormatterPadPosition = NSUInteger;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundCeiling:
    NSNumberFormatterRoundingMode = 0;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundFloor: NSNumberFormatterRoundingMode =
    1;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundDown: NSNumberFormatterRoundingMode =
    2;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundUp: NSNumberFormatterRoundingMode = 3;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundHalfEven:
    NSNumberFormatterRoundingMode = 4;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundHalfDown:
    NSNumberFormatterRoundingMode = 5;
pub const NSNumberFormatterRoundingMode_NSNumberFormatterRoundHalfUp:
    NSNumberFormatterRoundingMode = 6;
pub type NSNumberFormatterRoundingMode = NSUInteger;
pub type NSLocaleKey = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLocale), alloc) })
    }
}
impl PNSCopying for NSLocale {}
impl PNSSecureCoding for NSLocale {}
impl INSObject for NSLocale {}
impl PNSObject for NSLocale {}
impl From<NSLocale> for NSObject {
    fn from(child: NSLocale) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSLocale {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSLocale, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSLocale)) };
        if is_kind_of {
            Ok(NSLocale(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSLocale")
        }
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: key)
    }
    unsafe fn displayNameForKey_value_(&self, key: NSString, value: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , displayNameForKey : key value : value)
    }
    unsafe fn initWithLocaleIdentifier_(&self, string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLocaleIdentifier: string)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
impl NSLocale_NSExtendedLocale for NSLocale {}
pub trait NSLocale_NSExtendedLocale: Sized + std::ops::Deref {
    unsafe fn localizedStringForLocaleIdentifier_(&self, localeIdentifier: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForLocaleIdentifier: localeIdentifier)
    }
    unsafe fn localizedStringForLanguageCode_(&self, languageCode: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForLanguageCode: languageCode)
    }
    unsafe fn localizedStringForCountryCode_(&self, countryCode: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForCountryCode: countryCode)
    }
    unsafe fn localizedStringForScriptCode_(&self, scriptCode: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForScriptCode: scriptCode)
    }
    unsafe fn localizedStringForVariantCode_(&self, variantCode: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForVariantCode: variantCode)
    }
    unsafe fn localizedStringForCalendarIdentifier_(&self, calendarIdentifier: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            localizedStringForCalendarIdentifier: calendarIdentifier
        )
    }
    unsafe fn localizedStringForCollationIdentifier_(
        &self,
        collationIdentifier: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            localizedStringForCollationIdentifier: collationIdentifier
        )
    }
    unsafe fn localizedStringForCurrencyCode_(&self, currencyCode: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringForCurrencyCode: currencyCode)
    }
    unsafe fn localizedStringForCollatorIdentifier_(&self, collatorIdentifier: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            localizedStringForCollatorIdentifier: collatorIdentifier
        )
    }
    unsafe fn localeIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localeIdentifier)
    }
    unsafe fn languageCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, languageCode)
    }
    unsafe fn countryCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countryCode)
    }
    unsafe fn scriptCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptCode)
    }
    unsafe fn variantCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, variantCode)
    }
    unsafe fn exemplarCharacterSet(&self) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, exemplarCharacterSet)
    }
    unsafe fn calendarIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendarIdentifier)
    }
    unsafe fn collationIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, collationIdentifier)
    }
    unsafe fn usesMetricSystem(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, usesMetricSystem)
    }
    unsafe fn decimalSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalSeparator)
    }
    unsafe fn groupingSeparator(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupingSeparator)
    }
    unsafe fn currencySymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencySymbol)
    }
    unsafe fn currencyCode(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currencyCode)
    }
    unsafe fn collatorIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, collatorIdentifier)
    }
    unsafe fn quotationBeginDelimiter(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quotationBeginDelimiter)
    }
    unsafe fn quotationEndDelimiter(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quotationEndDelimiter)
    }
    unsafe fn alternateQuotationBeginDelimiter(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, alternateQuotationBeginDelimiter)
    }
    unsafe fn alternateQuotationEndDelimiter(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, alternateQuotationEndDelimiter)
    }
}
impl NSLocale_NSLocaleCreation for NSLocale {}
pub trait NSLocale_NSLocaleCreation: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn localeWithLocaleIdentifier_(ident: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), localeWithLocaleIdentifier: ident)
    }
    unsafe fn autoupdatingCurrentLocale() -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), autoupdatingCurrentLocale)
    }
    unsafe fn currentLocale() -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), currentLocale)
    }
    unsafe fn systemLocale() -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), systemLocale)
    }
}
impl NSLocale_NSLocaleGeneralInfo for NSLocale {}
pub trait NSLocale_NSLocaleGeneralInfo: Sized + std::ops::Deref {
    unsafe fn componentsFromLocaleIdentifier_(string: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), componentsFromLocaleIdentifier: string)
    }
    unsafe fn localeIdentifierFromComponents_(dict: NSDictionary) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), localeIdentifierFromComponents: dict)
    }
    unsafe fn canonicalLocaleIdentifierFromString_(string: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLocale),
            canonicalLocaleIdentifierFromString: string
        )
    }
    unsafe fn canonicalLanguageIdentifierFromString_(string: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLocale),
            canonicalLanguageIdentifierFromString: string
        )
    }
    unsafe fn localeIdentifierFromWindowsLocaleCode_(lcid: u32) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLocale),
            localeIdentifierFromWindowsLocaleCode: lcid
        )
    }
    unsafe fn windowsLocaleCodeFromLocaleIdentifier_(localeIdentifier: NSString) -> u32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLocale),
            windowsLocaleCodeFromLocaleIdentifier: localeIdentifier
        )
    }
    unsafe fn characterDirectionForLanguage_(isoLangCode: NSString) -> NSLocaleLanguageDirection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), characterDirectionForLanguage: isoLangCode)
    }
    unsafe fn lineDirectionForLanguage_(isoLangCode: NSString) -> NSLocaleLanguageDirection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), lineDirectionForLanguage: isoLangCode)
    }
    unsafe fn availableLocaleIdentifiers() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), availableLocaleIdentifiers)
    }
    unsafe fn ISOLanguageCodes() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), ISOLanguageCodes)
    }
    unsafe fn ISOCountryCodes() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), ISOCountryCodes)
    }
    unsafe fn ISOCurrencyCodes() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), ISOCurrencyCodes)
    }
    unsafe fn commonISOCurrencyCodes() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), commonISOCurrencyCodes)
    }
    unsafe fn preferredLanguages() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSLocale), preferredLanguages)
    }
}
pub const NSLocaleLanguageDirection_NSLocaleLanguageDirectionUnknown: NSLocaleLanguageDirection = 0;
pub const NSLocaleLanguageDirection_NSLocaleLanguageDirectionLeftToRight:
    NSLocaleLanguageDirection = 1;
pub const NSLocaleLanguageDirection_NSLocaleLanguageDirectionRightToLeft:
    NSLocaleLanguageDirection = 2;
pub const NSLocaleLanguageDirection_NSLocaleLanguageDirectionTopToBottom:
    NSLocaleLanguageDirection = 3;
pub const NSLocaleLanguageDirection_NSLocaleLanguageDirectionBottomToTop:
    NSLocaleLanguageDirection = 4;
pub type NSLocaleLanguageDirection = NSUInteger;
extern "C" {
    pub static NSCurrentLocaleDidChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSLocaleIdentifier: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleLanguageCode: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCountryCode: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleScriptCode: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleVariantCode: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleExemplarCharacterSet: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCalendar: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCollationIdentifier: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleUsesMetricSystem: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleMeasurementSystem: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleDecimalSeparator: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleGroupingSeparator: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCurrencySymbol: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCurrencyCode: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleCollatorIdentifier: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleQuotationBeginDelimiterKey: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleQuotationEndDelimiterKey: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleAlternateQuotationBeginDelimiterKey: NSLocaleKey;
}
extern "C" {
    pub static NSLocaleAlternateQuotationEndDelimiterKey: NSLocaleKey;
}
extern "C" {
    pub static NSGregorianCalendar: NSString;
}
extern "C" {
    pub static NSBuddhistCalendar: NSString;
}
extern "C" {
    pub static NSChineseCalendar: NSString;
}
extern "C" {
    pub static NSHebrewCalendar: NSString;
}
extern "C" {
    pub static NSIslamicCalendar: NSString;
}
extern "C" {
    pub static NSIslamicCivilCalendar: NSString;
}
extern "C" {
    pub static NSJapaneseCalendar: NSString;
}
extern "C" {
    pub static NSRepublicOfChinaCalendar: NSString;
}
extern "C" {
    pub static NSPersianCalendar: NSString;
}
extern "C" {
    pub static NSIndianCalendar: NSString;
}
extern "C" {
    pub static NSISO8601Calendar: NSString;
}
pub const NSMeasurementFormatterUnitOptions_NSMeasurementFormatterUnitOptionsProvidedUnit:
    NSMeasurementFormatterUnitOptions = 1;
pub const NSMeasurementFormatterUnitOptions_NSMeasurementFormatterUnitOptionsNaturalScale:
    NSMeasurementFormatterUnitOptions = 2;
pub const NSMeasurementFormatterUnitOptions_NSMeasurementFormatterUnitOptionsTemperatureWithoutUnit : NSMeasurementFormatterUnitOptions = 4 ;
pub type NSMeasurementFormatterUnitOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMeasurementFormatter(pub id);
impl std::ops::Deref for NSMeasurementFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMeasurementFormatter {}
impl NSMeasurementFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMeasurementFormatter), alloc) })
    }
}
impl PNSSecureCoding for NSMeasurementFormatter {}
impl INSFormatter for NSMeasurementFormatter {}
impl PNSCopying for NSMeasurementFormatter {}
impl PNSCoding for NSMeasurementFormatter {}
impl From<NSMeasurementFormatter> for NSFormatter {
    fn from(child: NSMeasurementFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSMeasurementFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSMeasurementFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMeasurementFormatter)) };
        if is_kind_of {
            Ok(NSMeasurementFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSMeasurementFormatter")
        }
    }
}
impl INSObject for NSMeasurementFormatter {}
impl PNSObject for NSMeasurementFormatter {}
impl From<NSMeasurementFormatter> for NSObject {
    fn from(child: NSMeasurementFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMeasurementFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMeasurementFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMeasurementFormatter)) };
        if is_kind_of {
            Ok(NSMeasurementFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMeasurementFormatter")
        }
    }
}
impl INSMeasurementFormatter for NSMeasurementFormatter {}
pub trait INSMeasurementFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromMeasurement_(&self, measurement: NSMeasurement) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromMeasurement: measurement)
    }
    unsafe fn stringFromUnit_(&self, unit: NSUnit) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromUnit: unit)
    }
    unsafe fn unitOptions(&self) -> NSMeasurementFormatterUnitOptions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitOptions)
    }
    unsafe fn setUnitOptions_(&self, unitOptions: NSMeasurementFormatterUnitOptions)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitOptions: unitOptions)
    }
    unsafe fn unitStyle(&self) -> NSFormattingUnitStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitStyle)
    }
    unsafe fn setUnitStyle_(&self, unitStyle: NSFormattingUnitStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitStyle: unitStyle)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn numberFormatter(&self) -> NSNumberFormatter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberFormatter)
    }
    unsafe fn setNumberFormatter_(&self, numberFormatter: NSNumberFormatter)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumberFormatter: numberFormatter)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPersonNameComponents(pub id);
impl std::ops::Deref for NSPersonNameComponents {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPersonNameComponents {}
impl NSPersonNameComponents {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPersonNameComponents), alloc) })
    }
}
impl PNSCopying for NSPersonNameComponents {}
impl PNSSecureCoding for NSPersonNameComponents {}
impl INSObject for NSPersonNameComponents {}
impl PNSObject for NSPersonNameComponents {}
impl From<NSPersonNameComponents> for NSObject {
    fn from(child: NSPersonNameComponents) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPersonNameComponents {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPersonNameComponents, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSPersonNameComponents)) };
        if is_kind_of {
            Ok(NSPersonNameComponents(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPersonNameComponents")
        }
    }
}
impl INSPersonNameComponents for NSPersonNameComponents {}
pub trait INSPersonNameComponents: Sized + std::ops::Deref {
    unsafe fn namePrefix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, namePrefix)
    }
    unsafe fn setNamePrefix_(&self, namePrefix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNamePrefix: namePrefix)
    }
    unsafe fn givenName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, givenName)
    }
    unsafe fn setGivenName_(&self, givenName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGivenName: givenName)
    }
    unsafe fn middleName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, middleName)
    }
    unsafe fn setMiddleName_(&self, middleName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMiddleName: middleName)
    }
    unsafe fn familyName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, familyName)
    }
    unsafe fn setFamilyName_(&self, familyName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFamilyName: familyName)
    }
    unsafe fn nameSuffix(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nameSuffix)
    }
    unsafe fn setNameSuffix_(&self, nameSuffix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNameSuffix: nameSuffix)
    }
    unsafe fn nickname(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nickname)
    }
    unsafe fn setNickname_(&self, nickname: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNickname: nickname)
    }
    unsafe fn phoneticRepresentation(&self) -> NSPersonNameComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, phoneticRepresentation)
    }
    unsafe fn setPhoneticRepresentation_(&self, phoneticRepresentation: NSPersonNameComponents)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPhoneticRepresentation: phoneticRepresentation)
    }
}
pub const NSPersonNameComponentsFormatterStyle_NSPersonNameComponentsFormatterStyleDefault:
    NSPersonNameComponentsFormatterStyle = 0;
pub const NSPersonNameComponentsFormatterStyle_NSPersonNameComponentsFormatterStyleShort:
    NSPersonNameComponentsFormatterStyle = 1;
pub const NSPersonNameComponentsFormatterStyle_NSPersonNameComponentsFormatterStyleMedium:
    NSPersonNameComponentsFormatterStyle = 2;
pub const NSPersonNameComponentsFormatterStyle_NSPersonNameComponentsFormatterStyleLong:
    NSPersonNameComponentsFormatterStyle = 3;
pub const NSPersonNameComponentsFormatterStyle_NSPersonNameComponentsFormatterStyleAbbreviated:
    NSPersonNameComponentsFormatterStyle = 4;
pub type NSPersonNameComponentsFormatterStyle = NSInteger;
pub const NSPersonNameComponentsFormatterOptions_NSPersonNameComponentsFormatterPhonetic:
    NSPersonNameComponentsFormatterOptions = 2;
pub type NSPersonNameComponentsFormatterOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPersonNameComponentsFormatter(pub id);
impl std::ops::Deref for NSPersonNameComponentsFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPersonNameComponentsFormatter {}
impl NSPersonNameComponentsFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPersonNameComponentsFormatter), alloc) })
    }
}
impl INSFormatter for NSPersonNameComponentsFormatter {}
impl PNSCopying for NSPersonNameComponentsFormatter {}
impl PNSCoding for NSPersonNameComponentsFormatter {}
impl From<NSPersonNameComponentsFormatter> for NSFormatter {
    fn from(child: NSPersonNameComponentsFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSPersonNameComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSPersonNameComponentsFormatter, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSPersonNameComponentsFormatter)
            )
        };
        if is_kind_of {
            Ok(NSPersonNameComponentsFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSPersonNameComponentsFormatter")
        }
    }
}
impl INSObject for NSPersonNameComponentsFormatter {}
impl PNSObject for NSPersonNameComponentsFormatter {}
impl From<NSPersonNameComponentsFormatter> for NSObject {
    fn from(child: NSPersonNameComponentsFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPersonNameComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPersonNameComponentsFormatter, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSPersonNameComponentsFormatter)
            )
        };
        if is_kind_of {
            Ok(NSPersonNameComponentsFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPersonNameComponentsFormatter")
        }
    }
}
impl INSPersonNameComponentsFormatter for NSPersonNameComponentsFormatter {}
pub trait INSPersonNameComponentsFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromPersonNameComponents_(&self, components: NSPersonNameComponents) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromPersonNameComponents: components)
    }
    unsafe fn annotatedStringFromPersonNameComponents_(
        &self,
        components: NSPersonNameComponents,
    ) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, annotatedStringFromPersonNameComponents: components)
    }
    unsafe fn personNameComponentsFromString_(&self, string: NSString) -> NSPersonNameComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, personNameComponentsFromString: string)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn style(&self) -> NSPersonNameComponentsFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, style)
    }
    unsafe fn setStyle_(&self, style: NSPersonNameComponentsFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStyle: style)
    }
    unsafe fn isPhonetic(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isPhonetic)
    }
    unsafe fn setPhonetic_(&self, phonetic: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPhonetic: phonetic)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn localizedStringFromPersonNameComponents_style_options_(
        components: NSPersonNameComponents,
        nameFormatStyle: NSPersonNameComponentsFormatterStyle,
        nameOptions: NSPersonNameComponentsFormatterOptions,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPersonNameComponentsFormatter) , localizedStringFromPersonNameComponents : components style : nameFormatStyle options : nameOptions)
    }
}
extern "C" {
    pub static NSPersonNameComponentKey: NSString;
}
extern "C" {
    pub static NSPersonNameComponentGivenName: NSString;
}
extern "C" {
    pub static NSPersonNameComponentFamilyName: NSString;
}
extern "C" {
    pub static NSPersonNameComponentMiddleName: NSString;
}
extern "C" {
    pub static NSPersonNameComponentPrefix: NSString;
}
extern "C" {
    pub static NSPersonNameComponentSuffix: NSString;
}
extern "C" {
    pub static NSPersonNameComponentNickname: NSString;
}
extern "C" {
    pub static NSPersonNameComponentDelimiter: NSString;
}
pub const NSRelativeDateTimeFormatterStyle_NSRelativeDateTimeFormatterStyleNumeric:
    NSRelativeDateTimeFormatterStyle = 0;
pub const NSRelativeDateTimeFormatterStyle_NSRelativeDateTimeFormatterStyleNamed:
    NSRelativeDateTimeFormatterStyle = 1;
pub type NSRelativeDateTimeFormatterStyle = NSInteger;
pub const NSRelativeDateTimeFormatterUnitsStyle_NSRelativeDateTimeFormatterUnitsStyleFull:
    NSRelativeDateTimeFormatterUnitsStyle = 0;
pub const NSRelativeDateTimeFormatterUnitsStyle_NSRelativeDateTimeFormatterUnitsStyleSpellOut:
    NSRelativeDateTimeFormatterUnitsStyle = 1;
pub const NSRelativeDateTimeFormatterUnitsStyle_NSRelativeDateTimeFormatterUnitsStyleShort:
    NSRelativeDateTimeFormatterUnitsStyle = 2;
pub const NSRelativeDateTimeFormatterUnitsStyle_NSRelativeDateTimeFormatterUnitsStyleAbbreviated:
    NSRelativeDateTimeFormatterUnitsStyle = 3;
pub type NSRelativeDateTimeFormatterUnitsStyle = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSRelativeDateTimeFormatter(pub id);
impl std::ops::Deref for NSRelativeDateTimeFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRelativeDateTimeFormatter {}
impl NSRelativeDateTimeFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSRelativeDateTimeFormatter), alloc) })
    }
}
impl INSFormatter for NSRelativeDateTimeFormatter {}
impl PNSCopying for NSRelativeDateTimeFormatter {}
impl PNSCoding for NSRelativeDateTimeFormatter {}
impl From<NSRelativeDateTimeFormatter> for NSFormatter {
    fn from(child: NSRelativeDateTimeFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSRelativeDateTimeFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSRelativeDateTimeFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSRelativeDateTimeFormatter)) };
        if is_kind_of {
            Ok(NSRelativeDateTimeFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSRelativeDateTimeFormatter")
        }
    }
}
impl INSObject for NSRelativeDateTimeFormatter {}
impl PNSObject for NSRelativeDateTimeFormatter {}
impl From<NSRelativeDateTimeFormatter> for NSObject {
    fn from(child: NSRelativeDateTimeFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRelativeDateTimeFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRelativeDateTimeFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSRelativeDateTimeFormatter)) };
        if is_kind_of {
            Ok(NSRelativeDateTimeFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRelativeDateTimeFormatter")
        }
    }
}
impl INSRelativeDateTimeFormatter for NSRelativeDateTimeFormatter {}
pub trait INSRelativeDateTimeFormatter: Sized + std::ops::Deref {
    unsafe fn localizedStringFromDateComponents_(
        &self,
        dateComponents: NSDateComponents,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringFromDateComponents: dateComponents)
    }
    unsafe fn localizedStringFromTimeInterval_(&self, timeInterval: NSTimeInterval) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedStringFromTimeInterval: timeInterval)
    }
    unsafe fn localizedStringForDate_relativeToDate_(
        &self,
        date: NSDate,
        referenceDate: NSDate,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , localizedStringForDate : date relativeToDate : referenceDate)
    }
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn dateTimeStyle(&self) -> NSRelativeDateTimeFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateTimeStyle)
    }
    unsafe fn setDateTimeStyle_(&self, dateTimeStyle: NSRelativeDateTimeFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateTimeStyle: dateTimeStyle)
    }
    unsafe fn unitsStyle(&self) -> NSRelativeDateTimeFormatterUnitsStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitsStyle)
    }
    unsafe fn setUnitsStyle_(&self, unitsStyle: NSRelativeDateTimeFormatterUnitsStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitsStyle: unitsStyle)
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSListFormatter(pub id);
impl std::ops::Deref for NSListFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSListFormatter {}
impl NSListFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSListFormatter), alloc) })
    }
}
impl INSFormatter for NSListFormatter {}
impl PNSCopying for NSListFormatter {}
impl PNSCoding for NSListFormatter {}
impl From<NSListFormatter> for NSFormatter {
    fn from(child: NSListFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSListFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSListFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSListFormatter)) };
        if is_kind_of {
            Ok(NSListFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSListFormatter")
        }
    }
}
impl INSObject for NSListFormatter {}
impl PNSObject for NSListFormatter {}
impl From<NSListFormatter> for NSObject {
    fn from(child: NSListFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSListFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSListFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSListFormatter)) };
        if is_kind_of {
            Ok(NSListFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSListFormatter")
        }
    }
}
impl INSListFormatter for NSListFormatter {}
pub trait INSListFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromItems_(&self, items: NSArray) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromItems: items)
    }
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn itemFormatter(&self) -> NSFormatter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, itemFormatter)
    }
    unsafe fn setItemFormatter_(&self, itemFormatter: NSFormatter)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setItemFormatter: itemFormatter)
    }
    unsafe fn localizedStringByJoiningStrings_(strings: NSArray) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSListFormatter),
            localizedStringByJoiningStrings: strings
        )
    }
}
pub const NSRoundingMode_NSRoundPlain: NSRoundingMode = 0;
pub const NSRoundingMode_NSRoundDown: NSRoundingMode = 1;
pub const NSRoundingMode_NSRoundUp: NSRoundingMode = 2;
pub const NSRoundingMode_NSRoundBankers: NSRoundingMode = 3;
pub type NSRoundingMode = NSUInteger;
pub const NSCalculationError_NSCalculationNoError: NSCalculationError = 0;
pub const NSCalculationError_NSCalculationLossOfPrecision: NSCalculationError = 1;
pub const NSCalculationError_NSCalculationUnderflow: NSCalculationError = 2;
pub const NSCalculationError_NSCalculationOverflow: NSCalculationError = 3;
pub const NSCalculationError_NSCalculationDivideByZero: NSCalculationError = 4;
pub type NSCalculationError = NSUInteger;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct NSDecimal {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub _mantissa: [::std::os::raw::c_ushort; 8usize],
}
impl NSDecimal {
    #[inline]
    pub fn _exponent(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set__exponent(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn _length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _isNegative(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__isNegative(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _isCompact(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__isCompact(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _exponent: ::std::os::raw::c_int,
        _length: ::std::os::raw::c_uint,
        _isNegative: ::std::os::raw::c_uint,
        _isCompact: ::std::os::raw::c_uint,
        _reserved: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let _exponent: u32 = unsafe { ::std::mem::transmute(_exponent) };
            _exponent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let _length: u32 = unsafe { ::std::mem::transmute(_length) };
            _length as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let _isNegative: u32 = unsafe { ::std::mem::transmute(_isNegative) };
            _isNegative as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let _isCompact: u32 = unsafe { ::std::mem::transmute(_isCompact) };
            _isCompact as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let _reserved: u32 = unsafe { ::std::mem::transmute(_reserved) };
            _reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn NSDecimalCopy(destination: *mut NSDecimal, source: *const NSDecimal);
}
extern "C" {
    pub fn NSDecimalCompact(number: *mut NSDecimal);
}
extern "C" {
    pub fn NSDecimalCompare(
        leftOperand: *const NSDecimal,
        rightOperand: *const NSDecimal,
    ) -> NSComparisonResult;
}
extern "C" {
    pub fn NSDecimalRound(
        result: *mut NSDecimal,
        number: *const NSDecimal,
        scale: NSInteger,
        roundingMode: NSRoundingMode,
    );
}
extern "C" {
    pub fn NSDecimalNormalize(
        number1: *mut NSDecimal,
        number2: *mut NSDecimal,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalAdd(
        result: *mut NSDecimal,
        leftOperand: *const NSDecimal,
        rightOperand: *const NSDecimal,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalSubtract(
        result: *mut NSDecimal,
        leftOperand: *const NSDecimal,
        rightOperand: *const NSDecimal,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalMultiply(
        result: *mut NSDecimal,
        leftOperand: *const NSDecimal,
        rightOperand: *const NSDecimal,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalDivide(
        result: *mut NSDecimal,
        leftOperand: *const NSDecimal,
        rightOperand: *const NSDecimal,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalPower(
        result: *mut NSDecimal,
        number: *const NSDecimal,
        power: NSUInteger,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalMultiplyByPowerOf10(
        result: *mut NSDecimal,
        number: *const NSDecimal,
        power: ::std::os::raw::c_short,
        roundingMode: NSRoundingMode,
    ) -> NSCalculationError;
}
extern "C" {
    pub fn NSDecimalString(dcm: *const NSDecimal, locale: id) -> NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSScanner(pub id);
impl std::ops::Deref for NSScanner {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScanner {}
impl NSScanner {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSScanner), alloc) })
    }
}
impl PNSCopying for NSScanner {}
impl INSObject for NSScanner {}
impl PNSObject for NSScanner {}
impl From<NSScanner> for NSObject {
    fn from(child: NSScanner) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSScanner {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSScanner, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSScanner)) };
        if is_kind_of {
            Ok(NSScanner(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSScanner")
        }
    }
}
impl INSScanner for NSScanner {}
pub trait INSScanner: Sized + std::ops::Deref {
    unsafe fn initWithString_(&self, string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: string)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
    unsafe fn scanLocation(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanLocation)
    }
    unsafe fn setScanLocation_(&self, scanLocation: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setScanLocation: scanLocation)
    }
    unsafe fn charactersToBeSkipped(&self) -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, charactersToBeSkipped)
    }
    unsafe fn setCharactersToBeSkipped_(&self, charactersToBeSkipped: NSCharacterSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCharactersToBeSkipped: charactersToBeSkipped)
    }
    unsafe fn caseSensitive(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, caseSensitive)
    }
    unsafe fn setCaseSensitive_(&self, caseSensitive: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCaseSensitive: caseSensitive)
    }
    unsafe fn locale(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
}
impl NSScanner_NSExtendedScanner for NSScanner {}
pub trait NSScanner_NSExtendedScanner: Sized + std::ops::Deref {
    unsafe fn scanInt_(&self, result: *mut ::std::os::raw::c_int) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanInt: result)
    }
    unsafe fn scanInteger_(&self, result: *mut NSInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanInteger: result)
    }
    unsafe fn scanLongLong_(&self, result: *mut ::std::os::raw::c_longlong) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanLongLong: result)
    }
    unsafe fn scanUnsignedLongLong_(&self, result: *mut ::std::os::raw::c_ulonglong) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanUnsignedLongLong: result)
    }
    unsafe fn scanFloat_(&self, result: *mut f32) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanFloat: result)
    }
    unsafe fn scanDouble_(&self, result: *mut f64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanDouble: result)
    }
    unsafe fn scanHexInt_(&self, result: *mut ::std::os::raw::c_uint) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanHexInt: result)
    }
    unsafe fn scanHexLongLong_(&self, result: *mut ::std::os::raw::c_ulonglong) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanHexLongLong: result)
    }
    unsafe fn scanHexFloat_(&self, result: *mut f32) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanHexFloat: result)
    }
    unsafe fn scanHexDouble_(&self, result: *mut f64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanHexDouble: result)
    }
    unsafe fn scanString_intoString_(&self, string: NSString, result: *mut NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scanString : string intoString : result)
    }
    unsafe fn scanCharactersFromSet_intoString_(
        &self,
        set: NSCharacterSet,
        result: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scanCharactersFromSet : set intoString : result)
    }
    unsafe fn scanUpToString_intoString_(&self, string: NSString, result: *mut NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scanUpToString : string intoString : result)
    }
    unsafe fn scanUpToCharactersFromSet_intoString_(
        &self,
        set: NSCharacterSet,
        result: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scanUpToCharactersFromSet : set intoString : result)
    }
    unsafe fn isAtEnd(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isAtEnd)
    }
    unsafe fn scannerWithString_(string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSScanner), scannerWithString: string)
    }
    unsafe fn localizedScannerWithString_(string: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSScanner), localizedScannerWithString: string)
    }
}
extern "C" {
    pub static NSGenericException: NSExceptionName;
}
extern "C" {
    pub static NSRangeException: NSExceptionName;
}
extern "C" {
    pub static NSInvalidArgumentException: NSExceptionName;
}
extern "C" {
    pub static NSInternalInconsistencyException: NSExceptionName;
}
extern "C" {
    pub static NSMallocException: NSExceptionName;
}
extern "C" {
    pub static NSObjectInaccessibleException: NSExceptionName;
}
extern "C" {
    pub static NSObjectNotAvailableException: NSExceptionName;
}
extern "C" {
    pub static NSDestinationInvalidException: NSExceptionName;
}
extern "C" {
    pub static NSPortTimeoutException: NSExceptionName;
}
extern "C" {
    pub static NSInvalidSendPortException: NSExceptionName;
}
extern "C" {
    pub static NSInvalidReceivePortException: NSExceptionName;
}
extern "C" {
    pub static NSPortSendException: NSExceptionName;
}
extern "C" {
    pub static NSPortReceiveException: NSExceptionName;
}
extern "C" {
    pub static NSOldStyleException: NSExceptionName;
}
extern "C" {
    pub static NSInconsistentArchiveException: NSExceptionName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSException(pub id);
impl std::ops::Deref for NSException {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSException {}
impl NSException {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSException), alloc) })
    }
}
impl PNSCopying for NSException {}
impl PNSSecureCoding for NSException {}
impl INSObject for NSException {}
impl PNSObject for NSException {}
impl From<NSException> for NSObject {
    fn from(child: NSException) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSException {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSException, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSException)) };
        if is_kind_of {
            Ok(NSException(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSException")
        }
    }
}
impl INSException for NSException {}
pub trait INSException: Sized + std::ops::Deref {
    unsafe fn initWithName_reason_userInfo_(
        &self,
        aName: NSString,
        aReason: NSString,
        aUserInfo: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithName : aName reason : aReason userInfo : aUserInfo)
    }
    unsafe fn raise(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, raise)
    }
    unsafe fn name(&self) -> NSExceptionName
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn reason(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reason)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn callStackReturnAddresses(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, callStackReturnAddresses)
    }
    unsafe fn callStackSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, callStackSymbols)
    }
    unsafe fn exceptionWithName_reason_userInfo_(
        name: NSString,
        reason: NSString,
        userInfo: NSDictionary,
    ) -> NSException
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSException) , exceptionWithName : name reason : reason userInfo : userInfo)
    }
}
impl NSException_NSExceptionRaisingConveniences for NSException {}
pub trait NSException_NSExceptionRaisingConveniences: Sized + std::ops::Deref {
    unsafe fn raise_format_(name: NSString, format: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSException) , raise : name format : format)
    }
    unsafe fn raise_format_arguments_(name: NSString, format: NSString, argList: va_list)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSException) , raise : name format : format arguments : argList)
    }
}
pub type NSUncaughtExceptionHandler =
    ::std::option::Option<unsafe extern "C" fn(exception: NSException)>;
extern "C" {
    pub fn NSGetUncaughtExceptionHandler() -> NSUncaughtExceptionHandler;
}
extern "C" {
    pub fn NSSetUncaughtExceptionHandler(arg1: NSUncaughtExceptionHandler);
}
extern "C" {
    pub static NSAssertionHandlerKey: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAssertionHandler(pub id);
impl std::ops::Deref for NSAssertionHandler {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAssertionHandler {}
impl NSAssertionHandler {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAssertionHandler), alloc) })
    }
}
impl INSObject for NSAssertionHandler {}
impl PNSObject for NSAssertionHandler {}
impl From<NSAssertionHandler> for NSObject {
    fn from(child: NSAssertionHandler) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAssertionHandler {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAssertionHandler, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSAssertionHandler)) };
        if is_kind_of {
            Ok(NSAssertionHandler(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAssertionHandler")
        }
    }
}
impl INSAssertionHandler for NSAssertionHandler {}
pub trait INSAssertionHandler: Sized + std::ops::Deref {
    unsafe fn handleFailureInMethod_object_file_lineNumber_description_(
        &self,
        selector: objc::runtime::Sel,
        object: id,
        fileName: NSString,
        line: NSInteger,
        format: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , handleFailureInMethod : selector object : object file : fileName lineNumber : line description : format)
    }
    unsafe fn handleFailureInFunction_file_lineNumber_description_(
        &self,
        functionName: NSString,
        fileName: NSString,
        line: NSInteger,
        format: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , handleFailureInFunction : functionName file : fileName lineNumber : line description : format)
    }
    unsafe fn currentHandler() -> NSAssertionHandler
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAssertionHandler), currentHandler)
    }
}
extern "C" {
    pub static NSDecimalNumberExactnessException: NSExceptionName;
}
extern "C" {
    pub static NSDecimalNumberOverflowException: NSExceptionName;
}
extern "C" {
    pub static NSDecimalNumberUnderflowException: NSExceptionName;
}
extern "C" {
    pub static NSDecimalNumberDivideByZeroException: NSExceptionName;
}
pub trait PNSDecimalNumberBehaviors: Sized + std::ops::Deref {
    unsafe fn roundingMode(&self) -> NSRoundingMode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, roundingMode)
    }
    unsafe fn scale(&self) -> ::std::os::raw::c_short
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scale)
    }
    unsafe fn exceptionDuringOperation_error_leftOperand_rightOperand_(
        &self,
        operation: objc::runtime::Sel,
        error: NSCalculationError,
        leftOperand: NSDecimalNumber,
        rightOperand: NSDecimalNumber,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , exceptionDuringOperation : operation error : error leftOperand : leftOperand rightOperand : rightOperand)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDecimalNumber(pub id);
impl std::ops::Deref for NSDecimalNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDecimalNumber {}
impl NSDecimalNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDecimalNumber), alloc) })
    }
}
impl INSNumber for NSDecimalNumber {}
impl From<NSDecimalNumber> for NSNumber {
    fn from(child: NSDecimalNumber) -> NSNumber {
        NSNumber(child.0)
    }
}
impl std::convert::TryFrom<NSNumber> for NSDecimalNumber {
    type Error = &'static str;
    fn try_from(parent: NSNumber) -> Result<NSDecimalNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDecimalNumber)) };
        if is_kind_of {
            Ok(NSDecimalNumber(parent.0))
        } else {
            Err("This NSNumber cannot be downcasted to NSDecimalNumber")
        }
    }
}
impl INSValue for NSDecimalNumber {}
impl PNSCopying for NSDecimalNumber {}
impl PNSSecureCoding for NSDecimalNumber {}
impl From<NSDecimalNumber> for NSValue {
    fn from(child: NSDecimalNumber) -> NSValue {
        NSValue(child.0)
    }
}
impl std::convert::TryFrom<NSValue> for NSDecimalNumber {
    type Error = &'static str;
    fn try_from(parent: NSValue) -> Result<NSDecimalNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDecimalNumber)) };
        if is_kind_of {
            Ok(NSDecimalNumber(parent.0))
        } else {
            Err("This NSValue cannot be downcasted to NSDecimalNumber")
        }
    }
}
impl INSObject for NSDecimalNumber {}
impl PNSObject for NSDecimalNumber {}
impl From<NSDecimalNumber> for NSObject {
    fn from(child: NSDecimalNumber) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDecimalNumber {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDecimalNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDecimalNumber)) };
        if is_kind_of {
            Ok(NSDecimalNumber(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDecimalNumber")
        }
    }
}
impl INSDecimalNumber for NSDecimalNumber {}
pub trait INSDecimalNumber: Sized + std::ops::Deref {
    unsafe fn initWithMantissa_exponent_isNegative_(
        &self,
        mantissa: ::std::os::raw::c_ulonglong,
        exponent: ::std::os::raw::c_short,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMantissa : mantissa exponent : exponent isNegative : flag)
    }
    unsafe fn initWithDecimal_(&self, dcm: NSDecimal) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithDecimal: dcm)
    }
    unsafe fn initWithString_(&self, numberValue: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: numberValue)
    }
    unsafe fn initWithString_locale_(&self, numberValue: NSString, locale: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : numberValue locale : locale)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn decimalNumberByAdding_(&self, decimalNumber: NSDecimalNumber) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByAdding: decimalNumber)
    }
    unsafe fn decimalNumberByAdding_withBehavior_(
        &self,
        decimalNumber: NSDecimalNumber,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberByAdding : decimalNumber withBehavior : behavior)
    }
    unsafe fn decimalNumberBySubtracting_(&self, decimalNumber: NSDecimalNumber) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberBySubtracting: decimalNumber)
    }
    unsafe fn decimalNumberBySubtracting_withBehavior_(
        &self,
        decimalNumber: NSDecimalNumber,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberBySubtracting : decimalNumber withBehavior : behavior)
    }
    unsafe fn decimalNumberByMultiplyingBy_(
        &self,
        decimalNumber: NSDecimalNumber,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByMultiplyingBy: decimalNumber)
    }
    unsafe fn decimalNumberByMultiplyingBy_withBehavior_(
        &self,
        decimalNumber: NSDecimalNumber,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberByMultiplyingBy : decimalNumber withBehavior : behavior)
    }
    unsafe fn decimalNumberByDividingBy_(&self, decimalNumber: NSDecimalNumber) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByDividingBy: decimalNumber)
    }
    unsafe fn decimalNumberByDividingBy_withBehavior_(
        &self,
        decimalNumber: NSDecimalNumber,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberByDividingBy : decimalNumber withBehavior : behavior)
    }
    unsafe fn decimalNumberByRaisingToPower_(&self, power: NSUInteger) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByRaisingToPower: power)
    }
    unsafe fn decimalNumberByRaisingToPower_withBehavior_(
        &self,
        power: NSUInteger,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberByRaisingToPower : power withBehavior : behavior)
    }
    unsafe fn decimalNumberByMultiplyingByPowerOf10_(
        &self,
        power: ::std::os::raw::c_short,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByMultiplyingByPowerOf10: power)
    }
    unsafe fn decimalNumberByMultiplyingByPowerOf10_withBehavior_(
        &self,
        power: ::std::os::raw::c_short,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decimalNumberByMultiplyingByPowerOf10 : power withBehavior : behavior)
    }
    unsafe fn decimalNumberByRoundingAccordingToBehavior_(
        &self,
        behavior: *mut u64,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalNumberByRoundingAccordingToBehavior: behavior)
    }
    unsafe fn compare_(&self, decimalNumber: NSNumber) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: decimalNumber)
    }
    unsafe fn decimalValue(&self) -> NSDecimal
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalValue)
    }
    unsafe fn objCType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objCType)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
    unsafe fn decimalNumberWithMantissa_exponent_isNegative_(
        mantissa: ::std::os::raw::c_ulonglong,
        exponent: ::std::os::raw::c_short,
        flag: BOOL,
    ) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDecimalNumber) , decimalNumberWithMantissa : mantissa exponent : exponent isNegative : flag)
    }
    unsafe fn decimalNumberWithDecimal_(dcm: NSDecimal) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), decimalNumberWithDecimal: dcm)
    }
    unsafe fn decimalNumberWithString_(numberValue: NSString) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSDecimalNumber),
            decimalNumberWithString: numberValue
        )
    }
    unsafe fn decimalNumberWithString_locale_(numberValue: NSString, locale: id) -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDecimalNumber) , decimalNumberWithString : numberValue locale : locale)
    }
    unsafe fn zero() -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), zero)
    }
    unsafe fn one() -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), one)
    }
    unsafe fn minimumDecimalNumber() -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), minimumDecimalNumber)
    }
    unsafe fn maximumDecimalNumber() -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), maximumDecimalNumber)
    }
    unsafe fn notANumber() -> NSDecimalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), notANumber)
    }
    unsafe fn defaultBehavior() -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), defaultBehavior)
    }
    unsafe fn setDefaultBehavior_(defaultBehavior: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumber), setDefaultBehavior: defaultBehavior)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDecimalNumberHandler(pub id);
impl std::ops::Deref for NSDecimalNumberHandler {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDecimalNumberHandler {}
impl NSDecimalNumberHandler {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDecimalNumberHandler), alloc) })
    }
}
impl PNSDecimalNumberBehaviors for NSDecimalNumberHandler {}
impl PNSCoding for NSDecimalNumberHandler {}
impl INSObject for NSDecimalNumberHandler {}
impl PNSObject for NSDecimalNumberHandler {}
impl From<NSDecimalNumberHandler> for NSObject {
    fn from(child: NSDecimalNumberHandler) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDecimalNumberHandler {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDecimalNumberHandler, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDecimalNumberHandler)) };
        if is_kind_of {
            Ok(NSDecimalNumberHandler(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDecimalNumberHandler")
        }
    }
}
impl INSDecimalNumberHandler for NSDecimalNumberHandler {}
pub trait INSDecimalNumberHandler: Sized + std::ops::Deref {
    unsafe fn initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
        &self,
        roundingMode: NSRoundingMode,
        scale: ::std::os::raw::c_short,
        exact: BOOL,
        overflow: BOOL,
        underflow: BOOL,
        divideByZero: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithRoundingMode : roundingMode scale : scale raiseOnExactness : exact raiseOnOverflow : overflow raiseOnUnderflow : underflow raiseOnDivideByZero : divideByZero)
    }
    unsafe fn decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
        roundingMode: NSRoundingMode,
        scale: ::std::os::raw::c_short,
        exact: BOOL,
        overflow: BOOL,
        underflow: BOOL,
        divideByZero: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDecimalNumberHandler) , decimalNumberHandlerWithRoundingMode : roundingMode scale : scale raiseOnExactness : exact raiseOnOverflow : overflow raiseOnUnderflow : underflow raiseOnDivideByZero : divideByZero)
    }
    unsafe fn defaultDecimalNumberHandler() -> NSDecimalNumberHandler
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDecimalNumberHandler), defaultDecimalNumberHandler)
    }
}
impl NSNumber_NSDecimalNumberExtensions for NSNumber {}
pub trait NSNumber_NSDecimalNumberExtensions: Sized + std::ops::Deref {
    unsafe fn decimalValue(&self) -> NSDecimal
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decimalValue)
    }
}
impl NSScanner_NSDecimalNumberScanning for NSScanner {}
pub trait NSScanner_NSDecimalNumberScanning: Sized + std::ops::Deref {
    unsafe fn scanDecimal_(&self, dcm: *mut NSDecimal) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scanDecimal: dcm)
    }
}
pub type NSErrorDomain = NSString;
extern "C" {
    pub static NSCocoaErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSPOSIXErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSOSStatusErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSMachErrorDomain: NSErrorDomain;
}
pub type NSErrorUserInfoKey = NSString;
extern "C" {
    pub static NSUnderlyingErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSMultipleUnderlyingErrorsKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSLocalizedDescriptionKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSLocalizedFailureReasonErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSLocalizedRecoverySuggestionErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSLocalizedRecoveryOptionsErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSRecoveryAttempterErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSHelpAnchorErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSDebugDescriptionErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSLocalizedFailureErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSStringEncodingErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSURLErrorKey: NSErrorUserInfoKey;
}
extern "C" {
    pub static NSFilePathErrorKey: NSErrorUserInfoKey;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSError), alloc) })
    }
}
impl PNSCopying for NSError {}
impl PNSSecureCoding for NSError {}
impl INSObject for NSError {}
impl PNSObject for NSError {}
impl From<NSError> for NSObject {
    fn from(child: NSError) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSError {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSError, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSError)) };
        if is_kind_of {
            Ok(NSError(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSError")
        }
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {
    unsafe fn initWithDomain_code_userInfo_(
        &self,
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDomain : domain code : code userInfo : dict)
    }
    unsafe fn domain(&self) -> NSErrorDomain
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domain)
    }
    unsafe fn code(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, code)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn localizedDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedDescription)
    }
    unsafe fn localizedFailureReason(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedFailureReason)
    }
    unsafe fn localizedRecoverySuggestion(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedRecoverySuggestion)
    }
    unsafe fn localizedRecoveryOptions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedRecoveryOptions)
    }
    unsafe fn recoveryAttempter(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, recoveryAttempter)
    }
    unsafe fn helpAnchor(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, helpAnchor)
    }
    unsafe fn underlyingErrors(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, underlyingErrors)
    }
    unsafe fn errorWithDomain_code_userInfo_(
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSError) , errorWithDomain : domain code : code userInfo : dict)
    }
    unsafe fn setUserInfoValueProviderForDomain_provider_(
        errorDomain: NSString,
        provider: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSError) , setUserInfoValueProviderForDomain : errorDomain provider : provider)
    }
    unsafe fn userInfoValueProviderForDomain_(errorDomain: NSString) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSError), userInfoValueProviderForDomain: errorDomain)
    }
}
impl NSObject_NSErrorRecoveryAttempting for NSObject {}
pub trait NSObject_NSErrorRecoveryAttempting: Sized + std::ops::Deref {
    unsafe fn attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
        delegate: id,
        didRecoverSelector: objc::runtime::Sel,
        contextInfo: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex delegate : delegate didRecoverSelector : didRecoverSelector contextInfo : contextInfo)
    }
    unsafe fn attemptRecoveryFromError_optionIndex_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex)
    }
}
extern "C" {
    pub static NSDefaultRunLoopMode: NSRunLoopMode;
}
extern "C" {
    pub static NSRunLoopCommonModes: NSRunLoopMode;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSRunLoop(pub id);
impl std::ops::Deref for NSRunLoop {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRunLoop {}
impl NSRunLoop {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSRunLoop), alloc) })
    }
}
impl INSObject for NSRunLoop {}
impl PNSObject for NSRunLoop {}
impl From<NSRunLoop> for NSObject {
    fn from(child: NSRunLoop) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRunLoop {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRunLoop, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSRunLoop)) };
        if is_kind_of {
            Ok(NSRunLoop(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRunLoop")
        }
    }
}
impl INSRunLoop for NSRunLoop {}
pub trait INSRunLoop: Sized + std::ops::Deref {
    unsafe fn getCFRunLoop(&self) -> CFRunLoopRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getCFRunLoop)
    }
    unsafe fn addTimer_forMode_(&self, timer: NSTimer, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addTimer : timer forMode : mode)
    }
    unsafe fn addPort_forMode_(&self, aPort: NSPort, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addPort : aPort forMode : mode)
    }
    unsafe fn removePort_forMode_(&self, aPort: NSPort, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removePort : aPort forMode : mode)
    }
    unsafe fn limitDateForMode_(&self, mode: NSString) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, limitDateForMode: mode)
    }
    unsafe fn acceptInputForMode_beforeDate_(&self, mode: NSString, limitDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , acceptInputForMode : mode beforeDate : limitDate)
    }
    unsafe fn currentMode(&self) -> NSRunLoopMode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentMode)
    }
    unsafe fn currentRunLoop() -> NSRunLoop
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSRunLoop), currentRunLoop)
    }
    unsafe fn mainRunLoop() -> NSRunLoop
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSRunLoop), mainRunLoop)
    }
}
impl NSRunLoop_NSRunLoopConveniences for NSRunLoop {}
pub trait NSRunLoop_NSRunLoopConveniences: Sized + std::ops::Deref {
    unsafe fn run(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, run)
    }
    unsafe fn runUntilDate_(&self, limitDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, runUntilDate: limitDate)
    }
    unsafe fn runMode_beforeDate_(&self, mode: NSString, limitDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , runMode : mode beforeDate : limitDate)
    }
    unsafe fn performInModes_block_(&self, modes: NSArray, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performInModes : modes block : block)
    }
    unsafe fn performBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performBlock: block)
    }
}
impl NSObject_NSDelayedPerforming for NSObject {}
pub trait NSObject_NSDelayedPerforming: Sized + std::ops::Deref {
    unsafe fn performSelector_withObject_afterDelay_inModes_(
        &self,
        aSelector: objc::runtime::Sel,
        anArgument: id,
        delay: NSTimeInterval,
        modes: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : anArgument afterDelay : delay inModes : modes)
    }
    unsafe fn performSelector_withObject_afterDelay_(
        &self,
        aSelector: objc::runtime::Sel,
        anArgument: id,
        delay: NSTimeInterval,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : anArgument afterDelay : delay)
    }
    unsafe fn cancelPreviousPerformRequestsWithTarget_selector_object_(
        aTarget: id,
        aSelector: objc::runtime::Sel,
        anArgument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , cancelPreviousPerformRequestsWithTarget : aTarget selector : aSelector object : anArgument)
    }
    unsafe fn cancelPreviousPerformRequestsWithTarget_(aTarget: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            cancelPreviousPerformRequestsWithTarget: aTarget
        )
    }
}
impl NSRunLoop_NSOrderedPerform for NSRunLoop {}
pub trait NSRunLoop_NSOrderedPerform: Sized + std::ops::Deref {
    unsafe fn performSelector_target_argument_order_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        target: id,
        arg: id,
        order: NSUInteger,
        modes: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector target : target argument : arg order : order modes : modes)
    }
    unsafe fn cancelPerformSelector_target_argument_(
        &self,
        aSelector: objc::runtime::Sel,
        target: id,
        arg: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , cancelPerformSelector : aSelector target : target argument : arg)
    }
    unsafe fn cancelPerformSelectorsWithTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelPerformSelectorsWithTarget: target)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileHandle(pub id);
impl std::ops::Deref for NSFileHandle {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileHandle {}
impl NSFileHandle {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileHandle), alloc) })
    }
}
impl PNSSecureCoding for NSFileHandle {}
impl INSObject for NSFileHandle {}
impl PNSObject for NSFileHandle {}
impl From<NSFileHandle> for NSObject {
    fn from(child: NSFileHandle) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileHandle {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileHandle, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileHandle)) };
        if is_kind_of {
            Ok(NSFileHandle(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileHandle")
        }
    }
}
impl INSFileHandle for NSFileHandle {}
pub trait INSFileHandle: Sized + std::ops::Deref {
    unsafe fn initWithFileDescriptor_closeOnDealloc_(
        &self,
        fd: ::std::os::raw::c_int,
        closeopt: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFileDescriptor : fd closeOnDealloc : closeopt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn readDataToEndOfFileAndReturnError_(&self, error: *mut NSError) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readDataToEndOfFileAndReturnError: error)
    }
    unsafe fn readDataUpToLength_error_(&self, length: NSUInteger, error: *mut NSError) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , readDataUpToLength : length error : error)
    }
    unsafe fn writeData_error_(&self, data: NSData, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeData : data error : error)
    }
    unsafe fn getOffset_error_(
        &self,
        offsetInFile: *mut ::std::os::raw::c_ulonglong,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getOffset : offsetInFile error : error)
    }
    unsafe fn seekToEndReturningOffset_error_(
        &self,
        offsetInFile: *mut ::std::os::raw::c_ulonglong,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , seekToEndReturningOffset : offsetInFile error : error)
    }
    unsafe fn seekToOffset_error_(
        &self,
        offset: ::std::os::raw::c_ulonglong,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , seekToOffset : offset error : error)
    }
    unsafe fn truncateAtOffset_error_(
        &self,
        offset: ::std::os::raw::c_ulonglong,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , truncateAtOffset : offset error : error)
    }
    unsafe fn synchronizeAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronizeAndReturnError: error)
    }
    unsafe fn closeAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeAndReturnError: error)
    }
    unsafe fn availableData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, availableData)
    }
}
impl NSFileHandle_NSFileHandleCreation for NSFileHandle {}
pub trait NSFileHandle_NSFileHandleCreation: Sized + std::ops::Deref {
    unsafe fn fileHandleForReadingAtPath_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleForReadingAtPath: path)
    }
    unsafe fn fileHandleForWritingAtPath_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleForWritingAtPath: path)
    }
    unsafe fn fileHandleForUpdatingAtPath_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleForUpdatingAtPath: path)
    }
    unsafe fn fileHandleForReadingFromURL_error_(url: NSURL, error: *mut NSError) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileHandle) , fileHandleForReadingFromURL : url error : error)
    }
    unsafe fn fileHandleForWritingToURL_error_(url: NSURL, error: *mut NSError) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileHandle) , fileHandleForWritingToURL : url error : error)
    }
    unsafe fn fileHandleForUpdatingURL_error_(url: NSURL, error: *mut NSError) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileHandle) , fileHandleForUpdatingURL : url error : error)
    }
    unsafe fn fileHandleWithStandardInput() -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleWithStandardInput)
    }
    unsafe fn fileHandleWithStandardOutput() -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleWithStandardOutput)
    }
    unsafe fn fileHandleWithStandardError() -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleWithStandardError)
    }
    unsafe fn fileHandleWithNullDevice() -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileHandle), fileHandleWithNullDevice)
    }
}
extern "C" {
    pub static NSFileHandleOperationException: NSExceptionName;
}
extern "C" {
    pub static NSFileHandleReadCompletionNotification: NSNotificationName;
}
extern "C" {
    pub static NSFileHandleReadToEndOfFileCompletionNotification: NSNotificationName;
}
extern "C" {
    pub static NSFileHandleConnectionAcceptedNotification: NSNotificationName;
}
extern "C" {
    pub static NSFileHandleDataAvailableNotification: NSNotificationName;
}
extern "C" {
    pub static NSFileHandleNotificationDataItem: NSString;
}
extern "C" {
    pub static NSFileHandleNotificationFileHandleItem: NSString;
}
extern "C" {
    pub static NSFileHandleNotificationMonitorModes: NSString;
}
impl NSFileHandle_NSFileHandleAsynchronousAccess for NSFileHandle {}
pub trait NSFileHandle_NSFileHandleAsynchronousAccess: Sized + std::ops::Deref {
    unsafe fn readInBackgroundAndNotifyForModes_(&self, modes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readInBackgroundAndNotifyForModes: modes)
    }
    unsafe fn readInBackgroundAndNotify(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readInBackgroundAndNotify)
    }
    unsafe fn readToEndOfFileInBackgroundAndNotifyForModes_(&self, modes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readToEndOfFileInBackgroundAndNotifyForModes: modes)
    }
    unsafe fn readToEndOfFileInBackgroundAndNotify(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readToEndOfFileInBackgroundAndNotify)
    }
    unsafe fn acceptConnectionInBackgroundAndNotifyForModes_(&self, modes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, acceptConnectionInBackgroundAndNotifyForModes: modes)
    }
    unsafe fn acceptConnectionInBackgroundAndNotify(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, acceptConnectionInBackgroundAndNotify)
    }
    unsafe fn waitForDataInBackgroundAndNotifyForModes_(&self, modes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitForDataInBackgroundAndNotifyForModes: modes)
    }
    unsafe fn waitForDataInBackgroundAndNotify(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitForDataInBackgroundAndNotify)
    }
    unsafe fn readabilityHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readabilityHandler)
    }
    unsafe fn setReadabilityHandler_(&self, readabilityHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReadabilityHandler: readabilityHandler)
    }
    unsafe fn writeabilityHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, writeabilityHandler)
    }
    unsafe fn setWriteabilityHandler_(&self, writeabilityHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWriteabilityHandler: writeabilityHandler)
    }
}
impl NSFileHandle_NSFileHandlePlatformSpecific for NSFileHandle {}
pub trait NSFileHandle_NSFileHandlePlatformSpecific: Sized + std::ops::Deref {
    unsafe fn initWithFileDescriptor_(&self, fd: ::std::os::raw::c_int) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFileDescriptor: fd)
    }
    unsafe fn fileDescriptor(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileDescriptor)
    }
}
impl NSFileHandle_ for NSFileHandle {}
pub trait NSFileHandle_: Sized + std::ops::Deref {
    unsafe fn readDataToEndOfFile(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readDataToEndOfFile)
    }
    unsafe fn readDataOfLength_(&self, length: NSUInteger) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, readDataOfLength: length)
    }
    unsafe fn writeData_(&self, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, writeData: data)
    }
    unsafe fn offsetInFile(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, offsetInFile)
    }
    unsafe fn seekToEndOfFile(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, seekToEndOfFile)
    }
    unsafe fn seekToFileOffset_(&self, offset: ::std::os::raw::c_ulonglong)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, seekToFileOffset: offset)
    }
    unsafe fn truncateFileAtOffset_(&self, offset: ::std::os::raw::c_ulonglong)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, truncateFileAtOffset: offset)
    }
    unsafe fn synchronizeFile(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronizeFile)
    }
    unsafe fn closeFile(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeFile)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPipe(pub id);
impl std::ops::Deref for NSPipe {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPipe {}
impl NSPipe {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPipe), alloc) })
    }
}
impl INSObject for NSPipe {}
impl PNSObject for NSPipe {}
impl From<NSPipe> for NSObject {
    fn from(child: NSPipe) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPipe {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPipe, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPipe)) };
        if is_kind_of {
            Ok(NSPipe(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPipe")
        }
    }
}
impl INSPipe for NSPipe {}
pub trait INSPipe: Sized + std::ops::Deref {
    unsafe fn fileHandleForReading(&self) -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileHandleForReading)
    }
    unsafe fn fileHandleForWriting(&self) -> NSFileHandle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileHandleForWriting)
    }
    unsafe fn pipe() -> NSPipe
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPipe), pipe)
    }
}
impl NSString_NSStringPathExtensions for NSString {}
pub trait NSString_NSStringPathExtensions: Sized + std::ops::Deref {
    unsafe fn stringByAppendingPathComponent_(&self, str_: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAppendingPathComponent: str_)
    }
    unsafe fn stringByAppendingPathExtension_(&self, str_: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAppendingPathExtension: str_)
    }
    unsafe fn stringsByAppendingPaths_(&self, paths: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringsByAppendingPaths: paths)
    }
    unsafe fn completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_(
        &self,
        outputName: *mut NSString,
        flag: BOOL,
        outputArray: *mut NSArray,
        filterTypes: NSArray,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , completePathIntoString : outputName caseSensitive : flag matchesIntoArray : outputArray filterTypes : filterTypes)
    }
    unsafe fn getFileSystemRepresentation_maxLength_(
        &self,
        cname: *mut ::std::os::raw::c_char,
        max: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getFileSystemRepresentation : cname maxLength : max)
    }
    unsafe fn pathComponents(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathComponents)
    }
    unsafe fn isAbsolutePath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isAbsolutePath)
    }
    unsafe fn lastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastPathComponent)
    }
    unsafe fn stringByDeletingLastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByDeletingLastPathComponent)
    }
    unsafe fn pathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathExtension)
    }
    unsafe fn stringByDeletingPathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByDeletingPathExtension)
    }
    unsafe fn stringByAbbreviatingWithTildeInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAbbreviatingWithTildeInPath)
    }
    unsafe fn stringByExpandingTildeInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByExpandingTildeInPath)
    }
    unsafe fn stringByStandardizingPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByStandardizingPath)
    }
    unsafe fn stringByResolvingSymlinksInPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByResolvingSymlinksInPath)
    }
    unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemRepresentation)
    }
    unsafe fn pathWithComponents_(components: NSArray) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSString), pathWithComponents: components)
    }
}
impl<ObjectType: 'static> NSArray_NSArrayPathExtensions<ObjectType> for NSArray {}
pub trait NSArray_NSArrayPathExtensions<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn pathsMatchingExtensions_(&self, filterTypes: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathsMatchingExtensions: filterTypes)
    }
}
extern "C" {
    pub fn NSUserName() -> NSString;
}
extern "C" {
    pub fn NSFullUserName() -> NSString;
}
extern "C" {
    pub fn NSHomeDirectory() -> NSString;
}
extern "C" {
    pub fn NSHomeDirectoryForUser(userName: NSString) -> NSString;
}
extern "C" {
    pub fn NSTemporaryDirectory() -> NSString;
}
extern "C" {
    pub fn NSOpenStepRootDirectory() -> NSString;
}
pub const NSSearchPathDirectory_NSApplicationDirectory: NSSearchPathDirectory = 1;
pub const NSSearchPathDirectory_NSDemoApplicationDirectory: NSSearchPathDirectory = 2;
pub const NSSearchPathDirectory_NSDeveloperApplicationDirectory: NSSearchPathDirectory = 3;
pub const NSSearchPathDirectory_NSAdminApplicationDirectory: NSSearchPathDirectory = 4;
pub const NSSearchPathDirectory_NSLibraryDirectory: NSSearchPathDirectory = 5;
pub const NSSearchPathDirectory_NSDeveloperDirectory: NSSearchPathDirectory = 6;
pub const NSSearchPathDirectory_NSUserDirectory: NSSearchPathDirectory = 7;
pub const NSSearchPathDirectory_NSDocumentationDirectory: NSSearchPathDirectory = 8;
pub const NSSearchPathDirectory_NSDocumentDirectory: NSSearchPathDirectory = 9;
pub const NSSearchPathDirectory_NSCoreServiceDirectory: NSSearchPathDirectory = 10;
pub const NSSearchPathDirectory_NSAutosavedInformationDirectory: NSSearchPathDirectory = 11;
pub const NSSearchPathDirectory_NSDesktopDirectory: NSSearchPathDirectory = 12;
pub const NSSearchPathDirectory_NSCachesDirectory: NSSearchPathDirectory = 13;
pub const NSSearchPathDirectory_NSApplicationSupportDirectory: NSSearchPathDirectory = 14;
pub const NSSearchPathDirectory_NSDownloadsDirectory: NSSearchPathDirectory = 15;
pub const NSSearchPathDirectory_NSInputMethodsDirectory: NSSearchPathDirectory = 16;
pub const NSSearchPathDirectory_NSMoviesDirectory: NSSearchPathDirectory = 17;
pub const NSSearchPathDirectory_NSMusicDirectory: NSSearchPathDirectory = 18;
pub const NSSearchPathDirectory_NSPicturesDirectory: NSSearchPathDirectory = 19;
pub const NSSearchPathDirectory_NSPrinterDescriptionDirectory: NSSearchPathDirectory = 20;
pub const NSSearchPathDirectory_NSSharedPublicDirectory: NSSearchPathDirectory = 21;
pub const NSSearchPathDirectory_NSPreferencePanesDirectory: NSSearchPathDirectory = 22;
pub const NSSearchPathDirectory_NSApplicationScriptsDirectory: NSSearchPathDirectory = 23;
pub const NSSearchPathDirectory_NSItemReplacementDirectory: NSSearchPathDirectory = 99;
pub const NSSearchPathDirectory_NSAllApplicationsDirectory: NSSearchPathDirectory = 100;
pub const NSSearchPathDirectory_NSAllLibrariesDirectory: NSSearchPathDirectory = 101;
pub const NSSearchPathDirectory_NSTrashDirectory: NSSearchPathDirectory = 102;
pub type NSSearchPathDirectory = NSUInteger;
pub const NSSearchPathDomainMask_NSUserDomainMask: NSSearchPathDomainMask = 1;
pub const NSSearchPathDomainMask_NSLocalDomainMask: NSSearchPathDomainMask = 2;
pub const NSSearchPathDomainMask_NSNetworkDomainMask: NSSearchPathDomainMask = 4;
pub const NSSearchPathDomainMask_NSSystemDomainMask: NSSearchPathDomainMask = 8;
pub const NSSearchPathDomainMask_NSAllDomainsMask: NSSearchPathDomainMask = 65535;
pub type NSSearchPathDomainMask = NSUInteger;
extern "C" {
    pub fn NSSearchPathForDirectoriesInDomains(
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
        expandTilde: BOOL,
    ) -> NSArray;
}
pub type NSURLResourceKey = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURL), alloc) })
    }
}
impl PNSSecureCoding for NSURL {}
impl PNSCopying for NSURL {}
impl INSObject for NSURL {}
impl PNSObject for NSURL {}
impl From<NSURL> for NSObject {
    fn from(child: NSURL) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURL {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURL, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURL)) };
        if is_kind_of {
            Ok(NSURL(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURL")
        }
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {
    unsafe fn initWithScheme_host_path_(
        &self,
        scheme: NSString,
        host: NSString,
        path: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithScheme : scheme host : host path : path)
    }
    unsafe fn initFileURLWithPath_isDirectory_relativeToURL_(
        &self,
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn initFileURLWithPath_relativeToURL_(
        &self,
        path: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path relativeToURL : baseURL)
    }
    unsafe fn initFileURLWithPath_isDirectory_(&self, path: NSString, isDir: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir)
    }
    unsafe fn initFileURLWithPath_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initFileURLWithPath: path)
    }
    unsafe fn initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        &self,
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn initWithString_(&self, URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: URLString)
    }
    unsafe fn initWithString_relativeToURL_(
        &self,
        URLString: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : URLString relativeToURL : baseURL)
    }
    unsafe fn initWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn initAbsoluteURLWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initAbsoluteURLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn getFileSystemRepresentation_maxLength_(
        &self,
        buffer: *mut ::std::os::raw::c_char,
        maxBufferLength: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getFileSystemRepresentation : buffer maxLength : maxBufferLength)
    }
    unsafe fn checkResourceIsReachableAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, checkResourceIsReachableAndReturnError: error)
    }
    unsafe fn isFileReferenceURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFileReferenceURL)
    }
    unsafe fn fileReferenceURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileReferenceURL)
    }
    unsafe fn getResourceValue_forKey_error_(
        &self,
        value: *mut id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getResourceValue : value forKey : key error : error)
    }
    unsafe fn resourceValuesForKeys_error_(
        &self,
        keys: NSArray,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , resourceValuesForKeys : keys error : error)
    }
    unsafe fn setResourceValue_forKey_error_(
        &self,
        value: id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setResourceValue : value forKey : key error : error)
    }
    unsafe fn setResourceValues_error_(
        &self,
        keyedValues: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setResourceValues : keyedValues error : error)
    }
    unsafe fn removeCachedResourceValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCachedResourceValueForKey: key)
    }
    unsafe fn removeAllCachedResourceValues(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllCachedResourceValues)
    }
    unsafe fn setTemporaryResourceValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setTemporaryResourceValue : value forKey : key)
    }
    unsafe fn bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
        &self,
        options: NSURLBookmarkCreationOptions,
        keys: NSArray,
        relativeURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , bookmarkDataWithOptions : options includingResourceValuesForKeys : keys relativeToURL : relativeURL error : error)
    }
    unsafe fn initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        &self,
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
    }
    unsafe fn startAccessingSecurityScopedResource(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startAccessingSecurityScopedResource)
    }
    unsafe fn stopAccessingSecurityScopedResource(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopAccessingSecurityScopedResource)
    }
    unsafe fn dataRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataRepresentation)
    }
    unsafe fn absoluteString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, absoluteString)
    }
    unsafe fn relativeString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relativeString)
    }
    unsafe fn baseURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, baseURL)
    }
    unsafe fn absoluteURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, absoluteURL)
    }
    unsafe fn scheme(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheme)
    }
    unsafe fn resourceSpecifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resourceSpecifier)
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, host)
    }
    unsafe fn port(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, user)
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, password)
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, path)
    }
    unsafe fn fragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fragment)
    }
    unsafe fn parameterString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parameterString)
    }
    unsafe fn query(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, query)
    }
    unsafe fn relativePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relativePath)
    }
    unsafe fn hasDirectoryPath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasDirectoryPath)
    }
    unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemRepresentation)
    }
    unsafe fn isFileURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFileURL)
    }
    unsafe fn standardizedURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standardizedURL)
    }
    unsafe fn filePathURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filePathURL)
    }
    unsafe fn fileURLWithPath_isDirectory_relativeToURL_(
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn fileURLWithPath_relativeToURL_(path: NSString, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path relativeToURL : baseURL)
    }
    unsafe fn fileURLWithPath_isDirectory_(path: NSString, isDir: BOOL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir)
    }
    unsafe fn fileURLWithPath_(path: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURL), fileURLWithPath: path)
    }
    unsafe fn fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn URLWithString_(URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURL), URLWithString: URLString)
    }
    unsafe fn URLWithString_relativeToURL_(URLString: NSString, baseURL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLWithString : URLString relativeToURL : baseURL)
    }
    unsafe fn URLWithDataRepresentation_relativeToURL_(data: NSData, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn absoluteURLWithDataRepresentation_relativeToURL_(
        data: NSData,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , absoluteURLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
    }
    unsafe fn resourceValuesForKeys_fromBookmarkData_(
        keys: NSArray,
        bookmarkData: NSData,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , resourceValuesForKeys : keys fromBookmarkData : bookmarkData)
    }
    unsafe fn writeBookmarkData_toURL_options_error_(
        bookmarkData: NSData,
        bookmarkFileURL: NSURL,
        options: NSURLBookmarkFileCreationOptions,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , writeBookmarkData : bookmarkData toURL : bookmarkFileURL options : options error : error)
    }
    unsafe fn bookmarkDataWithContentsOfURL_error_(
        bookmarkFileURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , bookmarkDataWithContentsOfURL : bookmarkFileURL error : error)
    }
    unsafe fn URLByResolvingAliasFileAtURL_options_error_(
        url: NSURL,
        options: NSURLBookmarkResolutionOptions,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLByResolvingAliasFileAtURL : url options : options error : error)
    }
}
extern "C" {
    pub static NSURLFileScheme: NSString;
}
extern "C" {
    pub static NSURLKeysOfUnsetValuesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLNameKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLocalizedNameKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsRegularFileKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsDirectoryKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsSymbolicLinkKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsVolumeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsPackageKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsApplicationKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLApplicationIsScriptableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsSystemImmutableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsUserImmutableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsHiddenKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLHasHiddenExtensionKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLCreationDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLContentAccessDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLContentModificationDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLAttributeModificationDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLinkCountKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLParentDirectoryURLKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeURLKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLTypeIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLContentTypeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLocalizedTypeDescriptionKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLabelNumberKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLabelColorKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLLocalizedLabelKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLEffectiveIconKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLCustomIconKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileResourceIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLPreferredIOBlockSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsReadableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsWritableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsExecutableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileSecurityKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsExcludedFromBackupKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLTagNamesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLPathKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLCanonicalPathKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsMountTriggerKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLGenerationIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLDocumentIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLAddedToDirectoryDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLQuarantinePropertiesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileResourceTypeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileContentIdentifierKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLMayShareFileContentKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLMayHaveExtendedAttributesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsPurgeableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsSparseKey: NSURLResourceKey;
}
pub type NSURLFileResourceType = NSString;
extern "C" {
    pub static NSURLFileResourceTypeNamedPipe: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeCharacterSpecial: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeDirectory: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeBlockSpecial: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeRegular: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeSymbolicLink: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeSocket: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLFileResourceTypeUnknown: NSURLFileResourceType;
}
extern "C" {
    pub static NSURLThumbnailDictionaryKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLThumbnailKey: NSURLResourceKey;
}
pub type NSURLThumbnailDictionaryItem = NSString;
extern "C" {
    pub static NSThumbnail1024x1024SizeKey: NSURLThumbnailDictionaryItem;
}
extern "C" {
    pub static NSURLFileSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileAllocatedSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLTotalFileSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLTotalFileAllocatedSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsAliasFileKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLFileProtectionKey: NSURLResourceKey;
}
pub type NSURLFileProtectionType = NSString;
extern "C" {
    pub static NSURLFileProtectionNone: NSURLFileProtectionType;
}
extern "C" {
    pub static NSURLFileProtectionComplete: NSURLFileProtectionType;
}
extern "C" {
    pub static NSURLFileProtectionCompleteUnlessOpen: NSURLFileProtectionType;
}
extern "C" {
    pub static NSURLFileProtectionCompleteUntilFirstUserAuthentication: NSURLFileProtectionType;
}
extern "C" {
    pub static NSURLVolumeLocalizedFormatDescriptionKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeTotalCapacityKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeAvailableCapacityKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeResourceCountKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsPersistentIDsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsSymbolicLinksKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsHardLinksKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsJournalingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsJournalingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsSparseFilesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsZeroRunsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsCaseSensitiveNamesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsCasePreservedNamesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsRootDirectoryDatesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsVolumeSizesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsRenamingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsAdvisoryFileLockingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsExtendedSecurityKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsBrowsableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeMaximumFileSizeKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsEjectableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsRemovableKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsInternalKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsAutomountedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsLocalKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsReadOnlyKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeCreationDateKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeURLForRemountingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeUUIDStringKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeNameKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeLocalizedNameKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsEncryptedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeIsRootFileSystemKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsCompressionKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsFileCloningKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsSwapRenamingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsExclusiveRenamingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsImmutableFilesKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsAccessPermissionsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeSupportsFileProtectionKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeAvailableCapacityForImportantUsageKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLVolumeAvailableCapacityForOpportunisticUsageKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLIsUbiquitousItemKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemHasUnresolvedConflictsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsDownloadedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsDownloadingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsUploadedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsUploadingKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemPercentDownloadedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemPercentUploadedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemDownloadingErrorKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemUploadingErrorKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemDownloadRequestedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemContainerDisplayNameKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsExcludedFromSyncKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousItemIsSharedKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemCurrentUserRoleKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemCurrentUserPermissionsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemOwnerNameComponentsKey: NSURLResourceKey;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey: NSURLResourceKey;
}
pub type NSURLUbiquitousItemDownloadingStatus = NSString;
extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusNotDownloaded:
        NSURLUbiquitousItemDownloadingStatus;
}
extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusDownloaded: NSURLUbiquitousItemDownloadingStatus;
}
extern "C" {
    pub static NSURLUbiquitousItemDownloadingStatusCurrent: NSURLUbiquitousItemDownloadingStatus;
}
pub type NSURLUbiquitousSharedItemRole = NSString;
extern "C" {
    pub static NSURLUbiquitousSharedItemRoleOwner: NSURLUbiquitousSharedItemRole;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemRoleParticipant: NSURLUbiquitousSharedItemRole;
}
pub type NSURLUbiquitousSharedItemPermissions = NSString;
extern "C" {
    pub static NSURLUbiquitousSharedItemPermissionsReadOnly: NSURLUbiquitousSharedItemPermissions;
}
extern "C" {
    pub static NSURLUbiquitousSharedItemPermissionsReadWrite: NSURLUbiquitousSharedItemPermissions;
}
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationPreferFileIDResolution:
    NSURLBookmarkCreationOptions = 256;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationMinimalBookmark:
    NSURLBookmarkCreationOptions = 512;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSuitableForBookmarkFile:
    NSURLBookmarkCreationOptions = 1024;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationWithSecurityScope:
    NSURLBookmarkCreationOptions = 2048;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    NSURLBookmarkCreationOptions = 4096;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationWithoutImplicitSecurityScope:
    NSURLBookmarkCreationOptions = 536870912;
pub type NSURLBookmarkCreationOptions = NSUInteger;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutUI:
    NSURLBookmarkResolutionOptions = 256;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutMounting:
    NSURLBookmarkResolutionOptions = 512;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithSecurityScope:
    NSURLBookmarkResolutionOptions = 1024;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutImplicitStartAccessing:
    NSURLBookmarkResolutionOptions = 32768;
pub type NSURLBookmarkResolutionOptions = NSUInteger;
pub type NSURLBookmarkFileCreationOptions = NSUInteger;
impl NSURL_NSPromisedItems for NSURL {}
pub trait NSURL_NSPromisedItems: Sized + std::ops::Deref {
    unsafe fn getPromisedItemResourceValue_forKey_error_(
        &self,
        value: *mut id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getPromisedItemResourceValue : value forKey : key error : error)
    }
    unsafe fn promisedItemResourceValuesForKeys_error_(
        &self,
        keys: NSArray,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , promisedItemResourceValuesForKeys : keys error : error)
    }
    unsafe fn checkPromisedItemIsReachableAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, checkPromisedItemIsReachableAndReturnError: error)
    }
}
impl NSURL_NSItemProvider for NSURL {}
pub trait NSURL_NSItemProvider: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLQueryItem(pub id);
impl std::ops::Deref for NSURLQueryItem {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLQueryItem {}
impl NSURLQueryItem {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLQueryItem), alloc) })
    }
}
impl PNSSecureCoding for NSURLQueryItem {}
impl PNSCopying for NSURLQueryItem {}
impl INSObject for NSURLQueryItem {}
impl PNSObject for NSURLQueryItem {}
impl From<NSURLQueryItem> for NSObject {
    fn from(child: NSURLQueryItem) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLQueryItem {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLQueryItem, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLQueryItem)) };
        if is_kind_of {
            Ok(NSURLQueryItem(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLQueryItem")
        }
    }
}
impl INSURLQueryItem for NSURLQueryItem {}
pub trait INSURLQueryItem: Sized + std::ops::Deref {
    unsafe fn initWithName_value_(&self, name: NSString, value: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithName : name value : value)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn value(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, value)
    }
    unsafe fn queryItemWithName_value_(name: NSString, value: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLQueryItem) , queryItemWithName : name value : value)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLComponents(pub id);
impl std::ops::Deref for NSURLComponents {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLComponents {}
impl NSURLComponents {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLComponents), alloc) })
    }
}
impl PNSCopying for NSURLComponents {}
impl INSObject for NSURLComponents {}
impl PNSObject for NSURLComponents {}
impl From<NSURLComponents> for NSObject {
    fn from(child: NSURLComponents) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLComponents {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLComponents, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLComponents)) };
        if is_kind_of {
            Ok(NSURLComponents(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLComponents")
        }
    }
}
impl INSURLComponents for NSURLComponents {}
pub trait INSURLComponents: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithURL_resolvingAgainstBaseURL_(&self, url: NSURL, resolve: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : url resolvingAgainstBaseURL : resolve)
    }
    unsafe fn initWithString_(&self, URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: URLString)
    }
    unsafe fn URLRelativeToURL_(&self, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLRelativeToURL: baseURL)
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
    unsafe fn scheme(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheme)
    }
    unsafe fn setScheme_(&self, scheme: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setScheme: scheme)
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, user)
    }
    unsafe fn setUser_(&self, user: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUser: user)
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, password)
    }
    unsafe fn setPassword_(&self, password: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPassword: password)
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, host)
    }
    unsafe fn setHost_(&self, host: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHost: host)
    }
    unsafe fn port(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn setPort_(&self, port: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPort: port)
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, path)
    }
    unsafe fn setPath_(&self, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPath: path)
    }
    unsafe fn query(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, query)
    }
    unsafe fn setQuery_(&self, query: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQuery: query)
    }
    unsafe fn fragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fragment)
    }
    unsafe fn setFragment_(&self, fragment: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFragment: fragment)
    }
    unsafe fn percentEncodedUser(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedUser)
    }
    unsafe fn setPercentEncodedUser_(&self, percentEncodedUser: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedUser: percentEncodedUser)
    }
    unsafe fn percentEncodedPassword(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedPassword)
    }
    unsafe fn setPercentEncodedPassword_(&self, percentEncodedPassword: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedPassword: percentEncodedPassword)
    }
    unsafe fn percentEncodedHost(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedHost)
    }
    unsafe fn setPercentEncodedHost_(&self, percentEncodedHost: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedHost: percentEncodedHost)
    }
    unsafe fn percentEncodedPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedPath)
    }
    unsafe fn setPercentEncodedPath_(&self, percentEncodedPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedPath: percentEncodedPath)
    }
    unsafe fn percentEncodedQuery(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedQuery)
    }
    unsafe fn setPercentEncodedQuery_(&self, percentEncodedQuery: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedQuery: percentEncodedQuery)
    }
    unsafe fn percentEncodedFragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedFragment)
    }
    unsafe fn setPercentEncodedFragment_(&self, percentEncodedFragment: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedFragment: percentEncodedFragment)
    }
    unsafe fn encodedHost(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodedHost)
    }
    unsafe fn setEncodedHost_(&self, encodedHost: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEncodedHost: encodedHost)
    }
    unsafe fn rangeOfScheme(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfScheme)
    }
    unsafe fn rangeOfUser(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfUser)
    }
    unsafe fn rangeOfPassword(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfPassword)
    }
    unsafe fn rangeOfHost(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfHost)
    }
    unsafe fn rangeOfPort(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfPort)
    }
    unsafe fn rangeOfPath(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfPath)
    }
    unsafe fn rangeOfQuery(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfQuery)
    }
    unsafe fn rangeOfFragment(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeOfFragment)
    }
    unsafe fn queryItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, queryItems)
    }
    unsafe fn setQueryItems_(&self, queryItems: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQueryItems: queryItems)
    }
    unsafe fn percentEncodedQueryItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, percentEncodedQueryItems)
    }
    unsafe fn setPercentEncodedQueryItems_(&self, percentEncodedQueryItems: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPercentEncodedQueryItems: percentEncodedQueryItems)
    }
    unsafe fn componentsWithURL_resolvingAgainstBaseURL_(url: NSURL, resolve: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLComponents) , componentsWithURL : url resolvingAgainstBaseURL : resolve)
    }
    unsafe fn componentsWithString_(URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLComponents), componentsWithString: URLString)
    }
}
impl NSCharacterSet_NSURLUtilities for NSCharacterSet {}
pub trait NSCharacterSet_NSURLUtilities: Sized + std::ops::Deref {
    unsafe fn URLUserAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLUserAllowedCharacterSet)
    }
    unsafe fn URLPasswordAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLPasswordAllowedCharacterSet)
    }
    unsafe fn URLHostAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLHostAllowedCharacterSet)
    }
    unsafe fn URLPathAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLPathAllowedCharacterSet)
    }
    unsafe fn URLQueryAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLQueryAllowedCharacterSet)
    }
    unsafe fn URLFragmentAllowedCharacterSet() -> NSCharacterSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCharacterSet), URLFragmentAllowedCharacterSet)
    }
}
impl NSString_NSURLUtilities for NSString {}
pub trait NSString_NSURLUtilities: Sized + std::ops::Deref {
    unsafe fn stringByAddingPercentEncodingWithAllowedCharacters_(
        &self,
        allowedCharacters: NSCharacterSet,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            stringByAddingPercentEncodingWithAllowedCharacters: allowedCharacters
        )
    }
    unsafe fn stringByAddingPercentEscapesUsingEncoding_(&self, enc: NSStringEncoding) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByAddingPercentEscapesUsingEncoding: enc)
    }
    unsafe fn stringByReplacingPercentEscapesUsingEncoding_(
        &self,
        enc: NSStringEncoding,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByReplacingPercentEscapesUsingEncoding: enc)
    }
    unsafe fn stringByRemovingPercentEncoding(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringByRemovingPercentEncoding)
    }
}
impl NSURL_NSURLPathUtilities for NSURL {}
pub trait NSURL_NSURLPathUtilities: Sized + std::ops::Deref {
    unsafe fn URLByAppendingPathComponent_(&self, pathComponent: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByAppendingPathComponent: pathComponent)
    }
    unsafe fn URLByAppendingPathComponent_isDirectory_(
        &self,
        pathComponent: NSString,
        isDirectory: BOOL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLByAppendingPathComponent : pathComponent isDirectory : isDirectory)
    }
    unsafe fn URLByAppendingPathExtension_(&self, pathExtension: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByAppendingPathExtension: pathExtension)
    }
    unsafe fn pathComponents(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathComponents)
    }
    unsafe fn lastPathComponent(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastPathComponent)
    }
    unsafe fn pathExtension(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathExtension)
    }
    unsafe fn URLByDeletingLastPathComponent(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByDeletingLastPathComponent)
    }
    unsafe fn URLByDeletingPathExtension(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByDeletingPathExtension)
    }
    unsafe fn URLByStandardizingPath(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByStandardizingPath)
    }
    unsafe fn URLByResolvingSymlinksInPath(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLByResolvingSymlinksInPath)
    }
    unsafe fn fileURLWithPathComponents_(components: NSArray) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURL), fileURLWithPathComponents: components)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileSecurity(pub id);
impl std::ops::Deref for NSFileSecurity {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileSecurity {}
impl NSFileSecurity {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileSecurity), alloc) })
    }
}
impl PNSCopying for NSFileSecurity {}
impl PNSSecureCoding for NSFileSecurity {}
impl INSObject for NSFileSecurity {}
impl PNSObject for NSFileSecurity {}
impl From<NSFileSecurity> for NSObject {
    fn from(child: NSFileSecurity) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileSecurity {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileSecurity, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileSecurity)) };
        if is_kind_of {
            Ok(NSFileSecurity(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileSecurity")
        }
    }
}
impl INSFileSecurity for NSFileSecurity {}
pub trait INSFileSecurity: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
pub type NSFileAttributeKey = NSString;
pub type NSFileAttributeType = NSString;
pub type NSFileProtectionType = NSString;
pub type NSFileProviderServiceName = NSString;
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationSkipHiddenVolumes:
    NSVolumeEnumerationOptions = 2;
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationProduceFileReferenceURLs:
    NSVolumeEnumerationOptions = 4;
pub type NSVolumeEnumerationOptions = NSUInteger;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsSubdirectoryDescendants:
    NSDirectoryEnumerationOptions = 1;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsPackageDescendants:
    NSDirectoryEnumerationOptions = 2;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsHiddenFiles:
    NSDirectoryEnumerationOptions = 4;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationIncludesDirectoriesPostOrder:
    NSDirectoryEnumerationOptions = 8;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationProducesRelativePathURLs:
    NSDirectoryEnumerationOptions = 16;
pub type NSDirectoryEnumerationOptions = NSUInteger;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementUsingNewMetadataOnly:
    NSFileManagerItemReplacementOptions = 1;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementWithoutDeletingBackupItem : NSFileManagerItemReplacementOptions = 2 ;
pub type NSFileManagerItemReplacementOptions = NSUInteger;
pub const NSURLRelationship_NSURLRelationshipContains: NSURLRelationship = 0;
pub const NSURLRelationship_NSURLRelationshipSame: NSURLRelationship = 1;
pub const NSURLRelationship_NSURLRelationshipOther: NSURLRelationship = 2;
pub type NSURLRelationship = NSInteger;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountAllPartitionsAndEjectDisk:
    NSFileManagerUnmountOptions = 1;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountWithoutUI: NSFileManagerUnmountOptions =
    2;
pub type NSFileManagerUnmountOptions = NSUInteger;
extern "C" {
    pub static NSFileManagerUnmountDissentingProcessIdentifierErrorKey: NSString;
}
extern "C" {
    pub static NSUbiquityIdentityDidChangeNotification: NSNotificationName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileManager(pub id);
impl std::ops::Deref for NSFileManager {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileManager {}
impl NSFileManager {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileManager), alloc) })
    }
}
impl INSObject for NSFileManager {}
impl PNSObject for NSFileManager {}
impl From<NSFileManager> for NSObject {
    fn from(child: NSFileManager) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileManager {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileManager, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileManager)) };
        if is_kind_of {
            Ok(NSFileManager(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileManager")
        }
    }
}
impl INSFileManager for NSFileManager {}
pub trait INSFileManager: Sized + std::ops::Deref {
    unsafe fn mountedVolumeURLsIncludingResourceValuesForKeys_options_(
        &self,
        propertyKeys: NSArray,
        options: NSVolumeEnumerationOptions,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , mountedVolumeURLsIncludingResourceValuesForKeys : propertyKeys options : options)
    }
    unsafe fn unmountVolumeAtURL_options_completionHandler_(
        &self,
        url: NSURL,
        mask: NSFileManagerUnmountOptions,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unmountVolumeAtURL : url options : mask completionHandler : completionHandler)
    }
    unsafe fn contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsOfDirectoryAtURL : url includingPropertiesForKeys : keys options : mask error : error)
    }
    unsafe fn URLsForDirectory_inDomains_(
        &self,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLsForDirectory : directory inDomains : domainMask)
    }
    unsafe fn URLForDirectory_inDomain_appropriateForURL_create_error_(
        &self,
        directory: NSSearchPathDirectory,
        domain: NSSearchPathDomainMask,
        url: NSURL,
        shouldCreate: BOOL,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForDirectory : directory inDomain : domain appropriateForURL : url create : shouldCreate error : error)
    }
    unsafe fn getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directoryURL: NSURL,
        otherURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getRelationship : outRelationship ofDirectoryAtURL : directoryURL toItemAtURL : otherURL error : error)
    }
    unsafe fn getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getRelationship : outRelationship ofDirectory : directory inDomain : domainMask toItemAtURL : url error : error)
    }
    unsafe fn createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
        &self,
        url: NSURL,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtURL : url withIntermediateDirectories : createIntermediates attributes : attributes error : error)
    }
    unsafe fn createSymbolicLinkAtURL_withDestinationURL_error_(
        &self,
        url: NSURL,
        destURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtURL : url withDestinationURL : destURL error : error)
    }
    unsafe fn setAttributes_ofItemAtPath_error_(
        &self,
        attributes: NSDictionary,
        path: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setAttributes : attributes ofItemAtPath : path error : error)
    }
    unsafe fn createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
        &self,
        path: NSString,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtPath : path withIntermediateDirectories : createIntermediates attributes : attributes error : error)
    }
    unsafe fn contentsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsOfDirectoryAtPath : path error : error)
    }
    unsafe fn subpathsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , subpathsOfDirectoryAtPath : path error : error)
    }
    unsafe fn attributesOfItemAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesOfItemAtPath : path error : error)
    }
    unsafe fn attributesOfFileSystemForPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesOfFileSystemForPath : path error : error)
    }
    unsafe fn createSymbolicLinkAtPath_withDestinationPath_error_(
        &self,
        path: NSString,
        destPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtPath : path withDestinationPath : destPath error : error)
    }
    unsafe fn destinationOfSymbolicLinkAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , destinationOfSymbolicLinkAtPath : path error : error)
    }
    unsafe fn copyItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn moveItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , moveItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn linkItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linkItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn removeItemAtPath_error_(&self, path: NSString, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeItemAtPath : path error : error)
    }
    unsafe fn copyItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn moveItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , moveItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn linkItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linkItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn removeItemAtURL_error_(&self, URL: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeItemAtURL : URL error : error)
    }
    unsafe fn trashItemAtURL_resultingItemURL_error_(
        &self,
        url: NSURL,
        outResultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , trashItemAtURL : url resultingItemURL : outResultingURL error : error)
    }
    unsafe fn fileAttributesAtPath_traverseLink_(&self, path: NSString, yorn: BOOL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileAttributesAtPath : path traverseLink : yorn)
    }
    unsafe fn changeFileAttributes_atPath_(&self, attributes: NSDictionary, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , changeFileAttributes : attributes atPath : path)
    }
    unsafe fn directoryContentsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, directoryContentsAtPath: path)
    }
    unsafe fn fileSystemAttributesAtPath_(&self, path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemAttributesAtPath: path)
    }
    unsafe fn pathContentOfSymbolicLinkAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathContentOfSymbolicLinkAtPath: path)
    }
    unsafe fn createSymbolicLinkAtPath_pathContent_(
        &self,
        path: NSString,
        otherpath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtPath : path pathContent : otherpath)
    }
    unsafe fn createDirectoryAtPath_attributes_(
        &self,
        path: NSString,
        attributes: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtPath : path attributes : attributes)
    }
    unsafe fn changeCurrentDirectoryPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, changeCurrentDirectoryPath: path)
    }
    unsafe fn fileExistsAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileExistsAtPath: path)
    }
    unsafe fn fileExistsAtPath_isDirectory_(&self, path: NSString, isDirectory: *mut BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileExistsAtPath : path isDirectory : isDirectory)
    }
    unsafe fn isReadableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isReadableFileAtPath: path)
    }
    unsafe fn isWritableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isWritableFileAtPath: path)
    }
    unsafe fn isExecutableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExecutableFileAtPath: path)
    }
    unsafe fn isDeletableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDeletableFileAtPath: path)
    }
    unsafe fn contentsEqualAtPath_andPath_(&self, path1: NSString, path2: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsEqualAtPath : path1 andPath : path2)
    }
    unsafe fn displayNameAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, displayNameAtPath: path)
    }
    unsafe fn componentsToDisplayForPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentsToDisplayForPath: path)
    }
    unsafe fn enumeratorAtPath_(&self, path: NSString) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumeratorAtPath: path)
    }
    unsafe fn enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        handler: *mut ::std::os::raw::c_void,
    ) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumeratorAtURL : url includingPropertiesForKeys : keys options : mask errorHandler : handler)
    }
    unsafe fn subpathsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subpathsAtPath: path)
    }
    unsafe fn contentsAtPath_(&self, path: NSString) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, contentsAtPath: path)
    }
    unsafe fn createFileAtPath_contents_attributes_(
        &self,
        path: NSString,
        data: NSData,
        attr: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createFileAtPath : path contents : data attributes : attr)
    }
    unsafe fn fileSystemRepresentationWithPath_(
        &self,
        path: NSString,
    ) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemRepresentationWithPath: path)
    }
    unsafe fn stringWithFileSystemRepresentation_length_(
        &self,
        str_: *const ::std::os::raw::c_char,
        len: NSUInteger,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringWithFileSystemRepresentation : str_ length : len)
    }
    unsafe fn replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
        &self,
        originalItemURL: NSURL,
        newItemURL: NSURL,
        backupItemName: NSString,
        options: NSFileManagerItemReplacementOptions,
        resultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceItemAtURL : originalItemURL withItemAtURL : newItemURL backupItemName : backupItemName options : options resultingItemURL : resultingURL error : error)
    }
    unsafe fn setUbiquitous_itemAtURL_destinationURL_error_(
        &self,
        flag: BOOL,
        url: NSURL,
        destinationURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setUbiquitous : flag itemAtURL : url destinationURL : destinationURL error : error)
    }
    unsafe fn isUbiquitousItemAtURL_(&self, url: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isUbiquitousItemAtURL: url)
    }
    unsafe fn startDownloadingUbiquitousItemAtURL_error_(
        &self,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , startDownloadingUbiquitousItemAtURL : url error : error)
    }
    unsafe fn evictUbiquitousItemAtURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , evictUbiquitousItemAtURL : url error : error)
    }
    unsafe fn URLForUbiquityContainerIdentifier_(&self, containerIdentifier: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            URLForUbiquityContainerIdentifier: containerIdentifier
        )
    }
    unsafe fn URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
        &self,
        url: NSURL,
        outDate: *mut NSDate,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForPublishingUbiquitousItemAtURL : url expirationDate : outDate error : error)
    }
    unsafe fn getFileProviderServicesForItemAtURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getFileProviderServicesForItemAtURL : url completionHandler : completionHandler)
    }
    unsafe fn containerURLForSecurityApplicationGroupIdentifier_(
        &self,
        groupIdentifier: NSString,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            containerURLForSecurityApplicationGroupIdentifier: groupIdentifier
        )
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn currentDirectoryPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentDirectoryPath)
    }
    unsafe fn ubiquityIdentityToken(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ubiquityIdentityToken)
    }
    unsafe fn defaultManager() -> NSFileManager
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileManager), defaultManager)
    }
}
impl NSFileManager_NSUserInformation for NSFileManager {}
pub trait NSFileManager_NSUserInformation: Sized + std::ops::Deref {
    unsafe fn homeDirectoryForUser_(&self, userName: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, homeDirectoryForUser: userName)
    }
    unsafe fn homeDirectoryForCurrentUser(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, homeDirectoryForCurrentUser)
    }
    unsafe fn temporaryDirectory(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, temporaryDirectory)
    }
}
impl NSObject_NSCopyLinkMoveHandler for NSObject {}
pub trait NSObject_NSCopyLinkMoveHandler: Sized + std::ops::Deref {
    unsafe fn fileManager_shouldProceedAfterError_(
        &self,
        fm: NSFileManager,
        errorInfo: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fm shouldProceedAfterError : errorInfo)
    }
    unsafe fn fileManager_willProcessPath_(&self, fm: NSFileManager, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fm willProcessPath : path)
    }
}
pub trait PNSFileManagerDelegate: Sized + std::ops::Deref {
    unsafe fn fileManager_shouldCopyItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldCopyItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldCopyItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldCopyItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error copyingItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error copyingItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldMoveItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldMoveItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldMoveItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldMoveItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldProceedAfterError_movingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error movingItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldProceedAfterError_movingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error movingItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldLinkItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldLinkItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldLinkItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldLinkItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcPath: NSString,
        dstPath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error linkingItemAtPath : srcPath toPath : dstPath)
    }
    unsafe fn fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        srcURL: NSURL,
        dstURL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error linkingItemAtURL : srcURL toURL : dstURL)
    }
    unsafe fn fileManager_shouldRemoveItemAtPath_(
        &self,
        fileManager: NSFileManager,
        path: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldRemoveItemAtPath : path)
    }
    unsafe fn fileManager_shouldRemoveItemAtURL_(
        &self,
        fileManager: NSFileManager,
        URL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldRemoveItemAtURL : URL)
    }
    unsafe fn fileManager_shouldProceedAfterError_removingItemAtPath_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        path: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error removingItemAtPath : path)
    }
    unsafe fn fileManager_shouldProceedAfterError_removingItemAtURL_(
        &self,
        fileManager: NSFileManager,
        error: NSError,
        URL: NSURL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fileManager shouldProceedAfterError : error removingItemAtURL : URL)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDirectoryEnumerator(pub id);
impl std::ops::Deref for NSDirectoryEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDirectoryEnumerator {}
impl NSDirectoryEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDirectoryEnumerator), alloc) })
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSDirectoryEnumerator {}
impl PNSFastEnumeration for NSDirectoryEnumerator {}
impl INSObject for NSDirectoryEnumerator {}
impl PNSObject for NSDirectoryEnumerator {}
impl From<NSDirectoryEnumerator> for NSObject {
    fn from(child: NSDirectoryEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDirectoryEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDirectoryEnumerator, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDirectoryEnumerator)) };
        if is_kind_of {
            Ok(NSDirectoryEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDirectoryEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSDirectoryEnumerator<ObjectType> for NSDirectoryEnumerator {}
pub trait INSDirectoryEnumerator<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn skipDescendents(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, skipDescendents)
    }
    unsafe fn skipDescendants(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, skipDescendants)
    }
    unsafe fn fileAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileAttributes)
    }
    unsafe fn directoryAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, directoryAttributes)
    }
    unsafe fn isEnumeratingDirectoryPostOrder(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEnumeratingDirectoryPostOrder)
    }
    unsafe fn level(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, level)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileProviderService(pub id);
impl std::ops::Deref for NSFileProviderService {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileProviderService {}
impl NSFileProviderService {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileProviderService), alloc) })
    }
}
impl INSObject for NSFileProviderService {}
impl PNSObject for NSFileProviderService {}
impl From<NSFileProviderService> for NSObject {
    fn from(child: NSFileProviderService) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileProviderService {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileProviderService, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSFileProviderService)) };
        if is_kind_of {
            Ok(NSFileProviderService(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileProviderService")
        }
    }
}
impl INSFileProviderService for NSFileProviderService {}
pub trait INSFileProviderService: Sized + std::ops::Deref {
    unsafe fn getFileProviderConnectionWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            getFileProviderConnectionWithCompletionHandler: completionHandler
        )
    }
    unsafe fn name(&self) -> NSFileProviderServiceName
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
}
extern "C" {
    pub static NSFileType: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileTypeDirectory: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeRegular: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeSymbolicLink: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeSocket: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeCharacterSpecial: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeBlockSpecial: NSFileAttributeType;
}
extern "C" {
    pub static NSFileTypeUnknown: NSFileAttributeType;
}
extern "C" {
    pub static NSFileSize: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileModificationDate: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileReferenceCount: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileDeviceIdentifier: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileOwnerAccountName: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileGroupOwnerAccountName: NSFileAttributeKey;
}
extern "C" {
    pub static NSFilePosixPermissions: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileSystemNumber: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileSystemFileNumber: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileExtensionHidden: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileHFSCreatorCode: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileHFSTypeCode: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileImmutable: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileAppendOnly: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileCreationDate: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileOwnerAccountID: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileGroupOwnerAccountID: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileBusy: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileProtectionKey: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileProtectionNone: NSFileProtectionType;
}
extern "C" {
    pub static NSFileProtectionComplete: NSFileProtectionType;
}
extern "C" {
    pub static NSFileProtectionCompleteUnlessOpen: NSFileProtectionType;
}
extern "C" {
    pub static NSFileProtectionCompleteUntilFirstUserAuthentication: NSFileProtectionType;
}
extern "C" {
    pub static NSFileSystemSize: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileSystemFreeSize: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileSystemNodes: NSFileAttributeKey;
}
extern "C" {
    pub static NSFileSystemFreeNodes: NSFileAttributeKey;
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSFileAttributes<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSFileAttributes<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn fileSize(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSize)
    }
    unsafe fn fileModificationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileModificationDate)
    }
    unsafe fn fileType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileType)
    }
    unsafe fn filePosixPermissions(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filePosixPermissions)
    }
    unsafe fn fileOwnerAccountName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileOwnerAccountName)
    }
    unsafe fn fileGroupOwnerAccountName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileGroupOwnerAccountName)
    }
    unsafe fn fileSystemNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemNumber)
    }
    unsafe fn fileSystemFileNumber(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemFileNumber)
    }
    unsafe fn fileExtensionHidden(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileExtensionHidden)
    }
    unsafe fn fileHFSCreatorCode(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileHFSCreatorCode)
    }
    unsafe fn fileHFSTypeCode(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileHFSTypeCode)
    }
    unsafe fn fileIsImmutable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileIsImmutable)
    }
    unsafe fn fileIsAppendOnly(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileIsAppendOnly)
    }
    unsafe fn fileCreationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileCreationDate)
    }
    unsafe fn fileOwnerAccountID(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileOwnerAccountID)
    }
    unsafe fn fileGroupOwnerAccountID(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileGroupOwnerAccountID)
    }
}
pub const NSPointerFunctionsOptions_NSPointerFunctionsStrongMemory: NSPointerFunctionsOptions = 0;
pub const NSPointerFunctionsOptions_NSPointerFunctionsZeroingWeakMemory: NSPointerFunctionsOptions =
    1;
pub const NSPointerFunctionsOptions_NSPointerFunctionsOpaqueMemory: NSPointerFunctionsOptions = 2;
pub const NSPointerFunctionsOptions_NSPointerFunctionsMallocMemory: NSPointerFunctionsOptions = 3;
pub const NSPointerFunctionsOptions_NSPointerFunctionsMachVirtualMemory: NSPointerFunctionsOptions =
    4;
pub const NSPointerFunctionsOptions_NSPointerFunctionsWeakMemory: NSPointerFunctionsOptions = 5;
pub const NSPointerFunctionsOptions_NSPointerFunctionsObjectPersonality: NSPointerFunctionsOptions =
    0;
pub const NSPointerFunctionsOptions_NSPointerFunctionsOpaquePersonality: NSPointerFunctionsOptions =
    256;
pub const NSPointerFunctionsOptions_NSPointerFunctionsObjectPointerPersonality:
    NSPointerFunctionsOptions = 512;
pub const NSPointerFunctionsOptions_NSPointerFunctionsCStringPersonality:
    NSPointerFunctionsOptions = 768;
pub const NSPointerFunctionsOptions_NSPointerFunctionsStructPersonality: NSPointerFunctionsOptions =
    1024;
pub const NSPointerFunctionsOptions_NSPointerFunctionsIntegerPersonality:
    NSPointerFunctionsOptions = 1280;
pub const NSPointerFunctionsOptions_NSPointerFunctionsCopyIn: NSPointerFunctionsOptions = 65536;
pub type NSPointerFunctionsOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPointerFunctions(pub id);
impl std::ops::Deref for NSPointerFunctions {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPointerFunctions {}
impl NSPointerFunctions {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPointerFunctions), alloc) })
    }
}
impl PNSCopying for NSPointerFunctions {}
impl INSObject for NSPointerFunctions {}
impl PNSObject for NSPointerFunctions {}
impl From<NSPointerFunctions> for NSObject {
    fn from(child: NSPointerFunctions) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPointerFunctions {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPointerFunctions, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSPointerFunctions)) };
        if is_kind_of {
            Ok(NSPointerFunctions(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPointerFunctions")
        }
    }
}
impl INSPointerFunctions for NSPointerFunctions {}
pub trait INSPointerFunctions: Sized + std::ops::Deref {
    unsafe fn initWithOptions_(&self, options: NSPointerFunctionsOptions) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithOptions: options)
    }
    unsafe fn hashFunction(
        &self,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
            >,
        ) -> NSUInteger,
    >
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hashFunction)
    }
    unsafe fn setHashFunction_(
        &self,
        hashFunction: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
                >,
            ) -> NSUInteger,
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHashFunction: hashFunction)
    }
    unsafe fn isEqualFunction(
        &self,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
            >,
        ) -> BOOL,
    >
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualFunction)
    }
    unsafe fn setIsEqualFunction_(
        &self,
        isEqualFunction: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
                >,
            ) -> BOOL,
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIsEqualFunction: isEqualFunction)
    }
    unsafe fn sizeFunction(
        &self,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
    >
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sizeFunction)
    }
    unsafe fn setSizeFunction_(
        &self,
        sizeFunction: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSizeFunction: sizeFunction)
    }
    unsafe fn descriptionFunction(
        &self,
    ) -> ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSString>
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionFunction)
    }
    unsafe fn setDescriptionFunction_(
        &self,
        descriptionFunction: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSString,
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDescriptionFunction: descriptionFunction)
    }
    unsafe fn relinquishFunction(
        &self,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
            >,
        ),
    >
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relinquishFunction)
    }
    unsafe fn setRelinquishFunction_(
        &self,
        relinquishFunction: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
                >,
            ),
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRelinquishFunction: relinquishFunction)
    }
    unsafe fn acquireFunction(
        &self,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
            >,
            arg3: BOOL,
        ) -> *mut ::std::os::raw::c_void,
    >
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, acquireFunction)
    }
    unsafe fn setAcquireFunction_(
        &self,
        acquireFunction: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: ::std::option::Option<
                    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> NSUInteger,
                >,
                arg3: BOOL,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAcquireFunction: acquireFunction)
    }
    unsafe fn usesStrongWriteBarrier(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, usesStrongWriteBarrier)
    }
    unsafe fn setUsesStrongWriteBarrier_(&self, usesStrongWriteBarrier: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUsesStrongWriteBarrier: usesStrongWriteBarrier)
    }
    unsafe fn usesWeakReadAndWriteBarriers(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, usesWeakReadAndWriteBarriers)
    }
    unsafe fn setUsesWeakReadAndWriteBarriers_(&self, usesWeakReadAndWriteBarriers: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setUsesWeakReadAndWriteBarriers: usesWeakReadAndWriteBarriers
        )
    }
    unsafe fn pointerFunctionsWithOptions_(options: NSPointerFunctionsOptions) -> NSPointerFunctions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSPointerFunctions),
            pointerFunctionsWithOptions: options
        )
    }
}
extern "C" {
    pub static NSHashTableStrongMemory: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSHashTableZeroingWeakMemory: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSHashTableCopyIn: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSHashTableObjectPointerPersonality: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSHashTableWeakMemory: NSPointerFunctionsOptions;
}
pub type NSHashTableOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHashTable(pub id);
impl std::ops::Deref for NSHashTable {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHashTable {}
impl NSHashTable {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHashTable), alloc) })
    }
}
impl PNSCopying for NSHashTable {}
impl PNSSecureCoding for NSHashTable {}
impl PNSFastEnumeration for NSHashTable {}
impl INSObject for NSHashTable {}
impl PNSObject for NSHashTable {}
impl From<NSHashTable> for NSObject {
    fn from(child: NSHashTable) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSHashTable {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSHashTable, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSHashTable)) };
        if is_kind_of {
            Ok(NSHashTable(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSHashTable")
        }
    }
}
impl<ObjectType: 'static> INSHashTable<ObjectType> for NSHashTable {}
pub trait INSHashTable<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithOptions_capacity_(
        &self,
        options: NSPointerFunctionsOptions,
        initialCapacity: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithOptions : options capacity : initialCapacity)
    }
    unsafe fn initWithPointerFunctions_capacity_(
        &self,
        functions: NSPointerFunctions,
        initialCapacity: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithPointerFunctions : functions capacity : initialCapacity)
    }
    unsafe fn member_(&self, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, member: object)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn addObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: object)
    }
    unsafe fn removeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: object)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn containsObject_(&self, anObject: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsObject: anObject)
    }
    unsafe fn intersectsHashTable_(&self, other: NSHashTable) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsHashTable: other)
    }
    unsafe fn isEqualToHashTable_(&self, other: NSHashTable) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToHashTable: other)
    }
    unsafe fn isSubsetOfHashTable_(&self, other: NSHashTable) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfHashTable: other)
    }
    unsafe fn intersectHashTable_(&self, other: NSHashTable)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectHashTable: other)
    }
    unsafe fn unionHashTable_(&self, other: NSHashTable)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unionHashTable: other)
    }
    unsafe fn minusHashTable_(&self, other: NSHashTable)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minusHashTable: other)
    }
    unsafe fn pointerFunctions(&self) -> NSPointerFunctions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointerFunctions)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn allObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allObjects)
    }
    unsafe fn anyObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, anyObject)
    }
    unsafe fn setRepresentation(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRepresentation)
    }
    unsafe fn hashTableWithOptions_(options: NSPointerFunctionsOptions) -> NSHashTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSHashTable), hashTableWithOptions: options)
    }
    unsafe fn hashTableWithWeakObjects() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSHashTable), hashTableWithWeakObjects)
    }
    unsafe fn weakObjectsHashTable() -> NSHashTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSHashTable), weakObjectsHashTable)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSHashEnumerator {
    pub _pi: NSUInteger,
    pub _si: NSUInteger,
    pub _bs: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn NSFreeHashTable(table: NSHashTable);
}
extern "C" {
    pub fn NSResetHashTable(table: NSHashTable);
}
extern "C" {
    pub fn NSCompareHashTables(table1: NSHashTable, table2: NSHashTable) -> BOOL;
}
extern "C" {
    pub fn NSCopyHashTableWithZone(table: NSHashTable, zone: *mut NSZone) -> NSHashTable;
}
extern "C" {
    pub fn NSHashGet(
        table: NSHashTable,
        pointer: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSHashInsert(table: NSHashTable, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn NSHashInsertKnownAbsent(table: NSHashTable, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn NSHashInsertIfAbsent(
        table: NSHashTable,
        pointer: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSHashRemove(table: NSHashTable, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn NSEnumerateHashTable(table: NSHashTable) -> NSHashEnumerator;
}
extern "C" {
    pub fn NSNextHashEnumeratorItem(
        enumerator: *mut NSHashEnumerator,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSEndHashTableEnumeration(enumerator: *mut NSHashEnumerator);
}
extern "C" {
    pub fn NSCountHashTable(table: NSHashTable) -> NSUInteger;
}
extern "C" {
    pub fn NSStringFromHashTable(table: NSHashTable) -> NSString;
}
extern "C" {
    pub fn NSAllHashTableObjects(table: NSHashTable) -> NSArray;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSHashTableCallBacks {
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(table: NSHashTable, arg1: *const ::std::os::raw::c_void) -> NSUInteger,
    >,
    pub isEqual: ::std::option::Option<
        unsafe extern "C" fn(
            table: NSHashTable,
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> BOOL,
    >,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(table: NSHashTable, arg1: *const ::std::os::raw::c_void),
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(table: NSHashTable, arg1: *mut ::std::os::raw::c_void),
    >,
    pub describe: ::std::option::Option<
        unsafe extern "C" fn(table: NSHashTable, arg1: *const ::std::os::raw::c_void) -> NSString,
    >,
}
extern "C" {
    pub fn NSCreateHashTableWithZone(
        callBacks: NSHashTableCallBacks,
        capacity: NSUInteger,
        zone: *mut NSZone,
    ) -> NSHashTable;
}
extern "C" {
    pub fn NSCreateHashTable(callBacks: NSHashTableCallBacks, capacity: NSUInteger) -> NSHashTable;
}
extern "C" {
    pub static NSIntegerHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSNonOwnedPointerHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSNonRetainedObjectHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSObjectHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSOwnedObjectIdentityHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSOwnedPointerHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSPointerToStructHashCallBacks: NSHashTableCallBacks;
}
extern "C" {
    pub static NSIntHashCallBacks: NSHashTableCallBacks;
}
pub type NSHTTPCookiePropertyKey = NSString;
pub type NSHTTPCookieStringPolicy = NSString;
extern "C" {
    pub static NSHTTPCookieName: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieValue: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieOriginURL: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieVersion: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieDomain: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookiePath: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieSecure: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieExpires: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieComment: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieCommentURL: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieDiscard: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieMaximumAge: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookiePort: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieSameSitePolicy: NSHTTPCookiePropertyKey;
}
extern "C" {
    pub static NSHTTPCookieSameSiteLax: NSHTTPCookieStringPolicy;
}
extern "C" {
    pub static NSHTTPCookieSameSiteStrict: NSHTTPCookieStringPolicy;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPCookieInternal(pub id);
impl std::ops::Deref for NSHTTPCookieInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPCookieInternal {}
impl NSHTTPCookieInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPCookieInternal), alloc) })
    }
}
impl INSHTTPCookieInternal for NSHTTPCookieInternal {}
pub trait INSHTTPCookieInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPCookie(pub id);
impl std::ops::Deref for NSHTTPCookie {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPCookie {}
impl NSHTTPCookie {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPCookie), alloc) })
    }
}
impl INSObject for NSHTTPCookie {}
impl PNSObject for NSHTTPCookie {}
impl From<NSHTTPCookie> for NSObject {
    fn from(child: NSHTTPCookie) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSHTTPCookie {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSHTTPCookie, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSHTTPCookie)) };
        if is_kind_of {
            Ok(NSHTTPCookie(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSHTTPCookie")
        }
    }
}
impl INSHTTPCookie for NSHTTPCookie {}
pub trait INSHTTPCookie: Sized + std::ops::Deref {
    unsafe fn initWithProperties_(&self, properties: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithProperties: properties)
    }
    unsafe fn properties(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, properties)
    }
    unsafe fn version(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, version)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn value(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, value)
    }
    unsafe fn expiresDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, expiresDate)
    }
    unsafe fn isSessionOnly(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSessionOnly)
    }
    unsafe fn domain(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domain)
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, path)
    }
    unsafe fn isSecure(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSecure)
    }
    unsafe fn isHTTPOnly(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isHTTPOnly)
    }
    unsafe fn comment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, comment)
    }
    unsafe fn commentURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, commentURL)
    }
    unsafe fn portList(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, portList)
    }
    unsafe fn sameSitePolicy(&self) -> NSHTTPCookieStringPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sameSitePolicy)
    }
    unsafe fn cookieWithProperties_(properties: NSDictionary) -> NSHTTPCookie
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSHTTPCookie), cookieWithProperties: properties)
    }
    unsafe fn requestHeaderFieldsWithCookies_(cookies: NSArray) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSHTTPCookie),
            requestHeaderFieldsWithCookies: cookies
        )
    }
    unsafe fn cookiesWithResponseHeaderFields_forURL_(
        headerFields: NSDictionary,
        URL: NSURL,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSHTTPCookie) , cookiesWithResponseHeaderFields : headerFields forURL : URL)
    }
}
pub const NSHTTPCookieAcceptPolicy_NSHTTPCookieAcceptPolicyAlways: NSHTTPCookieAcceptPolicy = 0;
pub const NSHTTPCookieAcceptPolicy_NSHTTPCookieAcceptPolicyNever: NSHTTPCookieAcceptPolicy = 1;
pub const NSHTTPCookieAcceptPolicy_NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain:
    NSHTTPCookieAcceptPolicy = 2;
pub type NSHTTPCookieAcceptPolicy = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPCookieStorageInternal(pub id);
impl std::ops::Deref for NSHTTPCookieStorageInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPCookieStorageInternal {}
impl NSHTTPCookieStorageInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPCookieStorageInternal), alloc) })
    }
}
impl INSHTTPCookieStorageInternal for NSHTTPCookieStorageInternal {}
pub trait INSHTTPCookieStorageInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPCookieStorage(pub id);
impl std::ops::Deref for NSHTTPCookieStorage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPCookieStorage {}
impl NSHTTPCookieStorage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPCookieStorage), alloc) })
    }
}
impl INSObject for NSHTTPCookieStorage {}
impl PNSObject for NSHTTPCookieStorage {}
impl From<NSHTTPCookieStorage> for NSObject {
    fn from(child: NSHTTPCookieStorage) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSHTTPCookieStorage {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSHTTPCookieStorage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSHTTPCookieStorage)) };
        if is_kind_of {
            Ok(NSHTTPCookieStorage(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSHTTPCookieStorage")
        }
    }
}
impl INSHTTPCookieStorage for NSHTTPCookieStorage {}
pub trait INSHTTPCookieStorage: Sized + std::ops::Deref {
    unsafe fn setCookie_(&self, cookie: NSHTTPCookie)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCookie: cookie)
    }
    unsafe fn deleteCookie_(&self, cookie: NSHTTPCookie)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deleteCookie: cookie)
    }
    unsafe fn removeCookiesSinceDate_(&self, date: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCookiesSinceDate: date)
    }
    unsafe fn cookiesForURL_(&self, URL: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cookiesForURL: URL)
    }
    unsafe fn setCookies_forURL_mainDocumentURL_(
        &self,
        cookies: NSArray,
        URL: NSURL,
        mainDocumentURL: NSURL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setCookies : cookies forURL : URL mainDocumentURL : mainDocumentURL)
    }
    unsafe fn sortedCookiesUsingDescriptors_(&self, sortOrder: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedCookiesUsingDescriptors: sortOrder)
    }
    unsafe fn cookies(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cookies)
    }
    unsafe fn cookieAcceptPolicy(&self) -> NSHTTPCookieAcceptPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cookieAcceptPolicy)
    }
    unsafe fn setCookieAcceptPolicy_(&self, cookieAcceptPolicy: NSHTTPCookieAcceptPolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCookieAcceptPolicy: cookieAcceptPolicy)
    }
    unsafe fn sharedCookieStorageForGroupContainerIdentifier_(
        identifier: NSString,
    ) -> NSHTTPCookieStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSHTTPCookieStorage),
            sharedCookieStorageForGroupContainerIdentifier: identifier
        )
    }
    unsafe fn sharedHTTPCookieStorage() -> NSHTTPCookieStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSHTTPCookieStorage), sharedHTTPCookieStorage)
    }
}
impl NSHTTPCookieStorage_NSURLSessionTaskAdditions for NSHTTPCookieStorage {}
pub trait NSHTTPCookieStorage_NSURLSessionTaskAdditions: Sized + std::ops::Deref {
    unsafe fn storeCookies_forTask_(&self, cookies: NSArray, task: NSURLSessionTask)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , storeCookies : cookies forTask : task)
    }
    unsafe fn getCookiesForTask_completionHandler_(
        &self,
        task: NSURLSessionTask,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCookiesForTask : task completionHandler : completionHandler)
    }
}
extern "C" {
    pub static NSHTTPCookieManagerAcceptPolicyChangedNotification: NSNotificationName;
}
extern "C" {
    pub static NSHTTPCookieManagerCookiesChangedNotification: NSNotificationName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSIndexPath(pub id);
impl std::ops::Deref for NSIndexPath {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSIndexPath {}
impl NSIndexPath {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSIndexPath), alloc) })
    }
}
impl PNSCopying for NSIndexPath {}
impl PNSSecureCoding for NSIndexPath {}
impl INSObject for NSIndexPath {}
impl PNSObject for NSIndexPath {}
impl From<NSIndexPath> for NSObject {
    fn from(child: NSIndexPath) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSIndexPath {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSIndexPath, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSIndexPath)) };
        if is_kind_of {
            Ok(NSIndexPath(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSIndexPath")
        }
    }
}
impl INSIndexPath for NSIndexPath {}
pub trait INSIndexPath: Sized + std::ops::Deref {
    unsafe fn initWithIndexes_length_(
        &self,
        indexes: *const NSUInteger,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithIndexes : indexes length : length)
    }
    unsafe fn initWithIndex_(&self, index: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndex: index)
    }
    unsafe fn indexPathByAddingIndex_(&self, index: NSUInteger) -> NSIndexPath
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexPathByAddingIndex: index)
    }
    unsafe fn indexPathByRemovingLastIndex(&self) -> NSIndexPath
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexPathByRemovingLastIndex)
    }
    unsafe fn indexAtPosition_(&self, position: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexAtPosition: position)
    }
    unsafe fn getIndexes_range_(&self, indexes: *mut NSUInteger, positionRange: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getIndexes : indexes range : positionRange)
    }
    unsafe fn compare_(&self, otherObject: NSIndexPath) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: otherObject)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
    unsafe fn indexPathWithIndex_(index: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexPath), indexPathWithIndex: index)
    }
    unsafe fn indexPathWithIndexes_length_(
        indexes: *const NSUInteger,
        length: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSIndexPath) , indexPathWithIndexes : indexes length : length)
    }
}
impl NSIndexPath_NSDeprecated for NSIndexPath {}
pub trait NSIndexPath_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn getIndexes_(&self, indexes: *mut NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getIndexes: indexes)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInflectionRule(pub id);
impl std::ops::Deref for NSInflectionRule {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInflectionRule {}
impl NSInflectionRule {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInflectionRule), alloc) })
    }
}
impl PNSCopying for NSInflectionRule {}
impl PNSSecureCoding for NSInflectionRule {}
impl INSObject for NSInflectionRule {}
impl PNSObject for NSInflectionRule {}
impl From<NSInflectionRule> for NSObject {
    fn from(child: NSInflectionRule) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInflectionRule {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInflectionRule, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSInflectionRule)) };
        if is_kind_of {
            Ok(NSInflectionRule(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInflectionRule")
        }
    }
}
impl INSInflectionRule for NSInflectionRule {}
pub trait INSInflectionRule: Sized + std::ops::Deref {
    unsafe fn init(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn automaticRule() -> NSInflectionRule
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInflectionRule), automaticRule)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInflectionRuleExplicit(pub id);
impl std::ops::Deref for NSInflectionRuleExplicit {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInflectionRuleExplicit {}
impl NSInflectionRuleExplicit {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInflectionRuleExplicit), alloc) })
    }
}
impl INSInflectionRule for NSInflectionRuleExplicit {}
impl PNSCopying for NSInflectionRuleExplicit {}
impl PNSSecureCoding for NSInflectionRuleExplicit {}
impl From<NSInflectionRuleExplicit> for NSInflectionRule {
    fn from(child: NSInflectionRuleExplicit) -> NSInflectionRule {
        NSInflectionRule(child.0)
    }
}
impl std::convert::TryFrom<NSInflectionRule> for NSInflectionRuleExplicit {
    type Error = &'static str;
    fn try_from(parent: NSInflectionRule) -> Result<NSInflectionRuleExplicit, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSInflectionRuleExplicit)) };
        if is_kind_of {
            Ok(NSInflectionRuleExplicit(parent.0))
        } else {
            Err("This NSInflectionRule cannot be downcasted to NSInflectionRuleExplicit")
        }
    }
}
impl INSObject for NSInflectionRuleExplicit {}
impl PNSObject for NSInflectionRuleExplicit {}
impl From<NSInflectionRuleExplicit> for NSObject {
    fn from(child: NSInflectionRuleExplicit) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInflectionRuleExplicit {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInflectionRuleExplicit, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSInflectionRuleExplicit)) };
        if is_kind_of {
            Ok(NSInflectionRuleExplicit(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInflectionRuleExplicit")
        }
    }
}
impl INSInflectionRuleExplicit for NSInflectionRuleExplicit {}
pub trait INSInflectionRuleExplicit: Sized + std::ops::Deref {
    unsafe fn initWithMorphology_(&self, morphology: NSMorphology) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithMorphology: morphology)
    }
    unsafe fn morphology(&self) -> NSMorphology
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, morphology)
    }
}
impl NSInflectionRule_NSInflectionAvailability for NSInflectionRule {}
pub trait NSInflectionRule_NSInflectionAvailability: Sized + std::ops::Deref {
    unsafe fn canInflectLanguage_(language: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInflectionRule), canInflectLanguage: language)
    }
    unsafe fn canInflectPreferredLocalization() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInflectionRule), canInflectPreferredLocalization)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocation), alloc) })
    }
}
impl INSObject for NSInvocation {}
impl PNSObject for NSInvocation {}
impl From<NSInvocation> for NSObject {
    fn from(child: NSInvocation) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInvocation {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInvocation, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSInvocation)) };
        if is_kind_of {
            Ok(NSInvocation(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInvocation")
        }
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {
    unsafe fn retainArguments(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainArguments)
    }
    unsafe fn getReturnValue_(&self, retLoc: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getReturnValue: retLoc)
    }
    unsafe fn setReturnValue_(&self, retLoc: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReturnValue: retLoc)
    }
    unsafe fn getArgument_atIndex_(
        &self,
        argumentLocation: *mut ::std::os::raw::c_void,
        idx: NSInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getArgument : argumentLocation atIndex : idx)
    }
    unsafe fn setArgument_atIndex_(
        &self,
        argumentLocation: *mut ::std::os::raw::c_void,
        idx: NSInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setArgument : argumentLocation atIndex : idx)
    }
    unsafe fn invoke(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invoke)
    }
    unsafe fn invokeWithTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invokeWithTarget: target)
    }
    unsafe fn invokeUsingIMP_(&self, imp: IMP)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invokeUsingIMP: imp)
    }
    unsafe fn methodSignature(&self) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignature)
    }
    unsafe fn argumentsRetained(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, argumentsRetained)
    }
    unsafe fn target(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, target)
    }
    unsafe fn setTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTarget: target)
    }
    unsafe fn selector(&self) -> objc::runtime::Sel
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, selector)
    }
    unsafe fn setSelector_(&self, selector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSelector: selector)
    }
    unsafe fn invocationWithMethodSignature_(sig: NSMethodSignature) -> NSInvocation
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInvocation), invocationWithMethodSignature: sig)
    }
}
pub const NSJSONReadingOptions_NSJSONReadingMutableContainers: NSJSONReadingOptions = 1;
pub const NSJSONReadingOptions_NSJSONReadingMutableLeaves: NSJSONReadingOptions = 2;
pub const NSJSONReadingOptions_NSJSONReadingFragmentsAllowed: NSJSONReadingOptions = 4;
pub const NSJSONReadingOptions_NSJSONReadingJSON5Allowed: NSJSONReadingOptions = 8;
pub const NSJSONReadingOptions_NSJSONReadingTopLevelDictionaryAssumed: NSJSONReadingOptions = 16;
pub const NSJSONReadingOptions_NSJSONReadingAllowFragments: NSJSONReadingOptions = 4;
pub type NSJSONReadingOptions = NSUInteger;
pub const NSJSONWritingOptions_NSJSONWritingPrettyPrinted: NSJSONWritingOptions = 1;
pub const NSJSONWritingOptions_NSJSONWritingSortedKeys: NSJSONWritingOptions = 2;
pub const NSJSONWritingOptions_NSJSONWritingFragmentsAllowed: NSJSONWritingOptions = 4;
pub const NSJSONWritingOptions_NSJSONWritingWithoutEscapingSlashes: NSJSONWritingOptions = 8;
pub type NSJSONWritingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSJSONSerialization(pub id);
impl std::ops::Deref for NSJSONSerialization {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSJSONSerialization {}
impl NSJSONSerialization {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSJSONSerialization), alloc) })
    }
}
impl INSObject for NSJSONSerialization {}
impl PNSObject for NSJSONSerialization {}
impl From<NSJSONSerialization> for NSObject {
    fn from(child: NSJSONSerialization) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSJSONSerialization {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSJSONSerialization, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSJSONSerialization)) };
        if is_kind_of {
            Ok(NSJSONSerialization(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSJSONSerialization")
        }
    }
}
impl INSJSONSerialization for NSJSONSerialization {}
pub trait INSJSONSerialization: Sized + std::ops::Deref {
    unsafe fn isValidJSONObject_(obj: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSJSONSerialization), isValidJSONObject: obj)
    }
    unsafe fn dataWithJSONObject_options_error_(
        obj: id,
        opt: NSJSONWritingOptions,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSJSONSerialization) , dataWithJSONObject : obj options : opt error : error)
    }
    unsafe fn JSONObjectWithData_options_error_(
        data: NSData,
        opt: NSJSONReadingOptions,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSJSONSerialization) , JSONObjectWithData : data options : opt error : error)
    }
    unsafe fn writeJSONObject_toStream_options_error_(
        obj: id,
        stream: NSOutputStream,
        opt: NSJSONWritingOptions,
        error: *mut NSError,
    ) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSJSONSerialization) , writeJSONObject : obj toStream : stream options : opt error : error)
    }
    unsafe fn JSONObjectWithStream_options_error_(
        stream: NSInputStream,
        opt: NSJSONReadingOptions,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSJSONSerialization) , JSONObjectWithStream : stream options : opt error : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrderedSet(pub id);
impl std::ops::Deref for NSOrderedSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedSet {}
impl NSOrderedSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrderedSet), alloc) })
    }
}
impl PNSCopying for NSOrderedSet {}
impl PNSMutableCopying for NSOrderedSet {}
impl PNSSecureCoding for NSOrderedSet {}
impl PNSFastEnumeration for NSOrderedSet {}
impl INSObject for NSOrderedSet {}
impl PNSObject for NSOrderedSet {}
impl From<NSOrderedSet> for NSObject {
    fn from(child: NSOrderedSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedSet)) };
        if is_kind_of {
            Ok(NSOrderedSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedSet")
        }
    }
}
impl<ObjectType: 'static> INSOrderedSet<ObjectType> for NSOrderedSet {}
pub trait INSOrderedSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectAtIndex_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndex: idx)
    }
    unsafe fn indexOfObject_(&self, object: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObject: object)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(
        &self,
        objects: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSExtendedOrderedSet<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSExtendedOrderedSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn getObjects_range_(&self, objects: *mut id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjects : objects range : range)
    }
    unsafe fn objectsAtIndexes_(&self, indexes: NSIndexSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsAtIndexes: indexes)
    }
    unsafe fn isEqualToOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToOrderedSet: other)
    }
    unsafe fn containsObject_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsObject: object)
    }
    unsafe fn intersectsOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsOrderedSet: other)
    }
    unsafe fn intersectsSet_(&self, set: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsSet: set)
    }
    unsafe fn isSubsetOfOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfOrderedSet: other)
    }
    unsafe fn isSubsetOfSet_(&self, set: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfSet: set)
    }
    unsafe fn objectAtIndexedSubscript_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndexedSubscript: idx)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn reverseObjectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reverseObjectEnumerator)
    }
    unsafe fn enumerateObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateObjectsUsingBlock: block)
    }
    unsafe fn enumerateObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateObjectsAtIndexes_options_usingBlock_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsAtIndexes : s options : opts usingBlock : block)
    }
    unsafe fn indexOfObjectPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObjectPassingTest: predicate)
    }
    unsafe fn indexOfObjectWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexOfObjectAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsPassingTest_(
        &self,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexesOfObjectsPassingTest: predicate)
    }
    unsafe fn indexesOfObjectsWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn indexOfObject_inSortedRange_options_usingComparator_(
        &self,
        object: id,
        range: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObject : object inSortedRange : range options : opts usingComparator : cmp)
    }
    unsafe fn sortedArrayUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingComparator: cmptr)
    }
    unsafe fn sortedArrayWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortedArrayWithOptions : opts usingComparator : cmptr)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithLocale : locale indent : level)
    }
    unsafe fn firstObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstObject)
    }
    unsafe fn lastObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastObject)
    }
    unsafe fn reversedOrderedSet(&self) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reversedOrderedSet)
    }
    unsafe fn array(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, array)
    }
    unsafe fn set(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, set)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSOrderedSetCreation<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSOrderedSetCreation<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithObject_(&self, object: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObject: object)
    }
    unsafe fn initWithObjects_(&self, firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObjects: firstObj)
    }
    unsafe fn initWithOrderedSet_(&self, set: NSOrderedSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithOrderedSet: set)
    }
    unsafe fn initWithOrderedSet_copyItems_(&self, set: NSOrderedSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithOrderedSet : set copyItems : flag)
    }
    unsafe fn initWithOrderedSet_range_copyItems_(
        &self,
        set: NSOrderedSet,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithOrderedSet : set range : range copyItems : flag)
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithArray: array)
    }
    unsafe fn initWithArray_copyItems_(&self, set: NSArray, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithArray : set copyItems : flag)
    }
    unsafe fn initWithArray_range_copyItems_(
        &self,
        set: NSArray,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithArray : set range : range copyItems : flag)
    }
    unsafe fn initWithSet_(&self, set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSet: set)
    }
    unsafe fn initWithSet_copyItems_(&self, set: NSSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSet : set copyItems : flag)
    }
    unsafe fn orderedSet() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSet)
    }
    unsafe fn orderedSetWithObject_(object: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithObject: object)
    }
    unsafe fn orderedSetWithObjects_count_(
        objects: *const *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithObjects : objects count : cnt)
    }
    unsafe fn orderedSetWithObjects_(firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithObjects: firstObj)
    }
    unsafe fn orderedSetWithOrderedSet_(set: NSOrderedSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithOrderedSet: set)
    }
    unsafe fn orderedSetWithOrderedSet_range_copyItems_(
        set: NSOrderedSet,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithOrderedSet : set range : range copyItems : flag)
    }
    unsafe fn orderedSetWithArray_(array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithArray: array)
    }
    unsafe fn orderedSetWithArray_range_copyItems_(
        array: NSArray,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithArray : array range : range copyItems : flag)
    }
    unsafe fn orderedSetWithSet_(set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithSet: set)
    }
    unsafe fn orderedSetWithSet_copyItems_(set: NSSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithSet : set copyItems : flag)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSOrderedSetDiffing<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSOrderedSetDiffing<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn differenceFromOrderedSet_withOptions_usingEquivalenceTest_(
        &self,
        other: NSOrderedSet,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromOrderedSet : other withOptions : options usingEquivalenceTest : block)
    }
    unsafe fn differenceFromOrderedSet_withOptions_(
        &self,
        other: NSOrderedSet,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromOrderedSet : other withOptions : options)
    }
    unsafe fn differenceFromOrderedSet_(&self, other: NSOrderedSet) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, differenceFromOrderedSet: other)
    }
    unsafe fn orderedSetByApplyingDifference_(
        &self,
        difference: NSOrderedCollectionDifference,
    ) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, orderedSetByApplyingDifference: difference)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableOrderedSet(pub id);
impl std::ops::Deref for NSMutableOrderedSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableOrderedSet {}
impl NSMutableOrderedSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableOrderedSet), alloc) })
    }
}
impl<ObjectType: 'static> INSOrderedSet<ObjectType> for NSMutableOrderedSet {}
impl PNSCopying for NSMutableOrderedSet {}
impl PNSMutableCopying for NSMutableOrderedSet {}
impl PNSSecureCoding for NSMutableOrderedSet {}
impl PNSFastEnumeration for NSMutableOrderedSet {}
impl INSObject for NSMutableOrderedSet {}
impl PNSObject for NSMutableOrderedSet {}
impl From<NSMutableOrderedSet> for NSObject {
    fn from(child: NSMutableOrderedSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableOrderedSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableOrderedSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableOrderedSet)) };
        if is_kind_of {
            Ok(NSMutableOrderedSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableOrderedSet")
        }
    }
}
impl<ObjectType: 'static> INSMutableOrderedSet<ObjectType> for NSMutableOrderedSet {}
pub trait INSMutableOrderedSet<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn insertObject_atIndex_(&self, object: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObject : object atIndex : idx)
    }
    unsafe fn removeObjectAtIndex_(&self, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectAtIndex: idx)
    }
    unsafe fn replaceObjectAtIndex_withObject_(&self, idx: NSUInteger, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectAtIndex : idx withObject : object)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
}
impl<ObjectType: 'static> NSMutableOrderedSet_NSExtendedMutableOrderedSet<ObjectType>
    for NSMutableOrderedSet
{
}
pub trait NSMutableOrderedSet_NSExtendedMutableOrderedSet<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: object)
    }
    unsafe fn addObjects_count_(&self, objects: *const *mut u64, count: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObjects : objects count : count)
    }
    unsafe fn addObjectsFromArray_(&self, array: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObjectsFromArray: array)
    }
    unsafe fn exchangeObjectAtIndex_withObjectAtIndex_(&self, idx1: NSUInteger, idx2: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , exchangeObjectAtIndex : idx1 withObjectAtIndex : idx2)
    }
    unsafe fn moveObjectsAtIndexes_toIndex_(&self, indexes: NSIndexSet, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , moveObjectsAtIndexes : indexes toIndex : idx)
    }
    unsafe fn insertObjects_atIndexes_(&self, objects: NSArray, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObjects : objects atIndexes : indexes)
    }
    unsafe fn setObject_atIndex_(&self, obj: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj atIndex : idx)
    }
    unsafe fn setObject_atIndexedSubscript_(&self, obj: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj atIndexedSubscript : idx)
    }
    unsafe fn replaceObjectsInRange_withObjects_count_(
        &self,
        range: NSRange,
        objects: *const *mut u64,
        count: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectsInRange : range withObjects : objects count : count)
    }
    unsafe fn replaceObjectsAtIndexes_withObjects_(&self, indexes: NSIndexSet, objects: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectsAtIndexes : indexes withObjects : objects)
    }
    unsafe fn removeObjectsInRange_(&self, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsInRange: range)
    }
    unsafe fn removeObjectsAtIndexes_(&self, indexes: NSIndexSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsAtIndexes: indexes)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn removeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: object)
    }
    unsafe fn removeObjectsInArray_(&self, array: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectsInArray: array)
    }
    unsafe fn intersectOrderedSet_(&self, other: NSOrderedSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectOrderedSet: other)
    }
    unsafe fn minusOrderedSet_(&self, other: NSOrderedSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minusOrderedSet: other)
    }
    unsafe fn unionOrderedSet_(&self, other: NSOrderedSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unionOrderedSet: other)
    }
    unsafe fn intersectSet_(&self, other: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectSet: other)
    }
    unsafe fn minusSet_(&self, other: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minusSet: other)
    }
    unsafe fn unionSet_(&self, other: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unionSet: other)
    }
    unsafe fn sortUsingComparator_(&self, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortUsingComparator: cmptr)
    }
    unsafe fn sortWithOptions_usingComparator_(&self, opts: NSSortOptions, cmptr: NSComparator)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortWithOptions : opts usingComparator : cmptr)
    }
    unsafe fn sortRange_options_usingComparator_(
        &self,
        range: NSRange,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortRange : range options : opts usingComparator : cmptr)
    }
}
impl<ObjectType: 'static> NSMutableOrderedSet_NSMutableOrderedSetCreation<ObjectType>
    for NSMutableOrderedSet
{
}
pub trait NSMutableOrderedSet_NSMutableOrderedSetCreation<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn orderedSetWithCapacity_(numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMutableOrderedSet),
            orderedSetWithCapacity: numItems
        )
    }
}
impl<ObjectType: 'static> NSMutableOrderedSet_NSMutableOrderedSetDiffing<ObjectType>
    for NSMutableOrderedSet
{
}
pub trait NSMutableOrderedSet_NSMutableOrderedSetDiffing<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn applyDifference_(&self, difference: NSOrderedCollectionDifference)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, applyDifference: difference)
    }
}
extern "C" {
    pub static NSUndefinedKeyException: NSExceptionName;
}
pub type NSKeyValueOperator = NSString;
extern "C" {
    pub static NSAverageKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSCountKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSDistinctUnionOfArraysKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSDistinctUnionOfObjectsKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSDistinctUnionOfSetsKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSMaximumKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSMinimumKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSSumKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSUnionOfArraysKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSUnionOfObjectsKeyValueOperator: NSKeyValueOperator;
}
extern "C" {
    pub static NSUnionOfSetsKeyValueOperator: NSKeyValueOperator;
}
impl NSObject_NSKeyValueCoding for NSObject {}
pub trait NSObject_NSKeyValueCoding: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
    unsafe fn validateValue_forKey_error_(
        &self,
        ioValue: *mut id,
        inKey: NSString,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , validateValue : ioValue forKey : inKey error : outError)
    }
    unsafe fn mutableArrayValueForKey_(&self, key: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableArrayValueForKey: key)
    }
    unsafe fn mutableOrderedSetValueForKey_(&self, key: NSString) -> NSMutableOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableOrderedSetValueForKey: key)
    }
    unsafe fn mutableSetValueForKey_(&self, key: NSString) -> NSMutableSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableSetValueForKey: key)
    }
    unsafe fn valueForKeyPath_(&self, keyPath: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKeyPath: keyPath)
    }
    unsafe fn setValue_forKeyPath_(&self, value: id, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKeyPath : keyPath)
    }
    unsafe fn validateValue_forKeyPath_error_(
        &self,
        ioValue: *mut id,
        inKeyPath: NSString,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , validateValue : ioValue forKeyPath : inKeyPath error : outError)
    }
    unsafe fn mutableArrayValueForKeyPath_(&self, keyPath: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableArrayValueForKeyPath: keyPath)
    }
    unsafe fn mutableOrderedSetValueForKeyPath_(&self, keyPath: NSString) -> NSMutableOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableOrderedSetValueForKeyPath: keyPath)
    }
    unsafe fn mutableSetValueForKeyPath_(&self, keyPath: NSString) -> NSMutableSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableSetValueForKeyPath: keyPath)
    }
    unsafe fn valueForUndefinedKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForUndefinedKey: key)
    }
    unsafe fn setValue_forUndefinedKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forUndefinedKey : key)
    }
    unsafe fn setNilValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNilValueForKey: key)
    }
    unsafe fn dictionaryWithValuesForKeys_(&self, keys: NSArray) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryWithValuesForKeys: keys)
    }
    unsafe fn setValuesForKeysWithDictionary_(&self, keyedValues: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setValuesForKeysWithDictionary: keyedValues)
    }
    unsafe fn accessInstanceVariablesDirectly() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), accessInstanceVariablesDirectly)
    }
}
impl<ObjectType: 'static> NSArray_NSKeyValueCoding<ObjectType> for NSArray {}
pub trait NSArray_NSKeyValueCoding<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
}
impl<KeyType: 'static, ObjectType: 'static> NSDictionary_NSKeyValueCoding<KeyType, ObjectType>
    for NSDictionary
{
}
pub trait NSDictionary_NSKeyValueCoding<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
}
impl<KeyType: 'static, ObjectType: 'static>
    NSMutableDictionary_NSKeyValueCoding<KeyType, ObjectType> for NSMutableDictionary
{
}
pub trait NSMutableDictionary_NSKeyValueCoding<KeyType: 'static, ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueCoding<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueCoding<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
}
impl<ObjectType: 'static> NSSet_NSKeyValueCoding<ObjectType> for NSSet {}
pub trait NSSet_NSKeyValueCoding<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
}
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionNew: NSKeyValueObservingOptions = 1;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionOld: NSKeyValueObservingOptions = 2;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionInitial: NSKeyValueObservingOptions =
    4;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionPrior: NSKeyValueObservingOptions = 8;
pub type NSKeyValueObservingOptions = NSUInteger;
pub const NSKeyValueChange_NSKeyValueChangeSetting: NSKeyValueChange = 1;
pub const NSKeyValueChange_NSKeyValueChangeInsertion: NSKeyValueChange = 2;
pub const NSKeyValueChange_NSKeyValueChangeRemoval: NSKeyValueChange = 3;
pub const NSKeyValueChange_NSKeyValueChangeReplacement: NSKeyValueChange = 4;
pub type NSKeyValueChange = NSUInteger;
pub const NSKeyValueSetMutationKind_NSKeyValueUnionSetMutation: NSKeyValueSetMutationKind = 1;
pub const NSKeyValueSetMutationKind_NSKeyValueMinusSetMutation: NSKeyValueSetMutationKind = 2;
pub const NSKeyValueSetMutationKind_NSKeyValueIntersectSetMutation: NSKeyValueSetMutationKind = 3;
pub const NSKeyValueSetMutationKind_NSKeyValueSetSetMutation: NSKeyValueSetMutationKind = 4;
pub type NSKeyValueSetMutationKind = NSUInteger;
pub type NSKeyValueChangeKey = NSString;
extern "C" {
    pub static NSKeyValueChangeKindKey: NSKeyValueChangeKey;
}
extern "C" {
    pub static NSKeyValueChangeNewKey: NSKeyValueChangeKey;
}
extern "C" {
    pub static NSKeyValueChangeOldKey: NSKeyValueChangeKey;
}
extern "C" {
    pub static NSKeyValueChangeIndexesKey: NSKeyValueChangeKey;
}
extern "C" {
    pub static NSKeyValueChangeNotificationIsPriorKey: NSKeyValueChangeKey;
}
impl NSObject_NSKeyValueObserving for NSObject {}
pub trait NSObject_NSKeyValueObserving: Sized + std::ops::Deref {
    unsafe fn observeValueForKeyPath_ofObject_change_context_(
        &self,
        keyPath: NSString,
        object: id,
        change: NSDictionary,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , observeValueForKeyPath : keyPath ofObject : object change : change context : context)
    }
}
impl NSObject_NSKeyValueObserverRegistration for NSObject {}
pub trait NSObject_NSKeyValueObserverRegistration: Sized + std::ops::Deref {
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl<ObjectType: 'static> NSArray_NSKeyValueObserverRegistration<ObjectType> for NSArray {}
pub trait NSArray_NSKeyValueObserverRegistration<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObserver_toObjectsAtIndexes_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        indexes: NSIndexSet,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_fromObjectsAtIndexes_forKeyPath_context_(
        &self,
        observer: NSObject,
        indexes: NSIndexSet,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_fromObjectsAtIndexes_forKeyPath_(
        &self,
        observer: NSObject,
        indexes: NSIndexSet,
        keyPath: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath)
    }
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueObserverRegistration<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueObserverRegistration<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl<ObjectType: 'static> NSSet_NSKeyValueObserverRegistration<ObjectType> for NSSet {}
pub trait NSSet_NSKeyValueObserverRegistration<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl NSObject_NSKeyValueObserverNotification for NSObject {}
pub trait NSObject_NSKeyValueObserverNotification: Sized + std::ops::Deref {
    unsafe fn willChangeValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, willChangeValueForKey: key)
    }
    unsafe fn didChangeValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, didChangeValueForKey: key)
    }
    unsafe fn willChange_valuesAtIndexes_forKey_(
        &self,
        changeKind: NSKeyValueChange,
        indexes: NSIndexSet,
        key: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , willChange : changeKind valuesAtIndexes : indexes forKey : key)
    }
    unsafe fn didChange_valuesAtIndexes_forKey_(
        &self,
        changeKind: NSKeyValueChange,
        indexes: NSIndexSet,
        key: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , didChange : changeKind valuesAtIndexes : indexes forKey : key)
    }
    unsafe fn willChangeValueForKey_withSetMutation_usingObjects_(
        &self,
        key: NSString,
        mutationKind: NSKeyValueSetMutationKind,
        objects: NSSet,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , willChangeValueForKey : key withSetMutation : mutationKind usingObjects : objects)
    }
    unsafe fn didChangeValueForKey_withSetMutation_usingObjects_(
        &self,
        key: NSString,
        mutationKind: NSKeyValueSetMutationKind,
        objects: NSSet,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , didChangeValueForKey : key withSetMutation : mutationKind usingObjects : objects)
    }
}
impl NSObject_NSKeyValueObservingCustomization for NSObject {}
pub trait NSObject_NSKeyValueObservingCustomization: Sized + std::ops::Deref {
    unsafe fn observationInfo(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, observationInfo)
    }
    unsafe fn setObservationInfo_(&self, observationInfo: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setObservationInfo: observationInfo)
    }
    unsafe fn keyPathsForValuesAffectingValueForKey_(key: NSString) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), keyPathsForValuesAffectingValueForKey: key)
    }
    unsafe fn automaticallyNotifiesObserversForKey_(key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), automaticallyNotifiesObserversForKey: key)
    }
}
pub const NSPropertyListMutabilityOptions_NSPropertyListImmutable: NSPropertyListMutabilityOptions =
    0;
pub const NSPropertyListMutabilityOptions_NSPropertyListMutableContainers:
    NSPropertyListMutabilityOptions = 1;
pub const NSPropertyListMutabilityOptions_NSPropertyListMutableContainersAndLeaves:
    NSPropertyListMutabilityOptions = 2;
pub type NSPropertyListMutabilityOptions = NSUInteger;
pub const NSPropertyListFormat_NSPropertyListOpenStepFormat: NSPropertyListFormat = 1;
pub const NSPropertyListFormat_NSPropertyListXMLFormat_v1_0: NSPropertyListFormat = 100;
pub const NSPropertyListFormat_NSPropertyListBinaryFormat_v1_0: NSPropertyListFormat = 200;
pub type NSPropertyListFormat = NSUInteger;
pub use self::NSPropertyListMutabilityOptions as NSPropertyListReadOptions;
pub type NSPropertyListWriteOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPropertyListSerialization(pub id);
impl std::ops::Deref for NSPropertyListSerialization {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPropertyListSerialization {}
impl NSPropertyListSerialization {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPropertyListSerialization), alloc) })
    }
}
impl INSObject for NSPropertyListSerialization {}
impl PNSObject for NSPropertyListSerialization {}
impl From<NSPropertyListSerialization> for NSObject {
    fn from(child: NSPropertyListSerialization) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPropertyListSerialization {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPropertyListSerialization, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSPropertyListSerialization)) };
        if is_kind_of {
            Ok(NSPropertyListSerialization(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPropertyListSerialization")
        }
    }
}
impl INSPropertyListSerialization for NSPropertyListSerialization {}
pub trait INSPropertyListSerialization: Sized + std::ops::Deref {
    unsafe fn propertyList_isValidForFormat_(plist: id, format: NSPropertyListFormat) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , propertyList : plist isValidForFormat : format)
    }
    unsafe fn dataWithPropertyList_format_options_error_(
        plist: id,
        format: NSPropertyListFormat,
        opt: NSPropertyListWriteOptions,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , dataWithPropertyList : plist format : format options : opt error : error)
    }
    unsafe fn writePropertyList_toStream_format_options_error_(
        plist: id,
        stream: NSOutputStream,
        format: NSPropertyListFormat,
        opt: NSPropertyListWriteOptions,
        error: *mut NSError,
    ) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , writePropertyList : plist toStream : stream format : format options : opt error : error)
    }
    unsafe fn propertyListWithData_options_format_error_(
        data: NSData,
        opt: NSPropertyListReadOptions,
        format: *mut NSPropertyListFormat,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , propertyListWithData : data options : opt format : format error : error)
    }
    unsafe fn propertyListWithStream_options_format_error_(
        stream: NSInputStream,
        opt: NSPropertyListReadOptions,
        format: *mut NSPropertyListFormat,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , propertyListWithStream : stream options : opt format : format error : error)
    }
    unsafe fn dataFromPropertyList_format_errorDescription_(
        plist: id,
        format: NSPropertyListFormat,
        errorString: *mut NSString,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , dataFromPropertyList : plist format : format errorDescription : errorString)
    }
    unsafe fn propertyListFromData_mutabilityOption_format_errorDescription_(
        data: NSData,
        opt: NSPropertyListMutabilityOptions,
        format: *mut NSPropertyListFormat,
        errorString: *mut NSString,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPropertyListSerialization) , propertyListFromData : data mutabilityOption : opt format : format errorDescription : errorString)
    }
}
extern "C" {
    pub static NSInvalidArchiveOperationException: NSExceptionName;
}
extern "C" {
    pub static NSInvalidUnarchiveOperationException: NSExceptionName;
}
extern "C" {
    pub static NSKeyedArchiveRootObjectKey: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSKeyedArchiver(pub id);
impl std::ops::Deref for NSKeyedArchiver {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSKeyedArchiver {}
impl NSKeyedArchiver {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSKeyedArchiver), alloc) })
    }
}
impl INSCoder for NSKeyedArchiver {}
impl From<NSKeyedArchiver> for NSCoder {
    fn from(child: NSKeyedArchiver) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSKeyedArchiver {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSKeyedArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedArchiver)) };
        if is_kind_of {
            Ok(NSKeyedArchiver(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSKeyedArchiver")
        }
    }
}
impl INSObject for NSKeyedArchiver {}
impl PNSObject for NSKeyedArchiver {}
impl From<NSKeyedArchiver> for NSObject {
    fn from(child: NSKeyedArchiver) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSKeyedArchiver {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSKeyedArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedArchiver)) };
        if is_kind_of {
            Ok(NSKeyedArchiver(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSKeyedArchiver")
        }
    }
}
impl INSKeyedArchiver for NSKeyedArchiver {}
pub trait INSKeyedArchiver: Sized + std::ops::Deref {
    unsafe fn initRequiringSecureCoding_(&self, requiresSecureCoding: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initRequiringSecureCoding: requiresSecureCoding)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initForWritingWithMutableData_(&self, data: NSMutableData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initForWritingWithMutableData: data)
    }
    unsafe fn finishEncoding(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finishEncoding)
    }
    unsafe fn setClassName_forClass_(&self, codedName: NSString, cls: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setClassName : codedName forClass : cls)
    }
    unsafe fn classNameForClass_(&self, cls: Class) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classNameForClass: cls)
    }
    unsafe fn encodeObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeObject : object forKey : key)
    }
    unsafe fn encodeConditionalObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeConditionalObject : object forKey : key)
    }
    unsafe fn encodeBool_forKey_(&self, value: BOOL, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBool : value forKey : key)
    }
    unsafe fn encodeInt_forKey_(&self, value: ::std::os::raw::c_int, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt : value forKey : key)
    }
    unsafe fn encodeInt32_forKey_(&self, value: i32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt32 : value forKey : key)
    }
    unsafe fn encodeInt64_forKey_(&self, value: i64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt64 : value forKey : key)
    }
    unsafe fn encodeFloat_forKey_(&self, value: f32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeFloat : value forKey : key)
    }
    unsafe fn encodeDouble_forKey_(&self, value: f64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeDouble : value forKey : key)
    }
    unsafe fn encodeBytes_length_forKey_(&self, bytes: *const u8, length: NSUInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBytes : bytes length : length forKey : key)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn outputFormat(&self) -> NSPropertyListFormat
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, outputFormat)
    }
    unsafe fn setOutputFormat_(&self, outputFormat: NSPropertyListFormat)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setOutputFormat: outputFormat)
    }
    unsafe fn encodedData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodedData)
    }
    unsafe fn requiresSecureCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresSecureCoding)
    }
    unsafe fn setRequiresSecureCoding_(&self, requiresSecureCoding: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiresSecureCoding: requiresSecureCoding)
    }
    unsafe fn archivedDataWithRootObject_requiringSecureCoding_error_(
        object: id,
        requiresSecureCoding: BOOL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , archivedDataWithRootObject : object requiringSecureCoding : requiresSecureCoding error : error)
    }
    unsafe fn archivedDataWithRootObject_(rootObject: id) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSKeyedArchiver),
            archivedDataWithRootObject: rootObject
        )
    }
    unsafe fn archiveRootObject_toFile_(rootObject: id, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , archiveRootObject : rootObject toFile : path)
    }
    unsafe fn class_setClassName_forClass_(codedName: NSString, cls: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , setClassName : codedName forClass : cls)
    }
    unsafe fn class_classNameForClass_(cls: Class) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSKeyedArchiver), classNameForClass: cls)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSKeyedUnarchiver(pub id);
impl std::ops::Deref for NSKeyedUnarchiver {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSKeyedUnarchiver {}
impl NSKeyedUnarchiver {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSKeyedUnarchiver), alloc) })
    }
}
impl INSCoder for NSKeyedUnarchiver {}
impl From<NSKeyedUnarchiver> for NSCoder {
    fn from(child: NSKeyedUnarchiver) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSKeyedUnarchiver {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSKeyedUnarchiver, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedUnarchiver)) };
        if is_kind_of {
            Ok(NSKeyedUnarchiver(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSKeyedUnarchiver")
        }
    }
}
impl INSObject for NSKeyedUnarchiver {}
impl PNSObject for NSKeyedUnarchiver {}
impl From<NSKeyedUnarchiver> for NSObject {
    fn from(child: NSKeyedUnarchiver) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSKeyedUnarchiver {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSKeyedUnarchiver, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedUnarchiver)) };
        if is_kind_of {
            Ok(NSKeyedUnarchiver(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSKeyedUnarchiver")
        }
    }
}
impl INSKeyedUnarchiver for NSKeyedUnarchiver {}
pub trait INSKeyedUnarchiver: Sized + std::ops::Deref {
    unsafe fn initForReadingFromData_error_(
        &self,
        data: NSData,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initForReadingFromData : data error : error)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initForReadingWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initForReadingWithData: data)
    }
    unsafe fn finishDecoding(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finishDecoding)
    }
    unsafe fn setClass_forClassName_(&self, cls: Class, codedName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setClass : cls forClassName : codedName)
    }
    unsafe fn classForClassName_(&self, codedName: NSString) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForClassName: codedName)
    }
    unsafe fn containsValueForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsValueForKey: key)
    }
    unsafe fn decodeObjectForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeObjectForKey: key)
    }
    unsafe fn decodeBoolForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeBoolForKey: key)
    }
    unsafe fn decodeIntForKey_(&self, key: NSString) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeIntForKey: key)
    }
    unsafe fn decodeInt32ForKey_(&self, key: NSString) -> i32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeInt32ForKey: key)
    }
    unsafe fn decodeInt64ForKey_(&self, key: NSString) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeInt64ForKey: key)
    }
    unsafe fn decodeFloatForKey_(&self, key: NSString) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeFloatForKey: key)
    }
    unsafe fn decodeDoubleForKey_(&self, key: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeDoubleForKey: key)
    }
    unsafe fn decodeBytesForKey_returnedLength_(
        &self,
        key: NSString,
        lengthp: *mut NSUInteger,
    ) -> *const u8
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeBytesForKey : key returnedLength : lengthp)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn requiresSecureCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresSecureCoding)
    }
    unsafe fn setRequiresSecureCoding_(&self, requiresSecureCoding: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiresSecureCoding: requiresSecureCoding)
    }
    unsafe fn decodingFailurePolicy(&self) -> NSDecodingFailurePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodingFailurePolicy)
    }
    unsafe fn setDecodingFailurePolicy_(&self, decodingFailurePolicy: NSDecodingFailurePolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDecodingFailurePolicy: decodingFailurePolicy)
    }
    unsafe fn unarchivedObjectOfClass_fromData_error_(
        cls: Class,
        data: NSData,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedObjectOfClass : cls fromData : data error : error)
    }
    unsafe fn unarchivedArrayOfObjectsOfClass_fromData_error_(
        cls: Class,
        data: NSData,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedArrayOfObjectsOfClass : cls fromData : data error : error)
    }
    unsafe fn unarchivedDictionaryWithKeysOfClass_objectsOfClass_fromData_error_(
        keyCls: Class,
        valueCls: Class,
        data: NSData,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedDictionaryWithKeysOfClass : keyCls objectsOfClass : valueCls fromData : data error : error)
    }
    unsafe fn unarchivedObjectOfClasses_fromData_error_(
        classes: NSSet,
        data: NSData,
        error: *mut NSError,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedObjectOfClasses : classes fromData : data error : error)
    }
    unsafe fn unarchivedArrayOfObjectsOfClasses_fromData_error_(
        classes: NSSet,
        data: NSData,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedArrayOfObjectsOfClasses : classes fromData : data error : error)
    }
    unsafe fn unarchivedDictionaryWithKeysOfClasses_objectsOfClasses_fromData_error_(
        keyClasses: NSSet,
        valueClasses: NSSet,
        data: NSData,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchivedDictionaryWithKeysOfClasses : keyClasses objectsOfClasses : valueClasses fromData : data error : error)
    }
    unsafe fn unarchiveObjectWithData_(data: NSData) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSKeyedUnarchiver), unarchiveObjectWithData: data)
    }
    unsafe fn unarchiveTopLevelObjectWithData_error_(data: NSData, error: *mut NSError) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , unarchiveTopLevelObjectWithData : data error : error)
    }
    unsafe fn unarchiveObjectWithFile_(path: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSKeyedUnarchiver), unarchiveObjectWithFile: path)
    }
    unsafe fn class_setClass_forClassName_(cls: Class, codedName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedUnarchiver) , setClass : cls forClassName : codedName)
    }
    unsafe fn class_classForClassName_(codedName: NSString) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSKeyedUnarchiver), classForClassName: codedName)
    }
}
pub trait PNSKeyedArchiverDelegate: Sized + std::ops::Deref {
    unsafe fn archiver_willEncodeObject_(&self, archiver: NSKeyedArchiver, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , archiver : archiver willEncodeObject : object)
    }
    unsafe fn archiver_didEncodeObject_(&self, archiver: NSKeyedArchiver, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , archiver : archiver didEncodeObject : object)
    }
    unsafe fn archiver_willReplaceObject_withObject_(
        &self,
        archiver: NSKeyedArchiver,
        object: id,
        newObject: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , archiver : archiver willReplaceObject : object withObject : newObject)
    }
    unsafe fn archiverWillFinish_(&self, archiver: NSKeyedArchiver)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, archiverWillFinish: archiver)
    }
    unsafe fn archiverDidFinish_(&self, archiver: NSKeyedArchiver)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, archiverDidFinish: archiver)
    }
}
pub trait PNSKeyedUnarchiverDelegate: Sized + std::ops::Deref {
    unsafe fn unarchiver_cannotDecodeObjectOfClassName_originalClasses_(
        &self,
        unarchiver: NSKeyedUnarchiver,
        name: NSString,
        classNames: NSArray,
    ) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unarchiver : unarchiver cannotDecodeObjectOfClassName : name originalClasses : classNames)
    }
    unsafe fn unarchiver_didDecodeObject_(&self, unarchiver: NSKeyedUnarchiver, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unarchiver : unarchiver didDecodeObject : object)
    }
    unsafe fn unarchiver_willReplaceObject_withObject_(
        &self,
        unarchiver: NSKeyedUnarchiver,
        object: id,
        newObject: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unarchiver : unarchiver willReplaceObject : object withObject : newObject)
    }
    unsafe fn unarchiverWillFinish_(&self, unarchiver: NSKeyedUnarchiver)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unarchiverWillFinish: unarchiver)
    }
    unsafe fn unarchiverDidFinish_(&self, unarchiver: NSKeyedUnarchiver)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unarchiverDidFinish: unarchiver)
    }
}
impl NSObject_NSKeyedArchiverObjectSubstitution for NSObject {}
pub trait NSObject_NSKeyedArchiverObjectSubstitution: Sized + std::ops::Deref {
    unsafe fn replacementObjectForKeyedArchiver_(&self, archiver: NSKeyedArchiver) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForKeyedArchiver: archiver)
    }
    unsafe fn classForKeyedArchiver(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForKeyedArchiver)
    }
    unsafe fn classFallbacksForKeyedArchiver() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), classFallbacksForKeyedArchiver)
    }
}
impl NSObject_NSKeyedUnarchiverObjectSubstitution for NSObject {}
pub trait NSObject_NSKeyedUnarchiverObjectSubstitution: Sized + std::ops::Deref {
    unsafe fn classForKeyedUnarchiver() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), classForKeyedUnarchiver)
    }
}
pub trait PNSLocking: Sized + std::ops::Deref {
    unsafe fn lock(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lock)
    }
    unsafe fn unlock(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unlock)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLock(pub id);
impl std::ops::Deref for NSLock {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLock {}
impl NSLock {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLock), alloc) })
    }
}
impl PNSLocking for NSLock {}
impl INSObject for NSLock {}
impl PNSObject for NSLock {}
impl From<NSLock> for NSObject {
    fn from(child: NSLock) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSLock {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSLock, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSLock)) };
        if is_kind_of {
            Ok(NSLock(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSLock")
        }
    }
}
impl INSLock for NSLock {}
pub trait INSLock: Sized + std::ops::Deref {
    unsafe fn tryLock(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tryLock)
    }
    unsafe fn lockBeforeDate_(&self, limit: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lockBeforeDate: limit)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSConditionLock(pub id);
impl std::ops::Deref for NSConditionLock {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSConditionLock {}
impl NSConditionLock {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSConditionLock), alloc) })
    }
}
impl PNSLocking for NSConditionLock {}
impl INSObject for NSConditionLock {}
impl PNSObject for NSConditionLock {}
impl From<NSConditionLock> for NSObject {
    fn from(child: NSConditionLock) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSConditionLock {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSConditionLock, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSConditionLock)) };
        if is_kind_of {
            Ok(NSConditionLock(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSConditionLock")
        }
    }
}
impl INSConditionLock for NSConditionLock {}
pub trait INSConditionLock: Sized + std::ops::Deref {
    unsafe fn initWithCondition_(&self, condition: NSInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCondition: condition)
    }
    unsafe fn lockWhenCondition_(&self, condition: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lockWhenCondition: condition)
    }
    unsafe fn tryLock(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tryLock)
    }
    unsafe fn tryLockWhenCondition_(&self, condition: NSInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tryLockWhenCondition: condition)
    }
    unsafe fn unlockWithCondition_(&self, condition: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unlockWithCondition: condition)
    }
    unsafe fn lockBeforeDate_(&self, limit: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lockBeforeDate: limit)
    }
    unsafe fn lockWhenCondition_beforeDate_(&self, condition: NSInteger, limit: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , lockWhenCondition : condition beforeDate : limit)
    }
    unsafe fn condition(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, condition)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSRecursiveLock(pub id);
impl std::ops::Deref for NSRecursiveLock {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRecursiveLock {}
impl NSRecursiveLock {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSRecursiveLock), alloc) })
    }
}
impl PNSLocking for NSRecursiveLock {}
impl INSObject for NSRecursiveLock {}
impl PNSObject for NSRecursiveLock {}
impl From<NSRecursiveLock> for NSObject {
    fn from(child: NSRecursiveLock) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRecursiveLock {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRecursiveLock, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSRecursiveLock)) };
        if is_kind_of {
            Ok(NSRecursiveLock(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRecursiveLock")
        }
    }
}
impl INSRecursiveLock for NSRecursiveLock {}
pub trait INSRecursiveLock: Sized + std::ops::Deref {
    unsafe fn tryLock(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tryLock)
    }
    unsafe fn lockBeforeDate_(&self, limit: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lockBeforeDate: limit)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCondition(pub id);
impl std::ops::Deref for NSCondition {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCondition {}
impl NSCondition {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCondition), alloc) })
    }
}
impl PNSLocking for NSCondition {}
impl INSObject for NSCondition {}
impl PNSObject for NSCondition {}
impl From<NSCondition> for NSObject {
    fn from(child: NSCondition) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCondition {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCondition, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCondition)) };
        if is_kind_of {
            Ok(NSCondition(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCondition")
        }
    }
}
impl INSCondition for NSCondition {}
pub trait INSCondition: Sized + std::ops::Deref {
    unsafe fn wait(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, wait)
    }
    unsafe fn waitUntilDate_(&self, limit: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitUntilDate: limit)
    }
    unsafe fn signal(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, signal)
    }
    unsafe fn broadcast(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, broadcast)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
extern "C" {
    pub static NSMapTableStrongMemory: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSMapTableZeroingWeakMemory: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSMapTableCopyIn: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSMapTableObjectPointerPersonality: NSPointerFunctionsOptions;
}
extern "C" {
    pub static NSMapTableWeakMemory: NSPointerFunctionsOptions;
}
pub type NSMapTableOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMapTable(pub id);
impl std::ops::Deref for NSMapTable {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMapTable {}
impl NSMapTable {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMapTable), alloc) })
    }
}
impl PNSCopying for NSMapTable {}
impl PNSSecureCoding for NSMapTable {}
impl PNSFastEnumeration for NSMapTable {}
impl INSObject for NSMapTable {}
impl PNSObject for NSMapTable {}
impl From<NSMapTable> for NSObject {
    fn from(child: NSMapTable) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMapTable {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMapTable, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMapTable)) };
        if is_kind_of {
            Ok(NSMapTable(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMapTable")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSMapTable<KeyType, ObjectType> for NSMapTable {}
pub trait INSMapTable<KeyType: 'static, ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn initWithKeyOptions_valueOptions_capacity_(
        &self,
        keyOptions: NSPointerFunctionsOptions,
        valueOptions: NSPointerFunctionsOptions,
        initialCapacity: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithKeyOptions : keyOptions valueOptions : valueOptions capacity : initialCapacity)
    }
    unsafe fn initWithKeyPointerFunctions_valuePointerFunctions_capacity_(
        &self,
        keyFunctions: NSPointerFunctions,
        valueFunctions: NSPointerFunctions,
        initialCapacity: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithKeyPointerFunctions : keyFunctions valuePointerFunctions : valueFunctions capacity : initialCapacity)
    }
    unsafe fn objectForKey_(&self, aKey: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: aKey)
    }
    unsafe fn removeObjectForKey_(&self, aKey: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: aKey)
    }
    unsafe fn setObject_forKey_(&self, anObject: id, aKey: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : anObject forKey : aKey)
    }
    unsafe fn keyEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyEnumerator)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn dictionaryRepresentation(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryRepresentation)
    }
    unsafe fn keyPointerFunctions(&self) -> NSPointerFunctions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyPointerFunctions)
    }
    unsafe fn valuePointerFunctions(&self) -> NSPointerFunctions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valuePointerFunctions)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn mapTableWithKeyOptions_valueOptions_(
        keyOptions: NSPointerFunctionsOptions,
        valueOptions: NSPointerFunctionsOptions,
    ) -> NSMapTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSMapTable) , mapTableWithKeyOptions : keyOptions valueOptions : valueOptions)
    }
    unsafe fn mapTableWithStrongToStrongObjects() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), mapTableWithStrongToStrongObjects)
    }
    unsafe fn mapTableWithWeakToStrongObjects() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), mapTableWithWeakToStrongObjects)
    }
    unsafe fn mapTableWithStrongToWeakObjects() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), mapTableWithStrongToWeakObjects)
    }
    unsafe fn mapTableWithWeakToWeakObjects() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), mapTableWithWeakToWeakObjects)
    }
    unsafe fn strongToStrongObjectsMapTable() -> NSMapTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), strongToStrongObjectsMapTable)
    }
    unsafe fn weakToStrongObjectsMapTable() -> NSMapTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), weakToStrongObjectsMapTable)
    }
    unsafe fn strongToWeakObjectsMapTable() -> NSMapTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), strongToWeakObjectsMapTable)
    }
    unsafe fn weakToWeakObjectsMapTable() -> NSMapTable
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMapTable), weakToWeakObjectsMapTable)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSMapEnumerator {
    pub _pi: NSUInteger,
    pub _si: NSUInteger,
    pub _bs: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn NSFreeMapTable(table: NSMapTable);
}
extern "C" {
    pub fn NSResetMapTable(table: NSMapTable);
}
extern "C" {
    pub fn NSCompareMapTables(table1: NSMapTable, table2: NSMapTable) -> BOOL;
}
extern "C" {
    pub fn NSCopyMapTableWithZone(table: NSMapTable, zone: *mut NSZone) -> NSMapTable;
}
extern "C" {
    pub fn NSMapMember(
        table: NSMapTable,
        key: *const ::std::os::raw::c_void,
        originalKey: *mut *mut ::std::os::raw::c_void,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> BOOL;
}
extern "C" {
    pub fn NSMapGet(
        table: NSMapTable,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSMapInsert(
        table: NSMapTable,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn NSMapInsertKnownAbsent(
        table: NSMapTable,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn NSMapInsertIfAbsent(
        table: NSMapTable,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSMapRemove(table: NSMapTable, key: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn NSEnumerateMapTable(table: NSMapTable) -> NSMapEnumerator;
}
extern "C" {
    pub fn NSNextMapEnumeratorPair(
        enumerator: *mut NSMapEnumerator,
        key: *mut *mut ::std::os::raw::c_void,
        value: *mut *mut ::std::os::raw::c_void,
    ) -> BOOL;
}
extern "C" {
    pub fn NSEndMapTableEnumeration(enumerator: *mut NSMapEnumerator);
}
extern "C" {
    pub fn NSCountMapTable(table: NSMapTable) -> NSUInteger;
}
extern "C" {
    pub fn NSStringFromMapTable(table: NSMapTable) -> NSString;
}
extern "C" {
    pub fn NSAllMapTableKeys(table: NSMapTable) -> NSArray;
}
extern "C" {
    pub fn NSAllMapTableValues(table: NSMapTable) -> NSArray;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSMapTableKeyCallBacks {
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *const ::std::os::raw::c_void) -> NSUInteger,
    >,
    pub isEqual: ::std::option::Option<
        unsafe extern "C" fn(
            table: NSMapTable,
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> BOOL,
    >,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *const ::std::os::raw::c_void),
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *mut ::std::os::raw::c_void),
    >,
    pub describe: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *const ::std::os::raw::c_void) -> NSString,
    >,
    pub notAKeyMarker: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSMapTableValueCallBacks {
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *const ::std::os::raw::c_void),
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *mut ::std::os::raw::c_void),
    >,
    pub describe: ::std::option::Option<
        unsafe extern "C" fn(table: NSMapTable, arg1: *const ::std::os::raw::c_void) -> NSString,
    >,
}
extern "C" {
    pub fn NSCreateMapTableWithZone(
        keyCallBacks: NSMapTableKeyCallBacks,
        valueCallBacks: NSMapTableValueCallBacks,
        capacity: NSUInteger,
        zone: *mut NSZone,
    ) -> NSMapTable;
}
extern "C" {
    pub fn NSCreateMapTable(
        keyCallBacks: NSMapTableKeyCallBacks,
        valueCallBacks: NSMapTableValueCallBacks,
        capacity: NSUInteger,
    ) -> NSMapTable;
}
extern "C" {
    pub static NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSIntMapKeyCallBacks: NSMapTableKeyCallBacks;
}
extern "C" {
    pub static NSIntegerMapValueCallBacks: NSMapTableValueCallBacks;
}
extern "C" {
    pub static NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
}
extern "C" {
    pub static NSObjectMapValueCallBacks: NSMapTableValueCallBacks;
}
extern "C" {
    pub static NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks;
}
extern "C" {
    pub static NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
}
extern "C" {
    pub static NSIntMapValueCallBacks: NSMapTableValueCallBacks;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMethodSignature), alloc) })
    }
}
impl INSObject for NSMethodSignature {}
impl PNSObject for NSMethodSignature {}
impl From<NSMethodSignature> for NSObject {
    fn from(child: NSMethodSignature) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMethodSignature {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMethodSignature, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMethodSignature)) };
        if is_kind_of {
            Ok(NSMethodSignature(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMethodSignature")
        }
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {
    unsafe fn getArgumentTypeAtIndex_(&self, idx: NSUInteger) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getArgumentTypeAtIndex: idx)
    }
    unsafe fn isOneway(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOneway)
    }
    unsafe fn numberOfArguments(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberOfArguments)
    }
    unsafe fn frameLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, frameLength)
    }
    unsafe fn methodReturnType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodReturnType)
    }
    unsafe fn methodReturnLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodReturnLength)
    }
    unsafe fn signatureWithObjCTypes_(types: *const ::std::os::raw::c_char) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMethodSignature), signatureWithObjCTypes: types)
    }
}
pub const NSGrammaticalGender_NSGrammaticalGenderNotSet: NSGrammaticalGender = 0;
pub const NSGrammaticalGender_NSGrammaticalGenderFeminine: NSGrammaticalGender = 1;
pub const NSGrammaticalGender_NSGrammaticalGenderMasculine: NSGrammaticalGender = 2;
pub const NSGrammaticalGender_NSGrammaticalGenderNeuter: NSGrammaticalGender = 3;
pub type NSGrammaticalGender = NSInteger;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechNotSet: NSGrammaticalPartOfSpeech = 0;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechDeterminer: NSGrammaticalPartOfSpeech =
    1;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechPronoun: NSGrammaticalPartOfSpeech = 2;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechLetter: NSGrammaticalPartOfSpeech = 3;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechAdverb: NSGrammaticalPartOfSpeech = 4;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechParticle: NSGrammaticalPartOfSpeech =
    5;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechAdjective: NSGrammaticalPartOfSpeech =
    6;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechAdposition: NSGrammaticalPartOfSpeech =
    7;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechVerb: NSGrammaticalPartOfSpeech = 8;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechNoun: NSGrammaticalPartOfSpeech = 9;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechConjunction:
    NSGrammaticalPartOfSpeech = 10;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechNumeral: NSGrammaticalPartOfSpeech =
    11;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechInterjection:
    NSGrammaticalPartOfSpeech = 12;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechPreposition:
    NSGrammaticalPartOfSpeech = 13;
pub const NSGrammaticalPartOfSpeech_NSGrammaticalPartOfSpeechAbbreviation:
    NSGrammaticalPartOfSpeech = 14;
pub type NSGrammaticalPartOfSpeech = NSInteger;
pub const NSGrammaticalNumber_NSGrammaticalNumberNotSet: NSGrammaticalNumber = 0;
pub const NSGrammaticalNumber_NSGrammaticalNumberSingular: NSGrammaticalNumber = 1;
pub const NSGrammaticalNumber_NSGrammaticalNumberZero: NSGrammaticalNumber = 2;
pub const NSGrammaticalNumber_NSGrammaticalNumberPlural: NSGrammaticalNumber = 3;
pub const NSGrammaticalNumber_NSGrammaticalNumberPluralTwo: NSGrammaticalNumber = 4;
pub const NSGrammaticalNumber_NSGrammaticalNumberPluralFew: NSGrammaticalNumber = 5;
pub const NSGrammaticalNumber_NSGrammaticalNumberPluralMany: NSGrammaticalNumber = 6;
pub type NSGrammaticalNumber = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMorphology(pub id);
impl std::ops::Deref for NSMorphology {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMorphology {}
impl NSMorphology {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMorphology), alloc) })
    }
}
impl PNSCopying for NSMorphology {}
impl PNSSecureCoding for NSMorphology {}
impl INSObject for NSMorphology {}
impl PNSObject for NSMorphology {}
impl From<NSMorphology> for NSObject {
    fn from(child: NSMorphology) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMorphology {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMorphology, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMorphology)) };
        if is_kind_of {
            Ok(NSMorphology(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMorphology")
        }
    }
}
impl INSMorphology for NSMorphology {}
pub trait INSMorphology: Sized + std::ops::Deref {
    unsafe fn grammaticalGender(&self) -> NSGrammaticalGender
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, grammaticalGender)
    }
    unsafe fn setGrammaticalGender_(&self, grammaticalGender: NSGrammaticalGender)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGrammaticalGender: grammaticalGender)
    }
    unsafe fn partOfSpeech(&self) -> NSGrammaticalPartOfSpeech
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, partOfSpeech)
    }
    unsafe fn setPartOfSpeech_(&self, partOfSpeech: NSGrammaticalPartOfSpeech)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPartOfSpeech: partOfSpeech)
    }
    unsafe fn number(&self) -> NSGrammaticalNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, number)
    }
    unsafe fn setNumber_(&self, number: NSGrammaticalNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumber: number)
    }
}
impl NSMorphology_NSCustomPronouns for NSMorphology {}
pub trait NSMorphology_NSCustomPronouns: Sized + std::ops::Deref {
    unsafe fn customPronounForLanguage_(&self, language: NSString) -> NSMorphologyCustomPronoun
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, customPronounForLanguage: language)
    }
    unsafe fn setCustomPronoun_forLanguage_error_(
        &self,
        features: NSMorphologyCustomPronoun,
        language: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setCustomPronoun : features forLanguage : language error : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMorphologyCustomPronoun(pub id);
impl std::ops::Deref for NSMorphologyCustomPronoun {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMorphologyCustomPronoun {}
impl NSMorphologyCustomPronoun {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMorphologyCustomPronoun), alloc) })
    }
}
impl PNSCopying for NSMorphologyCustomPronoun {}
impl PNSSecureCoding for NSMorphologyCustomPronoun {}
impl INSObject for NSMorphologyCustomPronoun {}
impl PNSObject for NSMorphologyCustomPronoun {}
impl From<NSMorphologyCustomPronoun> for NSObject {
    fn from(child: NSMorphologyCustomPronoun) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMorphologyCustomPronoun {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMorphologyCustomPronoun, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMorphologyCustomPronoun)) };
        if is_kind_of {
            Ok(NSMorphologyCustomPronoun(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMorphologyCustomPronoun")
        }
    }
}
impl INSMorphologyCustomPronoun for NSMorphologyCustomPronoun {}
pub trait INSMorphologyCustomPronoun: Sized + std::ops::Deref {
    unsafe fn subjectForm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subjectForm)
    }
    unsafe fn setSubjectForm_(&self, subjectForm: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSubjectForm: subjectForm)
    }
    unsafe fn objectForm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForm)
    }
    unsafe fn setObjectForm_(&self, objectForm: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setObjectForm: objectForm)
    }
    unsafe fn possessiveForm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, possessiveForm)
    }
    unsafe fn setPossessiveForm_(&self, possessiveForm: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPossessiveForm: possessiveForm)
    }
    unsafe fn possessiveAdjectiveForm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, possessiveAdjectiveForm)
    }
    unsafe fn setPossessiveAdjectiveForm_(&self, possessiveAdjectiveForm: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPossessiveAdjectiveForm: possessiveAdjectiveForm)
    }
    unsafe fn reflexiveForm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reflexiveForm)
    }
    unsafe fn setReflexiveForm_(&self, reflexiveForm: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReflexiveForm: reflexiveForm)
    }
    unsafe fn isSupportedForLanguage_(language: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMorphologyCustomPronoun),
            isSupportedForLanguage: language
        )
    }
    unsafe fn requiredKeysForLanguage_(language: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSMorphologyCustomPronoun),
            requiredKeysForLanguage: language
        )
    }
}
impl NSMorphology_NSMorphologyUserSettings for NSMorphology {}
pub trait NSMorphology_NSMorphologyUserSettings: Sized + std::ops::Deref {
    unsafe fn isUnspecified(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isUnspecified)
    }
    unsafe fn userMorphology() -> NSMorphology
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMorphology), userMorphology)
    }
}
pub const NSPostingStyle_NSPostWhenIdle: NSPostingStyle = 1;
pub const NSPostingStyle_NSPostASAP: NSPostingStyle = 2;
pub const NSPostingStyle_NSPostNow: NSPostingStyle = 3;
pub type NSPostingStyle = NSUInteger;
pub const NSNotificationCoalescing_NSNotificationNoCoalescing: NSNotificationCoalescing = 0;
pub const NSNotificationCoalescing_NSNotificationCoalescingOnName: NSNotificationCoalescing = 1;
pub const NSNotificationCoalescing_NSNotificationCoalescingOnSender: NSNotificationCoalescing = 2;
pub type NSNotificationCoalescing = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNotificationQueue(pub id);
impl std::ops::Deref for NSNotificationQueue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNotificationQueue {}
impl NSNotificationQueue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNotificationQueue), alloc) })
    }
}
impl INSObject for NSNotificationQueue {}
impl PNSObject for NSNotificationQueue {}
impl From<NSNotificationQueue> for NSObject {
    fn from(child: NSNotificationQueue) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNotificationQueue {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNotificationQueue, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSNotificationQueue)) };
        if is_kind_of {
            Ok(NSNotificationQueue(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNotificationQueue")
        }
    }
}
impl INSNotificationQueue for NSNotificationQueue {}
pub trait INSNotificationQueue: Sized + std::ops::Deref {
    unsafe fn initWithNotificationCenter_(
        &self,
        notificationCenter: NSNotificationCenter,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithNotificationCenter: notificationCenter)
    }
    unsafe fn enqueueNotification_postingStyle_(
        &self,
        notification: NSNotification,
        postingStyle: NSPostingStyle,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enqueueNotification : notification postingStyle : postingStyle)
    }
    unsafe fn enqueueNotification_postingStyle_coalesceMask_forModes_(
        &self,
        notification: NSNotification,
        postingStyle: NSPostingStyle,
        coalesceMask: NSNotificationCoalescing,
        modes: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enqueueNotification : notification postingStyle : postingStyle coalesceMask : coalesceMask forModes : modes)
    }
    unsafe fn dequeueNotificationsMatching_coalesceMask_(
        &self,
        notification: NSNotification,
        coalesceMask: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dequeueNotificationsMatching : notification coalesceMask : coalesceMask)
    }
    unsafe fn defaultQueue() -> NSNotificationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNotificationQueue), defaultQueue)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNull(pub id);
impl std::ops::Deref for NSNull {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNull {}
impl NSNull {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNull), alloc) })
    }
}
impl PNSCopying for NSNull {}
impl PNSSecureCoding for NSNull {}
impl INSObject for NSNull {}
impl PNSObject for NSNull {}
impl From<NSNull> for NSObject {
    fn from(child: NSNull) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNull {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNull, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNull)) };
        if is_kind_of {
            Ok(NSNull(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNull")
        }
    }
}
impl INSNull for NSNull {}
pub trait INSNull: Sized + std::ops::Deref {
    unsafe fn null() -> NSNull
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNull), null)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOperation(pub id);
impl std::ops::Deref for NSOperation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOperation {}
impl NSOperation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOperation), alloc) })
    }
}
impl INSObject for NSOperation {}
impl PNSObject for NSOperation {}
impl From<NSOperation> for NSObject {
    fn from(child: NSOperation) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOperation {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOperation, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOperation)) };
        if is_kind_of {
            Ok(NSOperation(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOperation")
        }
    }
}
impl INSOperation for NSOperation {}
pub trait INSOperation: Sized + std::ops::Deref {
    unsafe fn start(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, start)
    }
    unsafe fn main(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, main)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn addDependency_(&self, op: NSOperation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addDependency: op)
    }
    unsafe fn removeDependency_(&self, op: NSOperation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeDependency: op)
    }
    unsafe fn waitUntilFinished(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitUntilFinished)
    }
    unsafe fn isCancelled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCancelled)
    }
    unsafe fn isExecuting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExecuting)
    }
    unsafe fn isFinished(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFinished)
    }
    unsafe fn isConcurrent(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isConcurrent)
    }
    unsafe fn isAsynchronous(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isAsynchronous)
    }
    unsafe fn isReady(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isReady)
    }
    unsafe fn dependencies(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dependencies)
    }
    unsafe fn queuePriority(&self) -> NSOperationQueuePriority
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, queuePriority)
    }
    unsafe fn setQueuePriority_(&self, queuePriority: NSOperationQueuePriority)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQueuePriority: queuePriority)
    }
    unsafe fn completionBlock(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, completionBlock)
    }
    unsafe fn setCompletionBlock_(&self, completionBlock: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCompletionBlock: completionBlock)
    }
    unsafe fn threadPriority(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, threadPriority)
    }
    unsafe fn setThreadPriority_(&self, threadPriority: f64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setThreadPriority: threadPriority)
    }
    unsafe fn qualityOfService(&self) -> NSQualityOfService
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, qualityOfService)
    }
    unsafe fn setQualityOfService_(&self, qualityOfService: NSQualityOfService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQualityOfService: qualityOfService)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
pub const NSOperationQueuePriority_NSOperationQueuePriorityVeryLow: NSOperationQueuePriority = -8;
pub const NSOperationQueuePriority_NSOperationQueuePriorityLow: NSOperationQueuePriority = -4;
pub const NSOperationQueuePriority_NSOperationQueuePriorityNormal: NSOperationQueuePriority = 0;
pub const NSOperationQueuePriority_NSOperationQueuePriorityHigh: NSOperationQueuePriority = 4;
pub const NSOperationQueuePriority_NSOperationQueuePriorityVeryHigh: NSOperationQueuePriority = 8;
pub type NSOperationQueuePriority = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSBlockOperation(pub id);
impl std::ops::Deref for NSBlockOperation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSBlockOperation {}
impl NSBlockOperation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSBlockOperation), alloc) })
    }
}
impl INSOperation for NSBlockOperation {}
impl From<NSBlockOperation> for NSOperation {
    fn from(child: NSBlockOperation) -> NSOperation {
        NSOperation(child.0)
    }
}
impl std::convert::TryFrom<NSOperation> for NSBlockOperation {
    type Error = &'static str;
    fn try_from(parent: NSOperation) -> Result<NSBlockOperation, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSBlockOperation)) };
        if is_kind_of {
            Ok(NSBlockOperation(parent.0))
        } else {
            Err("This NSOperation cannot be downcasted to NSBlockOperation")
        }
    }
}
impl INSObject for NSBlockOperation {}
impl PNSObject for NSBlockOperation {}
impl From<NSBlockOperation> for NSObject {
    fn from(child: NSBlockOperation) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSBlockOperation {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSBlockOperation, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSBlockOperation)) };
        if is_kind_of {
            Ok(NSBlockOperation(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSBlockOperation")
        }
    }
}
impl INSBlockOperation for NSBlockOperation {}
pub trait INSBlockOperation: Sized + std::ops::Deref {
    unsafe fn addExecutionBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addExecutionBlock: block)
    }
    unsafe fn executionBlocks(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, executionBlocks)
    }
    unsafe fn blockOperationWithBlock_(block: *mut ::std::os::raw::c_void) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSBlockOperation), blockOperationWithBlock: block)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocationOperation(pub id);
impl std::ops::Deref for NSInvocationOperation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocationOperation {}
impl NSInvocationOperation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocationOperation), alloc) })
    }
}
impl INSOperation for NSInvocationOperation {}
impl From<NSInvocationOperation> for NSOperation {
    fn from(child: NSInvocationOperation) -> NSOperation {
        NSOperation(child.0)
    }
}
impl std::convert::TryFrom<NSOperation> for NSInvocationOperation {
    type Error = &'static str;
    fn try_from(parent: NSOperation) -> Result<NSInvocationOperation, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSInvocationOperation)) };
        if is_kind_of {
            Ok(NSInvocationOperation(parent.0))
        } else {
            Err("This NSOperation cannot be downcasted to NSInvocationOperation")
        }
    }
}
impl INSObject for NSInvocationOperation {}
impl PNSObject for NSInvocationOperation {}
impl From<NSInvocationOperation> for NSObject {
    fn from(child: NSInvocationOperation) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInvocationOperation {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInvocationOperation, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSInvocationOperation)) };
        if is_kind_of {
            Ok(NSInvocationOperation(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInvocationOperation")
        }
    }
}
impl INSInvocationOperation for NSInvocationOperation {}
pub trait INSInvocationOperation: Sized + std::ops::Deref {
    unsafe fn initWithTarget_selector_object_(
        &self,
        target: id,
        sel: objc::runtime::Sel,
        arg: id,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTarget : target selector : sel object : arg)
    }
    unsafe fn initWithInvocation_(&self, inv: NSInvocation) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithInvocation: inv)
    }
    unsafe fn invocation(&self) -> NSInvocation
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invocation)
    }
    unsafe fn result(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, result)
    }
}
extern "C" {
    pub static NSInvocationOperationVoidResultException: NSExceptionName;
}
extern "C" {
    pub static NSInvocationOperationCancelledException: NSExceptionName;
}
pub const NSOperationQueueDefaultMaxConcurrentOperationCount: NSInteger = -1;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOperationQueue(pub id);
impl std::ops::Deref for NSOperationQueue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOperationQueue {}
impl NSOperationQueue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOperationQueue), alloc) })
    }
}
impl PNSProgressReporting for NSOperationQueue {}
impl INSObject for NSOperationQueue {}
impl PNSObject for NSOperationQueue {}
impl From<NSOperationQueue> for NSObject {
    fn from(child: NSOperationQueue) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOperationQueue {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOperationQueue, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSOperationQueue)) };
        if is_kind_of {
            Ok(NSOperationQueue(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOperationQueue")
        }
    }
}
impl INSOperationQueue for NSOperationQueue {}
pub trait INSOperationQueue: Sized + std::ops::Deref {
    unsafe fn addOperation_(&self, op: NSOperation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addOperation: op)
    }
    unsafe fn addOperations_waitUntilFinished_(&self, ops: NSArray, wait: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addOperations : ops waitUntilFinished : wait)
    }
    unsafe fn addOperationWithBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addOperationWithBlock: block)
    }
    unsafe fn addBarrierBlock_(&self, barrier: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addBarrierBlock: barrier)
    }
    unsafe fn cancelAllOperations(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelAllOperations)
    }
    unsafe fn waitUntilAllOperationsAreFinished(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitUntilAllOperationsAreFinished)
    }
    unsafe fn progress(&self) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, progress)
    }
    unsafe fn maxConcurrentOperationCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maxConcurrentOperationCount)
    }
    unsafe fn setMaxConcurrentOperationCount_(&self, maxConcurrentOperationCount: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setMaxConcurrentOperationCount: maxConcurrentOperationCount
        )
    }
    unsafe fn isSuspended(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSuspended)
    }
    unsafe fn setSuspended_(&self, suspended: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSuspended: suspended)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
    unsafe fn qualityOfService(&self) -> NSQualityOfService
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, qualityOfService)
    }
    unsafe fn setQualityOfService_(&self, qualityOfService: NSQualityOfService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQualityOfService: qualityOfService)
    }
    unsafe fn underlyingQueue(&self) -> dispatch_queue_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, underlyingQueue)
    }
    unsafe fn setUnderlyingQueue_(&self, underlyingQueue: NSObject)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnderlyingQueue: underlyingQueue)
    }
    unsafe fn currentQueue() -> NSOperationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOperationQueue), currentQueue)
    }
    unsafe fn mainQueue() -> NSOperationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOperationQueue), mainQueue)
    }
}
impl NSOperationQueue_NSDeprecated for NSOperationQueue {}
pub trait NSOperationQueue_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn operations(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operations)
    }
    unsafe fn operationCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operationCount)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOrthography(pub id);
impl std::ops::Deref for NSOrthography {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrthography {}
impl NSOrthography {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOrthography), alloc) })
    }
}
impl PNSCopying for NSOrthography {}
impl PNSSecureCoding for NSOrthography {}
impl INSObject for NSOrthography {}
impl PNSObject for NSOrthography {}
impl From<NSOrthography> for NSObject {
    fn from(child: NSOrthography) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrthography {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrthography, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOrthography)) };
        if is_kind_of {
            Ok(NSOrthography(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrthography")
        }
    }
}
impl INSOrthography for NSOrthography {}
pub trait INSOrthography: Sized + std::ops::Deref {
    unsafe fn initWithDominantScript_languageMap_(
        &self,
        script: NSString,
        map: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDominantScript : script languageMap : map)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn dominantScript(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dominantScript)
    }
    unsafe fn languageMap(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, languageMap)
    }
}
impl NSOrthography_NSOrthographyExtended for NSOrthography {}
pub trait NSOrthography_NSOrthographyExtended: Sized + std::ops::Deref {
    unsafe fn languagesForScript_(&self, script: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, languagesForScript: script)
    }
    unsafe fn dominantLanguageForScript_(&self, script: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dominantLanguageForScript: script)
    }
    unsafe fn dominantLanguage(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dominantLanguage)
    }
    unsafe fn allScripts(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allScripts)
    }
    unsafe fn allLanguages(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allLanguages)
    }
    unsafe fn defaultOrthographyForLanguage_(language: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSOrthography),
            defaultOrthographyForLanguage: language
        )
    }
}
impl NSOrthography_NSOrthographyCreation for NSOrthography {}
pub trait NSOrthography_NSOrthographyCreation: Sized + std::ops::Deref {
    unsafe fn orthographyWithDominantScript_languageMap_(
        script: NSString,
        map: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrthography) , orthographyWithDominantScript : script languageMap : map)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPointerArray(pub id);
impl std::ops::Deref for NSPointerArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPointerArray {}
impl NSPointerArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPointerArray), alloc) })
    }
}
impl PNSFastEnumeration for NSPointerArray {}
impl PNSCopying for NSPointerArray {}
impl PNSSecureCoding for NSPointerArray {}
impl INSObject for NSPointerArray {}
impl PNSObject for NSPointerArray {}
impl From<NSPointerArray> for NSObject {
    fn from(child: NSPointerArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPointerArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPointerArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPointerArray)) };
        if is_kind_of {
            Ok(NSPointerArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPointerArray")
        }
    }
}
impl INSPointerArray for NSPointerArray {}
pub trait INSPointerArray: Sized + std::ops::Deref {
    unsafe fn initWithOptions_(&self, options: NSPointerFunctionsOptions) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithOptions: options)
    }
    unsafe fn initWithPointerFunctions_(&self, functions: NSPointerFunctions) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithPointerFunctions: functions)
    }
    unsafe fn pointerAtIndex_(&self, index: NSUInteger) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointerAtIndex: index)
    }
    unsafe fn addPointer_(&self, pointer: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addPointer: pointer)
    }
    unsafe fn removePointerAtIndex_(&self, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removePointerAtIndex: index)
    }
    unsafe fn insertPointer_atIndex_(&self, item: *mut ::std::os::raw::c_void, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertPointer : item atIndex : index)
    }
    unsafe fn replacePointerAtIndex_withPointer_(
        &self,
        index: NSUInteger,
        item: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replacePointerAtIndex : index withPointer : item)
    }
    unsafe fn compact(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compact)
    }
    unsafe fn pointerFunctions(&self) -> NSPointerFunctions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointerFunctions)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn setCount_(&self, count: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCount: count)
    }
    unsafe fn pointerArrayWithOptions_(options: NSPointerFunctionsOptions) -> NSPointerArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPointerArray), pointerArrayWithOptions: options)
    }
    unsafe fn pointerArrayWithPointerFunctions_(functions: NSPointerFunctions) -> NSPointerArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSPointerArray),
            pointerArrayWithPointerFunctions: functions
        )
    }
}
impl NSPointerArray_NSPointerArrayConveniences for NSPointerArray {}
pub trait NSPointerArray_NSPointerArrayConveniences: Sized + std::ops::Deref {
    unsafe fn allObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allObjects)
    }
    unsafe fn strongObjectsPointerArray() -> NSPointerArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPointerArray), strongObjectsPointerArray)
    }
    unsafe fn weakObjectsPointerArray() -> NSPointerArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPointerArray), weakObjectsPointerArray)
    }
}
pub type NSSocketNativeHandle = ::std::os::raw::c_int;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSConnection(pub id);
impl std::ops::Deref for NSConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSConnection {}
impl NSConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSConnection), alloc) })
    }
}
impl INSConnection for NSConnection {}
pub trait INSConnection: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPortMessage(pub id);
impl std::ops::Deref for NSPortMessage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPortMessage {}
impl NSPortMessage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPortMessage), alloc) })
    }
}
impl INSPortMessage for NSPortMessage {}
pub trait INSPortMessage: Sized + std::ops::Deref {}
extern "C" {
    pub static NSPortDidBecomeInvalidNotification: NSNotificationName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPort(pub id);
impl std::ops::Deref for NSPort {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPort {}
impl NSPort {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPort), alloc) })
    }
}
impl PNSCopying for NSPort {}
impl PNSCoding for NSPort {}
impl INSObject for NSPort {}
impl PNSObject for NSPort {}
impl From<NSPort> for NSObject {
    fn from(child: NSPort) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPort {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPort)) };
        if is_kind_of {
            Ok(NSPort(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPort")
        }
    }
}
impl INSPort for NSPort {}
pub trait INSPort: Sized + std::ops::Deref {
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn setDelegate_(&self, anObject: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: anObject)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : runLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : runLoop forMode : mode)
    }
    unsafe fn sendBeforeDate_components_from_reserved_(
        &self,
        limitDate: NSDate,
        components: NSMutableArray,
        receivePort: NSPort,
        headerSpaceReserved: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendBeforeDate : limitDate components : components from : receivePort reserved : headerSpaceReserved)
    }
    unsafe fn sendBeforeDate_msgid_components_from_reserved_(
        &self,
        limitDate: NSDate,
        msgID: NSUInteger,
        components: NSMutableArray,
        receivePort: NSPort,
        headerSpaceReserved: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendBeforeDate : limitDate msgid : msgID components : components from : receivePort reserved : headerSpaceReserved)
    }
    unsafe fn isValid(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValid)
    }
    unsafe fn reservedSpaceLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reservedSpaceLength)
    }
    unsafe fn port() -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPort), port)
    }
}
pub trait PNSPortDelegate: Sized + std::ops::Deref {
    unsafe fn handlePortMessage_(&self, message: NSPortMessage)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, handlePortMessage: message)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMachPort(pub id);
impl std::ops::Deref for NSMachPort {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMachPort {}
impl NSMachPort {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMachPort), alloc) })
    }
}
impl INSPort for NSMachPort {}
impl PNSCopying for NSMachPort {}
impl PNSCoding for NSMachPort {}
impl From<NSMachPort> for NSPort {
    fn from(child: NSMachPort) -> NSPort {
        NSPort(child.0)
    }
}
impl std::convert::TryFrom<NSPort> for NSMachPort {
    type Error = &'static str;
    fn try_from(parent: NSPort) -> Result<NSMachPort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMachPort)) };
        if is_kind_of {
            Ok(NSMachPort(parent.0))
        } else {
            Err("This NSPort cannot be downcasted to NSMachPort")
        }
    }
}
impl INSObject for NSMachPort {}
impl PNSObject for NSMachPort {}
impl From<NSMachPort> for NSObject {
    fn from(child: NSMachPort) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMachPort {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMachPort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMachPort)) };
        if is_kind_of {
            Ok(NSMachPort(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMachPort")
        }
    }
}
impl INSMachPort for NSMachPort {}
pub trait INSMachPort: Sized + std::ops::Deref {
    unsafe fn initWithMachPort_(&self, machPort: u32) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithMachPort: machPort)
    }
    unsafe fn setDelegate_(&self, anObject: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: anObject)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn initWithMachPort_options_(&self, machPort: u32, f: NSMachPortOptions) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMachPort : machPort options : f)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : runLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : runLoop forMode : mode)
    }
    unsafe fn machPort(&self) -> u32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, machPort)
    }
    unsafe fn portWithMachPort_(machPort: u32) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMachPort), portWithMachPort: machPort)
    }
    unsafe fn portWithMachPort_options_(machPort: u32, f: NSMachPortOptions) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSMachPort) , portWithMachPort : machPort options : f)
    }
}
pub const NSMachPortOptions_NSMachPortDeallocateNone: NSMachPortOptions = 0;
pub const NSMachPortOptions_NSMachPortDeallocateSendRight: NSMachPortOptions = 1;
pub const NSMachPortOptions_NSMachPortDeallocateReceiveRight: NSMachPortOptions = 2;
pub type NSMachPortOptions = NSUInteger;
pub trait PNSMachPortDelegate: Sized + std::ops::Deref {
    unsafe fn handleMachMessage_(&self, msg: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, handleMachMessage: msg)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMessagePort(pub id);
impl std::ops::Deref for NSMessagePort {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMessagePort {}
impl NSMessagePort {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMessagePort), alloc) })
    }
}
impl INSPort for NSMessagePort {}
impl PNSCopying for NSMessagePort {}
impl PNSCoding for NSMessagePort {}
impl From<NSMessagePort> for NSPort {
    fn from(child: NSMessagePort) -> NSPort {
        NSPort(child.0)
    }
}
impl std::convert::TryFrom<NSPort> for NSMessagePort {
    type Error = &'static str;
    fn try_from(parent: NSPort) -> Result<NSMessagePort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMessagePort)) };
        if is_kind_of {
            Ok(NSMessagePort(parent.0))
        } else {
            Err("This NSPort cannot be downcasted to NSMessagePort")
        }
    }
}
impl INSObject for NSMessagePort {}
impl PNSObject for NSMessagePort {}
impl From<NSMessagePort> for NSObject {
    fn from(child: NSMessagePort) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMessagePort {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMessagePort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMessagePort)) };
        if is_kind_of {
            Ok(NSMessagePort(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMessagePort")
        }
    }
}
impl INSMessagePort for NSMessagePort {}
pub trait INSMessagePort: Sized + std::ops::Deref {}
pub const NSWindowsNTOperatingSystem: _bindgen_ty_52 = 1;
pub const NSWindows95OperatingSystem: _bindgen_ty_52 = 2;
pub const NSSolarisOperatingSystem: _bindgen_ty_52 = 3;
pub const NSHPUXOperatingSystem: _bindgen_ty_52 = 4;
pub const NSMACHOperatingSystem: _bindgen_ty_52 = 5;
pub const NSSunOSOperatingSystem: _bindgen_ty_52 = 6;
pub const NSOSF1OperatingSystem: _bindgen_ty_52 = 7;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSOperatingSystemVersion {
    pub majorVersion: NSInteger,
    pub minorVersion: NSInteger,
    pub patchVersion: NSInteger,
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSProcessInfo(pub id);
impl std::ops::Deref for NSProcessInfo {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSProcessInfo {}
impl NSProcessInfo {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSProcessInfo), alloc) })
    }
}
impl INSObject for NSProcessInfo {}
impl PNSObject for NSProcessInfo {}
impl From<NSProcessInfo> for NSObject {
    fn from(child: NSProcessInfo) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSProcessInfo {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSProcessInfo, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSProcessInfo)) };
        if is_kind_of {
            Ok(NSProcessInfo(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSProcessInfo")
        }
    }
}
impl INSProcessInfo for NSProcessInfo {}
pub trait INSProcessInfo: Sized + std::ops::Deref {
    unsafe fn operatingSystem(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operatingSystem)
    }
    unsafe fn operatingSystemName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operatingSystemName)
    }
    unsafe fn isOperatingSystemAtLeastVersion_(&self, version: NSOperatingSystemVersion) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOperatingSystemAtLeastVersion: version)
    }
    unsafe fn disableSuddenTermination(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, disableSuddenTermination)
    }
    unsafe fn enableSuddenTermination(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enableSuddenTermination)
    }
    unsafe fn disableAutomaticTermination_(&self, reason: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, disableAutomaticTermination: reason)
    }
    unsafe fn enableAutomaticTermination_(&self, reason: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enableAutomaticTermination: reason)
    }
    unsafe fn environment(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, environment)
    }
    unsafe fn arguments(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arguments)
    }
    unsafe fn hostName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hostName)
    }
    unsafe fn processName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, processName)
    }
    unsafe fn setProcessName_(&self, processName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProcessName: processName)
    }
    unsafe fn processIdentifier(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, processIdentifier)
    }
    unsafe fn globallyUniqueString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, globallyUniqueString)
    }
    unsafe fn operatingSystemVersionString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operatingSystemVersionString)
    }
    unsafe fn operatingSystemVersion(&self) -> NSOperatingSystemVersion
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operatingSystemVersion)
    }
    unsafe fn processorCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, processorCount)
    }
    unsafe fn activeProcessorCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, activeProcessorCount)
    }
    unsafe fn physicalMemory(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, physicalMemory)
    }
    unsafe fn systemUptime(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, systemUptime)
    }
    unsafe fn automaticTerminationSupportEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, automaticTerminationSupportEnabled)
    }
    unsafe fn setAutomaticTerminationSupportEnabled_(
        &self,
        automaticTerminationSupportEnabled: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAutomaticTerminationSupportEnabled: automaticTerminationSupportEnabled
        )
    }
    unsafe fn processInfo() -> NSProcessInfo
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProcessInfo), processInfo)
    }
}
pub const NSActivityOptions_NSActivityIdleDisplaySleepDisabled: NSActivityOptions = 1099511627776;
pub const NSActivityOptions_NSActivityIdleSystemSleepDisabled: NSActivityOptions = 1048576;
pub const NSActivityOptions_NSActivitySuddenTerminationDisabled: NSActivityOptions = 16384;
pub const NSActivityOptions_NSActivityAutomaticTerminationDisabled: NSActivityOptions = 32768;
pub const NSActivityOptions_NSActivityAnimationTrackingEnabled: NSActivityOptions = 35184372088832;
pub const NSActivityOptions_NSActivityTrackingEnabled: NSActivityOptions = 70368744177664;
pub const NSActivityOptions_NSActivityUserInitiated: NSActivityOptions = 16777215;
pub const NSActivityOptions_NSActivityUserInitiatedAllowingIdleSystemSleep: NSActivityOptions =
    15728639;
pub const NSActivityOptions_NSActivityBackground: NSActivityOptions = 255;
pub const NSActivityOptions_NSActivityLatencyCritical: NSActivityOptions = 1095216660480;
pub const NSActivityOptions_NSActivityUserInteractive: NSActivityOptions = 1095233437695;
pub type NSActivityOptions = u64;
impl NSProcessInfo_NSProcessInfoActivity for NSProcessInfo {}
pub trait NSProcessInfo_NSProcessInfoActivity: Sized + std::ops::Deref {
    unsafe fn beginActivityWithOptions_reason_(
        &self,
        options: NSActivityOptions,
        reason: NSString,
    ) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , beginActivityWithOptions : options reason : reason)
    }
    unsafe fn endActivity_(&self, activity: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endActivity: activity)
    }
    unsafe fn performActivityWithOptions_reason_usingBlock_(
        &self,
        options: NSActivityOptions,
        reason: NSString,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performActivityWithOptions : options reason : reason usingBlock : block)
    }
    unsafe fn performExpiringActivityWithReason_usingBlock_(
        &self,
        reason: NSString,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performExpiringActivityWithReason : reason usingBlock : block)
    }
}
impl NSProcessInfo_NSUserInformation for NSProcessInfo {}
pub trait NSProcessInfo_NSUserInformation: Sized + std::ops::Deref {
    unsafe fn userName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userName)
    }
    unsafe fn fullUserName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fullUserName)
    }
}
pub const NSProcessInfoThermalState_NSProcessInfoThermalStateNominal: NSProcessInfoThermalState = 0;
pub const NSProcessInfoThermalState_NSProcessInfoThermalStateFair: NSProcessInfoThermalState = 1;
pub const NSProcessInfoThermalState_NSProcessInfoThermalStateSerious: NSProcessInfoThermalState = 2;
pub const NSProcessInfoThermalState_NSProcessInfoThermalStateCritical: NSProcessInfoThermalState =
    3;
pub type NSProcessInfoThermalState = NSInteger;
impl NSProcessInfo_NSProcessInfoThermalState for NSProcessInfo {}
pub trait NSProcessInfo_NSProcessInfoThermalState: Sized + std::ops::Deref {
    unsafe fn thermalState(&self) -> NSProcessInfoThermalState
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, thermalState)
    }
}
impl NSProcessInfo_NSProcessInfoPowerState for NSProcessInfo {}
pub trait NSProcessInfo_NSProcessInfoPowerState: Sized + std::ops::Deref {
    unsafe fn isLowPowerModeEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLowPowerModeEnabled)
    }
}
extern "C" {
    pub static NSProcessInfoThermalStateDidChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSProcessInfoPowerStateDidChangeNotification: NSNotificationName;
}
impl NSProcessInfo_NSProcessInfoPlatform for NSProcessInfo {}
pub trait NSProcessInfo_NSProcessInfoPlatform: Sized + std::ops::Deref {
    unsafe fn isMacCatalystApp(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMacCatalystApp)
    }
    unsafe fn isiOSAppOnMac(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isiOSAppOnMac)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSProxy(pub id);
impl std::ops::Deref for NSProxy {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSProxy {}
impl NSProxy {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSProxy), alloc) })
    }
}
impl PNSObject for NSProxy {}
impl INSProxy for NSProxy {}
pub trait INSProxy: Sized + std::ops::Deref {
    unsafe fn forwardInvocation_(&self, invocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: invocation)
    }
    unsafe fn methodSignatureForSelector_(&self, sel: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: sel)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
    unsafe fn alloc() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), alloc)
    }
    unsafe fn allocWithZone_(zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), allocWithZone: zone)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), class)
    }
    unsafe fn respondsToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), respondsToSelector: aSelector)
    }
}
pub const NSTextCheckingType_NSTextCheckingTypeOrthography: NSTextCheckingType = 1;
pub const NSTextCheckingType_NSTextCheckingTypeSpelling: NSTextCheckingType = 2;
pub const NSTextCheckingType_NSTextCheckingTypeGrammar: NSTextCheckingType = 4;
pub const NSTextCheckingType_NSTextCheckingTypeDate: NSTextCheckingType = 8;
pub const NSTextCheckingType_NSTextCheckingTypeAddress: NSTextCheckingType = 16;
pub const NSTextCheckingType_NSTextCheckingTypeLink: NSTextCheckingType = 32;
pub const NSTextCheckingType_NSTextCheckingTypeQuote: NSTextCheckingType = 64;
pub const NSTextCheckingType_NSTextCheckingTypeDash: NSTextCheckingType = 128;
pub const NSTextCheckingType_NSTextCheckingTypeReplacement: NSTextCheckingType = 256;
pub const NSTextCheckingType_NSTextCheckingTypeCorrection: NSTextCheckingType = 512;
pub const NSTextCheckingType_NSTextCheckingTypeRegularExpression: NSTextCheckingType = 1024;
pub const NSTextCheckingType_NSTextCheckingTypePhoneNumber: NSTextCheckingType = 2048;
pub const NSTextCheckingType_NSTextCheckingTypeTransitInformation: NSTextCheckingType = 4096;
pub type NSTextCheckingType = u64;
pub type NSTextCheckingTypes = u64;
pub const NSTextCheckingAllSystemTypes: _bindgen_ty_53 = 4294967295;
pub const NSTextCheckingAllCustomTypes: _bindgen_ty_53 = 18446744069414584320;
pub const NSTextCheckingAllTypes: _bindgen_ty_53 = 18446744073709551615;
pub type _bindgen_ty_53 = NSTextCheckingTypes;
pub type NSTextCheckingKey = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTextCheckingResult(pub id);
impl std::ops::Deref for NSTextCheckingResult {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTextCheckingResult {}
impl NSTextCheckingResult {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTextCheckingResult), alloc) })
    }
}
impl PNSCopying for NSTextCheckingResult {}
impl PNSSecureCoding for NSTextCheckingResult {}
impl INSObject for NSTextCheckingResult {}
impl PNSObject for NSTextCheckingResult {}
impl From<NSTextCheckingResult> for NSObject {
    fn from(child: NSTextCheckingResult) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSTextCheckingResult {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSTextCheckingResult, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSTextCheckingResult)) };
        if is_kind_of {
            Ok(NSTextCheckingResult(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSTextCheckingResult")
        }
    }
}
impl INSTextCheckingResult for NSTextCheckingResult {}
pub trait INSTextCheckingResult: Sized + std::ops::Deref {
    unsafe fn resultType(&self) -> NSTextCheckingType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultType)
    }
    unsafe fn range(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, range)
    }
}
impl NSTextCheckingResult_NSTextCheckingResultOptional for NSTextCheckingResult {}
pub trait NSTextCheckingResult_NSTextCheckingResultOptional: Sized + std::ops::Deref {
    unsafe fn rangeAtIndex_(&self, idx: NSUInteger) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeAtIndex: idx)
    }
    unsafe fn rangeWithName_(&self, name: NSString) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeWithName: name)
    }
    unsafe fn resultByAdjustingRangesWithOffset_(&self, offset: NSInteger) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultByAdjustingRangesWithOffset: offset)
    }
    unsafe fn orthography(&self) -> NSOrthography
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, orthography)
    }
    unsafe fn grammarDetails(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, grammarDetails)
    }
    unsafe fn date(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, date)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn duration(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, duration)
    }
    unsafe fn components(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, components)
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn replacementString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementString)
    }
    unsafe fn alternativeStrings(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, alternativeStrings)
    }
    unsafe fn regularExpression(&self) -> NSRegularExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, regularExpression)
    }
    unsafe fn phoneNumber(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, phoneNumber)
    }
    unsafe fn numberOfRanges(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberOfRanges)
    }
    unsafe fn addressComponents(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addressComponents)
    }
}
extern "C" {
    pub static NSTextCheckingNameKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingJobTitleKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingOrganizationKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingStreetKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingCityKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingStateKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingZIPKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingCountryKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingPhoneKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingAirlineKey: NSTextCheckingKey;
}
extern "C" {
    pub static NSTextCheckingFlightKey: NSTextCheckingKey;
}
impl NSTextCheckingResult_NSTextCheckingResultCreation for NSTextCheckingResult {}
pub trait NSTextCheckingResult_NSTextCheckingResultCreation: Sized + std::ops::Deref {
    unsafe fn orthographyCheckingResultWithRange_orthography_(
        range: NSRange,
        orthography: NSOrthography,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , orthographyCheckingResultWithRange : range orthography : orthography)
    }
    unsafe fn spellCheckingResultWithRange_(range: NSRange) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSTextCheckingResult),
            spellCheckingResultWithRange: range
        )
    }
    unsafe fn grammarCheckingResultWithRange_details_(
        range: NSRange,
        details: NSArray,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , grammarCheckingResultWithRange : range details : details)
    }
    unsafe fn dateCheckingResultWithRange_date_(
        range: NSRange,
        date: NSDate,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , dateCheckingResultWithRange : range date : date)
    }
    unsafe fn dateCheckingResultWithRange_date_timeZone_duration_(
        range: NSRange,
        date: NSDate,
        timeZone: NSTimeZone,
        duration: NSTimeInterval,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , dateCheckingResultWithRange : range date : date timeZone : timeZone duration : duration)
    }
    unsafe fn addressCheckingResultWithRange_components_(
        range: NSRange,
        components: NSDictionary,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , addressCheckingResultWithRange : range components : components)
    }
    unsafe fn linkCheckingResultWithRange_URL_(range: NSRange, url: NSURL) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , linkCheckingResultWithRange : range URL : url)
    }
    unsafe fn quoteCheckingResultWithRange_replacementString_(
        range: NSRange,
        replacementString: NSString,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , quoteCheckingResultWithRange : range replacementString : replacementString)
    }
    unsafe fn dashCheckingResultWithRange_replacementString_(
        range: NSRange,
        replacementString: NSString,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , dashCheckingResultWithRange : range replacementString : replacementString)
    }
    unsafe fn replacementCheckingResultWithRange_replacementString_(
        range: NSRange,
        replacementString: NSString,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , replacementCheckingResultWithRange : range replacementString : replacementString)
    }
    unsafe fn correctionCheckingResultWithRange_replacementString_(
        range: NSRange,
        replacementString: NSString,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , correctionCheckingResultWithRange : range replacementString : replacementString)
    }
    unsafe fn correctionCheckingResultWithRange_replacementString_alternativeStrings_(
        range: NSRange,
        replacementString: NSString,
        alternativeStrings: NSArray,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , correctionCheckingResultWithRange : range replacementString : replacementString alternativeStrings : alternativeStrings)
    }
    unsafe fn regularExpressionCheckingResultWithRanges_count_regularExpression_(
        ranges: NSRangePointer,
        count: NSUInteger,
        regularExpression: NSRegularExpression,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , regularExpressionCheckingResultWithRanges : ranges count : count regularExpression : regularExpression)
    }
    unsafe fn phoneNumberCheckingResultWithRange_phoneNumber_(
        range: NSRange,
        phoneNumber: NSString,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , phoneNumberCheckingResultWithRange : range phoneNumber : phoneNumber)
    }
    unsafe fn transitInformationCheckingResultWithRange_components_(
        range: NSRange,
        components: NSDictionary,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTextCheckingResult) , transitInformationCheckingResultWithRange : range components : components)
    }
}
pub const NSRegularExpressionOptions_NSRegularExpressionCaseInsensitive:
    NSRegularExpressionOptions = 1;
pub const NSRegularExpressionOptions_NSRegularExpressionAllowCommentsAndWhitespace:
    NSRegularExpressionOptions = 2;
pub const NSRegularExpressionOptions_NSRegularExpressionIgnoreMetacharacters:
    NSRegularExpressionOptions = 4;
pub const NSRegularExpressionOptions_NSRegularExpressionDotMatchesLineSeparators:
    NSRegularExpressionOptions = 8;
pub const NSRegularExpressionOptions_NSRegularExpressionAnchorsMatchLines:
    NSRegularExpressionOptions = 16;
pub const NSRegularExpressionOptions_NSRegularExpressionUseUnixLineSeparators:
    NSRegularExpressionOptions = 32;
pub const NSRegularExpressionOptions_NSRegularExpressionUseUnicodeWordBoundaries:
    NSRegularExpressionOptions = 64;
pub type NSRegularExpressionOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSRegularExpression(pub id);
impl std::ops::Deref for NSRegularExpression {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRegularExpression {}
impl NSRegularExpression {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSRegularExpression), alloc) })
    }
}
impl PNSCopying for NSRegularExpression {}
impl PNSSecureCoding for NSRegularExpression {}
impl INSObject for NSRegularExpression {}
impl PNSObject for NSRegularExpression {}
impl From<NSRegularExpression> for NSObject {
    fn from(child: NSRegularExpression) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRegularExpression {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRegularExpression, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSRegularExpression)) };
        if is_kind_of {
            Ok(NSRegularExpression(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRegularExpression")
        }
    }
}
impl INSRegularExpression for NSRegularExpression {}
pub trait INSRegularExpression: Sized + std::ops::Deref {
    unsafe fn initWithPattern_options_error_(
        &self,
        pattern: NSString,
        options: NSRegularExpressionOptions,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithPattern : pattern options : options error : error)
    }
    unsafe fn pattern(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pattern)
    }
    unsafe fn options(&self) -> NSRegularExpressionOptions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, options)
    }
    unsafe fn numberOfCaptureGroups(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberOfCaptureGroups)
    }
    unsafe fn regularExpressionWithPattern_options_error_(
        pattern: NSString,
        options: NSRegularExpressionOptions,
        error: *mut NSError,
    ) -> NSRegularExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSRegularExpression) , regularExpressionWithPattern : pattern options : options error : error)
    }
    unsafe fn escapedPatternForString_(string: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSRegularExpression), escapedPatternForString: string)
    }
}
pub const NSMatchingOptions_NSMatchingReportProgress: NSMatchingOptions = 1;
pub const NSMatchingOptions_NSMatchingReportCompletion: NSMatchingOptions = 2;
pub const NSMatchingOptions_NSMatchingAnchored: NSMatchingOptions = 4;
pub const NSMatchingOptions_NSMatchingWithTransparentBounds: NSMatchingOptions = 8;
pub const NSMatchingOptions_NSMatchingWithoutAnchoringBounds: NSMatchingOptions = 16;
pub type NSMatchingOptions = NSUInteger;
pub const NSMatchingFlags_NSMatchingProgress: NSMatchingFlags = 1;
pub const NSMatchingFlags_NSMatchingCompleted: NSMatchingFlags = 2;
pub const NSMatchingFlags_NSMatchingHitEnd: NSMatchingFlags = 4;
pub const NSMatchingFlags_NSMatchingRequiredEnd: NSMatchingFlags = 8;
pub const NSMatchingFlags_NSMatchingInternalError: NSMatchingFlags = 16;
pub type NSMatchingFlags = NSUInteger;
impl NSRegularExpression_NSMatching for NSRegularExpression {}
pub trait NSRegularExpression_NSMatching: Sized + std::ops::Deref {
    unsafe fn enumerateMatchesInString_options_range_usingBlock_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateMatchesInString : string options : options range : range usingBlock : block)
    }
    unsafe fn matchesInString_options_range_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , matchesInString : string options : options range : range)
    }
    unsafe fn numberOfMatchesInString_options_range_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , numberOfMatchesInString : string options : options range : range)
    }
    unsafe fn firstMatchInString_options_range_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSTextCheckingResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , firstMatchInString : string options : options range : range)
    }
    unsafe fn rangeOfFirstMatchInString_options_range_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfFirstMatchInString : string options : options range : range)
    }
}
impl NSRegularExpression_NSReplacement for NSRegularExpression {}
pub trait NSRegularExpression_NSReplacement: Sized + std::ops::Deref {
    unsafe fn stringByReplacingMatchesInString_options_range_withTemplate_(
        &self,
        string: NSString,
        options: NSMatchingOptions,
        range: NSRange,
        templ: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringByReplacingMatchesInString : string options : options range : range withTemplate : templ)
    }
    unsafe fn replaceMatchesInString_options_range_withTemplate_(
        &self,
        string: NSMutableString,
        options: NSMatchingOptions,
        range: NSRange,
        templ: NSString,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceMatchesInString : string options : options range : range withTemplate : templ)
    }
    unsafe fn replacementStringForResult_inString_offset_template_(
        &self,
        result: NSTextCheckingResult,
        string: NSString,
        offset: NSInteger,
        templ: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replacementStringForResult : result inString : string offset : offset template : templ)
    }
    unsafe fn escapedTemplateForString_(string: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSRegularExpression),
            escapedTemplateForString: string
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDataDetector(pub id);
impl std::ops::Deref for NSDataDetector {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDataDetector {}
impl NSDataDetector {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDataDetector), alloc) })
    }
}
impl INSRegularExpression for NSDataDetector {}
impl PNSCopying for NSDataDetector {}
impl PNSSecureCoding for NSDataDetector {}
impl From<NSDataDetector> for NSRegularExpression {
    fn from(child: NSDataDetector) -> NSRegularExpression {
        NSRegularExpression(child.0)
    }
}
impl std::convert::TryFrom<NSRegularExpression> for NSDataDetector {
    type Error = &'static str;
    fn try_from(parent: NSRegularExpression) -> Result<NSDataDetector, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDataDetector)) };
        if is_kind_of {
            Ok(NSDataDetector(parent.0))
        } else {
            Err("This NSRegularExpression cannot be downcasted to NSDataDetector")
        }
    }
}
impl INSObject for NSDataDetector {}
impl PNSObject for NSDataDetector {}
impl From<NSDataDetector> for NSObject {
    fn from(child: NSDataDetector) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDataDetector {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDataDetector, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDataDetector)) };
        if is_kind_of {
            Ok(NSDataDetector(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDataDetector")
        }
    }
}
impl INSDataDetector for NSDataDetector {}
pub trait INSDataDetector: Sized + std::ops::Deref {
    unsafe fn initWithTypes_error_(
        &self,
        checkingTypes: NSTextCheckingTypes,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTypes : checkingTypes error : error)
    }
    unsafe fn checkingTypes(&self) -> NSTextCheckingTypes
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, checkingTypes)
    }
    unsafe fn dataDetectorWithTypes_error_(
        checkingTypes: NSTextCheckingTypes,
        error: *mut NSError,
    ) -> NSDataDetector
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDataDetector) , dataDetectorWithTypes : checkingTypes error : error)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSortDescriptor(pub id);
impl std::ops::Deref for NSSortDescriptor {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSortDescriptor {}
impl NSSortDescriptor {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSortDescriptor), alloc) })
    }
}
impl PNSSecureCoding for NSSortDescriptor {}
impl PNSCopying for NSSortDescriptor {}
impl INSObject for NSSortDescriptor {}
impl PNSObject for NSSortDescriptor {}
impl From<NSSortDescriptor> for NSObject {
    fn from(child: NSSortDescriptor) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSortDescriptor {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSortDescriptor, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSSortDescriptor)) };
        if is_kind_of {
            Ok(NSSortDescriptor(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSortDescriptor")
        }
    }
}
impl INSSortDescriptor for NSSortDescriptor {}
pub trait INSSortDescriptor: Sized + std::ops::Deref {
    unsafe fn initWithKey_ascending_(&self, key: NSString, ascending: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithKey : key ascending : ascending)
    }
    unsafe fn initWithKey_ascending_selector_(
        &self,
        key: NSString,
        ascending: BOOL,
        selector: objc::runtime::Sel,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithKey : key ascending : ascending selector : selector)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn allowEvaluation(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowEvaluation)
    }
    unsafe fn initWithKey_ascending_comparator_(
        &self,
        key: NSString,
        ascending: BOOL,
        cmptr: NSComparator,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithKey : key ascending : ascending comparator : cmptr)
    }
    unsafe fn compareObject_toObject_(&self, object1: id, object2: id) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compareObject : object1 toObject : object2)
    }
    unsafe fn key(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, key)
    }
    unsafe fn ascending(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ascending)
    }
    unsafe fn selector(&self) -> objc::runtime::Sel
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, selector)
    }
    unsafe fn comparator(&self) -> NSComparator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, comparator)
    }
    unsafe fn reversedSortDescriptor(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reversedSortDescriptor)
    }
    unsafe fn sortDescriptorWithKey_ascending_(key: NSString, ascending: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSSortDescriptor) , sortDescriptorWithKey : key ascending : ascending)
    }
    unsafe fn sortDescriptorWithKey_ascending_selector_(
        key: NSString,
        ascending: BOOL,
        selector: objc::runtime::Sel,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSSortDescriptor) , sortDescriptorWithKey : key ascending : ascending selector : selector)
    }
    unsafe fn sortDescriptorWithKey_ascending_comparator_(
        key: NSString,
        ascending: BOOL,
        cmptr: NSComparator,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSSortDescriptor) , sortDescriptorWithKey : key ascending : ascending comparator : cmptr)
    }
}
impl<ObjectType: 'static> NSSet_NSSortDescriptorSorting<ObjectType> for NSSet {}
pub trait NSSet_NSSortDescriptorSorting<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn sortedArrayUsingDescriptors_(&self, sortDescriptors: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingDescriptors: sortDescriptors)
    }
}
impl<ObjectType: 'static> NSArray_NSSortDescriptorSorting<ObjectType> for NSArray {}
pub trait NSArray_NSSortDescriptorSorting<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn sortedArrayUsingDescriptors_(&self, sortDescriptors: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingDescriptors: sortDescriptors)
    }
}
impl<ObjectType: 'static> NSMutableArray_NSSortDescriptorSorting<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSSortDescriptorSorting<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn sortUsingDescriptors_(&self, sortDescriptors: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortUsingDescriptors: sortDescriptors)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueSorting<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueSorting<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn sortedArrayUsingDescriptors_(&self, sortDescriptors: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingDescriptors: sortDescriptors)
    }
}
impl<ObjectType: 'static> NSMutableOrderedSet_NSKeyValueSorting<ObjectType>
    for NSMutableOrderedSet
{
}
pub trait NSMutableOrderedSet_NSKeyValueSorting<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn sortUsingDescriptors_(&self, sortDescriptors: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortUsingDescriptors: sortDescriptors)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHost(pub id);
impl std::ops::Deref for NSHost {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHost {}
impl NSHost {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHost), alloc) })
    }
}
impl INSHost for NSHost {}
pub trait INSHost: Sized + std::ops::Deref {}
pub type NSStreamPropertyKey = NSString;
pub const NSStreamStatus_NSStreamStatusNotOpen: NSStreamStatus = 0;
pub const NSStreamStatus_NSStreamStatusOpening: NSStreamStatus = 1;
pub const NSStreamStatus_NSStreamStatusOpen: NSStreamStatus = 2;
pub const NSStreamStatus_NSStreamStatusReading: NSStreamStatus = 3;
pub const NSStreamStatus_NSStreamStatusWriting: NSStreamStatus = 4;
pub const NSStreamStatus_NSStreamStatusAtEnd: NSStreamStatus = 5;
pub const NSStreamStatus_NSStreamStatusClosed: NSStreamStatus = 6;
pub const NSStreamStatus_NSStreamStatusError: NSStreamStatus = 7;
pub type NSStreamStatus = NSUInteger;
pub const NSStreamEvent_NSStreamEventNone: NSStreamEvent = 0;
pub const NSStreamEvent_NSStreamEventOpenCompleted: NSStreamEvent = 1;
pub const NSStreamEvent_NSStreamEventHasBytesAvailable: NSStreamEvent = 2;
pub const NSStreamEvent_NSStreamEventHasSpaceAvailable: NSStreamEvent = 4;
pub const NSStreamEvent_NSStreamEventErrorOccurred: NSStreamEvent = 8;
pub const NSStreamEvent_NSStreamEventEndEncountered: NSStreamEvent = 16;
pub type NSStreamEvent = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSStream(pub id);
impl std::ops::Deref for NSStream {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSStream {}
impl NSStream {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSStream), alloc) })
    }
}
impl INSObject for NSStream {}
impl PNSObject for NSStream {}
impl From<NSStream> for NSObject {
    fn from(child: NSStream) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSStream {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSStream, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSStream)) };
        if is_kind_of {
            Ok(NSStream(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSStream")
        }
    }
}
impl INSStream for NSStream {}
pub trait INSStream: Sized + std::ops::Deref {
    unsafe fn open(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, open)
    }
    unsafe fn close(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, close)
    }
    unsafe fn propertyForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, propertyForKey: key)
    }
    unsafe fn setProperty_forKey_(&self, property: id, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setProperty : property forKey : key)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn streamStatus(&self) -> NSStreamStatus
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, streamStatus)
    }
    unsafe fn streamError(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, streamError)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInputStream(pub id);
impl std::ops::Deref for NSInputStream {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInputStream {}
impl NSInputStream {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInputStream), alloc) })
    }
}
impl INSStream for NSInputStream {}
impl From<NSInputStream> for NSStream {
    fn from(child: NSInputStream) -> NSStream {
        NSStream(child.0)
    }
}
impl std::convert::TryFrom<NSStream> for NSInputStream {
    type Error = &'static str;
    fn try_from(parent: NSStream) -> Result<NSInputStream, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSInputStream)) };
        if is_kind_of {
            Ok(NSInputStream(parent.0))
        } else {
            Err("This NSStream cannot be downcasted to NSInputStream")
        }
    }
}
impl INSObject for NSInputStream {}
impl PNSObject for NSInputStream {}
impl From<NSInputStream> for NSObject {
    fn from(child: NSInputStream) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInputStream {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInputStream, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSInputStream)) };
        if is_kind_of {
            Ok(NSInputStream(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInputStream")
        }
    }
}
impl INSInputStream for NSInputStream {}
pub trait INSInputStream: Sized + std::ops::Deref {
    unsafe fn read_maxLength_(&self, buffer: *mut u8, len: NSUInteger) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , read : buffer maxLength : len)
    }
    unsafe fn getBuffer_length_(&self, buffer: *mut *mut u8, len: *mut NSUInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getBuffer : buffer length : len)
    }
    unsafe fn initWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithData: data)
    }
    unsafe fn initWithURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithURL: url)
    }
    unsafe fn hasBytesAvailable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasBytesAvailable)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSOutputStream(pub id);
impl std::ops::Deref for NSOutputStream {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOutputStream {}
impl NSOutputStream {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSOutputStream), alloc) })
    }
}
impl INSStream for NSOutputStream {}
impl From<NSOutputStream> for NSStream {
    fn from(child: NSOutputStream) -> NSStream {
        NSStream(child.0)
    }
}
impl std::convert::TryFrom<NSStream> for NSOutputStream {
    type Error = &'static str;
    fn try_from(parent: NSStream) -> Result<NSOutputStream, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOutputStream)) };
        if is_kind_of {
            Ok(NSOutputStream(parent.0))
        } else {
            Err("This NSStream cannot be downcasted to NSOutputStream")
        }
    }
}
impl INSObject for NSOutputStream {}
impl PNSObject for NSOutputStream {}
impl From<NSOutputStream> for NSObject {
    fn from(child: NSOutputStream) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOutputStream {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOutputStream, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOutputStream)) };
        if is_kind_of {
            Ok(NSOutputStream(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOutputStream")
        }
    }
}
impl INSOutputStream for NSOutputStream {}
pub trait INSOutputStream: Sized + std::ops::Deref {
    unsafe fn write_maxLength_(&self, buffer: *const u8, len: NSUInteger) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , write : buffer maxLength : len)
    }
    unsafe fn initToMemory(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initToMemory)
    }
    unsafe fn initToBuffer_capacity_(&self, buffer: *mut u8, capacity: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initToBuffer : buffer capacity : capacity)
    }
    unsafe fn initWithURL_append_(&self, url: NSURL, shouldAppend: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : url append : shouldAppend)
    }
    unsafe fn hasSpaceAvailable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasSpaceAvailable)
    }
}
impl NSStream_NSSocketStreamCreationExtensions for NSStream {}
pub trait NSStream_NSSocketStreamCreationExtensions: Sized + std::ops::Deref {
    unsafe fn getStreamsToHostWithName_port_inputStream_outputStream_(
        hostname: NSString,
        port: NSInteger,
        inputStream: *mut NSInputStream,
        outputStream: *mut NSOutputStream,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSStream) , getStreamsToHostWithName : hostname port : port inputStream : inputStream outputStream : outputStream)
    }
}
impl NSStream_NSStreamBoundPairCreationExtensions for NSStream {}
pub trait NSStream_NSStreamBoundPairCreationExtensions: Sized + std::ops::Deref {
    unsafe fn getBoundStreamsWithBufferSize_inputStream_outputStream_(
        bufferSize: NSUInteger,
        inputStream: *mut NSInputStream,
        outputStream: *mut NSOutputStream,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSStream) , getBoundStreamsWithBufferSize : bufferSize inputStream : inputStream outputStream : outputStream)
    }
}
impl NSInputStream_NSInputStreamExtensions for NSInputStream {}
pub trait NSInputStream_NSInputStreamExtensions: Sized + std::ops::Deref {
    unsafe fn initWithFileAtPath_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFileAtPath: path)
    }
    unsafe fn inputStreamWithData_(data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInputStream), inputStreamWithData: data)
    }
    unsafe fn inputStreamWithFileAtPath_(path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInputStream), inputStreamWithFileAtPath: path)
    }
    unsafe fn inputStreamWithURL_(url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInputStream), inputStreamWithURL: url)
    }
}
impl NSOutputStream_NSOutputStreamExtensions for NSOutputStream {}
pub trait NSOutputStream_NSOutputStreamExtensions: Sized + std::ops::Deref {
    unsafe fn initToFileAtPath_append_(&self, path: NSString, shouldAppend: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initToFileAtPath : path append : shouldAppend)
    }
    unsafe fn outputStreamToMemory() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOutputStream), outputStreamToMemory)
    }
    unsafe fn outputStreamToBuffer_capacity_(buffer: *mut u8, capacity: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOutputStream) , outputStreamToBuffer : buffer capacity : capacity)
    }
    unsafe fn outputStreamToFileAtPath_append_(path: NSString, shouldAppend: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOutputStream) , outputStreamToFileAtPath : path append : shouldAppend)
    }
    unsafe fn outputStreamWithURL_append_(url: NSURL, shouldAppend: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOutputStream) , outputStreamWithURL : url append : shouldAppend)
    }
}
pub trait PNSStreamDelegate: Sized + std::ops::Deref {
    unsafe fn stream_handleEvent_(&self, aStream: NSStream, eventCode: NSStreamEvent)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stream : aStream handleEvent : eventCode)
    }
}
extern "C" {
    pub static NSStreamSocketSecurityLevelKey: NSStreamPropertyKey;
}
pub type NSStreamSocketSecurityLevel = NSString;
extern "C" {
    pub static NSStreamSocketSecurityLevelNone: NSStreamSocketSecurityLevel;
}
extern "C" {
    pub static NSStreamSocketSecurityLevelSSLv2: NSStreamSocketSecurityLevel;
}
extern "C" {
    pub static NSStreamSocketSecurityLevelSSLv3: NSStreamSocketSecurityLevel;
}
extern "C" {
    pub static NSStreamSocketSecurityLevelTLSv1: NSStreamSocketSecurityLevel;
}
extern "C" {
    pub static NSStreamSocketSecurityLevelNegotiatedSSL: NSStreamSocketSecurityLevel;
}
extern "C" {
    pub static NSStreamSOCKSProxyConfigurationKey: NSStreamPropertyKey;
}
pub type NSStreamSOCKSProxyConfiguration = NSString;
extern "C" {
    pub static NSStreamSOCKSProxyHostKey: NSStreamSOCKSProxyConfiguration;
}
extern "C" {
    pub static NSStreamSOCKSProxyPortKey: NSStreamSOCKSProxyConfiguration;
}
extern "C" {
    pub static NSStreamSOCKSProxyVersionKey: NSStreamSOCKSProxyConfiguration;
}
extern "C" {
    pub static NSStreamSOCKSProxyUserKey: NSStreamSOCKSProxyConfiguration;
}
extern "C" {
    pub static NSStreamSOCKSProxyPasswordKey: NSStreamSOCKSProxyConfiguration;
}
pub type NSStreamSOCKSProxyVersion = NSString;
extern "C" {
    pub static NSStreamSOCKSProxyVersion4: NSStreamSOCKSProxyVersion;
}
extern "C" {
    pub static NSStreamSOCKSProxyVersion5: NSStreamSOCKSProxyVersion;
}
extern "C" {
    pub static NSStreamDataWrittenToMemoryStreamKey: NSStreamPropertyKey;
}
extern "C" {
    pub static NSStreamFileCurrentOffsetKey: NSStreamPropertyKey;
}
extern "C" {
    pub static NSStreamSocketSSLErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSStreamSOCKSErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSStreamNetworkServiceType: NSStreamPropertyKey;
}
pub type NSStreamNetworkServiceTypeValue = NSString;
extern "C" {
    pub static NSStreamNetworkServiceTypeVoIP: NSStreamNetworkServiceTypeValue;
}
extern "C" {
    pub static NSStreamNetworkServiceTypeVideo: NSStreamNetworkServiceTypeValue;
}
extern "C" {
    pub static NSStreamNetworkServiceTypeBackground: NSStreamNetworkServiceTypeValue;
}
extern "C" {
    pub static NSStreamNetworkServiceTypeVoice: NSStreamNetworkServiceTypeValue;
}
extern "C" {
    pub static NSStreamNetworkServiceTypeCallSignaling: NSStreamNetworkServiceTypeValue;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSThread(pub id);
impl std::ops::Deref for NSThread {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSThread {}
impl NSThread {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSThread), alloc) })
    }
}
impl INSObject for NSThread {}
impl PNSObject for NSThread {}
impl From<NSThread> for NSObject {
    fn from(child: NSThread) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSThread {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSThread, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSThread)) };
        if is_kind_of {
            Ok(NSThread(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSThread")
        }
    }
}
impl INSThread for NSThread {}
pub trait INSThread: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithTarget_selector_object_(
        &self,
        target: id,
        selector: objc::runtime::Sel,
        argument: id,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTarget : target selector : selector object : argument)
    }
    unsafe fn initWithBlock_(&self, block: *mut ::std::os::raw::c_void) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithBlock: block)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn start(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, start)
    }
    unsafe fn main(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, main)
    }
    unsafe fn threadDictionary(&self) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, threadDictionary)
    }
    unsafe fn threadPriority(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, threadPriority)
    }
    unsafe fn setThreadPriority_(&self, threadPriority: f64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setThreadPriority: threadPriority)
    }
    unsafe fn qualityOfService(&self) -> NSQualityOfService
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, qualityOfService)
    }
    unsafe fn setQualityOfService_(&self, qualityOfService: NSQualityOfService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQualityOfService: qualityOfService)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
    unsafe fn stackSize(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stackSize)
    }
    unsafe fn setStackSize_(&self, stackSize: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStackSize: stackSize)
    }
    unsafe fn isMainThread(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMainThread)
    }
    unsafe fn isExecuting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExecuting)
    }
    unsafe fn isFinished(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFinished)
    }
    unsafe fn isCancelled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCancelled)
    }
    unsafe fn detachNewThreadWithBlock_(block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), detachNewThreadWithBlock: block)
    }
    unsafe fn detachNewThreadSelector_toTarget_withObject_(
        selector: objc::runtime::Sel,
        target: id,
        argument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSThread) , detachNewThreadSelector : selector toTarget : target withObject : argument)
    }
    unsafe fn isMultiThreaded() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), isMultiThreaded)
    }
    unsafe fn sleepUntilDate_(date: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), sleepUntilDate: date)
    }
    unsafe fn sleepForTimeInterval_(ti: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), sleepForTimeInterval: ti)
    }
    unsafe fn exit()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), exit)
    }
    unsafe fn class_threadPriority() -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), threadPriority)
    }
    unsafe fn class_setThreadPriority_(p: f64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), setThreadPriority: p)
    }
    unsafe fn currentThread() -> NSThread
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), currentThread)
    }
    unsafe fn callStackReturnAddresses() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), callStackReturnAddresses)
    }
    unsafe fn callStackSymbols() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), callStackSymbols)
    }
    unsafe fn class_isMainThread() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), isMainThread)
    }
    unsafe fn mainThread() -> NSThread
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), mainThread)
    }
}
extern "C" {
    pub static NSWillBecomeMultiThreadedNotification: NSNotificationName;
}
extern "C" {
    pub static NSDidBecomeSingleThreadedNotification: NSNotificationName;
}
extern "C" {
    pub static NSThreadWillExitNotification: NSNotificationName;
}
impl NSObject_NSThreadPerformAdditions for NSObject {}
pub trait NSObject_NSThreadPerformAdditions: Sized + std::ops::Deref {
    unsafe fn performSelectorOnMainThread_withObject_waitUntilDone_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        arg: id,
        wait: BOOL,
        array: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorOnMainThread : aSelector withObject : arg waitUntilDone : wait modes : array)
    }
    unsafe fn performSelectorOnMainThread_withObject_waitUntilDone_(
        &self,
        aSelector: objc::runtime::Sel,
        arg: id,
        wait: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorOnMainThread : aSelector withObject : arg waitUntilDone : wait)
    }
    unsafe fn performSelector_onThread_withObject_waitUntilDone_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        thr: NSThread,
        arg: id,
        wait: BOOL,
        array: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector onThread : thr withObject : arg waitUntilDone : wait modes : array)
    }
    unsafe fn performSelector_onThread_withObject_waitUntilDone_(
        &self,
        aSelector: objc::runtime::Sel,
        thr: NSThread,
        arg: id,
        wait: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector onThread : thr withObject : arg waitUntilDone : wait)
    }
    unsafe fn performSelectorInBackground_withObject_(&self, aSelector: objc::runtime::Sel, arg: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorInBackground : aSelector withObject : arg)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimeZone), alloc) })
    }
}
impl PNSCopying for NSTimeZone {}
impl PNSSecureCoding for NSTimeZone {}
impl INSObject for NSTimeZone {}
impl PNSObject for NSTimeZone {}
impl From<NSTimeZone> for NSObject {
    fn from(child: NSTimeZone) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSTimeZone {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSTimeZone, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSTimeZone)) };
        if is_kind_of {
            Ok(NSTimeZone(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSTimeZone")
        }
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {
    unsafe fn secondsFromGMTForDate_(&self, aDate: NSDate) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secondsFromGMTForDate: aDate)
    }
    unsafe fn abbreviationForDate_(&self, aDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, abbreviationForDate: aDate)
    }
    unsafe fn isDaylightSavingTimeForDate_(&self, aDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDaylightSavingTimeForDate: aDate)
    }
    unsafe fn daylightSavingTimeOffsetForDate_(&self, aDate: NSDate) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, daylightSavingTimeOffsetForDate: aDate)
    }
    unsafe fn nextDaylightSavingTimeTransitionAfterDate_(&self, aDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nextDaylightSavingTimeTransitionAfterDate: aDate)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn data(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, data)
    }
}
impl NSTimeZone_NSExtendedTimeZone for NSTimeZone {}
pub trait NSTimeZone_NSExtendedTimeZone: Sized + std::ops::Deref {
    unsafe fn isEqualToTimeZone_(&self, aTimeZone: NSTimeZone) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToTimeZone: aTimeZone)
    }
    unsafe fn localizedName_locale_(&self, style: NSTimeZoneNameStyle, locale: NSLocale) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , localizedName : style locale : locale)
    }
    unsafe fn secondsFromGMT(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secondsFromGMT)
    }
    unsafe fn abbreviation(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, abbreviation)
    }
    unsafe fn isDaylightSavingTime(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDaylightSavingTime)
    }
    unsafe fn daylightSavingTimeOffset(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, daylightSavingTimeOffset)
    }
    unsafe fn nextDaylightSavingTimeTransition(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nextDaylightSavingTimeTransition)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn resetSystemTimeZone()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), resetSystemTimeZone)
    }
    unsafe fn abbreviationDictionary() -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), abbreviationDictionary)
    }
    unsafe fn systemTimeZone() -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), systemTimeZone)
    }
    unsafe fn defaultTimeZone() -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), defaultTimeZone)
    }
    unsafe fn setDefaultTimeZone_(defaultTimeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), setDefaultTimeZone: defaultTimeZone)
    }
    unsafe fn localTimeZone() -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), localTimeZone)
    }
    unsafe fn knownTimeZoneNames() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), knownTimeZoneNames)
    }
    unsafe fn setAbbreviationDictionary_(abbreviationDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSTimeZone),
            setAbbreviationDictionary: abbreviationDictionary
        )
    }
    unsafe fn timeZoneDataVersion() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), timeZoneDataVersion)
    }
}
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleStandard: NSTimeZoneNameStyle = 0;
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleShortStandard: NSTimeZoneNameStyle = 1;
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleDaylightSaving: NSTimeZoneNameStyle = 2;
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleShortDaylightSaving: NSTimeZoneNameStyle = 3;
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleGeneric: NSTimeZoneNameStyle = 4;
pub const NSTimeZoneNameStyle_NSTimeZoneNameStyleShortGeneric: NSTimeZoneNameStyle = 5;
pub type NSTimeZoneNameStyle = NSInteger;
impl NSTimeZone_NSTimeZoneCreation for NSTimeZone {}
pub trait NSTimeZone_NSTimeZoneCreation: Sized + std::ops::Deref {
    unsafe fn initWithName_(&self, tzName: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithName: tzName)
    }
    unsafe fn initWithName_data_(&self, tzName: NSString, aData: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithName : tzName data : aData)
    }
    unsafe fn timeZoneWithName_(tzName: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), timeZoneWithName: tzName)
    }
    unsafe fn timeZoneWithName_data_(tzName: NSString, aData: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimeZone) , timeZoneWithName : tzName data : aData)
    }
    unsafe fn timeZoneForSecondsFromGMT_(seconds: NSInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), timeZoneForSecondsFromGMT: seconds)
    }
    unsafe fn timeZoneWithAbbreviation_(abbreviation: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSTimeZone), timeZoneWithAbbreviation: abbreviation)
    }
}
extern "C" {
    pub static NSSystemTimeZoneDidChangeNotification: NSNotificationName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimer(pub id);
impl std::ops::Deref for NSTimer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimer {}
impl NSTimer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimer), alloc) })
    }
}
impl INSObject for NSTimer {}
impl PNSObject for NSTimer {}
impl From<NSTimer> for NSObject {
    fn from(child: NSTimer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSTimer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSTimer, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSTimer)) };
        if is_kind_of {
            Ok(NSTimer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSTimer")
        }
    }
}
impl INSTimer for NSTimer {}
pub trait INSTimer: Sized + std::ops::Deref {
    unsafe fn initWithFireDate_interval_repeats_block_(
        &self,
        date: NSDate,
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFireDate : date interval : interval repeats : repeats block : block)
    }
    unsafe fn initWithFireDate_interval_target_selector_userInfo_repeats_(
        &self,
        date: NSDate,
        ti: NSTimeInterval,
        t: id,
        s: objc::runtime::Sel,
        ui: id,
        rep: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFireDate : date interval : ti target : t selector : s userInfo : ui repeats : rep)
    }
    unsafe fn fire(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fire)
    }
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn fireDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fireDate)
    }
    unsafe fn setFireDate_(&self, fireDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFireDate: fireDate)
    }
    unsafe fn timeInterval(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeInterval)
    }
    unsafe fn tolerance(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tolerance)
    }
    unsafe fn setTolerance_(&self, tolerance: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTolerance: tolerance)
    }
    unsafe fn isValid(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValid)
    }
    unsafe fn userInfo(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn timerWithTimeInterval_invocation_repeats_(
        ti: NSTimeInterval,
        invocation: NSInvocation,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : ti invocation : invocation repeats : yesOrNo)
    }
    unsafe fn scheduledTimerWithTimeInterval_invocation_repeats_(
        ti: NSTimeInterval,
        invocation: NSInvocation,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : ti invocation : invocation repeats : yesOrNo)
    }
    unsafe fn timerWithTimeInterval_target_selector_userInfo_repeats_(
        ti: NSTimeInterval,
        aTarget: id,
        aSelector: objc::runtime::Sel,
        userInfo: id,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : ti target : aTarget selector : aSelector userInfo : userInfo repeats : yesOrNo)
    }
    unsafe fn scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
        ti: NSTimeInterval,
        aTarget: id,
        aSelector: objc::runtime::Sel,
        userInfo: id,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : ti target : aTarget selector : aSelector userInfo : userInfo repeats : yesOrNo)
    }
    unsafe fn timerWithTimeInterval_repeats_block_(
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : interval repeats : repeats block : block)
    }
    unsafe fn scheduledTimerWithTimeInterval_repeats_block_(
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : interval repeats : repeats block : block)
    }
}
pub trait PNSURLAuthenticationChallengeSender: Sized + std::ops::Deref {
    unsafe fn useCredential_forAuthenticationChallenge_(
        &self,
        credential: NSURLCredential,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , useCredential : credential forAuthenticationChallenge : challenge)
    }
    unsafe fn continueWithoutCredentialForAuthenticationChallenge_(
        &self,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            continueWithoutCredentialForAuthenticationChallenge: challenge
        )
    }
    unsafe fn cancelAuthenticationChallenge_(&self, challenge: NSURLAuthenticationChallenge)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelAuthenticationChallenge: challenge)
    }
    unsafe fn performDefaultHandlingForAuthenticationChallenge_(
        &self,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            performDefaultHandlingForAuthenticationChallenge: challenge
        )
    }
    unsafe fn rejectProtectionSpaceAndContinueWithChallenge_(
        &self,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            rejectProtectionSpaceAndContinueWithChallenge: challenge
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLAuthenticationChallengeInternal(pub id);
impl std::ops::Deref for NSURLAuthenticationChallengeInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLAuthenticationChallengeInternal {}
impl NSURLAuthenticationChallengeInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLAuthenticationChallengeInternal), alloc) })
    }
}
impl INSURLAuthenticationChallengeInternal for NSURLAuthenticationChallengeInternal {}
pub trait INSURLAuthenticationChallengeInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLAuthenticationChallenge(pub id);
impl std::ops::Deref for NSURLAuthenticationChallenge {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLAuthenticationChallenge {}
impl NSURLAuthenticationChallenge {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLAuthenticationChallenge), alloc) })
    }
}
impl PNSSecureCoding for NSURLAuthenticationChallenge {}
impl INSObject for NSURLAuthenticationChallenge {}
impl PNSObject for NSURLAuthenticationChallenge {}
impl From<NSURLAuthenticationChallenge> for NSObject {
    fn from(child: NSURLAuthenticationChallenge) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLAuthenticationChallenge {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLAuthenticationChallenge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLAuthenticationChallenge)) };
        if is_kind_of {
            Ok(NSURLAuthenticationChallenge(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLAuthenticationChallenge")
        }
    }
}
impl INSURLAuthenticationChallenge for NSURLAuthenticationChallenge {}
pub trait INSURLAuthenticationChallenge: Sized + std::ops::Deref {
    unsafe fn initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender_(
        &self,
        space: NSURLProtectionSpace,
        credential: NSURLCredential,
        previousFailureCount: NSInteger,
        response: NSURLResponse,
        error: NSError,
        sender: *mut u64,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithProtectionSpace : space proposedCredential : credential previousFailureCount : previousFailureCount failureResponse : response error : error sender : sender)
    }
    unsafe fn initWithAuthenticationChallenge_sender_(
        &self,
        challenge: NSURLAuthenticationChallenge,
        sender: *mut u64,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithAuthenticationChallenge : challenge sender : sender)
    }
    unsafe fn protectionSpace(&self) -> NSURLProtectionSpace
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, protectionSpace)
    }
    unsafe fn proposedCredential(&self) -> NSURLCredential
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, proposedCredential)
    }
    unsafe fn previousFailureCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, previousFailureCount)
    }
    unsafe fn failureResponse(&self) -> NSURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, failureResponse)
    }
    unsafe fn error(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, error)
    }
    unsafe fn sender(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sender)
    }
}
pub const NSURLCacheStoragePolicy_NSURLCacheStorageAllowed: NSURLCacheStoragePolicy = 0;
pub const NSURLCacheStoragePolicy_NSURLCacheStorageAllowedInMemoryOnly: NSURLCacheStoragePolicy = 1;
pub const NSURLCacheStoragePolicy_NSURLCacheStorageNotAllowed: NSURLCacheStoragePolicy = 2;
pub type NSURLCacheStoragePolicy = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCachedURLResponseInternal(pub id);
impl std::ops::Deref for NSCachedURLResponseInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCachedURLResponseInternal {}
impl NSCachedURLResponseInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCachedURLResponseInternal), alloc) })
    }
}
impl INSCachedURLResponseInternal for NSCachedURLResponseInternal {}
pub trait INSCachedURLResponseInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCachedURLResponse(pub id);
impl std::ops::Deref for NSCachedURLResponse {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCachedURLResponse {}
impl NSCachedURLResponse {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCachedURLResponse), alloc) })
    }
}
impl PNSSecureCoding for NSCachedURLResponse {}
impl PNSCopying for NSCachedURLResponse {}
impl INSObject for NSCachedURLResponse {}
impl PNSObject for NSCachedURLResponse {}
impl From<NSCachedURLResponse> for NSObject {
    fn from(child: NSCachedURLResponse) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCachedURLResponse {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCachedURLResponse, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSCachedURLResponse)) };
        if is_kind_of {
            Ok(NSCachedURLResponse(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCachedURLResponse")
        }
    }
}
impl INSCachedURLResponse for NSCachedURLResponse {}
pub trait INSCachedURLResponse: Sized + std::ops::Deref {
    unsafe fn initWithResponse_data_(&self, response: NSURLResponse, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithResponse : response data : data)
    }
    unsafe fn initWithResponse_data_userInfo_storagePolicy_(
        &self,
        response: NSURLResponse,
        data: NSData,
        userInfo: NSDictionary,
        storagePolicy: NSURLCacheStoragePolicy,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithResponse : response data : data userInfo : userInfo storagePolicy : storagePolicy)
    }
    unsafe fn response(&self) -> NSURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, response)
    }
    unsafe fn data(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, data)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn storagePolicy(&self) -> NSURLCacheStoragePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, storagePolicy)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCacheInternal(pub id);
impl std::ops::Deref for NSURLCacheInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCacheInternal {}
impl NSURLCacheInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCacheInternal), alloc) })
    }
}
impl INSURLCacheInternal for NSURLCacheInternal {}
pub trait INSURLCacheInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCache(pub id);
impl std::ops::Deref for NSURLCache {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCache {}
impl NSURLCache {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCache), alloc) })
    }
}
impl INSObject for NSURLCache {}
impl PNSObject for NSURLCache {}
impl From<NSURLCache> for NSObject {
    fn from(child: NSURLCache) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLCache {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLCache, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLCache)) };
        if is_kind_of {
            Ok(NSURLCache(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLCache")
        }
    }
}
impl INSURLCache for NSURLCache {}
pub trait INSURLCache: Sized + std::ops::Deref {
    unsafe fn initWithMemoryCapacity_diskCapacity_diskPath_(
        &self,
        memoryCapacity: NSUInteger,
        diskCapacity: NSUInteger,
        path: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMemoryCapacity : memoryCapacity diskCapacity : diskCapacity diskPath : path)
    }
    unsafe fn initWithMemoryCapacity_diskCapacity_directoryURL_(
        &self,
        memoryCapacity: NSUInteger,
        diskCapacity: NSUInteger,
        directoryURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMemoryCapacity : memoryCapacity diskCapacity : diskCapacity directoryURL : directoryURL)
    }
    unsafe fn cachedResponseForRequest_(&self, request: NSURLRequest) -> NSCachedURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cachedResponseForRequest: request)
    }
    unsafe fn storeCachedResponse_forRequest_(
        &self,
        cachedResponse: NSCachedURLResponse,
        request: NSURLRequest,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , storeCachedResponse : cachedResponse forRequest : request)
    }
    unsafe fn removeCachedResponseForRequest_(&self, request: NSURLRequest)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCachedResponseForRequest: request)
    }
    unsafe fn removeAllCachedResponses(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllCachedResponses)
    }
    unsafe fn removeCachedResponsesSinceDate_(&self, date: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCachedResponsesSinceDate: date)
    }
    unsafe fn memoryCapacity(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, memoryCapacity)
    }
    unsafe fn setMemoryCapacity_(&self, memoryCapacity: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMemoryCapacity: memoryCapacity)
    }
    unsafe fn diskCapacity(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, diskCapacity)
    }
    unsafe fn setDiskCapacity_(&self, diskCapacity: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDiskCapacity: diskCapacity)
    }
    unsafe fn currentMemoryUsage(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentMemoryUsage)
    }
    unsafe fn currentDiskUsage(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentDiskUsage)
    }
    unsafe fn sharedURLCache() -> NSURLCache
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLCache), sharedURLCache)
    }
    unsafe fn setSharedURLCache_(sharedURLCache: NSURLCache)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLCache), setSharedURLCache: sharedURLCache)
    }
}
impl NSURLCache_NSURLSessionTaskAdditions for NSURLCache {}
pub trait NSURLCache_NSURLSessionTaskAdditions: Sized + std::ops::Deref {
    unsafe fn storeCachedResponse_forDataTask_(
        &self,
        cachedResponse: NSCachedURLResponse,
        dataTask: NSURLSessionDataTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , storeCachedResponse : cachedResponse forDataTask : dataTask)
    }
    unsafe fn getCachedResponseForDataTask_completionHandler_(
        &self,
        dataTask: NSURLSessionDataTask,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCachedResponseForDataTask : dataTask completionHandler : completionHandler)
    }
    unsafe fn removeCachedResponseForDataTask_(&self, dataTask: NSURLSessionDataTask)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCachedResponseForDataTask: dataTask)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLConnectionInternal(pub id);
impl std::ops::Deref for NSURLConnectionInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLConnectionInternal {}
impl NSURLConnectionInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLConnectionInternal), alloc) })
    }
}
impl INSURLConnectionInternal for NSURLConnectionInternal {}
pub trait INSURLConnectionInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLConnection(pub id);
impl std::ops::Deref for NSURLConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLConnection {}
impl NSURLConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLConnection), alloc) })
    }
}
impl INSObject for NSURLConnection {}
impl PNSObject for NSURLConnection {}
impl From<NSURLConnection> for NSObject {
    fn from(child: NSURLConnection) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLConnection {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLConnection, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLConnection)) };
        if is_kind_of {
            Ok(NSURLConnection(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLConnection")
        }
    }
}
impl INSURLConnection for NSURLConnection {}
pub trait INSURLConnection: Sized + std::ops::Deref {
    unsafe fn initWithRequest_delegate_startImmediately_(
        &self,
        request: NSURLRequest,
        delegate: id,
        startImmediately: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithRequest : request delegate : delegate startImmediately : startImmediately)
    }
    unsafe fn initWithRequest_delegate_(&self, request: NSURLRequest, delegate: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithRequest : request delegate : delegate)
    }
    unsafe fn start(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, start)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn unscheduleFromRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unscheduleFromRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn setDelegateQueue_(&self, queue: NSOperationQueue)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegateQueue: queue)
    }
    unsafe fn originalRequest(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, originalRequest)
    }
    unsafe fn currentRequest(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentRequest)
    }
    unsafe fn connectionWithRequest_delegate_(
        request: NSURLRequest,
        delegate: id,
    ) -> NSURLConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLConnection) , connectionWithRequest : request delegate : delegate)
    }
    unsafe fn canHandleRequest_(request: NSURLRequest) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLConnection), canHandleRequest: request)
    }
}
pub trait PNSURLConnectionDelegate: Sized + std::ops::Deref {
    unsafe fn connection_didFailWithError_(&self, connection: NSURLConnection, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didFailWithError : error)
    }
    unsafe fn connectionShouldUseCredentialStorage_(&self, connection: NSURLConnection) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectionShouldUseCredentialStorage: connection)
    }
    unsafe fn connection_willSendRequestForAuthenticationChallenge_(
        &self,
        connection: NSURLConnection,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection willSendRequestForAuthenticationChallenge : challenge)
    }
    unsafe fn connection_canAuthenticateAgainstProtectionSpace_(
        &self,
        connection: NSURLConnection,
        protectionSpace: NSURLProtectionSpace,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection canAuthenticateAgainstProtectionSpace : protectionSpace)
    }
    unsafe fn connection_didReceiveAuthenticationChallenge_(
        &self,
        connection: NSURLConnection,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didReceiveAuthenticationChallenge : challenge)
    }
    unsafe fn connection_didCancelAuthenticationChallenge_(
        &self,
        connection: NSURLConnection,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didCancelAuthenticationChallenge : challenge)
    }
}
pub trait PNSURLConnectionDataDelegate: Sized + std::ops::Deref {
    unsafe fn connection_willSendRequest_redirectResponse_(
        &self,
        connection: NSURLConnection,
        request: NSURLRequest,
        response: NSURLResponse,
    ) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection willSendRequest : request redirectResponse : response)
    }
    unsafe fn connection_didReceiveResponse_(
        &self,
        connection: NSURLConnection,
        response: NSURLResponse,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didReceiveResponse : response)
    }
    unsafe fn connection_didReceiveData_(&self, connection: NSURLConnection, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didReceiveData : data)
    }
    unsafe fn connection_needNewBodyStream_(
        &self,
        connection: NSURLConnection,
        request: NSURLRequest,
    ) -> NSInputStream
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection needNewBodyStream : request)
    }
    unsafe fn connection_didSendBodyData_totalBytesWritten_totalBytesExpectedToWrite_(
        &self,
        connection: NSURLConnection,
        bytesWritten: NSInteger,
        totalBytesWritten: NSInteger,
        totalBytesExpectedToWrite: NSInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didSendBodyData : bytesWritten totalBytesWritten : totalBytesWritten totalBytesExpectedToWrite : totalBytesExpectedToWrite)
    }
    unsafe fn connection_willCacheResponse_(
        &self,
        connection: NSURLConnection,
        cachedResponse: NSCachedURLResponse,
    ) -> NSCachedURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection willCacheResponse : cachedResponse)
    }
    unsafe fn connectionDidFinishLoading_(&self, connection: NSURLConnection)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectionDidFinishLoading: connection)
    }
}
pub trait PNSURLConnectionDownloadDelegate: Sized + std::ops::Deref {
    unsafe fn connection_didWriteData_totalBytesWritten_expectedTotalBytes_(
        &self,
        connection: NSURLConnection,
        bytesWritten: ::std::os::raw::c_longlong,
        totalBytesWritten: ::std::os::raw::c_longlong,
        expectedTotalBytes: ::std::os::raw::c_longlong,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connection : connection didWriteData : bytesWritten totalBytesWritten : totalBytesWritten expectedTotalBytes : expectedTotalBytes)
    }
    unsafe fn connectionDidResumeDownloading_totalBytesWritten_expectedTotalBytes_(
        &self,
        connection: NSURLConnection,
        totalBytesWritten: ::std::os::raw::c_longlong,
        expectedTotalBytes: ::std::os::raw::c_longlong,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connectionDidResumeDownloading : connection totalBytesWritten : totalBytesWritten expectedTotalBytes : expectedTotalBytes)
    }
    unsafe fn connectionDidFinishDownloading_destinationURL_(
        &self,
        connection: NSURLConnection,
        destinationURL: NSURL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connectionDidFinishDownloading : connection destinationURL : destinationURL)
    }
}
impl NSURLConnection_NSURLConnectionSynchronousLoading for NSURLConnection {}
pub trait NSURLConnection_NSURLConnectionSynchronousLoading: Sized + std::ops::Deref {
    unsafe fn sendSynchronousRequest_returningResponse_error_(
        request: NSURLRequest,
        response: *mut NSURLResponse,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLConnection) , sendSynchronousRequest : request returningResponse : response error : error)
    }
}
impl NSURLConnection_NSURLConnectionQueuedLoading for NSURLConnection {}
pub trait NSURLConnection_NSURLConnectionQueuedLoading: Sized + std::ops::Deref {
    unsafe fn sendAsynchronousRequest_queue_completionHandler_(
        request: NSURLRequest,
        queue: NSOperationQueue,
        handler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLConnection) , sendAsynchronousRequest : request queue : queue completionHandler : handler)
    }
}
pub const NSURLCredentialPersistence_NSURLCredentialPersistenceNone: NSURLCredentialPersistence = 0;
pub const NSURLCredentialPersistence_NSURLCredentialPersistenceForSession:
    NSURLCredentialPersistence = 1;
pub const NSURLCredentialPersistence_NSURLCredentialPersistencePermanent:
    NSURLCredentialPersistence = 2;
pub const NSURLCredentialPersistence_NSURLCredentialPersistenceSynchronizable:
    NSURLCredentialPersistence = 3;
pub type NSURLCredentialPersistence = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCredentialInternal(pub id);
impl std::ops::Deref for NSURLCredentialInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCredentialInternal {}
impl NSURLCredentialInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCredentialInternal), alloc) })
    }
}
impl INSURLCredentialInternal for NSURLCredentialInternal {}
pub trait INSURLCredentialInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCredential(pub id);
impl std::ops::Deref for NSURLCredential {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCredential {}
impl NSURLCredential {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCredential), alloc) })
    }
}
impl PNSSecureCoding for NSURLCredential {}
impl PNSCopying for NSURLCredential {}
impl INSObject for NSURLCredential {}
impl PNSObject for NSURLCredential {}
impl From<NSURLCredential> for NSObject {
    fn from(child: NSURLCredential) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLCredential {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLCredential, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLCredential)) };
        if is_kind_of {
            Ok(NSURLCredential(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLCredential")
        }
    }
}
impl INSURLCredential for NSURLCredential {}
pub trait INSURLCredential: Sized + std::ops::Deref {
    unsafe fn persistence(&self) -> NSURLCredentialPersistence
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, persistence)
    }
}
impl NSURLCredential_NSInternetPassword for NSURLCredential {}
pub trait NSURLCredential_NSInternetPassword: Sized + std::ops::Deref {
    unsafe fn initWithUser_password_persistence_(
        &self,
        user: NSString,
        password: NSString,
        persistence: NSURLCredentialPersistence,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithUser : user password : password persistence : persistence)
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, user)
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, password)
    }
    unsafe fn hasPassword(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasPassword)
    }
    unsafe fn credentialWithUser_password_persistence_(
        user: NSString,
        password: NSString,
        persistence: NSURLCredentialPersistence,
    ) -> NSURLCredential
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLCredential) , credentialWithUser : user password : password persistence : persistence)
    }
}
impl NSURLCredential_NSClientCertificate for NSURLCredential {}
pub trait NSURLCredential_NSClientCertificate: Sized + std::ops::Deref {
    unsafe fn initWithIdentity_certificates_persistence_(
        &self,
        identity: SecIdentityRef,
        certArray: NSArray,
        persistence: NSURLCredentialPersistence,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithIdentity : identity certificates : certArray persistence : persistence)
    }
    unsafe fn identity(&self) -> SecIdentityRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, identity)
    }
    unsafe fn certificates(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, certificates)
    }
    unsafe fn credentialWithIdentity_certificates_persistence_(
        identity: SecIdentityRef,
        certArray: NSArray,
        persistence: NSURLCredentialPersistence,
    ) -> NSURLCredential
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLCredential) , credentialWithIdentity : identity certificates : certArray persistence : persistence)
    }
}
impl NSURLCredential_NSServerTrust for NSURLCredential {}
pub trait NSURLCredential_NSServerTrust: Sized + std::ops::Deref {
    unsafe fn initWithTrust_(&self, trust: SecTrustRef) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTrust: trust)
    }
    unsafe fn credentialForTrust_(trust: SecTrustRef) -> NSURLCredential
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLCredential), credentialForTrust: trust)
    }
}
extern "C" {
    pub static NSURLProtectionSpaceHTTP: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceHTTPS: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceFTP: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceHTTPProxy: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceHTTPSProxy: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceFTPProxy: NSString;
}
extern "C" {
    pub static NSURLProtectionSpaceSOCKSProxy: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodDefault: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodHTTPBasic: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodHTTPDigest: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodHTMLForm: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodNTLM: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodNegotiate: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodClientCertificate: NSString;
}
extern "C" {
    pub static NSURLAuthenticationMethodServerTrust: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLProtectionSpaceInternal(pub id);
impl std::ops::Deref for NSURLProtectionSpaceInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLProtectionSpaceInternal {}
impl NSURLProtectionSpaceInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLProtectionSpaceInternal), alloc) })
    }
}
impl INSURLProtectionSpaceInternal for NSURLProtectionSpaceInternal {}
pub trait INSURLProtectionSpaceInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLProtectionSpace(pub id);
impl std::ops::Deref for NSURLProtectionSpace {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLProtectionSpace {}
impl NSURLProtectionSpace {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLProtectionSpace), alloc) })
    }
}
impl PNSSecureCoding for NSURLProtectionSpace {}
impl PNSCopying for NSURLProtectionSpace {}
impl INSObject for NSURLProtectionSpace {}
impl PNSObject for NSURLProtectionSpace {}
impl From<NSURLProtectionSpace> for NSObject {
    fn from(child: NSURLProtectionSpace) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLProtectionSpace {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLProtectionSpace, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLProtectionSpace)) };
        if is_kind_of {
            Ok(NSURLProtectionSpace(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLProtectionSpace")
        }
    }
}
impl INSURLProtectionSpace for NSURLProtectionSpace {}
pub trait INSURLProtectionSpace: Sized + std::ops::Deref {
    unsafe fn initWithHost_port_protocol_realm_authenticationMethod_(
        &self,
        host: NSString,
        port: NSInteger,
        protocol: NSString,
        realm: NSString,
        authenticationMethod: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithHost : host port : port protocol : protocol realm : realm authenticationMethod : authenticationMethod)
    }
    unsafe fn initWithProxyHost_port_type_realm_authenticationMethod_(
        &self,
        host: NSString,
        port: NSInteger,
        type_: NSString,
        realm: NSString,
        authenticationMethod: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithProxyHost : host port : port type : type_ realm : realm authenticationMethod : authenticationMethod)
    }
    unsafe fn realm(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, realm)
    }
    unsafe fn receivesCredentialSecurely(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, receivesCredentialSecurely)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, host)
    }
    unsafe fn port(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn proxyType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, proxyType)
    }
    unsafe fn protocol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, protocol)
    }
    unsafe fn authenticationMethod(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, authenticationMethod)
    }
}
impl NSURLProtectionSpace_NSClientCertificateSpace for NSURLProtectionSpace {}
pub trait NSURLProtectionSpace_NSClientCertificateSpace: Sized + std::ops::Deref {
    unsafe fn distinguishedNames(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, distinguishedNames)
    }
}
impl NSURLProtectionSpace_NSServerTrustValidationSpace for NSURLProtectionSpace {}
pub trait NSURLProtectionSpace_NSServerTrustValidationSpace: Sized + std::ops::Deref {
    unsafe fn serverTrust(&self) -> SecTrustRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, serverTrust)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCredentialStorageInternal(pub id);
impl std::ops::Deref for NSURLCredentialStorageInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCredentialStorageInternal {}
impl NSURLCredentialStorageInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCredentialStorageInternal), alloc) })
    }
}
impl INSURLCredentialStorageInternal for NSURLCredentialStorageInternal {}
pub trait INSURLCredentialStorageInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLCredentialStorage(pub id);
impl std::ops::Deref for NSURLCredentialStorage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLCredentialStorage {}
impl NSURLCredentialStorage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLCredentialStorage), alloc) })
    }
}
impl INSObject for NSURLCredentialStorage {}
impl PNSObject for NSURLCredentialStorage {}
impl From<NSURLCredentialStorage> for NSObject {
    fn from(child: NSURLCredentialStorage) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLCredentialStorage {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLCredentialStorage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLCredentialStorage)) };
        if is_kind_of {
            Ok(NSURLCredentialStorage(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLCredentialStorage")
        }
    }
}
impl INSURLCredentialStorage for NSURLCredentialStorage {}
pub trait INSURLCredentialStorage: Sized + std::ops::Deref {
    unsafe fn credentialsForProtectionSpace_(&self, space: NSURLProtectionSpace) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, credentialsForProtectionSpace: space)
    }
    unsafe fn setCredential_forProtectionSpace_(
        &self,
        credential: NSURLCredential,
        space: NSURLProtectionSpace,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setCredential : credential forProtectionSpace : space)
    }
    unsafe fn removeCredential_forProtectionSpace_(
        &self,
        credential: NSURLCredential,
        space: NSURLProtectionSpace,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeCredential : credential forProtectionSpace : space)
    }
    unsafe fn removeCredential_forProtectionSpace_options_(
        &self,
        credential: NSURLCredential,
        space: NSURLProtectionSpace,
        options: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeCredential : credential forProtectionSpace : space options : options)
    }
    unsafe fn defaultCredentialForProtectionSpace_(
        &self,
        space: NSURLProtectionSpace,
    ) -> NSURLCredential
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, defaultCredentialForProtectionSpace: space)
    }
    unsafe fn setDefaultCredential_forProtectionSpace_(
        &self,
        credential: NSURLCredential,
        space: NSURLProtectionSpace,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDefaultCredential : credential forProtectionSpace : space)
    }
    unsafe fn allCredentials(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allCredentials)
    }
    unsafe fn sharedCredentialStorage() -> NSURLCredentialStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLCredentialStorage), sharedCredentialStorage)
    }
}
impl NSURLCredentialStorage_NSURLSessionTaskAdditions for NSURLCredentialStorage {}
pub trait NSURLCredentialStorage_NSURLSessionTaskAdditions: Sized + std::ops::Deref {
    unsafe fn getCredentialsForProtectionSpace_task_completionHandler_(
        &self,
        protectionSpace: NSURLProtectionSpace,
        task: NSURLSessionTask,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getCredentialsForProtectionSpace : protectionSpace task : task completionHandler : completionHandler)
    }
    unsafe fn setCredential_forProtectionSpace_task_(
        &self,
        credential: NSURLCredential,
        protectionSpace: NSURLProtectionSpace,
        task: NSURLSessionTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setCredential : credential forProtectionSpace : protectionSpace task : task)
    }
    unsafe fn removeCredential_forProtectionSpace_options_task_(
        &self,
        credential: NSURLCredential,
        protectionSpace: NSURLProtectionSpace,
        options: NSDictionary,
        task: NSURLSessionTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeCredential : credential forProtectionSpace : protectionSpace options : options task : task)
    }
    unsafe fn getDefaultCredentialForProtectionSpace_task_completionHandler_(
        &self,
        space: NSURLProtectionSpace,
        task: NSURLSessionTask,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getDefaultCredentialForProtectionSpace : space task : task completionHandler : completionHandler)
    }
    unsafe fn setDefaultCredential_forProtectionSpace_task_(
        &self,
        credential: NSURLCredential,
        protectionSpace: NSURLProtectionSpace,
        task: NSURLSessionTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDefaultCredential : credential forProtectionSpace : protectionSpace task : task)
    }
}
extern "C" {
    pub static NSURLCredentialStorageChangedNotification: NSNotificationName;
}
extern "C" {
    pub static NSURLCredentialStorageRemoveSynchronizableCredentials: NSString;
}
extern "C" {
    pub static NSURLErrorDomain: NSErrorDomain;
}
extern "C" {
    pub static NSURLErrorFailingURLErrorKey: NSString;
}
extern "C" {
    pub static NSURLErrorFailingURLStringErrorKey: NSString;
}
extern "C" {
    pub static NSErrorFailingURLStringKey: NSString;
}
extern "C" {
    pub static NSURLErrorFailingURLPeerTrustErrorKey: NSString;
}
extern "C" {
    pub static NSURLErrorBackgroundTaskCancelledReasonKey: NSString;
}
pub const NSURLErrorCancelledReasonUserForceQuitApplication: _bindgen_ty_54 = 0;
pub const NSURLErrorCancelledReasonBackgroundUpdatesDisabled: _bindgen_ty_54 = 1;
pub const NSURLErrorCancelledReasonInsufficientSystemResources: _bindgen_ty_54 = 2;
pub type _bindgen_ty_54 = NSInteger;
extern "C" {
    pub static NSURLErrorNetworkUnavailableReasonKey: NSErrorUserInfoKey;
}
pub const NSURLErrorNetworkUnavailableReason_NSURLErrorNetworkUnavailableReasonCellular:
    NSURLErrorNetworkUnavailableReason = 0;
pub const NSURLErrorNetworkUnavailableReason_NSURLErrorNetworkUnavailableReasonExpensive:
    NSURLErrorNetworkUnavailableReason = 1;
pub const NSURLErrorNetworkUnavailableReason_NSURLErrorNetworkUnavailableReasonConstrained:
    NSURLErrorNetworkUnavailableReason = 2;
pub type NSURLErrorNetworkUnavailableReason = NSInteger;
pub const NSURLErrorUnknown: _bindgen_ty_55 = -1;
pub const NSURLErrorCancelled: _bindgen_ty_55 = -999;
pub const NSURLErrorBadURL: _bindgen_ty_55 = -1000;
pub const NSURLErrorTimedOut: _bindgen_ty_55 = -1001;
pub const NSURLErrorUnsupportedURL: _bindgen_ty_55 = -1002;
pub const NSURLErrorCannotFindHost: _bindgen_ty_55 = -1003;
pub const NSURLErrorCannotConnectToHost: _bindgen_ty_55 = -1004;
pub const NSURLErrorNetworkConnectionLost: _bindgen_ty_55 = -1005;
pub const NSURLErrorDNSLookupFailed: _bindgen_ty_55 = -1006;
pub const NSURLErrorHTTPTooManyRedirects: _bindgen_ty_55 = -1007;
pub const NSURLErrorResourceUnavailable: _bindgen_ty_55 = -1008;
pub const NSURLErrorNotConnectedToInternet: _bindgen_ty_55 = -1009;
pub const NSURLErrorRedirectToNonExistentLocation: _bindgen_ty_55 = -1010;
pub const NSURLErrorBadServerResponse: _bindgen_ty_55 = -1011;
pub const NSURLErrorUserCancelledAuthentication: _bindgen_ty_55 = -1012;
pub const NSURLErrorUserAuthenticationRequired: _bindgen_ty_55 = -1013;
pub const NSURLErrorZeroByteResource: _bindgen_ty_55 = -1014;
pub const NSURLErrorCannotDecodeRawData: _bindgen_ty_55 = -1015;
pub const NSURLErrorCannotDecodeContentData: _bindgen_ty_55 = -1016;
pub const NSURLErrorCannotParseResponse: _bindgen_ty_55 = -1017;
pub const NSURLErrorAppTransportSecurityRequiresSecureConnection: _bindgen_ty_55 = -1022;
pub const NSURLErrorFileDoesNotExist: _bindgen_ty_55 = -1100;
pub const NSURLErrorFileIsDirectory: _bindgen_ty_55 = -1101;
pub const NSURLErrorNoPermissionsToReadFile: _bindgen_ty_55 = -1102;
pub const NSURLErrorDataLengthExceedsMaximum: _bindgen_ty_55 = -1103;
pub const NSURLErrorFileOutsideSafeArea: _bindgen_ty_55 = -1104;
pub const NSURLErrorSecureConnectionFailed: _bindgen_ty_55 = -1200;
pub const NSURLErrorServerCertificateHasBadDate: _bindgen_ty_55 = -1201;
pub const NSURLErrorServerCertificateUntrusted: _bindgen_ty_55 = -1202;
pub const NSURLErrorServerCertificateHasUnknownRoot: _bindgen_ty_55 = -1203;
pub const NSURLErrorServerCertificateNotYetValid: _bindgen_ty_55 = -1204;
pub const NSURLErrorClientCertificateRejected: _bindgen_ty_55 = -1205;
pub const NSURLErrorClientCertificateRequired: _bindgen_ty_55 = -1206;
pub const NSURLErrorCannotLoadFromNetwork: _bindgen_ty_55 = -2000;
pub const NSURLErrorCannotCreateFile: _bindgen_ty_55 = -3000;
pub const NSURLErrorCannotOpenFile: _bindgen_ty_55 = -3001;
pub const NSURLErrorCannotCloseFile: _bindgen_ty_55 = -3002;
pub const NSURLErrorCannotWriteToFile: _bindgen_ty_55 = -3003;
pub const NSURLErrorCannotRemoveFile: _bindgen_ty_55 = -3004;
pub const NSURLErrorCannotMoveFile: _bindgen_ty_55 = -3005;
pub const NSURLErrorDownloadDecodingFailedMidStream: _bindgen_ty_55 = -3006;
pub const NSURLErrorDownloadDecodingFailedToComplete: _bindgen_ty_55 = -3007;
pub const NSURLErrorInternationalRoamingOff: _bindgen_ty_55 = -1018;
pub const NSURLErrorCallIsActive: _bindgen_ty_55 = -1019;
pub const NSURLErrorDataNotAllowed: _bindgen_ty_55 = -1020;
pub const NSURLErrorRequestBodyStreamExhausted: _bindgen_ty_55 = -1021;
pub const NSURLErrorBackgroundSessionRequiresSharedContainer: _bindgen_ty_55 = -995;
pub const NSURLErrorBackgroundSessionInUseByAnotherProcess: _bindgen_ty_55 = -996;
pub const NSURLErrorBackgroundSessionWasDisconnected: _bindgen_ty_55 = -997;
pub type _bindgen_ty_55 = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLProtocolInternal(pub id);
impl std::ops::Deref for NSURLProtocolInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLProtocolInternal {}
impl NSURLProtocolInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLProtocolInternal), alloc) })
    }
}
impl INSURLProtocolInternal for NSURLProtocolInternal {}
pub trait INSURLProtocolInternal: Sized + std::ops::Deref {}
pub trait PNSURLProtocolClient: Sized + std::ops::Deref {
    unsafe fn URLProtocol_wasRedirectedToRequest_redirectResponse_(
        &self,
        protocol: NSURLProtocol,
        request: NSURLRequest,
        redirectResponse: NSURLResponse,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol wasRedirectedToRequest : request redirectResponse : redirectResponse)
    }
    unsafe fn URLProtocol_cachedResponseIsValid_(
        &self,
        protocol: NSURLProtocol,
        cachedResponse: NSCachedURLResponse,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol cachedResponseIsValid : cachedResponse)
    }
    unsafe fn URLProtocol_didReceiveResponse_cacheStoragePolicy_(
        &self,
        protocol: NSURLProtocol,
        response: NSURLResponse,
        policy: NSURLCacheStoragePolicy,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol didReceiveResponse : response cacheStoragePolicy : policy)
    }
    unsafe fn URLProtocol_didLoadData_(&self, protocol: NSURLProtocol, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol didLoadData : data)
    }
    unsafe fn URLProtocolDidFinishLoading_(&self, protocol: NSURLProtocol)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLProtocolDidFinishLoading: protocol)
    }
    unsafe fn URLProtocol_didFailWithError_(&self, protocol: NSURLProtocol, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol didFailWithError : error)
    }
    unsafe fn URLProtocol_didReceiveAuthenticationChallenge_(
        &self,
        protocol: NSURLProtocol,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol didReceiveAuthenticationChallenge : challenge)
    }
    unsafe fn URLProtocol_didCancelAuthenticationChallenge_(
        &self,
        protocol: NSURLProtocol,
        challenge: NSURLAuthenticationChallenge,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLProtocol : protocol didCancelAuthenticationChallenge : challenge)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLProtocol(pub id);
impl std::ops::Deref for NSURLProtocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLProtocol {}
impl NSURLProtocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLProtocol), alloc) })
    }
}
impl INSObject for NSURLProtocol {}
impl PNSObject for NSURLProtocol {}
impl From<NSURLProtocol> for NSObject {
    fn from(child: NSURLProtocol) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLProtocol {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLProtocol, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLProtocol)) };
        if is_kind_of {
            Ok(NSURLProtocol(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLProtocol")
        }
    }
}
impl INSURLProtocol for NSURLProtocol {}
pub trait INSURLProtocol: Sized + std::ops::Deref {
    unsafe fn initWithRequest_cachedResponse_client_(
        &self,
        request: NSURLRequest,
        cachedResponse: NSCachedURLResponse,
        client: *mut u64,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithRequest : request cachedResponse : cachedResponse client : client)
    }
    unsafe fn startLoading(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startLoading)
    }
    unsafe fn stopLoading(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopLoading)
    }
    unsafe fn client(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, client)
    }
    unsafe fn request(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, request)
    }
    unsafe fn cachedResponse(&self) -> NSCachedURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cachedResponse)
    }
    unsafe fn canInitWithRequest_(request: NSURLRequest) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLProtocol), canInitWithRequest: request)
    }
    unsafe fn canonicalRequestForRequest_(request: NSURLRequest) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLProtocol), canonicalRequestForRequest: request)
    }
    unsafe fn requestIsCacheEquivalent_toRequest_(a: NSURLRequest, b: NSURLRequest) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLProtocol) , requestIsCacheEquivalent : a toRequest : b)
    }
    unsafe fn propertyForKey_inRequest_(key: NSString, request: NSURLRequest) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLProtocol) , propertyForKey : key inRequest : request)
    }
    unsafe fn setProperty_forKey_inRequest_(value: id, key: NSString, request: NSMutableURLRequest)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLProtocol) , setProperty : value forKey : key inRequest : request)
    }
    unsafe fn removePropertyForKey_inRequest_(key: NSString, request: NSMutableURLRequest)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLProtocol) , removePropertyForKey : key inRequest : request)
    }
    unsafe fn registerClass_(protocolClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLProtocol), registerClass: protocolClass)
    }
    unsafe fn unregisterClass_(protocolClass: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLProtocol), unregisterClass: protocolClass)
    }
}
impl NSURLProtocol_NSURLSessionTaskAdditions for NSURLProtocol {}
pub trait NSURLProtocol_NSURLSessionTaskAdditions: Sized + std::ops::Deref {
    unsafe fn initWithTask_cachedResponse_client_(
        &self,
        task: NSURLSessionTask,
        cachedResponse: NSCachedURLResponse,
        client: *mut u64,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTask : task cachedResponse : cachedResponse client : client)
    }
    unsafe fn task(&self) -> NSURLSessionTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, task)
    }
    unsafe fn canInitWithTask_(task: NSURLSessionTask) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLProtocol), canInitWithTask: task)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLRequestInternal(pub id);
impl std::ops::Deref for NSURLRequestInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLRequestInternal {}
impl NSURLRequestInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLRequestInternal), alloc) })
    }
}
impl INSURLRequestInternal for NSURLRequestInternal {}
pub trait INSURLRequestInternal: Sized + std::ops::Deref {}
pub const NSURLRequestCachePolicy_NSURLRequestUseProtocolCachePolicy: NSURLRequestCachePolicy = 0;
pub const NSURLRequestCachePolicy_NSURLRequestReloadIgnoringLocalCacheData:
    NSURLRequestCachePolicy = 1;
pub const NSURLRequestCachePolicy_NSURLRequestReloadIgnoringLocalAndRemoteCacheData:
    NSURLRequestCachePolicy = 4;
pub const NSURLRequestCachePolicy_NSURLRequestReloadIgnoringCacheData: NSURLRequestCachePolicy = 1;
pub const NSURLRequestCachePolicy_NSURLRequestReturnCacheDataElseLoad: NSURLRequestCachePolicy = 2;
pub const NSURLRequestCachePolicy_NSURLRequestReturnCacheDataDontLoad: NSURLRequestCachePolicy = 3;
pub const NSURLRequestCachePolicy_NSURLRequestReloadRevalidatingCacheData: NSURLRequestCachePolicy =
    5;
pub type NSURLRequestCachePolicy = NSUInteger;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeDefault:
    NSURLRequestNetworkServiceType = 0;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeVoIP:
    NSURLRequestNetworkServiceType = 1;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeVideo:
    NSURLRequestNetworkServiceType = 2;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeBackground:
    NSURLRequestNetworkServiceType = 3;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeVoice:
    NSURLRequestNetworkServiceType = 4;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeResponsiveData:
    NSURLRequestNetworkServiceType = 6;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeAVStreaming:
    NSURLRequestNetworkServiceType = 8;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeResponsiveAV:
    NSURLRequestNetworkServiceType = 9;
pub const NSURLRequestNetworkServiceType_NSURLNetworkServiceTypeCallSignaling:
    NSURLRequestNetworkServiceType = 11;
pub type NSURLRequestNetworkServiceType = NSUInteger;
pub const NSURLRequestAttribution_NSURLRequestAttributionDeveloper: NSURLRequestAttribution = 0;
pub const NSURLRequestAttribution_NSURLRequestAttributionUser: NSURLRequestAttribution = 1;
pub type NSURLRequestAttribution = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLRequest(pub id);
impl std::ops::Deref for NSURLRequest {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLRequest {}
impl NSURLRequest {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLRequest), alloc) })
    }
}
impl PNSSecureCoding for NSURLRequest {}
impl PNSCopying for NSURLRequest {}
impl PNSMutableCopying for NSURLRequest {}
impl INSObject for NSURLRequest {}
impl PNSObject for NSURLRequest {}
impl From<NSURLRequest> for NSObject {
    fn from(child: NSURLRequest) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLRequest {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLRequest, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLRequest)) };
        if is_kind_of {
            Ok(NSURLRequest(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLRequest")
        }
    }
}
impl INSURLRequest for NSURLRequest {}
pub trait INSURLRequest: Sized + std::ops::Deref {
    unsafe fn initWithURL_(&self, URL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithURL: URL)
    }
    unsafe fn initWithURL_cachePolicy_timeoutInterval_(
        &self,
        URL: NSURL,
        cachePolicy: NSURLRequestCachePolicy,
        timeoutInterval: NSTimeInterval,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : URL cachePolicy : cachePolicy timeoutInterval : timeoutInterval)
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn cachePolicy(&self) -> NSURLRequestCachePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cachePolicy)
    }
    unsafe fn timeoutInterval(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeoutInterval)
    }
    unsafe fn mainDocumentURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mainDocumentURL)
    }
    unsafe fn networkServiceType(&self) -> NSURLRequestNetworkServiceType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkServiceType)
    }
    unsafe fn allowsCellularAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsCellularAccess)
    }
    unsafe fn allowsExpensiveNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsExpensiveNetworkAccess)
    }
    unsafe fn allowsConstrainedNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsConstrainedNetworkAccess)
    }
    unsafe fn assumesHTTP3Capable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, assumesHTTP3Capable)
    }
    unsafe fn attribution(&self) -> NSURLRequestAttribution
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attribution)
    }
    unsafe fn requiresDNSSECValidation(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresDNSSECValidation)
    }
    unsafe fn requestWithURL_(URL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLRequest), requestWithURL: URL)
    }
    unsafe fn requestWithURL_cachePolicy_timeoutInterval_(
        URL: NSURL,
        cachePolicy: NSURLRequestCachePolicy,
        timeoutInterval: NSTimeInterval,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLRequest) , requestWithURL : URL cachePolicy : cachePolicy timeoutInterval : timeoutInterval)
    }
    unsafe fn supportsSecureCoding() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLRequest), supportsSecureCoding)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMutableURLRequest(pub id);
impl std::ops::Deref for NSMutableURLRequest {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableURLRequest {}
impl NSMutableURLRequest {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMutableURLRequest), alloc) })
    }
}
impl INSURLRequest for NSMutableURLRequest {}
impl PNSSecureCoding for NSMutableURLRequest {}
impl PNSCopying for NSMutableURLRequest {}
impl PNSMutableCopying for NSMutableURLRequest {}
impl From<NSMutableURLRequest> for NSURLRequest {
    fn from(child: NSMutableURLRequest) -> NSURLRequest {
        NSURLRequest(child.0)
    }
}
impl std::convert::TryFrom<NSURLRequest> for NSMutableURLRequest {
    type Error = &'static str;
    fn try_from(parent: NSURLRequest) -> Result<NSMutableURLRequest, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableURLRequest)) };
        if is_kind_of {
            Ok(NSMutableURLRequest(parent.0))
        } else {
            Err("This NSURLRequest cannot be downcasted to NSMutableURLRequest")
        }
    }
}
impl INSObject for NSMutableURLRequest {}
impl PNSObject for NSMutableURLRequest {}
impl From<NSMutableURLRequest> for NSObject {
    fn from(child: NSMutableURLRequest) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableURLRequest {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableURLRequest, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableURLRequest)) };
        if is_kind_of {
            Ok(NSMutableURLRequest(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableURLRequest")
        }
    }
}
impl INSMutableURLRequest for NSMutableURLRequest {}
pub trait INSMutableURLRequest: Sized + std::ops::Deref {
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn setURL_(&self, URL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setURL: URL)
    }
    unsafe fn cachePolicy(&self) -> NSURLRequestCachePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cachePolicy)
    }
    unsafe fn setCachePolicy_(&self, cachePolicy: NSURLRequestCachePolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCachePolicy: cachePolicy)
    }
    unsafe fn timeoutInterval(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeoutInterval)
    }
    unsafe fn setTimeoutInterval_(&self, timeoutInterval: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeoutInterval: timeoutInterval)
    }
    unsafe fn mainDocumentURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mainDocumentURL)
    }
    unsafe fn setMainDocumentURL_(&self, mainDocumentURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMainDocumentURL: mainDocumentURL)
    }
    unsafe fn networkServiceType(&self) -> NSURLRequestNetworkServiceType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkServiceType)
    }
    unsafe fn setNetworkServiceType_(&self, networkServiceType: NSURLRequestNetworkServiceType)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNetworkServiceType: networkServiceType)
    }
    unsafe fn allowsCellularAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsCellularAccess)
    }
    unsafe fn setAllowsCellularAccess_(&self, allowsCellularAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsCellularAccess: allowsCellularAccess)
    }
    unsafe fn allowsExpensiveNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsExpensiveNetworkAccess)
    }
    unsafe fn setAllowsExpensiveNetworkAccess_(&self, allowsExpensiveNetworkAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowsExpensiveNetworkAccess: allowsExpensiveNetworkAccess
        )
    }
    unsafe fn allowsConstrainedNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsConstrainedNetworkAccess)
    }
    unsafe fn setAllowsConstrainedNetworkAccess_(&self, allowsConstrainedNetworkAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowsConstrainedNetworkAccess: allowsConstrainedNetworkAccess
        )
    }
    unsafe fn assumesHTTP3Capable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, assumesHTTP3Capable)
    }
    unsafe fn setAssumesHTTP3Capable_(&self, assumesHTTP3Capable: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAssumesHTTP3Capable: assumesHTTP3Capable)
    }
    unsafe fn attribution(&self) -> NSURLRequestAttribution
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attribution)
    }
    unsafe fn setAttribution_(&self, attribution: NSURLRequestAttribution)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAttribution: attribution)
    }
    unsafe fn requiresDNSSECValidation(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresDNSSECValidation)
    }
    unsafe fn setRequiresDNSSECValidation_(&self, requiresDNSSECValidation: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiresDNSSECValidation: requiresDNSSECValidation)
    }
}
impl NSURLRequest_NSHTTPURLRequest for NSURLRequest {}
pub trait NSURLRequest_NSHTTPURLRequest: Sized + std::ops::Deref {
    unsafe fn valueForHTTPHeaderField_(&self, field: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForHTTPHeaderField: field)
    }
    unsafe fn HTTPMethod(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPMethod)
    }
    unsafe fn allHTTPHeaderFields(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allHTTPHeaderFields)
    }
    unsafe fn HTTPBody(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPBody)
    }
    unsafe fn HTTPBodyStream(&self) -> NSInputStream
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPBodyStream)
    }
    unsafe fn HTTPShouldHandleCookies(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldHandleCookies)
    }
    unsafe fn HTTPShouldUsePipelining(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldUsePipelining)
    }
}
impl NSMutableURLRequest_NSMutableHTTPURLRequest for NSMutableURLRequest {}
pub trait NSMutableURLRequest_NSMutableHTTPURLRequest: Sized + std::ops::Deref {
    unsafe fn setValue_forHTTPHeaderField_(&self, value: NSString, field: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forHTTPHeaderField : field)
    }
    unsafe fn addValue_forHTTPHeaderField_(&self, value: NSString, field: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addValue : value forHTTPHeaderField : field)
    }
    unsafe fn HTTPMethod(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPMethod)
    }
    unsafe fn setHTTPMethod_(&self, HTTPMethod: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPMethod: HTTPMethod)
    }
    unsafe fn allHTTPHeaderFields(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allHTTPHeaderFields)
    }
    unsafe fn setAllHTTPHeaderFields_(&self, allHTTPHeaderFields: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllHTTPHeaderFields: allHTTPHeaderFields)
    }
    unsafe fn HTTPBody(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPBody)
    }
    unsafe fn setHTTPBody_(&self, HTTPBody: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPBody: HTTPBody)
    }
    unsafe fn HTTPBodyStream(&self) -> NSInputStream
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPBodyStream)
    }
    unsafe fn setHTTPBodyStream_(&self, HTTPBodyStream: NSInputStream)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPBodyStream: HTTPBodyStream)
    }
    unsafe fn HTTPShouldHandleCookies(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldHandleCookies)
    }
    unsafe fn setHTTPShouldHandleCookies_(&self, HTTPShouldHandleCookies: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPShouldHandleCookies: HTTPShouldHandleCookies)
    }
    unsafe fn HTTPShouldUsePipelining(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldUsePipelining)
    }
    unsafe fn setHTTPShouldUsePipelining_(&self, HTTPShouldUsePipelining: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPShouldUsePipelining: HTTPShouldUsePipelining)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLResponseInternal(pub id);
impl std::ops::Deref for NSURLResponseInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLResponseInternal {}
impl NSURLResponseInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLResponseInternal), alloc) })
    }
}
impl INSURLResponseInternal for NSURLResponseInternal {}
pub trait INSURLResponseInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLResponse(pub id);
impl std::ops::Deref for NSURLResponse {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLResponse {}
impl NSURLResponse {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLResponse), alloc) })
    }
}
impl PNSSecureCoding for NSURLResponse {}
impl PNSCopying for NSURLResponse {}
impl INSObject for NSURLResponse {}
impl PNSObject for NSURLResponse {}
impl From<NSURLResponse> for NSObject {
    fn from(child: NSURLResponse) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLResponse {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLResponse, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLResponse)) };
        if is_kind_of {
            Ok(NSURLResponse(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLResponse")
        }
    }
}
impl INSURLResponse for NSURLResponse {}
pub trait INSURLResponse: Sized + std::ops::Deref {
    unsafe fn initWithURL_MIMEType_expectedContentLength_textEncodingName_(
        &self,
        URL: NSURL,
        MIMEType: NSString,
        length: NSInteger,
        name: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : URL MIMEType : MIMEType expectedContentLength : length textEncodingName : name)
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn MIMEType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, MIMEType)
    }
    unsafe fn expectedContentLength(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, expectedContentLength)
    }
    unsafe fn textEncodingName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, textEncodingName)
    }
    unsafe fn suggestedFilename(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suggestedFilename)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPURLResponseInternal(pub id);
impl std::ops::Deref for NSHTTPURLResponseInternal {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPURLResponseInternal {}
impl NSHTTPURLResponseInternal {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPURLResponseInternal), alloc) })
    }
}
impl INSHTTPURLResponseInternal for NSHTTPURLResponseInternal {}
pub trait INSHTTPURLResponseInternal: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSHTTPURLResponse(pub id);
impl std::ops::Deref for NSHTTPURLResponse {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSHTTPURLResponse {}
impl NSHTTPURLResponse {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSHTTPURLResponse), alloc) })
    }
}
impl INSURLResponse for NSHTTPURLResponse {}
impl PNSSecureCoding for NSHTTPURLResponse {}
impl PNSCopying for NSHTTPURLResponse {}
impl From<NSHTTPURLResponse> for NSURLResponse {
    fn from(child: NSHTTPURLResponse) -> NSURLResponse {
        NSURLResponse(child.0)
    }
}
impl std::convert::TryFrom<NSURLResponse> for NSHTTPURLResponse {
    type Error = &'static str;
    fn try_from(parent: NSURLResponse) -> Result<NSHTTPURLResponse, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSHTTPURLResponse)) };
        if is_kind_of {
            Ok(NSHTTPURLResponse(parent.0))
        } else {
            Err("This NSURLResponse cannot be downcasted to NSHTTPURLResponse")
        }
    }
}
impl INSObject for NSHTTPURLResponse {}
impl PNSObject for NSHTTPURLResponse {}
impl From<NSHTTPURLResponse> for NSObject {
    fn from(child: NSHTTPURLResponse) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSHTTPURLResponse {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSHTTPURLResponse, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSHTTPURLResponse)) };
        if is_kind_of {
            Ok(NSHTTPURLResponse(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSHTTPURLResponse")
        }
    }
}
impl INSHTTPURLResponse for NSHTTPURLResponse {}
pub trait INSHTTPURLResponse: Sized + std::ops::Deref {
    unsafe fn initWithURL_statusCode_HTTPVersion_headerFields_(
        &self,
        url: NSURL,
        statusCode: NSInteger,
        HTTPVersion: NSString,
        headerFields: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : url statusCode : statusCode HTTPVersion : HTTPVersion headerFields : headerFields)
    }
    unsafe fn valueForHTTPHeaderField_(&self, field: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForHTTPHeaderField: field)
    }
    unsafe fn statusCode(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, statusCode)
    }
    unsafe fn allHeaderFields(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allHeaderFields)
    }
    unsafe fn localizedStringForStatusCode_(statusCode: NSInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSHTTPURLResponse),
            localizedStringForStatusCode: statusCode
        )
    }
}
extern "C" {
    pub static NSGlobalDomain: NSString;
}
extern "C" {
    pub static NSArgumentDomain: NSString;
}
extern "C" {
    pub static NSRegistrationDomain: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUserDefaults(pub id);
impl std::ops::Deref for NSUserDefaults {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUserDefaults {}
impl NSUserDefaults {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUserDefaults), alloc) })
    }
}
impl INSObject for NSUserDefaults {}
impl PNSObject for NSUserDefaults {}
impl From<NSUserDefaults> for NSObject {
    fn from(child: NSUserDefaults) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUserDefaults {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUserDefaults, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUserDefaults)) };
        if is_kind_of {
            Ok(NSUserDefaults(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUserDefaults")
        }
    }
}
impl INSUserDefaults for NSUserDefaults {}
pub trait INSUserDefaults: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithSuiteName_(&self, suitename: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSuiteName: suitename)
    }
    unsafe fn initWithUser_(&self, username: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUser: username)
    }
    unsafe fn objectForKey_(&self, defaultName: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: defaultName)
    }
    unsafe fn setObject_forKey_(&self, value: id, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : value forKey : defaultName)
    }
    unsafe fn removeObjectForKey_(&self, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: defaultName)
    }
    unsafe fn stringForKey_(&self, defaultName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForKey: defaultName)
    }
    unsafe fn arrayForKey_(&self, defaultName: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arrayForKey: defaultName)
    }
    unsafe fn dictionaryForKey_(&self, defaultName: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryForKey: defaultName)
    }
    unsafe fn dataForKey_(&self, defaultName: NSString) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataForKey: defaultName)
    }
    unsafe fn stringArrayForKey_(&self, defaultName: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringArrayForKey: defaultName)
    }
    unsafe fn integerForKey_(&self, defaultName: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, integerForKey: defaultName)
    }
    unsafe fn floatForKey_(&self, defaultName: NSString) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, floatForKey: defaultName)
    }
    unsafe fn doubleForKey_(&self, defaultName: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleForKey: defaultName)
    }
    unsafe fn boolForKey_(&self, defaultName: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, boolForKey: defaultName)
    }
    unsafe fn URLForKey_(&self, defaultName: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLForKey: defaultName)
    }
    unsafe fn setInteger_forKey_(&self, value: NSInteger, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setInteger : value forKey : defaultName)
    }
    unsafe fn setFloat_forKey_(&self, value: f32, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setFloat : value forKey : defaultName)
    }
    unsafe fn setDouble_forKey_(&self, value: f64, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDouble : value forKey : defaultName)
    }
    unsafe fn setBool_forKey_(&self, value: BOOL, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setBool : value forKey : defaultName)
    }
    unsafe fn setURL_forKey_(&self, url: NSURL, defaultName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setURL : url forKey : defaultName)
    }
    unsafe fn registerDefaults_(&self, registrationDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, registerDefaults: registrationDictionary)
    }
    unsafe fn addSuiteNamed_(&self, suiteName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addSuiteNamed: suiteName)
    }
    unsafe fn removeSuiteNamed_(&self, suiteName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeSuiteNamed: suiteName)
    }
    unsafe fn dictionaryRepresentation(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryRepresentation)
    }
    unsafe fn volatileDomainForName_(&self, domainName: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, volatileDomainForName: domainName)
    }
    unsafe fn setVolatileDomain_forName_(&self, domain: NSDictionary, domainName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setVolatileDomain : domain forName : domainName)
    }
    unsafe fn removeVolatileDomainForName_(&self, domainName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeVolatileDomainForName: domainName)
    }
    unsafe fn persistentDomainNames(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, persistentDomainNames)
    }
    unsafe fn persistentDomainForName_(&self, domainName: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, persistentDomainForName: domainName)
    }
    unsafe fn setPersistentDomain_forName_(&self, domain: NSDictionary, domainName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setPersistentDomain : domain forName : domainName)
    }
    unsafe fn removePersistentDomainForName_(&self, domainName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removePersistentDomainForName: domainName)
    }
    unsafe fn synchronize(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronize)
    }
    unsafe fn objectIsForcedForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectIsForcedForKey: key)
    }
    unsafe fn objectIsForcedForKey_inDomain_(&self, key: NSString, domain: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , objectIsForcedForKey : key inDomain : domain)
    }
    unsafe fn volatileDomainNames(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, volatileDomainNames)
    }
    unsafe fn resetStandardUserDefaults()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUserDefaults), resetStandardUserDefaults)
    }
    unsafe fn standardUserDefaults() -> NSUserDefaults
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUserDefaults), standardUserDefaults)
    }
}
extern "C" {
    pub static NSUserDefaultsSizeLimitExceededNotification: NSNotificationName;
}
extern "C" {
    pub static NSUbiquitousUserDefaultsNoCloudAccountNotification: NSNotificationName;
}
extern "C" {
    pub static NSUbiquitousUserDefaultsDidChangeAccountsNotification: NSNotificationName;
}
extern "C" {
    pub static NSUbiquitousUserDefaultsCompletedInitialSyncNotification: NSNotificationName;
}
extern "C" {
    pub static NSUserDefaultsDidChangeNotification: NSNotificationName;
}
pub type NSValueTransformerName = NSString;
extern "C" {
    pub static NSNegateBooleanTransformerName: NSValueTransformerName;
}
extern "C" {
    pub static NSIsNilTransformerName: NSValueTransformerName;
}
extern "C" {
    pub static NSIsNotNilTransformerName: NSValueTransformerName;
}
extern "C" {
    pub static NSUnarchiveFromDataTransformerName: NSValueTransformerName;
}
extern "C" {
    pub static NSKeyedUnarchiveFromDataTransformerName: NSValueTransformerName;
}
extern "C" {
    pub static NSSecureUnarchiveFromDataTransformerName: NSValueTransformerName;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSValueTransformer(pub id);
impl std::ops::Deref for NSValueTransformer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSValueTransformer {}
impl NSValueTransformer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSValueTransformer), alloc) })
    }
}
impl INSObject for NSValueTransformer {}
impl PNSObject for NSValueTransformer {}
impl From<NSValueTransformer> for NSObject {
    fn from(child: NSValueTransformer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSValueTransformer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSValueTransformer, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSValueTransformer)) };
        if is_kind_of {
            Ok(NSValueTransformer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSValueTransformer")
        }
    }
}
impl INSValueTransformer for NSValueTransformer {}
pub trait INSValueTransformer: Sized + std::ops::Deref {
    unsafe fn transformedValue_(&self, value: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, transformedValue: value)
    }
    unsafe fn reverseTransformedValue_(&self, value: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reverseTransformedValue: value)
    }
    unsafe fn setValueTransformer_forName_(transformer: NSValueTransformer, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValueTransformer) , setValueTransformer : transformer forName : name)
    }
    unsafe fn valueTransformerForName_(name: NSString) -> NSValueTransformer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), valueTransformerForName: name)
    }
    unsafe fn valueTransformerNames() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), valueTransformerNames)
    }
    unsafe fn transformedValueClass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), transformedValueClass)
    }
    unsafe fn allowsReverseTransformation() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), allowsReverseTransformation)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSecureUnarchiveFromDataTransformer(pub id);
impl std::ops::Deref for NSSecureUnarchiveFromDataTransformer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSecureUnarchiveFromDataTransformer {}
impl NSSecureUnarchiveFromDataTransformer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSecureUnarchiveFromDataTransformer), alloc) })
    }
}
impl INSValueTransformer for NSSecureUnarchiveFromDataTransformer {}
impl From<NSSecureUnarchiveFromDataTransformer> for NSValueTransformer {
    fn from(child: NSSecureUnarchiveFromDataTransformer) -> NSValueTransformer {
        NSValueTransformer(child.0)
    }
}
impl std::convert::TryFrom<NSValueTransformer> for NSSecureUnarchiveFromDataTransformer {
    type Error = &'static str;
    fn try_from(
        parent: NSValueTransformer,
    ) -> Result<NSSecureUnarchiveFromDataTransformer, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSSecureUnarchiveFromDataTransformer)
            )
        };
        if is_kind_of {
            Ok(NSSecureUnarchiveFromDataTransformer(parent.0))
        } else {
            Err ("This NSValueTransformer cannot be downcasted to NSSecureUnarchiveFromDataTransformer")
        }
    }
}
impl INSObject for NSSecureUnarchiveFromDataTransformer {}
impl PNSObject for NSSecureUnarchiveFromDataTransformer {}
impl From<NSSecureUnarchiveFromDataTransformer> for NSObject {
    fn from(child: NSSecureUnarchiveFromDataTransformer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSecureUnarchiveFromDataTransformer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSecureUnarchiveFromDataTransformer, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSSecureUnarchiveFromDataTransformer)
            )
        };
        if is_kind_of {
            Ok(NSSecureUnarchiveFromDataTransformer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSecureUnarchiveFromDataTransformer")
        }
    }
}
impl INSSecureUnarchiveFromDataTransformer for NSSecureUnarchiveFromDataTransformer {}
pub trait INSSecureUnarchiveFromDataTransformer: Sized + std::ops::Deref {
    unsafe fn allowedTopLevelClasses() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSSecureUnarchiveFromDataTransformer),
            allowedTopLevelClasses
        )
    }
}
pub const NSXMLParserExternalEntityResolvingPolicy_NSXMLParserResolveExternalEntitiesNever:
    NSXMLParserExternalEntityResolvingPolicy = 0;
pub const NSXMLParserExternalEntityResolvingPolicy_NSXMLParserResolveExternalEntitiesNoNetwork:
    NSXMLParserExternalEntityResolvingPolicy = 1;
pub const NSXMLParserExternalEntityResolvingPolicy_NSXMLParserResolveExternalEntitiesSameOriginOnly : NSXMLParserExternalEntityResolvingPolicy = 2 ;
pub const NSXMLParserExternalEntityResolvingPolicy_NSXMLParserResolveExternalEntitiesAlways:
    NSXMLParserExternalEntityResolvingPolicy = 3;
pub type NSXMLParserExternalEntityResolvingPolicy = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXMLParser(pub id);
impl std::ops::Deref for NSXMLParser {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXMLParser {}
impl NSXMLParser {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXMLParser), alloc) })
    }
}
impl INSObject for NSXMLParser {}
impl PNSObject for NSXMLParser {}
impl From<NSXMLParser> for NSObject {
    fn from(child: NSXMLParser) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXMLParser {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXMLParser, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXMLParser)) };
        if is_kind_of {
            Ok(NSXMLParser(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXMLParser")
        }
    }
}
impl INSXMLParser for NSXMLParser {}
pub trait INSXMLParser: Sized + std::ops::Deref {
    unsafe fn initWithContentsOfURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithContentsOfURL: url)
    }
    unsafe fn initWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithData: data)
    }
    unsafe fn initWithStream_(&self, stream: NSInputStream) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithStream: stream)
    }
    unsafe fn parse(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parse)
    }
    unsafe fn abortParsing(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, abortParsing)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn shouldProcessNamespaces(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldProcessNamespaces)
    }
    unsafe fn setShouldProcessNamespaces_(&self, shouldProcessNamespaces: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShouldProcessNamespaces: shouldProcessNamespaces)
    }
    unsafe fn shouldReportNamespacePrefixes(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldReportNamespacePrefixes)
    }
    unsafe fn setShouldReportNamespacePrefixes_(&self, shouldReportNamespacePrefixes: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShouldReportNamespacePrefixes: shouldReportNamespacePrefixes
        )
    }
    unsafe fn externalEntityResolvingPolicy(&self) -> NSXMLParserExternalEntityResolvingPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, externalEntityResolvingPolicy)
    }
    unsafe fn setExternalEntityResolvingPolicy_(
        &self,
        externalEntityResolvingPolicy: NSXMLParserExternalEntityResolvingPolicy,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setExternalEntityResolvingPolicy: externalEntityResolvingPolicy
        )
    }
    unsafe fn allowedExternalEntityURLs(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowedExternalEntityURLs)
    }
    unsafe fn setAllowedExternalEntityURLs_(&self, allowedExternalEntityURLs: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowedExternalEntityURLs: allowedExternalEntityURLs
        )
    }
    unsafe fn parserError(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parserError)
    }
    unsafe fn shouldResolveExternalEntities(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldResolveExternalEntities)
    }
    unsafe fn setShouldResolveExternalEntities_(&self, shouldResolveExternalEntities: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShouldResolveExternalEntities: shouldResolveExternalEntities
        )
    }
}
impl NSXMLParser_NSXMLParserLocatorAdditions for NSXMLParser {}
pub trait NSXMLParser_NSXMLParserLocatorAdditions: Sized + std::ops::Deref {
    unsafe fn publicID(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, publicID)
    }
    unsafe fn systemID(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, systemID)
    }
    unsafe fn lineNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lineNumber)
    }
    unsafe fn columnNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, columnNumber)
    }
}
pub trait PNSXMLParserDelegate: Sized + std::ops::Deref {
    unsafe fn parserDidStartDocument_(&self, parser: NSXMLParser)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parserDidStartDocument: parser)
    }
    unsafe fn parserDidEndDocument_(&self, parser: NSXMLParser)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parserDidEndDocument: parser)
    }
    unsafe fn parser_foundNotationDeclarationWithName_publicID_systemID_(
        &self,
        parser: NSXMLParser,
        name: NSString,
        publicID: NSString,
        systemID: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundNotationDeclarationWithName : name publicID : publicID systemID : systemID)
    }
    unsafe fn parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName_(
        &self,
        parser: NSXMLParser,
        name: NSString,
        publicID: NSString,
        systemID: NSString,
        notationName: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundUnparsedEntityDeclarationWithName : name publicID : publicID systemID : systemID notationName : notationName)
    }
    unsafe fn parser_foundAttributeDeclarationWithName_forElement_type_defaultValue_(
        &self,
        parser: NSXMLParser,
        attributeName: NSString,
        elementName: NSString,
        type_: NSString,
        defaultValue: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundAttributeDeclarationWithName : attributeName forElement : elementName type : type_ defaultValue : defaultValue)
    }
    unsafe fn parser_foundElementDeclarationWithName_model_(
        &self,
        parser: NSXMLParser,
        elementName: NSString,
        model: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundElementDeclarationWithName : elementName model : model)
    }
    unsafe fn parser_foundInternalEntityDeclarationWithName_value_(
        &self,
        parser: NSXMLParser,
        name: NSString,
        value: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundInternalEntityDeclarationWithName : name value : value)
    }
    unsafe fn parser_foundExternalEntityDeclarationWithName_publicID_systemID_(
        &self,
        parser: NSXMLParser,
        name: NSString,
        publicID: NSString,
        systemID: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundExternalEntityDeclarationWithName : name publicID : publicID systemID : systemID)
    }
    unsafe fn parser_didStartElement_namespaceURI_qualifiedName_attributes_(
        &self,
        parser: NSXMLParser,
        elementName: NSString,
        namespaceURI: NSString,
        qName: NSString,
        attributeDict: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser didStartElement : elementName namespaceURI : namespaceURI qualifiedName : qName attributes : attributeDict)
    }
    unsafe fn parser_didEndElement_namespaceURI_qualifiedName_(
        &self,
        parser: NSXMLParser,
        elementName: NSString,
        namespaceURI: NSString,
        qName: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser didEndElement : elementName namespaceURI : namespaceURI qualifiedName : qName)
    }
    unsafe fn parser_didStartMappingPrefix_toURI_(
        &self,
        parser: NSXMLParser,
        prefix: NSString,
        namespaceURI: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser didStartMappingPrefix : prefix toURI : namespaceURI)
    }
    unsafe fn parser_didEndMappingPrefix_(&self, parser: NSXMLParser, prefix: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser didEndMappingPrefix : prefix)
    }
    unsafe fn parser_foundCharacters_(&self, parser: NSXMLParser, string: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundCharacters : string)
    }
    unsafe fn parser_foundIgnorableWhitespace_(
        &self,
        parser: NSXMLParser,
        whitespaceString: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundIgnorableWhitespace : whitespaceString)
    }
    unsafe fn parser_foundProcessingInstructionWithTarget_data_(
        &self,
        parser: NSXMLParser,
        target: NSString,
        data: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundProcessingInstructionWithTarget : target data : data)
    }
    unsafe fn parser_foundComment_(&self, parser: NSXMLParser, comment: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundComment : comment)
    }
    unsafe fn parser_foundCDATA_(&self, parser: NSXMLParser, CDATABlock: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser foundCDATA : CDATABlock)
    }
    unsafe fn parser_resolveExternalEntityName_systemID_(
        &self,
        parser: NSXMLParser,
        name: NSString,
        systemID: NSString,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser resolveExternalEntityName : name systemID : systemID)
    }
    unsafe fn parser_parseErrorOccurred_(&self, parser: NSXMLParser, parseError: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser parseErrorOccurred : parseError)
    }
    unsafe fn parser_validationErrorOccurred_(&self, parser: NSXMLParser, validationError: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parser : parser validationErrorOccurred : validationError)
    }
}
extern "C" {
    pub static NSXMLParserErrorDomain: NSErrorDomain;
}
pub const NSXMLParserError_NSXMLParserInternalError: NSXMLParserError = 1;
pub const NSXMLParserError_NSXMLParserOutOfMemoryError: NSXMLParserError = 2;
pub const NSXMLParserError_NSXMLParserDocumentStartError: NSXMLParserError = 3;
pub const NSXMLParserError_NSXMLParserEmptyDocumentError: NSXMLParserError = 4;
pub const NSXMLParserError_NSXMLParserPrematureDocumentEndError: NSXMLParserError = 5;
pub const NSXMLParserError_NSXMLParserInvalidHexCharacterRefError: NSXMLParserError = 6;
pub const NSXMLParserError_NSXMLParserInvalidDecimalCharacterRefError: NSXMLParserError = 7;
pub const NSXMLParserError_NSXMLParserInvalidCharacterRefError: NSXMLParserError = 8;
pub const NSXMLParserError_NSXMLParserInvalidCharacterError: NSXMLParserError = 9;
pub const NSXMLParserError_NSXMLParserCharacterRefAtEOFError: NSXMLParserError = 10;
pub const NSXMLParserError_NSXMLParserCharacterRefInPrologError: NSXMLParserError = 11;
pub const NSXMLParserError_NSXMLParserCharacterRefInEpilogError: NSXMLParserError = 12;
pub const NSXMLParserError_NSXMLParserCharacterRefInDTDError: NSXMLParserError = 13;
pub const NSXMLParserError_NSXMLParserEntityRefAtEOFError: NSXMLParserError = 14;
pub const NSXMLParserError_NSXMLParserEntityRefInPrologError: NSXMLParserError = 15;
pub const NSXMLParserError_NSXMLParserEntityRefInEpilogError: NSXMLParserError = 16;
pub const NSXMLParserError_NSXMLParserEntityRefInDTDError: NSXMLParserError = 17;
pub const NSXMLParserError_NSXMLParserParsedEntityRefAtEOFError: NSXMLParserError = 18;
pub const NSXMLParserError_NSXMLParserParsedEntityRefInPrologError: NSXMLParserError = 19;
pub const NSXMLParserError_NSXMLParserParsedEntityRefInEpilogError: NSXMLParserError = 20;
pub const NSXMLParserError_NSXMLParserParsedEntityRefInInternalSubsetError: NSXMLParserError = 21;
pub const NSXMLParserError_NSXMLParserEntityReferenceWithoutNameError: NSXMLParserError = 22;
pub const NSXMLParserError_NSXMLParserEntityReferenceMissingSemiError: NSXMLParserError = 23;
pub const NSXMLParserError_NSXMLParserParsedEntityRefNoNameError: NSXMLParserError = 24;
pub const NSXMLParserError_NSXMLParserParsedEntityRefMissingSemiError: NSXMLParserError = 25;
pub const NSXMLParserError_NSXMLParserUndeclaredEntityError: NSXMLParserError = 26;
pub const NSXMLParserError_NSXMLParserUnparsedEntityError: NSXMLParserError = 28;
pub const NSXMLParserError_NSXMLParserEntityIsExternalError: NSXMLParserError = 29;
pub const NSXMLParserError_NSXMLParserEntityIsParameterError: NSXMLParserError = 30;
pub const NSXMLParserError_NSXMLParserUnknownEncodingError: NSXMLParserError = 31;
pub const NSXMLParserError_NSXMLParserEncodingNotSupportedError: NSXMLParserError = 32;
pub const NSXMLParserError_NSXMLParserStringNotStartedError: NSXMLParserError = 33;
pub const NSXMLParserError_NSXMLParserStringNotClosedError: NSXMLParserError = 34;
pub const NSXMLParserError_NSXMLParserNamespaceDeclarationError: NSXMLParserError = 35;
pub const NSXMLParserError_NSXMLParserEntityNotStartedError: NSXMLParserError = 36;
pub const NSXMLParserError_NSXMLParserEntityNotFinishedError: NSXMLParserError = 37;
pub const NSXMLParserError_NSXMLParserLessThanSymbolInAttributeError: NSXMLParserError = 38;
pub const NSXMLParserError_NSXMLParserAttributeNotStartedError: NSXMLParserError = 39;
pub const NSXMLParserError_NSXMLParserAttributeNotFinishedError: NSXMLParserError = 40;
pub const NSXMLParserError_NSXMLParserAttributeHasNoValueError: NSXMLParserError = 41;
pub const NSXMLParserError_NSXMLParserAttributeRedefinedError: NSXMLParserError = 42;
pub const NSXMLParserError_NSXMLParserLiteralNotStartedError: NSXMLParserError = 43;
pub const NSXMLParserError_NSXMLParserLiteralNotFinishedError: NSXMLParserError = 44;
pub const NSXMLParserError_NSXMLParserCommentNotFinishedError: NSXMLParserError = 45;
pub const NSXMLParserError_NSXMLParserProcessingInstructionNotStartedError: NSXMLParserError = 46;
pub const NSXMLParserError_NSXMLParserProcessingInstructionNotFinishedError: NSXMLParserError = 47;
pub const NSXMLParserError_NSXMLParserNotationNotStartedError: NSXMLParserError = 48;
pub const NSXMLParserError_NSXMLParserNotationNotFinishedError: NSXMLParserError = 49;
pub const NSXMLParserError_NSXMLParserAttributeListNotStartedError: NSXMLParserError = 50;
pub const NSXMLParserError_NSXMLParserAttributeListNotFinishedError: NSXMLParserError = 51;
pub const NSXMLParserError_NSXMLParserMixedContentDeclNotStartedError: NSXMLParserError = 52;
pub const NSXMLParserError_NSXMLParserMixedContentDeclNotFinishedError: NSXMLParserError = 53;
pub const NSXMLParserError_NSXMLParserElementContentDeclNotStartedError: NSXMLParserError = 54;
pub const NSXMLParserError_NSXMLParserElementContentDeclNotFinishedError: NSXMLParserError = 55;
pub const NSXMLParserError_NSXMLParserXMLDeclNotStartedError: NSXMLParserError = 56;
pub const NSXMLParserError_NSXMLParserXMLDeclNotFinishedError: NSXMLParserError = 57;
pub const NSXMLParserError_NSXMLParserConditionalSectionNotStartedError: NSXMLParserError = 58;
pub const NSXMLParserError_NSXMLParserConditionalSectionNotFinishedError: NSXMLParserError = 59;
pub const NSXMLParserError_NSXMLParserExternalSubsetNotFinishedError: NSXMLParserError = 60;
pub const NSXMLParserError_NSXMLParserDOCTYPEDeclNotFinishedError: NSXMLParserError = 61;
pub const NSXMLParserError_NSXMLParserMisplacedCDATAEndStringError: NSXMLParserError = 62;
pub const NSXMLParserError_NSXMLParserCDATANotFinishedError: NSXMLParserError = 63;
pub const NSXMLParserError_NSXMLParserMisplacedXMLDeclarationError: NSXMLParserError = 64;
pub const NSXMLParserError_NSXMLParserSpaceRequiredError: NSXMLParserError = 65;
pub const NSXMLParserError_NSXMLParserSeparatorRequiredError: NSXMLParserError = 66;
pub const NSXMLParserError_NSXMLParserNMTOKENRequiredError: NSXMLParserError = 67;
pub const NSXMLParserError_NSXMLParserNAMERequiredError: NSXMLParserError = 68;
pub const NSXMLParserError_NSXMLParserPCDATARequiredError: NSXMLParserError = 69;
pub const NSXMLParserError_NSXMLParserURIRequiredError: NSXMLParserError = 70;
pub const NSXMLParserError_NSXMLParserPublicIdentifierRequiredError: NSXMLParserError = 71;
pub const NSXMLParserError_NSXMLParserLTRequiredError: NSXMLParserError = 72;
pub const NSXMLParserError_NSXMLParserGTRequiredError: NSXMLParserError = 73;
pub const NSXMLParserError_NSXMLParserLTSlashRequiredError: NSXMLParserError = 74;
pub const NSXMLParserError_NSXMLParserEqualExpectedError: NSXMLParserError = 75;
pub const NSXMLParserError_NSXMLParserTagNameMismatchError: NSXMLParserError = 76;
pub const NSXMLParserError_NSXMLParserUnfinishedTagError: NSXMLParserError = 77;
pub const NSXMLParserError_NSXMLParserStandaloneValueError: NSXMLParserError = 78;
pub const NSXMLParserError_NSXMLParserInvalidEncodingNameError: NSXMLParserError = 79;
pub const NSXMLParserError_NSXMLParserCommentContainsDoubleHyphenError: NSXMLParserError = 80;
pub const NSXMLParserError_NSXMLParserInvalidEncodingError: NSXMLParserError = 81;
pub const NSXMLParserError_NSXMLParserExternalStandaloneEntityError: NSXMLParserError = 82;
pub const NSXMLParserError_NSXMLParserInvalidConditionalSectionError: NSXMLParserError = 83;
pub const NSXMLParserError_NSXMLParserEntityValueRequiredError: NSXMLParserError = 84;
pub const NSXMLParserError_NSXMLParserNotWellBalancedError: NSXMLParserError = 85;
pub const NSXMLParserError_NSXMLParserExtraContentError: NSXMLParserError = 86;
pub const NSXMLParserError_NSXMLParserInvalidCharacterInEntityError: NSXMLParserError = 87;
pub const NSXMLParserError_NSXMLParserParsedEntityRefInInternalError: NSXMLParserError = 88;
pub const NSXMLParserError_NSXMLParserEntityRefLoopError: NSXMLParserError = 89;
pub const NSXMLParserError_NSXMLParserEntityBoundaryError: NSXMLParserError = 90;
pub const NSXMLParserError_NSXMLParserInvalidURIError: NSXMLParserError = 91;
pub const NSXMLParserError_NSXMLParserURIFragmentError: NSXMLParserError = 92;
pub const NSXMLParserError_NSXMLParserNoDTDError: NSXMLParserError = 94;
pub const NSXMLParserError_NSXMLParserDelegateAbortedParseError: NSXMLParserError = 512;
pub type NSXMLParserError = NSInteger;
pub trait PNSXPCProxyCreating: Sized + std::ops::Deref {
    unsafe fn remoteObjectProxy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjectProxy)
    }
    unsafe fn remoteObjectProxyWithErrorHandler_(&self, handler: *mut ::std::os::raw::c_void) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjectProxyWithErrorHandler: handler)
    }
    unsafe fn synchronousRemoteObjectProxyWithErrorHandler_(
        &self,
        handler: *mut ::std::os::raw::c_void,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronousRemoteObjectProxyWithErrorHandler: handler)
    }
}
pub const NSXPCConnectionOptions_NSXPCConnectionPrivileged: NSXPCConnectionOptions = 4096;
pub type NSXPCConnectionOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCConnection(pub id);
impl std::ops::Deref for NSXPCConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCConnection {}
impl NSXPCConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCConnection), alloc) })
    }
}
impl PNSXPCProxyCreating for NSXPCConnection {}
impl INSObject for NSXPCConnection {}
impl PNSObject for NSXPCConnection {}
impl From<NSXPCConnection> for NSObject {
    fn from(child: NSXPCConnection) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXPCConnection {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXPCConnection, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCConnection)) };
        if is_kind_of {
            Ok(NSXPCConnection(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXPCConnection")
        }
    }
}
impl INSXPCConnection for NSXPCConnection {}
pub trait INSXPCConnection: Sized + std::ops::Deref {
    unsafe fn initWithServiceName_(&self, serviceName: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithServiceName: serviceName)
    }
    unsafe fn initWithMachServiceName_options_(
        &self,
        name: NSString,
        options: NSXPCConnectionOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithMachServiceName : name options : options)
    }
    unsafe fn initWithListenerEndpoint_(&self, endpoint: NSXPCListenerEndpoint) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithListenerEndpoint: endpoint)
    }
    unsafe fn remoteObjectProxyWithErrorHandler_(&self, handler: *mut ::std::os::raw::c_void) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjectProxyWithErrorHandler: handler)
    }
    unsafe fn synchronousRemoteObjectProxyWithErrorHandler_(
        &self,
        handler: *mut ::std::os::raw::c_void,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronousRemoteObjectProxyWithErrorHandler: handler)
    }
    unsafe fn resume(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resume)
    }
    unsafe fn suspend(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suspend)
    }
    unsafe fn activate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, activate)
    }
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn scheduleSendBarrierBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheduleSendBarrierBlock: block)
    }
    unsafe fn setCodeSigningRequirement_(&self, requirement: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCodeSigningRequirement: requirement)
    }
    unsafe fn serviceName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, serviceName)
    }
    unsafe fn endpoint(&self) -> NSXPCListenerEndpoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endpoint)
    }
    unsafe fn exportedInterface(&self) -> NSXPCInterface
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, exportedInterface)
    }
    unsafe fn setExportedInterface_(&self, exportedInterface: NSXPCInterface)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setExportedInterface: exportedInterface)
    }
    unsafe fn exportedObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, exportedObject)
    }
    unsafe fn setExportedObject_(&self, exportedObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setExportedObject: exportedObject)
    }
    unsafe fn remoteObjectInterface(&self) -> NSXPCInterface
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjectInterface)
    }
    unsafe fn setRemoteObjectInterface_(&self, remoteObjectInterface: NSXPCInterface)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRemoteObjectInterface: remoteObjectInterface)
    }
    unsafe fn remoteObjectProxy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjectProxy)
    }
    unsafe fn interruptionHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, interruptionHandler)
    }
    unsafe fn setInterruptionHandler_(&self, interruptionHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setInterruptionHandler: interruptionHandler)
    }
    unsafe fn invalidationHandler(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidationHandler)
    }
    unsafe fn setInvalidationHandler_(&self, invalidationHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setInvalidationHandler: invalidationHandler)
    }
    unsafe fn auditSessionIdentifier(&self) -> au_asid_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, auditSessionIdentifier)
    }
    unsafe fn processIdentifier(&self) -> pid_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, processIdentifier)
    }
    unsafe fn effectiveUserIdentifier(&self) -> uid_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, effectiveUserIdentifier)
    }
    unsafe fn effectiveGroupIdentifier(&self) -> gid_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, effectiveGroupIdentifier)
    }
    unsafe fn currentConnection() -> NSXPCConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSXPCConnection), currentConnection)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCListener(pub id);
impl std::ops::Deref for NSXPCListener {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCListener {}
impl NSXPCListener {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCListener), alloc) })
    }
}
impl INSObject for NSXPCListener {}
impl PNSObject for NSXPCListener {}
impl From<NSXPCListener> for NSObject {
    fn from(child: NSXPCListener) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXPCListener {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXPCListener, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCListener)) };
        if is_kind_of {
            Ok(NSXPCListener(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXPCListener")
        }
    }
}
impl INSXPCListener for NSXPCListener {}
pub trait INSXPCListener: Sized + std::ops::Deref {
    unsafe fn initWithMachServiceName_(&self, name: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithMachServiceName: name)
    }
    unsafe fn resume(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resume)
    }
    unsafe fn suspend(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suspend)
    }
    unsafe fn activate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, activate)
    }
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn setConnectionCodeSigningRequirement_(&self, requirement: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setConnectionCodeSigningRequirement: requirement)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn endpoint(&self) -> NSXPCListenerEndpoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endpoint)
    }
    unsafe fn serviceListener() -> NSXPCListener
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSXPCListener), serviceListener)
    }
    unsafe fn anonymousListener() -> NSXPCListener
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSXPCListener), anonymousListener)
    }
}
pub trait PNSXPCListenerDelegate: Sized + std::ops::Deref {
    unsafe fn listener_shouldAcceptNewConnection_(
        &self,
        listener: NSXPCListener,
        newConnection: NSXPCConnection,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , listener : listener shouldAcceptNewConnection : newConnection)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCInterface(pub id);
impl std::ops::Deref for NSXPCInterface {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCInterface {}
impl NSXPCInterface {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCInterface), alloc) })
    }
}
impl INSObject for NSXPCInterface {}
impl PNSObject for NSXPCInterface {}
impl From<NSXPCInterface> for NSObject {
    fn from(child: NSXPCInterface) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXPCInterface {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXPCInterface, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCInterface)) };
        if is_kind_of {
            Ok(NSXPCInterface(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXPCInterface")
        }
    }
}
impl INSXPCInterface for NSXPCInterface {}
pub trait INSXPCInterface: Sized + std::ops::Deref {
    unsafe fn setClasses_forSelector_argumentIndex_ofReply_(
        &self,
        classes: NSSet,
        sel: objc::runtime::Sel,
        arg: NSUInteger,
        ofReply: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setClasses : classes forSelector : sel argumentIndex : arg ofReply : ofReply)
    }
    unsafe fn classesForSelector_argumentIndex_ofReply_(
        &self,
        sel: objc::runtime::Sel,
        arg: NSUInteger,
        ofReply: BOOL,
    ) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , classesForSelector : sel argumentIndex : arg ofReply : ofReply)
    }
    unsafe fn setInterface_forSelector_argumentIndex_ofReply_(
        &self,
        ifc: NSXPCInterface,
        sel: objc::runtime::Sel,
        arg: NSUInteger,
        ofReply: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setInterface : ifc forSelector : sel argumentIndex : arg ofReply : ofReply)
    }
    unsafe fn interfaceForSelector_argumentIndex_ofReply_(
        &self,
        sel: objc::runtime::Sel,
        arg: NSUInteger,
        ofReply: BOOL,
    ) -> NSXPCInterface
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , interfaceForSelector : sel argumentIndex : arg ofReply : ofReply)
    }
    unsafe fn protocol(&self) -> Protocol
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, protocol)
    }
    unsafe fn setProtocol_(&self, protocol: Protocol)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProtocol: protocol)
    }
    unsafe fn interfaceWithProtocol_(protocol: Protocol) -> NSXPCInterface
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSXPCInterface), interfaceWithProtocol: protocol)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCListenerEndpoint(pub id);
impl std::ops::Deref for NSXPCListenerEndpoint {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCListenerEndpoint {}
impl NSXPCListenerEndpoint {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCListenerEndpoint), alloc) })
    }
}
impl PNSSecureCoding for NSXPCListenerEndpoint {}
impl INSObject for NSXPCListenerEndpoint {}
impl PNSObject for NSXPCListenerEndpoint {}
impl From<NSXPCListenerEndpoint> for NSObject {
    fn from(child: NSXPCListenerEndpoint) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXPCListenerEndpoint {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXPCListenerEndpoint, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCListenerEndpoint)) };
        if is_kind_of {
            Ok(NSXPCListenerEndpoint(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXPCListenerEndpoint")
        }
    }
}
impl INSXPCListenerEndpoint for NSXPCListenerEndpoint {}
pub trait INSXPCListenerEndpoint: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSXPCCoder(pub id);
impl std::ops::Deref for NSXPCCoder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSXPCCoder {}
impl NSXPCCoder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSXPCCoder), alloc) })
    }
}
impl INSCoder for NSXPCCoder {}
impl From<NSXPCCoder> for NSCoder {
    fn from(child: NSXPCCoder) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSXPCCoder {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSXPCCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCCoder)) };
        if is_kind_of {
            Ok(NSXPCCoder(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSXPCCoder")
        }
    }
}
impl INSObject for NSXPCCoder {}
impl PNSObject for NSXPCCoder {}
impl From<NSXPCCoder> for NSObject {
    fn from(child: NSXPCCoder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSXPCCoder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSXPCCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSXPCCoder)) };
        if is_kind_of {
            Ok(NSXPCCoder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSXPCCoder")
        }
    }
}
impl INSXPCCoder for NSXPCCoder {}
pub trait INSXPCCoder: Sized + std::ops::Deref {
    unsafe fn userInfo(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn setUserInfo_(&self, userInfo: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUserInfo: userInfo)
    }
    unsafe fn connection(&self) -> NSXPCConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connection)
    }
}
pub const NSFileNoSuchFileError: _bindgen_ty_56 = 4;
pub const NSFileLockingError: _bindgen_ty_56 = 255;
pub const NSFileReadUnknownError: _bindgen_ty_56 = 256;
pub const NSFileReadNoPermissionError: _bindgen_ty_56 = 257;
pub const NSFileReadInvalidFileNameError: _bindgen_ty_56 = 258;
pub const NSFileReadCorruptFileError: _bindgen_ty_56 = 259;
pub const NSFileReadNoSuchFileError: _bindgen_ty_56 = 260;
pub const NSFileReadInapplicableStringEncodingError: _bindgen_ty_56 = 261;
pub const NSFileReadUnsupportedSchemeError: _bindgen_ty_56 = 262;
pub const NSFileReadTooLargeError: _bindgen_ty_56 = 263;
pub const NSFileReadUnknownStringEncodingError: _bindgen_ty_56 = 264;
pub const NSFileWriteUnknownError: _bindgen_ty_56 = 512;
pub const NSFileWriteNoPermissionError: _bindgen_ty_56 = 513;
pub const NSFileWriteInvalidFileNameError: _bindgen_ty_56 = 514;
pub const NSFileWriteFileExistsError: _bindgen_ty_56 = 516;
pub const NSFileWriteInapplicableStringEncodingError: _bindgen_ty_56 = 517;
pub const NSFileWriteUnsupportedSchemeError: _bindgen_ty_56 = 518;
pub const NSFileWriteOutOfSpaceError: _bindgen_ty_56 = 640;
pub const NSFileWriteVolumeReadOnlyError: _bindgen_ty_56 = 642;
pub const NSFileManagerUnmountUnknownError: _bindgen_ty_56 = 768;
pub const NSFileManagerUnmountBusyError: _bindgen_ty_56 = 769;
pub const NSKeyValueValidationError: _bindgen_ty_56 = 1024;
pub const NSFormattingError: _bindgen_ty_56 = 2048;
pub const NSUserCancelledError: _bindgen_ty_56 = 3072;
pub const NSFeatureUnsupportedError: _bindgen_ty_56 = 3328;
pub const NSExecutableNotLoadableError: _bindgen_ty_56 = 3584;
pub const NSExecutableArchitectureMismatchError: _bindgen_ty_56 = 3585;
pub const NSExecutableRuntimeMismatchError: _bindgen_ty_56 = 3586;
pub const NSExecutableLoadError: _bindgen_ty_56 = 3587;
pub const NSExecutableLinkError: _bindgen_ty_56 = 3588;
pub const NSFileErrorMinimum: _bindgen_ty_56 = 0;
pub const NSFileErrorMaximum: _bindgen_ty_56 = 1023;
pub const NSValidationErrorMinimum: _bindgen_ty_56 = 1024;
pub const NSValidationErrorMaximum: _bindgen_ty_56 = 2047;
pub const NSExecutableErrorMinimum: _bindgen_ty_56 = 3584;
pub const NSExecutableErrorMaximum: _bindgen_ty_56 = 3839;
pub const NSFormattingErrorMinimum: _bindgen_ty_56 = 2048;
pub const NSFormattingErrorMaximum: _bindgen_ty_56 = 2559;
pub const NSPropertyListReadCorruptError: _bindgen_ty_56 = 3840;
pub const NSPropertyListReadUnknownVersionError: _bindgen_ty_56 = 3841;
pub const NSPropertyListReadStreamError: _bindgen_ty_56 = 3842;
pub const NSPropertyListWriteStreamError: _bindgen_ty_56 = 3851;
pub const NSPropertyListWriteInvalidError: _bindgen_ty_56 = 3852;
pub const NSPropertyListErrorMinimum: _bindgen_ty_56 = 3840;
pub const NSPropertyListErrorMaximum: _bindgen_ty_56 = 4095;
pub const NSXPCConnectionInterrupted: _bindgen_ty_56 = 4097;
pub const NSXPCConnectionInvalid: _bindgen_ty_56 = 4099;
pub const NSXPCConnectionReplyInvalid: _bindgen_ty_56 = 4101;
pub const NSXPCConnectionCodeSigningRequirementFailure: _bindgen_ty_56 = 4102;
pub const NSXPCConnectionErrorMinimum: _bindgen_ty_56 = 4096;
pub const NSXPCConnectionErrorMaximum: _bindgen_ty_56 = 4224;
pub const NSUbiquitousFileUnavailableError: _bindgen_ty_56 = 4353;
pub const NSUbiquitousFileNotUploadedDueToQuotaError: _bindgen_ty_56 = 4354;
pub const NSUbiquitousFileUbiquityServerNotAvailable: _bindgen_ty_56 = 4355;
pub const NSUbiquitousFileErrorMinimum: _bindgen_ty_56 = 4352;
pub const NSUbiquitousFileErrorMaximum: _bindgen_ty_56 = 4607;
pub const NSUserActivityHandoffFailedError: _bindgen_ty_56 = 4608;
pub const NSUserActivityConnectionUnavailableError: _bindgen_ty_56 = 4609;
pub const NSUserActivityRemoteApplicationTimedOutError: _bindgen_ty_56 = 4610;
pub const NSUserActivityHandoffUserInfoTooLargeError: _bindgen_ty_56 = 4611;
pub const NSUserActivityErrorMinimum: _bindgen_ty_56 = 4608;
pub const NSUserActivityErrorMaximum: _bindgen_ty_56 = 4863;
pub const NSCoderReadCorruptError: _bindgen_ty_56 = 4864;
pub const NSCoderValueNotFoundError: _bindgen_ty_56 = 4865;
pub const NSCoderInvalidValueError: _bindgen_ty_56 = 4866;
pub const NSCoderErrorMinimum: _bindgen_ty_56 = 4864;
pub const NSCoderErrorMaximum: _bindgen_ty_56 = 4991;
pub const NSBundleErrorMinimum: _bindgen_ty_56 = 4992;
pub const NSBundleErrorMaximum: _bindgen_ty_56 = 5119;
pub const NSBundleOnDemandResourceOutOfSpaceError: _bindgen_ty_56 = 4992;
pub const NSBundleOnDemandResourceExceededMaximumSizeError: _bindgen_ty_56 = 4993;
pub const NSBundleOnDemandResourceInvalidTagError: _bindgen_ty_56 = 4994;
pub const NSCloudSharingNetworkFailureError: _bindgen_ty_56 = 5120;
pub const NSCloudSharingQuotaExceededError: _bindgen_ty_56 = 5121;
pub const NSCloudSharingTooManyParticipantsError: _bindgen_ty_56 = 5122;
pub const NSCloudSharingConflictError: _bindgen_ty_56 = 5123;
pub const NSCloudSharingNoPermissionError: _bindgen_ty_56 = 5124;
pub const NSCloudSharingOtherError: _bindgen_ty_56 = 5375;
pub const NSCloudSharingErrorMinimum: _bindgen_ty_56 = 5120;
pub const NSCloudSharingErrorMaximum: _bindgen_ty_56 = 5375;
pub const NSCompressionFailedError: _bindgen_ty_56 = 5376;
pub const NSDecompressionFailedError: _bindgen_ty_56 = 5377;
pub const NSCompressionErrorMinimum: _bindgen_ty_56 = 5376;
pub const NSCompressionErrorMaximum: _bindgen_ty_56 = 5503;
pub type _bindgen_ty_56 = NSInteger;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseDefault: NSByteCountFormatterUnits = 0;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseBytes: NSByteCountFormatterUnits = 1;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseKB: NSByteCountFormatterUnits = 2;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseMB: NSByteCountFormatterUnits = 4;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseGB: NSByteCountFormatterUnits = 8;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseTB: NSByteCountFormatterUnits = 16;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUsePB: NSByteCountFormatterUnits = 32;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseEB: NSByteCountFormatterUnits = 64;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseZB: NSByteCountFormatterUnits = 128;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseYBOrHigher: NSByteCountFormatterUnits =
    65280;
pub const NSByteCountFormatterUnits_NSByteCountFormatterUseAll: NSByteCountFormatterUnits = 65535;
pub type NSByteCountFormatterUnits = NSUInteger;
pub const NSByteCountFormatterCountStyle_NSByteCountFormatterCountStyleFile:
    NSByteCountFormatterCountStyle = 0;
pub const NSByteCountFormatterCountStyle_NSByteCountFormatterCountStyleMemory:
    NSByteCountFormatterCountStyle = 1;
pub const NSByteCountFormatterCountStyle_NSByteCountFormatterCountStyleDecimal:
    NSByteCountFormatterCountStyle = 2;
pub const NSByteCountFormatterCountStyle_NSByteCountFormatterCountStyleBinary:
    NSByteCountFormatterCountStyle = 3;
pub type NSByteCountFormatterCountStyle = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSByteCountFormatter(pub id);
impl std::ops::Deref for NSByteCountFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSByteCountFormatter {}
impl NSByteCountFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSByteCountFormatter), alloc) })
    }
}
impl INSFormatter for NSByteCountFormatter {}
impl PNSCopying for NSByteCountFormatter {}
impl PNSCoding for NSByteCountFormatter {}
impl From<NSByteCountFormatter> for NSFormatter {
    fn from(child: NSByteCountFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSByteCountFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSByteCountFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSByteCountFormatter)) };
        if is_kind_of {
            Ok(NSByteCountFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSByteCountFormatter")
        }
    }
}
impl INSObject for NSByteCountFormatter {}
impl PNSObject for NSByteCountFormatter {}
impl From<NSByteCountFormatter> for NSObject {
    fn from(child: NSByteCountFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSByteCountFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSByteCountFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSByteCountFormatter)) };
        if is_kind_of {
            Ok(NSByteCountFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSByteCountFormatter")
        }
    }
}
impl INSByteCountFormatter for NSByteCountFormatter {}
pub trait INSByteCountFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromByteCount_(&self, byteCount: ::std::os::raw::c_longlong) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromByteCount: byteCount)
    }
    unsafe fn stringFromMeasurement_(&self, measurement: NSMeasurement) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromMeasurement: measurement)
    }
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn allowedUnits(&self) -> NSByteCountFormatterUnits
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowedUnits)
    }
    unsafe fn setAllowedUnits_(&self, allowedUnits: NSByteCountFormatterUnits)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowedUnits: allowedUnits)
    }
    unsafe fn countStyle(&self) -> NSByteCountFormatterCountStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countStyle)
    }
    unsafe fn setCountStyle_(&self, countStyle: NSByteCountFormatterCountStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCountStyle: countStyle)
    }
    unsafe fn allowsNonnumericFormatting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsNonnumericFormatting)
    }
    unsafe fn setAllowsNonnumericFormatting_(&self, allowsNonnumericFormatting: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowsNonnumericFormatting: allowsNonnumericFormatting
        )
    }
    unsafe fn includesUnit(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesUnit)
    }
    unsafe fn setIncludesUnit_(&self, includesUnit: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIncludesUnit: includesUnit)
    }
    unsafe fn includesCount(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesCount)
    }
    unsafe fn setIncludesCount_(&self, includesCount: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIncludesCount: includesCount)
    }
    unsafe fn includesActualByteCount(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesActualByteCount)
    }
    unsafe fn setIncludesActualByteCount_(&self, includesActualByteCount: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIncludesActualByteCount: includesActualByteCount)
    }
    unsafe fn isAdaptive(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isAdaptive)
    }
    unsafe fn setAdaptive_(&self, adaptive: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAdaptive: adaptive)
    }
    unsafe fn zeroPadsFractionDigits(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zeroPadsFractionDigits)
    }
    unsafe fn setZeroPadsFractionDigits_(&self, zeroPadsFractionDigits: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setZeroPadsFractionDigits: zeroPadsFractionDigits)
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn stringFromByteCount_countStyle_(
        byteCount: ::std::os::raw::c_longlong,
        countStyle: NSByteCountFormatterCountStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSByteCountFormatter) , stringFromByteCount : byteCount countStyle : countStyle)
    }
    unsafe fn stringFromMeasurement_countStyle_(
        measurement: NSMeasurement,
        countStyle: NSByteCountFormatterCountStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSByteCountFormatter) , stringFromMeasurement : measurement countStyle : countStyle)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCache(pub id);
impl std::ops::Deref for NSCache {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCache {}
impl NSCache {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCache), alloc) })
    }
}
impl INSObject for NSCache {}
impl PNSObject for NSCache {}
impl From<NSCache> for NSObject {
    fn from(child: NSCache) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCache {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCache, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCache)) };
        if is_kind_of {
            Ok(NSCache(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCache")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSCache<KeyType, ObjectType> for NSCache {}
pub trait INSCache<KeyType: 'static, ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, key: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: key)
    }
    unsafe fn setObject_forKey_(&self, obj: id, key: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj forKey : key)
    }
    unsafe fn setObject_forKey_cost_(&self, obj: id, key: id, g: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : obj forKey : key cost : g)
    }
    unsafe fn removeObjectForKey_(&self, key: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: key)
    }
    unsafe fn removeAllObjects(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllObjects)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn totalCostLimit(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, totalCostLimit)
    }
    unsafe fn setTotalCostLimit_(&self, totalCostLimit: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTotalCostLimit: totalCostLimit)
    }
    unsafe fn countLimit(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countLimit)
    }
    unsafe fn setCountLimit_(&self, countLimit: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCountLimit: countLimit)
    }
    unsafe fn evictsObjectsWithDiscardedContent(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evictsObjectsWithDiscardedContent)
    }
    unsafe fn setEvictsObjectsWithDiscardedContent_(&self, evictsObjectsWithDiscardedContent: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setEvictsObjectsWithDiscardedContent: evictsObjectsWithDiscardedContent
        )
    }
}
pub trait PNSCacheDelegate: Sized + std::ops::Deref {
    unsafe fn cache_willEvictObject_(&self, cache: NSCache, obj: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , cache : cache willEvictObject : obj)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPredicate(pub id);
impl std::ops::Deref for NSPredicate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPredicate {}
impl NSPredicate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPredicate), alloc) })
    }
}
impl PNSSecureCoding for NSPredicate {}
impl PNSCopying for NSPredicate {}
impl INSObject for NSPredicate {}
impl PNSObject for NSPredicate {}
impl From<NSPredicate> for NSObject {
    fn from(child: NSPredicate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPredicate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPredicate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPredicate)) };
        if is_kind_of {
            Ok(NSPredicate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPredicate")
        }
    }
}
impl INSPredicate for NSPredicate {}
pub trait INSPredicate: Sized + std::ops::Deref {
    unsafe fn predicateWithSubstitutionVariables_(&self, variables: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicateWithSubstitutionVariables: variables)
    }
    unsafe fn evaluateWithObject_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluateWithObject: object)
    }
    unsafe fn evaluateWithObject_substitutionVariables_(
        &self,
        object: id,
        bindings: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , evaluateWithObject : object substitutionVariables : bindings)
    }
    unsafe fn allowEvaluation(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowEvaluation)
    }
    unsafe fn predicateFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicateFormat)
    }
    unsafe fn predicateWithFormat_argumentArray_(
        predicateFormat: NSString,
        arguments: NSArray,
    ) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPredicate) , predicateWithFormat : predicateFormat argumentArray : arguments)
    }
    unsafe fn predicateWithFormat_(predicateFormat: NSString) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithFormat: predicateFormat)
    }
    unsafe fn predicateWithFormat_arguments_(
        predicateFormat: NSString,
        argList: va_list,
    ) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPredicate) , predicateWithFormat : predicateFormat arguments : argList)
    }
    unsafe fn predicateFromMetadataQueryString_(queryString: NSString) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSPredicate),
            predicateFromMetadataQueryString: queryString
        )
    }
    unsafe fn predicateWithValue_(value: BOOL) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithValue: value)
    }
    unsafe fn predicateWithBlock_(block: *mut ::std::os::raw::c_void) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithBlock: block)
    }
}
impl<ObjectType: 'static> NSArray_NSPredicateSupport<ObjectType> for NSArray {}
pub trait NSArray_NSPredicateSupport<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn filteredArrayUsingPredicate_(&self, predicate: NSPredicate) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filteredArrayUsingPredicate: predicate)
    }
}
impl<ObjectType: 'static> NSMutableArray_NSPredicateSupport<ObjectType> for NSMutableArray {}
pub trait NSMutableArray_NSPredicateSupport<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn filterUsingPredicate_(&self, predicate: NSPredicate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filterUsingPredicate: predicate)
    }
}
impl<ObjectType: 'static> NSSet_NSPredicateSupport<ObjectType> for NSSet {}
pub trait NSSet_NSPredicateSupport<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn filteredSetUsingPredicate_(&self, predicate: NSPredicate) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filteredSetUsingPredicate: predicate)
    }
}
impl<ObjectType: 'static> NSMutableSet_NSPredicateSupport<ObjectType> for NSMutableSet {}
pub trait NSMutableSet_NSPredicateSupport<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn filterUsingPredicate_(&self, predicate: NSPredicate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filterUsingPredicate: predicate)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSPredicateSupport<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSPredicateSupport<ObjectType: 'static>: Sized + std::ops::Deref {
    unsafe fn filteredOrderedSetUsingPredicate_(&self, p: NSPredicate) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filteredOrderedSetUsingPredicate: p)
    }
}
impl<ObjectType: 'static> NSMutableOrderedSet_NSPredicateSupport<ObjectType>
    for NSMutableOrderedSet
{
}
pub trait NSMutableOrderedSet_NSPredicateSupport<ObjectType: 'static>:
    Sized + std::ops::Deref
{
    unsafe fn filterUsingPredicate_(&self, p: NSPredicate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filterUsingPredicate: p)
    }
}
pub const NSComparisonPredicateOptions_NSCaseInsensitivePredicateOption:
    NSComparisonPredicateOptions = 1;
pub const NSComparisonPredicateOptions_NSDiacriticInsensitivePredicateOption:
    NSComparisonPredicateOptions = 2;
pub const NSComparisonPredicateOptions_NSNormalizedPredicateOption: NSComparisonPredicateOptions =
    4;
pub type NSComparisonPredicateOptions = NSUInteger;
pub const NSComparisonPredicateModifier_NSDirectPredicateModifier: NSComparisonPredicateModifier =
    0;
pub const NSComparisonPredicateModifier_NSAllPredicateModifier: NSComparisonPredicateModifier = 1;
pub const NSComparisonPredicateModifier_NSAnyPredicateModifier: NSComparisonPredicateModifier = 2;
pub type NSComparisonPredicateModifier = NSUInteger;
pub const NSPredicateOperatorType_NSLessThanPredicateOperatorType: NSPredicateOperatorType = 0;
pub const NSPredicateOperatorType_NSLessThanOrEqualToPredicateOperatorType:
    NSPredicateOperatorType = 1;
pub const NSPredicateOperatorType_NSGreaterThanPredicateOperatorType: NSPredicateOperatorType = 2;
pub const NSPredicateOperatorType_NSGreaterThanOrEqualToPredicateOperatorType:
    NSPredicateOperatorType = 3;
pub const NSPredicateOperatorType_NSEqualToPredicateOperatorType: NSPredicateOperatorType = 4;
pub const NSPredicateOperatorType_NSNotEqualToPredicateOperatorType: NSPredicateOperatorType = 5;
pub const NSPredicateOperatorType_NSMatchesPredicateOperatorType: NSPredicateOperatorType = 6;
pub const NSPredicateOperatorType_NSLikePredicateOperatorType: NSPredicateOperatorType = 7;
pub const NSPredicateOperatorType_NSBeginsWithPredicateOperatorType: NSPredicateOperatorType = 8;
pub const NSPredicateOperatorType_NSEndsWithPredicateOperatorType: NSPredicateOperatorType = 9;
pub const NSPredicateOperatorType_NSInPredicateOperatorType: NSPredicateOperatorType = 10;
pub const NSPredicateOperatorType_NSCustomSelectorPredicateOperatorType: NSPredicateOperatorType =
    11;
pub const NSPredicateOperatorType_NSContainsPredicateOperatorType: NSPredicateOperatorType = 99;
pub const NSPredicateOperatorType_NSBetweenPredicateOperatorType: NSPredicateOperatorType = 100;
pub type NSPredicateOperatorType = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSPredicateOperator(pub id);
impl std::ops::Deref for NSPredicateOperator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPredicateOperator {}
impl NSPredicateOperator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSPredicateOperator), alloc) })
    }
}
impl INSPredicateOperator for NSPredicateOperator {}
pub trait INSPredicateOperator: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSComparisonPredicate(pub id);
impl std::ops::Deref for NSComparisonPredicate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSComparisonPredicate {}
impl NSComparisonPredicate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSComparisonPredicate), alloc) })
    }
}
impl INSPredicate for NSComparisonPredicate {}
impl PNSSecureCoding for NSComparisonPredicate {}
impl PNSCopying for NSComparisonPredicate {}
impl From<NSComparisonPredicate> for NSPredicate {
    fn from(child: NSComparisonPredicate) -> NSPredicate {
        NSPredicate(child.0)
    }
}
impl std::convert::TryFrom<NSPredicate> for NSComparisonPredicate {
    type Error = &'static str;
    fn try_from(parent: NSPredicate) -> Result<NSComparisonPredicate, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSComparisonPredicate)) };
        if is_kind_of {
            Ok(NSComparisonPredicate(parent.0))
        } else {
            Err("This NSPredicate cannot be downcasted to NSComparisonPredicate")
        }
    }
}
impl INSObject for NSComparisonPredicate {}
impl PNSObject for NSComparisonPredicate {}
impl From<NSComparisonPredicate> for NSObject {
    fn from(child: NSComparisonPredicate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSComparisonPredicate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSComparisonPredicate, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSComparisonPredicate)) };
        if is_kind_of {
            Ok(NSComparisonPredicate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSComparisonPredicate")
        }
    }
}
impl INSComparisonPredicate for NSComparisonPredicate {}
pub trait INSComparisonPredicate: Sized + std::ops::Deref {
    unsafe fn initWithLeftExpression_rightExpression_modifier_type_options_(
        &self,
        lhs: NSExpression,
        rhs: NSExpression,
        modifier: NSComparisonPredicateModifier,
        type_: NSPredicateOperatorType,
        options: NSComparisonPredicateOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithLeftExpression : lhs rightExpression : rhs modifier : modifier type : type_ options : options)
    }
    unsafe fn initWithLeftExpression_rightExpression_customSelector_(
        &self,
        lhs: NSExpression,
        rhs: NSExpression,
        selector: objc::runtime::Sel,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithLeftExpression : lhs rightExpression : rhs customSelector : selector)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn predicateOperatorType(&self) -> NSPredicateOperatorType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicateOperatorType)
    }
    unsafe fn comparisonPredicateModifier(&self) -> NSComparisonPredicateModifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, comparisonPredicateModifier)
    }
    unsafe fn leftExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, leftExpression)
    }
    unsafe fn rightExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rightExpression)
    }
    unsafe fn customSelector(&self) -> objc::runtime::Sel
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, customSelector)
    }
    unsafe fn options(&self) -> NSComparisonPredicateOptions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, options)
    }
    unsafe fn predicateWithLeftExpression_rightExpression_modifier_type_options_(
        lhs: NSExpression,
        rhs: NSExpression,
        modifier: NSComparisonPredicateModifier,
        type_: NSPredicateOperatorType,
        options: NSComparisonPredicateOptions,
    ) -> NSComparisonPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSComparisonPredicate) , predicateWithLeftExpression : lhs rightExpression : rhs modifier : modifier type : type_ options : options)
    }
    unsafe fn predicateWithLeftExpression_rightExpression_customSelector_(
        lhs: NSExpression,
        rhs: NSExpression,
        selector: objc::runtime::Sel,
    ) -> NSComparisonPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSComparisonPredicate) , predicateWithLeftExpression : lhs rightExpression : rhs customSelector : selector)
    }
}
pub const NSCompoundPredicateType_NSNotPredicateType: NSCompoundPredicateType = 0;
pub const NSCompoundPredicateType_NSAndPredicateType: NSCompoundPredicateType = 1;
pub const NSCompoundPredicateType_NSOrPredicateType: NSCompoundPredicateType = 2;
pub type NSCompoundPredicateType = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCompoundPredicate(pub id);
impl std::ops::Deref for NSCompoundPredicate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCompoundPredicate {}
impl NSCompoundPredicate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCompoundPredicate), alloc) })
    }
}
impl INSPredicate for NSCompoundPredicate {}
impl PNSSecureCoding for NSCompoundPredicate {}
impl PNSCopying for NSCompoundPredicate {}
impl From<NSCompoundPredicate> for NSPredicate {
    fn from(child: NSCompoundPredicate) -> NSPredicate {
        NSPredicate(child.0)
    }
}
impl std::convert::TryFrom<NSPredicate> for NSCompoundPredicate {
    type Error = &'static str;
    fn try_from(parent: NSPredicate) -> Result<NSCompoundPredicate, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSCompoundPredicate)) };
        if is_kind_of {
            Ok(NSCompoundPredicate(parent.0))
        } else {
            Err("This NSPredicate cannot be downcasted to NSCompoundPredicate")
        }
    }
}
impl INSObject for NSCompoundPredicate {}
impl PNSObject for NSCompoundPredicate {}
impl From<NSCompoundPredicate> for NSObject {
    fn from(child: NSCompoundPredicate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCompoundPredicate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCompoundPredicate, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSCompoundPredicate)) };
        if is_kind_of {
            Ok(NSCompoundPredicate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCompoundPredicate")
        }
    }
}
impl INSCompoundPredicate for NSCompoundPredicate {}
pub trait INSCompoundPredicate: Sized + std::ops::Deref {
    unsafe fn initWithType_subpredicates_(
        &self,
        type_: NSCompoundPredicateType,
        subpredicates: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithType : type_ subpredicates : subpredicates)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn compoundPredicateType(&self) -> NSCompoundPredicateType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compoundPredicateType)
    }
    unsafe fn subpredicates(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subpredicates)
    }
    unsafe fn andPredicateWithSubpredicates_(subpredicates: NSArray) -> NSCompoundPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCompoundPredicate),
            andPredicateWithSubpredicates: subpredicates
        )
    }
    unsafe fn orPredicateWithSubpredicates_(subpredicates: NSArray) -> NSCompoundPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCompoundPredicate),
            orPredicateWithSubpredicates: subpredicates
        )
    }
    unsafe fn notPredicateWithSubpredicate_(predicate: NSPredicate) -> NSCompoundPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCompoundPredicate),
            notPredicateWithSubpredicate: predicate
        )
    }
}
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStylePositional:
    NSDateComponentsFormatterUnitsStyle = 0;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleAbbreviated:
    NSDateComponentsFormatterUnitsStyle = 1;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleShort:
    NSDateComponentsFormatterUnitsStyle = 2;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleFull:
    NSDateComponentsFormatterUnitsStyle = 3;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleSpellOut:
    NSDateComponentsFormatterUnitsStyle = 4;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleBrief:
    NSDateComponentsFormatterUnitsStyle = 5;
pub type NSDateComponentsFormatterUnitsStyle = NSInteger;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorNone : NSDateComponentsFormatterZeroFormattingBehavior = 0 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDefault : NSDateComponentsFormatterZeroFormattingBehavior = 1 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropLeading : NSDateComponentsFormatterZeroFormattingBehavior = 2 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropMiddle : NSDateComponentsFormatterZeroFormattingBehavior = 4 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropTrailing : NSDateComponentsFormatterZeroFormattingBehavior = 8 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropAll : NSDateComponentsFormatterZeroFormattingBehavior = 14 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorPad : NSDateComponentsFormatterZeroFormattingBehavior = 65536 ;
pub type NSDateComponentsFormatterZeroFormattingBehavior = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDateComponentsFormatter(pub id);
impl std::ops::Deref for NSDateComponentsFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateComponentsFormatter {}
impl NSDateComponentsFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDateComponentsFormatter), alloc) })
    }
}
impl INSFormatter for NSDateComponentsFormatter {}
impl PNSCopying for NSDateComponentsFormatter {}
impl PNSCoding for NSDateComponentsFormatter {}
impl From<NSDateComponentsFormatter> for NSFormatter {
    fn from(child: NSDateComponentsFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateComponentsFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponentsFormatter)) };
        if is_kind_of {
            Ok(NSDateComponentsFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateComponentsFormatter")
        }
    }
}
impl INSObject for NSDateComponentsFormatter {}
impl PNSObject for NSDateComponentsFormatter {}
impl From<NSDateComponentsFormatter> for NSObject {
    fn from(child: NSDateComponentsFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateComponentsFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponentsFormatter)) };
        if is_kind_of {
            Ok(NSDateComponentsFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateComponentsFormatter")
        }
    }
}
impl INSDateComponentsFormatter for NSDateComponentsFormatter {}
pub trait INSDateComponentsFormatter: Sized + std::ops::Deref {
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn stringFromDateComponents_(&self, components: NSDateComponents) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDateComponents: components)
    }
    unsafe fn stringFromDate_toDate_(&self, startDate: NSDate, endDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromDate : startDate toDate : endDate)
    }
    unsafe fn stringFromTimeInterval_(&self, ti: NSTimeInterval) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromTimeInterval: ti)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn unitsStyle(&self) -> NSDateComponentsFormatterUnitsStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitsStyle)
    }
    unsafe fn setUnitsStyle_(&self, unitsStyle: NSDateComponentsFormatterUnitsStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitsStyle: unitsStyle)
    }
    unsafe fn allowedUnits(&self) -> NSCalendarUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowedUnits)
    }
    unsafe fn setAllowedUnits_(&self, allowedUnits: NSCalendarUnit)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowedUnits: allowedUnits)
    }
    unsafe fn zeroFormattingBehavior(&self) -> NSDateComponentsFormatterZeroFormattingBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zeroFormattingBehavior)
    }
    unsafe fn setZeroFormattingBehavior_(
        &self,
        zeroFormattingBehavior: NSDateComponentsFormatterZeroFormattingBehavior,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setZeroFormattingBehavior: zeroFormattingBehavior)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn referenceDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, referenceDate)
    }
    unsafe fn setReferenceDate_(&self, referenceDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReferenceDate: referenceDate)
    }
    unsafe fn allowsFractionalUnits(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsFractionalUnits)
    }
    unsafe fn setAllowsFractionalUnits_(&self, allowsFractionalUnits: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsFractionalUnits: allowsFractionalUnits)
    }
    unsafe fn maximumUnitCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumUnitCount)
    }
    unsafe fn setMaximumUnitCount_(&self, maximumUnitCount: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumUnitCount: maximumUnitCount)
    }
    unsafe fn collapsesLargestUnit(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, collapsesLargestUnit)
    }
    unsafe fn setCollapsesLargestUnit_(&self, collapsesLargestUnit: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCollapsesLargestUnit: collapsesLargestUnit)
    }
    unsafe fn includesApproximationPhrase(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesApproximationPhrase)
    }
    unsafe fn setIncludesApproximationPhrase_(&self, includesApproximationPhrase: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setIncludesApproximationPhrase: includesApproximationPhrase
        )
    }
    unsafe fn includesTimeRemainingPhrase(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesTimeRemainingPhrase)
    }
    unsafe fn setIncludesTimeRemainingPhrase_(&self, includesTimeRemainingPhrase: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setIncludesTimeRemainingPhrase: includesTimeRemainingPhrase
        )
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn localizedStringFromDateComponents_unitsStyle_(
        components: NSDateComponents,
        unitsStyle: NSDateComponentsFormatterUnitsStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateComponentsFormatter) , localizedStringFromDateComponents : components unitsStyle : unitsStyle)
    }
}
pub const NSExpressionType_NSConstantValueExpressionType: NSExpressionType = 0;
pub const NSExpressionType_NSEvaluatedObjectExpressionType: NSExpressionType = 1;
pub const NSExpressionType_NSVariableExpressionType: NSExpressionType = 2;
pub const NSExpressionType_NSKeyPathExpressionType: NSExpressionType = 3;
pub const NSExpressionType_NSFunctionExpressionType: NSExpressionType = 4;
pub const NSExpressionType_NSUnionSetExpressionType: NSExpressionType = 5;
pub const NSExpressionType_NSIntersectSetExpressionType: NSExpressionType = 6;
pub const NSExpressionType_NSMinusSetExpressionType: NSExpressionType = 7;
pub const NSExpressionType_NSSubqueryExpressionType: NSExpressionType = 13;
pub const NSExpressionType_NSAggregateExpressionType: NSExpressionType = 14;
pub const NSExpressionType_NSAnyKeyExpressionType: NSExpressionType = 15;
pub const NSExpressionType_NSBlockExpressionType: NSExpressionType = 19;
pub const NSExpressionType_NSConditionalExpressionType: NSExpressionType = 20;
pub type NSExpressionType = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSExpression(pub id);
impl std::ops::Deref for NSExpression {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSExpression {}
impl NSExpression {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSExpression), alloc) })
    }
}
impl PNSSecureCoding for NSExpression {}
impl PNSCopying for NSExpression {}
impl INSObject for NSExpression {}
impl PNSObject for NSExpression {}
impl From<NSExpression> for NSObject {
    fn from(child: NSExpression) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSExpression {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSExpression, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSExpression)) };
        if is_kind_of {
            Ok(NSExpression(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSExpression")
        }
    }
}
impl INSExpression for NSExpression {}
pub trait INSExpression: Sized + std::ops::Deref {
    unsafe fn initWithExpressionType_(&self, type_: NSExpressionType) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithExpressionType: type_)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn expressionValueWithObject_context_(
        &self,
        object: id,
        context: NSMutableDictionary,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , expressionValueWithObject : object context : context)
    }
    unsafe fn allowEvaluation(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowEvaluation)
    }
    unsafe fn expressionType(&self) -> NSExpressionType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, expressionType)
    }
    unsafe fn constantValue(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, constantValue)
    }
    unsafe fn keyPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyPath)
    }
    unsafe fn function(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, function)
    }
    unsafe fn variable(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, variable)
    }
    unsafe fn operand(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operand)
    }
    unsafe fn arguments(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arguments)
    }
    unsafe fn collection(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, collection)
    }
    unsafe fn predicate(&self) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicate)
    }
    unsafe fn leftExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, leftExpression)
    }
    unsafe fn rightExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rightExpression)
    }
    unsafe fn trueExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, trueExpression)
    }
    unsafe fn falseExpression(&self) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, falseExpression)
    }
    unsafe fn expressionBlock(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, expressionBlock)
    }
    unsafe fn expressionWithFormat_argumentArray_(
        expressionFormat: NSString,
        arguments: NSArray,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionWithFormat : expressionFormat argumentArray : arguments)
    }
    unsafe fn expressionWithFormat_(expressionFormat: NSString) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionWithFormat: expressionFormat)
    }
    unsafe fn expressionWithFormat_arguments_(
        expressionFormat: NSString,
        argList: va_list,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionWithFormat : expressionFormat arguments : argList)
    }
    unsafe fn expressionForConstantValue_(obj: id) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForConstantValue: obj)
    }
    unsafe fn expressionForEvaluatedObject() -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForEvaluatedObject)
    }
    unsafe fn expressionForVariable_(string: NSString) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForVariable: string)
    }
    unsafe fn expressionForKeyPath_(keyPath: NSString) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForKeyPath: keyPath)
    }
    unsafe fn expressionForFunction_arguments_(name: NSString, parameters: NSArray) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForFunction : name arguments : parameters)
    }
    unsafe fn expressionForAggregate_(subexpressions: NSArray) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForAggregate: subexpressions)
    }
    unsafe fn expressionForUnionSet_with_(left: NSExpression, right: NSExpression) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForUnionSet : left with : right)
    }
    unsafe fn expressionForIntersectSet_with_(
        left: NSExpression,
        right: NSExpression,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForIntersectSet : left with : right)
    }
    unsafe fn expressionForMinusSet_with_(left: NSExpression, right: NSExpression) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForMinusSet : left with : right)
    }
    unsafe fn expressionForSubquery_usingIteratorVariable_predicate_(
        expression: NSExpression,
        variable: NSString,
        predicate: NSPredicate,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForSubquery : expression usingIteratorVariable : variable predicate : predicate)
    }
    unsafe fn expressionForFunction_selectorName_arguments_(
        target: NSExpression,
        name: NSString,
        parameters: NSArray,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForFunction : target selectorName : name arguments : parameters)
    }
    unsafe fn expressionForAnyKey() -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSExpression), expressionForAnyKey)
    }
    unsafe fn expressionForBlock_arguments_(
        block: *mut ::std::os::raw::c_void,
        arguments: NSArray,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForBlock : block arguments : arguments)
    }
    unsafe fn expressionForConditional_trueExpression_falseExpression_(
        predicate: NSPredicate,
        trueExpression: NSExpression,
        falseExpression: NSExpression,
    ) -> NSExpression
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSExpression) , expressionForConditional : predicate trueExpression : trueExpression falseExpression : falseExpression)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSExtensionContext(pub id);
impl std::ops::Deref for NSExtensionContext {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSExtensionContext {}
impl NSExtensionContext {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSExtensionContext), alloc) })
    }
}
impl INSObject for NSExtensionContext {}
impl PNSObject for NSExtensionContext {}
impl From<NSExtensionContext> for NSObject {
    fn from(child: NSExtensionContext) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSExtensionContext {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSExtensionContext, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSExtensionContext)) };
        if is_kind_of {
            Ok(NSExtensionContext(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSExtensionContext")
        }
    }
}
impl INSExtensionContext for NSExtensionContext {}
pub trait INSExtensionContext: Sized + std::ops::Deref {
    unsafe fn completeRequestReturningItems_completionHandler_(
        &self,
        items: NSArray,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , completeRequestReturningItems : items completionHandler : completionHandler)
    }
    unsafe fn cancelRequestWithError_(&self, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelRequestWithError: error)
    }
    unsafe fn openURL_completionHandler_(
        &self,
        URL: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , openURL : URL completionHandler : completionHandler)
    }
    unsafe fn inputItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inputItems)
    }
}
extern "C" {
    pub static NSExtensionItemsAndErrorsKey: NSString;
}
extern "C" {
    pub static NSExtensionHostWillEnterForegroundNotification: NSString;
}
extern "C" {
    pub static NSExtensionHostDidEnterBackgroundNotification: NSString;
}
extern "C" {
    pub static NSExtensionHostWillResignActiveNotification: NSString;
}
extern "C" {
    pub static NSExtensionHostDidBecomeActiveNotification: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSExtensionItem(pub id);
impl std::ops::Deref for NSExtensionItem {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSExtensionItem {}
impl NSExtensionItem {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSExtensionItem), alloc) })
    }
}
impl PNSCopying for NSExtensionItem {}
impl PNSSecureCoding for NSExtensionItem {}
impl INSObject for NSExtensionItem {}
impl PNSObject for NSExtensionItem {}
impl From<NSExtensionItem> for NSObject {
    fn from(child: NSExtensionItem) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSExtensionItem {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSExtensionItem, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSExtensionItem)) };
        if is_kind_of {
            Ok(NSExtensionItem(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSExtensionItem")
        }
    }
}
impl INSExtensionItem for NSExtensionItem {}
pub trait INSExtensionItem: Sized + std::ops::Deref {
    unsafe fn attributedTitle(&self) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributedTitle)
    }
    unsafe fn setAttributedTitle_(&self, attributedTitle: NSAttributedString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAttributedTitle: attributedTitle)
    }
    unsafe fn attributedContentText(&self) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributedContentText)
    }
    unsafe fn setAttributedContentText_(&self, attributedContentText: NSAttributedString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAttributedContentText: attributedContentText)
    }
    unsafe fn attachments(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attachments)
    }
    unsafe fn setAttachments_(&self, attachments: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAttachments: attachments)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn setUserInfo_(&self, userInfo: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUserInfo: userInfo)
    }
}
extern "C" {
    pub static NSExtensionItemAttributedTitleKey: NSString;
}
extern "C" {
    pub static NSExtensionItemAttributedContentTextKey: NSString;
}
extern "C" {
    pub static NSExtensionItemAttachmentsKey: NSString;
}
pub trait PNSExtensionRequestHandling: Sized + std::ops::Deref {
    unsafe fn beginRequestWithExtensionContext_(&self, context: NSExtensionContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, beginRequestWithExtensionContext: context)
    }
}
pub const NSFileCoordinatorReadingOptions_NSFileCoordinatorReadingWithoutChanges:
    NSFileCoordinatorReadingOptions = 1;
pub const NSFileCoordinatorReadingOptions_NSFileCoordinatorReadingResolvesSymbolicLink:
    NSFileCoordinatorReadingOptions = 2;
pub const NSFileCoordinatorReadingOptions_NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly : NSFileCoordinatorReadingOptions = 4 ;
pub const NSFileCoordinatorReadingOptions_NSFileCoordinatorReadingForUploading:
    NSFileCoordinatorReadingOptions = 8;
pub type NSFileCoordinatorReadingOptions = NSUInteger;
pub const NSFileCoordinatorWritingOptions_NSFileCoordinatorWritingForDeleting:
    NSFileCoordinatorWritingOptions = 1;
pub const NSFileCoordinatorWritingOptions_NSFileCoordinatorWritingForMoving:
    NSFileCoordinatorWritingOptions = 2;
pub const NSFileCoordinatorWritingOptions_NSFileCoordinatorWritingForMerging:
    NSFileCoordinatorWritingOptions = 4;
pub const NSFileCoordinatorWritingOptions_NSFileCoordinatorWritingForReplacing:
    NSFileCoordinatorWritingOptions = 8;
pub const NSFileCoordinatorWritingOptions_NSFileCoordinatorWritingContentIndependentMetadataOnly:
    NSFileCoordinatorWritingOptions = 16;
pub type NSFileCoordinatorWritingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileAccessIntent(pub id);
impl std::ops::Deref for NSFileAccessIntent {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileAccessIntent {}
impl NSFileAccessIntent {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileAccessIntent), alloc) })
    }
}
impl INSObject for NSFileAccessIntent {}
impl PNSObject for NSFileAccessIntent {}
impl From<NSFileAccessIntent> for NSObject {
    fn from(child: NSFileAccessIntent) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileAccessIntent {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileAccessIntent, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSFileAccessIntent)) };
        if is_kind_of {
            Ok(NSFileAccessIntent(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileAccessIntent")
        }
    }
}
impl INSFileAccessIntent for NSFileAccessIntent {}
pub trait INSFileAccessIntent: Sized + std::ops::Deref {
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn readingIntentWithURL_options_(
        url: NSURL,
        options: NSFileCoordinatorReadingOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileAccessIntent) , readingIntentWithURL : url options : options)
    }
    unsafe fn writingIntentWithURL_options_(
        url: NSURL,
        options: NSFileCoordinatorWritingOptions,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileAccessIntent) , writingIntentWithURL : url options : options)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileCoordinator(pub id);
impl std::ops::Deref for NSFileCoordinator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileCoordinator {}
impl NSFileCoordinator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileCoordinator), alloc) })
    }
}
impl INSObject for NSFileCoordinator {}
impl PNSObject for NSFileCoordinator {}
impl From<NSFileCoordinator> for NSObject {
    fn from(child: NSFileCoordinator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileCoordinator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileCoordinator, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSFileCoordinator)) };
        if is_kind_of {
            Ok(NSFileCoordinator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileCoordinator")
        }
    }
}
impl INSFileCoordinator for NSFileCoordinator {}
pub trait INSFileCoordinator: Sized + std::ops::Deref {
    unsafe fn initWithFilePresenter_(&self, filePresenterOrNil: *mut u64) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFilePresenter: filePresenterOrNil)
    }
    unsafe fn coordinateAccessWithIntents_queue_byAccessor_(
        &self,
        intents: NSArray,
        queue: NSOperationQueue,
        accessor: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coordinateAccessWithIntents : intents queue : queue byAccessor : accessor)
    }
    unsafe fn coordinateReadingItemAtURL_options_error_byAccessor_(
        &self,
        url: NSURL,
        options: NSFileCoordinatorReadingOptions,
        outError: *mut NSError,
        reader: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coordinateReadingItemAtURL : url options : options error : outError byAccessor : reader)
    }
    unsafe fn coordinateWritingItemAtURL_options_error_byAccessor_(
        &self,
        url: NSURL,
        options: NSFileCoordinatorWritingOptions,
        outError: *mut NSError,
        writer: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coordinateWritingItemAtURL : url options : options error : outError byAccessor : writer)
    }
    unsafe fn coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_(
        &self,
        readingURL: NSURL,
        readingOptions: NSFileCoordinatorReadingOptions,
        writingURL: NSURL,
        writingOptions: NSFileCoordinatorWritingOptions,
        outError: *mut NSError,
        readerWriter: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coordinateReadingItemAtURL : readingURL options : readingOptions writingItemAtURL : writingURL options : writingOptions error : outError byAccessor : readerWriter)
    }
    unsafe fn coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor_(
        &self,
        url1: NSURL,
        options1: NSFileCoordinatorWritingOptions,
        url2: NSURL,
        options2: NSFileCoordinatorWritingOptions,
        outError: *mut NSError,
        writer: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coordinateWritingItemAtURL : url1 options : options1 writingItemAtURL : url2 options : options2 error : outError byAccessor : writer)
    }
    unsafe fn prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor_(
        &self,
        readingURLs: NSArray,
        readingOptions: NSFileCoordinatorReadingOptions,
        writingURLs: NSArray,
        writingOptions: NSFileCoordinatorWritingOptions,
        outError: *mut NSError,
        batchAccessor: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , prepareForReadingItemsAtURLs : readingURLs options : readingOptions writingItemsAtURLs : writingURLs options : writingOptions error : outError byAccessor : batchAccessor)
    }
    unsafe fn itemAtURL_willMoveToURL_(&self, oldURL: NSURL, newURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , itemAtURL : oldURL willMoveToURL : newURL)
    }
    unsafe fn itemAtURL_didMoveToURL_(&self, oldURL: NSURL, newURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , itemAtURL : oldURL didMoveToURL : newURL)
    }
    unsafe fn itemAtURL_didChangeUbiquityAttributes_(&self, url: NSURL, attributes: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , itemAtURL : url didChangeUbiquityAttributes : attributes)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn purposeIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, purposeIdentifier)
    }
    unsafe fn setPurposeIdentifier_(&self, purposeIdentifier: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPurposeIdentifier: purposeIdentifier)
    }
    unsafe fn addFilePresenter_(filePresenter: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileCoordinator), addFilePresenter: filePresenter)
    }
    unsafe fn removeFilePresenter_(filePresenter: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSFileCoordinator),
            removeFilePresenter: filePresenter
        )
    }
    unsafe fn filePresenters() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileCoordinator), filePresenters)
    }
}
pub trait PNSFilePresenter: Sized + std::ops::Deref {
    unsafe fn relinquishPresentedItemToReader_(&self, reader: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relinquishPresentedItemToReader: reader)
    }
    unsafe fn relinquishPresentedItemToWriter_(&self, writer: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relinquishPresentedItemToWriter: writer)
    }
    unsafe fn savePresentedItemChangesWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            savePresentedItemChangesWithCompletionHandler: completionHandler
        )
    }
    unsafe fn accommodatePresentedItemDeletionWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            accommodatePresentedItemDeletionWithCompletionHandler: completionHandler
        )
    }
    unsafe fn presentedItemDidMoveToURL_(&self, newURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidMoveToURL: newURL)
    }
    unsafe fn presentedItemDidChange(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidChange)
    }
    unsafe fn presentedItemDidChangeUbiquityAttributes_(&self, attributes: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidChangeUbiquityAttributes: attributes)
    }
    unsafe fn presentedItemDidGainVersion_(&self, version: NSFileVersion)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidGainVersion: version)
    }
    unsafe fn presentedItemDidLoseVersion_(&self, version: NSFileVersion)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidLoseVersion: version)
    }
    unsafe fn presentedItemDidResolveConflictVersion_(&self, version: NSFileVersion)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemDidResolveConflictVersion: version)
    }
    unsafe fn accommodatePresentedSubitemDeletionAtURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , accommodatePresentedSubitemDeletionAtURL : url completionHandler : completionHandler)
    }
    unsafe fn presentedSubitemDidAppearAtURL_(&self, url: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedSubitemDidAppearAtURL: url)
    }
    unsafe fn presentedSubitemAtURL_didMoveToURL_(&self, oldURL: NSURL, newURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , presentedSubitemAtURL : oldURL didMoveToURL : newURL)
    }
    unsafe fn presentedSubitemDidChangeAtURL_(&self, url: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedSubitemDidChangeAtURL: url)
    }
    unsafe fn presentedSubitemAtURL_didGainVersion_(&self, url: NSURL, version: NSFileVersion)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , presentedSubitemAtURL : url didGainVersion : version)
    }
    unsafe fn presentedSubitemAtURL_didLoseVersion_(&self, url: NSURL, version: NSFileVersion)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , presentedSubitemAtURL : url didLoseVersion : version)
    }
    unsafe fn presentedSubitemAtURL_didResolveConflictVersion_(
        &self,
        url: NSURL,
        version: NSFileVersion,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , presentedSubitemAtURL : url didResolveConflictVersion : version)
    }
    unsafe fn presentedItemURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemURL)
    }
    unsafe fn presentedItemOperationQueue(&self) -> NSOperationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, presentedItemOperationQueue)
    }
    unsafe fn primaryPresentedItemURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, primaryPresentedItemURL)
    }
    unsafe fn observedPresentedItemUbiquityAttributes(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, observedPresentedItemUbiquityAttributes)
    }
}
pub const NSFileVersionAddingOptions_NSFileVersionAddingByMoving: NSFileVersionAddingOptions = 1;
pub type NSFileVersionAddingOptions = NSUInteger;
pub const NSFileVersionReplacingOptions_NSFileVersionReplacingByMoving:
    NSFileVersionReplacingOptions = 1;
pub type NSFileVersionReplacingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileVersion(pub id);
impl std::ops::Deref for NSFileVersion {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileVersion {}
impl NSFileVersion {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileVersion), alloc) })
    }
}
impl INSObject for NSFileVersion {}
impl PNSObject for NSFileVersion {}
impl From<NSFileVersion> for NSObject {
    fn from(child: NSFileVersion) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileVersion {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileVersion, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileVersion)) };
        if is_kind_of {
            Ok(NSFileVersion(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileVersion")
        }
    }
}
impl INSFileVersion for NSFileVersion {}
pub trait INSFileVersion: Sized + std::ops::Deref {
    unsafe fn replaceItemAtURL_options_error_(
        &self,
        url: NSURL,
        options: NSFileVersionReplacingOptions,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceItemAtURL : url options : options error : error)
    }
    unsafe fn removeAndReturnError_(&self, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAndReturnError: outError)
    }
    unsafe fn URL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URL)
    }
    unsafe fn localizedName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedName)
    }
    unsafe fn localizedNameOfSavingComputer(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedNameOfSavingComputer)
    }
    unsafe fn originatorNameComponents(&self) -> NSPersonNameComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, originatorNameComponents)
    }
    unsafe fn modificationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, modificationDate)
    }
    unsafe fn persistentIdentifier(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, persistentIdentifier)
    }
    unsafe fn isConflict(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isConflict)
    }
    unsafe fn isResolved(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isResolved)
    }
    unsafe fn setResolved_(&self, resolved: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setResolved: resolved)
    }
    unsafe fn isDiscardable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDiscardable)
    }
    unsafe fn setDiscardable_(&self, discardable: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDiscardable: discardable)
    }
    unsafe fn hasLocalContents(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasLocalContents)
    }
    unsafe fn hasThumbnail(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasThumbnail)
    }
    unsafe fn currentVersionOfItemAtURL_(url: NSURL) -> NSFileVersion
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileVersion), currentVersionOfItemAtURL: url)
    }
    unsafe fn otherVersionsOfItemAtURL_(url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileVersion), otherVersionsOfItemAtURL: url)
    }
    unsafe fn unresolvedConflictVersionsOfItemAtURL_(url: NSURL) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSFileVersion),
            unresolvedConflictVersionsOfItemAtURL: url
        )
    }
    unsafe fn getNonlocalVersionsOfItemAtURL_completionHandler_(
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileVersion) , getNonlocalVersionsOfItemAtURL : url completionHandler : completionHandler)
    }
    unsafe fn versionOfItemAtURL_forPersistentIdentifier_(
        url: NSURL,
        persistentIdentifier: id,
    ) -> NSFileVersion
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileVersion) , versionOfItemAtURL : url forPersistentIdentifier : persistentIdentifier)
    }
    unsafe fn addVersionOfItemAtURL_withContentsOfURL_options_error_(
        url: NSURL,
        contentsURL: NSURL,
        options: NSFileVersionAddingOptions,
        outError: *mut NSError,
    ) -> NSFileVersion
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileVersion) , addVersionOfItemAtURL : url withContentsOfURL : contentsURL options : options error : outError)
    }
    unsafe fn temporaryDirectoryURLForNewVersionOfItemAtURL_(url: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSFileVersion),
            temporaryDirectoryURLForNewVersionOfItemAtURL: url
        )
    }
    unsafe fn removeOtherVersionsOfItemAtURL_error_(url: NSURL, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSFileVersion) , removeOtherVersionsOfItemAtURL : url error : outError)
    }
}
pub const NSFileWrapperReadingOptions_NSFileWrapperReadingImmediate: NSFileWrapperReadingOptions =
    1;
pub const NSFileWrapperReadingOptions_NSFileWrapperReadingWithoutMapping:
    NSFileWrapperReadingOptions = 2;
pub type NSFileWrapperReadingOptions = NSUInteger;
pub const NSFileWrapperWritingOptions_NSFileWrapperWritingAtomic: NSFileWrapperWritingOptions = 1;
pub const NSFileWrapperWritingOptions_NSFileWrapperWritingWithNameUpdating:
    NSFileWrapperWritingOptions = 2;
pub type NSFileWrapperWritingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSFileWrapper(pub id);
impl std::ops::Deref for NSFileWrapper {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileWrapper {}
impl NSFileWrapper {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSFileWrapper), alloc) })
    }
}
impl PNSSecureCoding for NSFileWrapper {}
impl INSObject for NSFileWrapper {}
impl PNSObject for NSFileWrapper {}
impl From<NSFileWrapper> for NSObject {
    fn from(child: NSFileWrapper) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileWrapper {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileWrapper, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileWrapper)) };
        if is_kind_of {
            Ok(NSFileWrapper(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileWrapper")
        }
    }
}
impl INSFileWrapper for NSFileWrapper {}
pub trait INSFileWrapper: Sized + std::ops::Deref {
    unsafe fn initWithURL_options_error_(
        &self,
        url: NSURL,
        options: NSFileWrapperReadingOptions,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithURL : url options : options error : outError)
    }
    unsafe fn initDirectoryWithFileWrappers_(
        &self,
        childrenByPreferredName: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            initDirectoryWithFileWrappers: childrenByPreferredName
        )
    }
    unsafe fn initRegularFileWithContents_(&self, contents: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initRegularFileWithContents: contents)
    }
    unsafe fn initSymbolicLinkWithDestinationURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initSymbolicLinkWithDestinationURL: url)
    }
    unsafe fn initWithSerializedRepresentation_(
        &self,
        serializeRepresentation: NSData,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            initWithSerializedRepresentation: serializeRepresentation
        )
    }
    unsafe fn initWithCoder_(&self, inCoder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: inCoder)
    }
    unsafe fn matchesContentsOfURL_(&self, url: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, matchesContentsOfURL: url)
    }
    unsafe fn readFromURL_options_error_(
        &self,
        url: NSURL,
        options: NSFileWrapperReadingOptions,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , readFromURL : url options : options error : outError)
    }
    unsafe fn writeToURL_options_originalContentsURL_error_(
        &self,
        url: NSURL,
        options: NSFileWrapperWritingOptions,
        originalContentsURL: NSURL,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeToURL : url options : options originalContentsURL : originalContentsURL error : outError)
    }
    unsafe fn addFileWrapper_(&self, child: NSFileWrapper) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addFileWrapper: child)
    }
    unsafe fn addRegularFileWithContents_preferredFilename_(
        &self,
        data: NSData,
        fileName: NSString,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addRegularFileWithContents : data preferredFilename : fileName)
    }
    unsafe fn removeFileWrapper_(&self, child: NSFileWrapper)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeFileWrapper: child)
    }
    unsafe fn keyForFileWrapper_(&self, child: NSFileWrapper) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyForFileWrapper: child)
    }
    unsafe fn isDirectory(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDirectory)
    }
    unsafe fn isRegularFile(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isRegularFile)
    }
    unsafe fn isSymbolicLink(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSymbolicLink)
    }
    unsafe fn preferredFilename(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, preferredFilename)
    }
    unsafe fn setPreferredFilename_(&self, preferredFilename: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPreferredFilename: preferredFilename)
    }
    unsafe fn filename(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filename)
    }
    unsafe fn setFilename_(&self, filename: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFilename: filename)
    }
    unsafe fn fileAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileAttributes)
    }
    unsafe fn setFileAttributes_(&self, fileAttributes: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFileAttributes: fileAttributes)
    }
    unsafe fn serializedRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, serializedRepresentation)
    }
    unsafe fn fileWrappers(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileWrappers)
    }
    unsafe fn regularFileContents(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, regularFileContents)
    }
    unsafe fn symbolicLinkDestinationURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, symbolicLinkDestinationURL)
    }
}
pub type NSLinguisticTagScheme = NSString;
extern "C" {
    pub static NSLinguisticTagSchemeTokenType: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeLexicalClass: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeNameType: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeNameTypeOrLexicalClass: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeLemma: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeLanguage: NSLinguisticTagScheme;
}
extern "C" {
    pub static NSLinguisticTagSchemeScript: NSLinguisticTagScheme;
}
pub type NSLinguisticTag = NSString;
extern "C" {
    pub static NSLinguisticTagWord: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagPunctuation: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagWhitespace: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOther: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagNoun: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagVerb: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagAdjective: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagAdverb: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagPronoun: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagDeterminer: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagParticle: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagPreposition: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagNumber: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagConjunction: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagInterjection: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagClassifier: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagIdiom: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOtherWord: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagSentenceTerminator: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOpenQuote: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagCloseQuote: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOpenParenthesis: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagCloseParenthesis: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagWordJoiner: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagDash: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOtherPunctuation: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagParagraphBreak: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOtherWhitespace: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagPersonalName: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagPlaceName: NSLinguisticTag;
}
extern "C" {
    pub static NSLinguisticTagOrganizationName: NSLinguisticTag;
}
pub const NSLinguisticTaggerUnit_NSLinguisticTaggerUnitWord: NSLinguisticTaggerUnit = 0;
pub const NSLinguisticTaggerUnit_NSLinguisticTaggerUnitSentence: NSLinguisticTaggerUnit = 1;
pub const NSLinguisticTaggerUnit_NSLinguisticTaggerUnitParagraph: NSLinguisticTaggerUnit = 2;
pub const NSLinguisticTaggerUnit_NSLinguisticTaggerUnitDocument: NSLinguisticTaggerUnit = 3;
pub type NSLinguisticTaggerUnit = NSInteger;
pub const NSLinguisticTaggerOptions_NSLinguisticTaggerOmitWords: NSLinguisticTaggerOptions = 1;
pub const NSLinguisticTaggerOptions_NSLinguisticTaggerOmitPunctuation: NSLinguisticTaggerOptions =
    2;
pub const NSLinguisticTaggerOptions_NSLinguisticTaggerOmitWhitespace: NSLinguisticTaggerOptions = 4;
pub const NSLinguisticTaggerOptions_NSLinguisticTaggerOmitOther: NSLinguisticTaggerOptions = 8;
pub const NSLinguisticTaggerOptions_NSLinguisticTaggerJoinNames: NSLinguisticTaggerOptions = 16;
pub type NSLinguisticTaggerOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLinguisticTagger(pub id);
impl std::ops::Deref for NSLinguisticTagger {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLinguisticTagger {}
impl NSLinguisticTagger {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLinguisticTagger), alloc) })
    }
}
impl INSObject for NSLinguisticTagger {}
impl PNSObject for NSLinguisticTagger {}
impl From<NSLinguisticTagger> for NSObject {
    fn from(child: NSLinguisticTagger) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSLinguisticTagger {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSLinguisticTagger, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSLinguisticTagger)) };
        if is_kind_of {
            Ok(NSLinguisticTagger(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSLinguisticTagger")
        }
    }
}
impl INSLinguisticTagger for NSLinguisticTagger {}
pub trait INSLinguisticTagger: Sized + std::ops::Deref {
    unsafe fn initWithTagSchemes_options_(
        &self,
        tagSchemes: NSArray,
        opts: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTagSchemes : tagSchemes options : opts)
    }
    unsafe fn setOrthography_range_(&self, orthography: NSOrthography, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setOrthography : orthography range : range)
    }
    unsafe fn orthographyAtIndex_effectiveRange_(
        &self,
        charIndex: NSUInteger,
        effectiveRange: NSRangePointer,
    ) -> NSOrthography
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , orthographyAtIndex : charIndex effectiveRange : effectiveRange)
    }
    unsafe fn stringEditedInRange_changeInLength_(&self, newRange: NSRange, delta: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringEditedInRange : newRange changeInLength : delta)
    }
    unsafe fn tokenRangeAtIndex_unit_(
        &self,
        charIndex: NSUInteger,
        unit: NSLinguisticTaggerUnit,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , tokenRangeAtIndex : charIndex unit : unit)
    }
    unsafe fn sentenceRangeForRange_(&self, range: NSRange) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sentenceRangeForRange: range)
    }
    unsafe fn enumerateTagsInRange_unit_scheme_options_usingBlock_(
        &self,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateTagsInRange : range unit : unit scheme : scheme options : options usingBlock : block)
    }
    unsafe fn tagAtIndex_unit_scheme_tokenRange_(
        &self,
        charIndex: NSUInteger,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        tokenRange: NSRangePointer,
    ) -> NSLinguisticTag
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , tagAtIndex : charIndex unit : unit scheme : scheme tokenRange : tokenRange)
    }
    unsafe fn tagsInRange_unit_scheme_options_tokenRanges_(
        &self,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        tokenRanges: *mut NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , tagsInRange : range unit : unit scheme : scheme options : options tokenRanges : tokenRanges)
    }
    unsafe fn enumerateTagsInRange_scheme_options_usingBlock_(
        &self,
        range: NSRange,
        tagScheme: NSString,
        opts: NSLinguisticTaggerOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateTagsInRange : range scheme : tagScheme options : opts usingBlock : block)
    }
    unsafe fn tagAtIndex_scheme_tokenRange_sentenceRange_(
        &self,
        charIndex: NSUInteger,
        scheme: NSString,
        tokenRange: NSRangePointer,
        sentenceRange: NSRangePointer,
    ) -> NSLinguisticTag
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , tagAtIndex : charIndex scheme : scheme tokenRange : tokenRange sentenceRange : sentenceRange)
    }
    unsafe fn tagsInRange_scheme_options_tokenRanges_(
        &self,
        range: NSRange,
        tagScheme: NSString,
        opts: NSLinguisticTaggerOptions,
        tokenRanges: *mut NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , tagsInRange : range scheme : tagScheme options : opts tokenRanges : tokenRanges)
    }
    unsafe fn possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores_(
        &self,
        charIndex: NSUInteger,
        tagScheme: NSString,
        tokenRange: NSRangePointer,
        sentenceRange: NSRangePointer,
        scores: *mut NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , possibleTagsAtIndex : charIndex scheme : tagScheme tokenRange : tokenRange sentenceRange : sentenceRange scores : scores)
    }
    unsafe fn tagSchemes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tagSchemes)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
    unsafe fn setString_(&self, string: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setString: string)
    }
    unsafe fn dominantLanguage(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dominantLanguage)
    }
    unsafe fn availableTagSchemesForUnit_language_(
        unit: NSLinguisticTaggerUnit,
        language: NSString,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSLinguisticTagger) , availableTagSchemesForUnit : unit language : language)
    }
    unsafe fn availableTagSchemesForLanguage_(language: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLinguisticTagger),
            availableTagSchemesForLanguage: language
        )
    }
    unsafe fn dominantLanguageForString_(string: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSLinguisticTagger),
            dominantLanguageForString: string
        )
    }
    unsafe fn tagForString_atIndex_unit_scheme_orthography_tokenRange_(
        string: NSString,
        charIndex: NSUInteger,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        orthography: NSOrthography,
        tokenRange: NSRangePointer,
    ) -> NSLinguisticTag
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSLinguisticTagger) , tagForString : string atIndex : charIndex unit : unit scheme : scheme orthography : orthography tokenRange : tokenRange)
    }
    unsafe fn tagsForString_range_unit_scheme_options_orthography_tokenRanges_(
        string: NSString,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        orthography: NSOrthography,
        tokenRanges: *mut NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSLinguisticTagger) , tagsForString : string range : range unit : unit scheme : scheme options : options orthography : orthography tokenRanges : tokenRanges)
    }
    unsafe fn enumerateTagsForString_range_unit_scheme_options_orthography_usingBlock_(
        string: NSString,
        range: NSRange,
        unit: NSLinguisticTaggerUnit,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        orthography: NSOrthography,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSLinguisticTagger) , enumerateTagsForString : string range : range unit : unit scheme : scheme options : options orthography : orthography usingBlock : block)
    }
}
impl NSString_NSLinguisticAnalysis for NSString {}
pub trait NSString_NSLinguisticAnalysis: Sized + std::ops::Deref {
    unsafe fn linguisticTagsInRange_scheme_options_orthography_tokenRanges_(
        &self,
        range: NSRange,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        orthography: NSOrthography,
        tokenRanges: *mut NSArray,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linguisticTagsInRange : range scheme : scheme options : options orthography : orthography tokenRanges : tokenRanges)
    }
    unsafe fn enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_(
        &self,
        range: NSRange,
        scheme: NSString,
        options: NSLinguisticTaggerOptions,
        orthography: NSOrthography,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateLinguisticTagsInRange : range scheme : scheme options : options orthography : orthography usingBlock : block)
    }
}
extern "C" {
    pub static NSMetadataItemFSNameKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDisplayNameKey: NSString;
}
extern "C" {
    pub static NSMetadataItemURLKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPathKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFSSizeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFSCreationDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFSContentChangeDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContentTypeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContentTypeTreeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemIsUbiquitousKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemHasUnresolvedConflictsKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsDownloadedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadingStatusKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadingStatusNotDownloaded: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadingStatusDownloaded: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadingStatusCurrent: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsDownloadingKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsUploadedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsUploadingKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemPercentDownloadedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemPercentUploadedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadingErrorKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemUploadingErrorKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemDownloadRequestedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsExternalDocumentKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemContainerDisplayNameKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemURLInLocalContainerKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousItemIsSharedKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemCurrentUserRoleKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemOwnerNameComponentsKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemRoleOwner: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemRoleParticipant: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemPermissionsReadOnly: NSString;
}
extern "C" {
    pub static NSMetadataUbiquitousSharedItemPermissionsReadWrite: NSString;
}
extern "C" {
    pub static NSMetadataItemAttributeChangeDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemKeywordsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTitleKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAuthorsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemEditorsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemParticipantsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemProjectsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDownloadedDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemWhereFromsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCommentKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCopyrightKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLastUsedDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContentCreationDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContentModificationDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDateAddedKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDurationSecondsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContactKeywordsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemVersionKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPixelHeightKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPixelWidthKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPixelCountKey: NSString;
}
extern "C" {
    pub static NSMetadataItemColorSpaceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemBitsPerSampleKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFlashOnOffKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFocalLengthKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAcquisitionMakeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAcquisitionModelKey: NSString;
}
extern "C" {
    pub static NSMetadataItemISOSpeedKey: NSString;
}
extern "C" {
    pub static NSMetadataItemOrientationKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLayerNamesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemWhiteBalanceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemApertureKey: NSString;
}
extern "C" {
    pub static NSMetadataItemProfileNameKey: NSString;
}
extern "C" {
    pub static NSMetadataItemResolutionWidthDPIKey: NSString;
}
extern "C" {
    pub static NSMetadataItemResolutionHeightDPIKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExposureModeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExposureTimeSecondsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemEXIFVersionKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCameraOwnerKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFocalLength35mmKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLensModelKey: NSString;
}
extern "C" {
    pub static NSMetadataItemEXIFGPSVersionKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAltitudeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLatitudeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLongitudeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemSpeedKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTimestampKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSTrackKey: NSString;
}
extern "C" {
    pub static NSMetadataItemImageDirectionKey: NSString;
}
extern "C" {
    pub static NSMetadataItemNamedLocationKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSStatusKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSMeasureModeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDOPKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSMapDatumKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDestLatitudeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDestLongitudeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDestBearingKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDestDistanceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSProcessingMethodKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSAreaInformationKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDateStampKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGPSDifferentalKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCodecsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMediaTypesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemStreamableKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTotalBitRateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemVideoBitRateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudioBitRateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDeliveryTypeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAlbumKey: NSString;
}
extern "C" {
    pub static NSMetadataItemHasAlphaChannelKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRedEyeOnOffKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMeteringModeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMaxApertureKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFNumberKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExposureProgramKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExposureTimeStringKey: NSString;
}
extern "C" {
    pub static NSMetadataItemHeadlineKey: NSString;
}
extern "C" {
    pub static NSMetadataItemInstructionsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCityKey: NSString;
}
extern "C" {
    pub static NSMetadataItemStateOrProvinceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCountryKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTextContentKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudioSampleRateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudioChannelCountKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTempoKey: NSString;
}
extern "C" {
    pub static NSMetadataItemKeySignatureKey: NSString;
}
extern "C" {
    pub static NSMetadataItemTimeSignatureKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudioEncodingApplicationKey: NSString;
}
extern "C" {
    pub static NSMetadataItemComposerKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLyricistKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudioTrackNumberKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRecordingDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMusicalGenreKey: NSString;
}
extern "C" {
    pub static NSMetadataItemIsGeneralMIDISequenceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRecordingYearKey: NSString;
}
extern "C" {
    pub static NSMetadataItemOrganizationsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemLanguagesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRightsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPublishersKey: NSString;
}
extern "C" {
    pub static NSMetadataItemContributorsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCoverageKey: NSString;
}
extern "C" {
    pub static NSMetadataItemSubjectKey: NSString;
}
extern "C" {
    pub static NSMetadataItemThemeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDescriptionKey: NSString;
}
extern "C" {
    pub static NSMetadataItemIdentifierKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAudiencesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemNumberOfPagesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPageWidthKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPageHeightKey: NSString;
}
extern "C" {
    pub static NSMetadataItemSecurityMethodKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCreatorKey: NSString;
}
extern "C" {
    pub static NSMetadataItemEncodingApplicationsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDueDateKey: NSString;
}
extern "C" {
    pub static NSMetadataItemStarRatingKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPhoneNumbersKey: NSString;
}
extern "C" {
    pub static NSMetadataItemEmailAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemInstantMessageAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemKindKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRecipientsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFinderCommentKey: NSString;
}
extern "C" {
    pub static NSMetadataItemFontsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAppleLoopsRootKeyKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAppleLoopsKeyFilterTypeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAppleLoopsLoopModeKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAppleLoopDescriptorsKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMusicalInstrumentCategoryKey: NSString;
}
extern "C" {
    pub static NSMetadataItemMusicalInstrumentNameKey: NSString;
}
extern "C" {
    pub static NSMetadataItemCFBundleIdentifierKey: NSString;
}
extern "C" {
    pub static NSMetadataItemInformationKey: NSString;
}
extern "C" {
    pub static NSMetadataItemDirectorKey: NSString;
}
extern "C" {
    pub static NSMetadataItemProducerKey: NSString;
}
extern "C" {
    pub static NSMetadataItemGenreKey: NSString;
}
extern "C" {
    pub static NSMetadataItemPerformersKey: NSString;
}
extern "C" {
    pub static NSMetadataItemOriginalFormatKey: NSString;
}
extern "C" {
    pub static NSMetadataItemOriginalSourceKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAuthorEmailAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRecipientEmailAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemAuthorAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemRecipientAddressesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemIsLikelyJunkKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExecutableArchitecturesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemExecutablePlatformKey: NSString;
}
extern "C" {
    pub static NSMetadataItemApplicationCategoriesKey: NSString;
}
extern "C" {
    pub static NSMetadataItemIsApplicationManagedKey: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMetadataQuery(pub id);
impl std::ops::Deref for NSMetadataQuery {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMetadataQuery {}
impl NSMetadataQuery {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMetadataQuery), alloc) })
    }
}
impl INSObject for NSMetadataQuery {}
impl PNSObject for NSMetadataQuery {}
impl From<NSMetadataQuery> for NSObject {
    fn from(child: NSMetadataQuery) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMetadataQuery {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMetadataQuery, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMetadataQuery)) };
        if is_kind_of {
            Ok(NSMetadataQuery(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMetadataQuery")
        }
    }
}
impl INSMetadataQuery for NSMetadataQuery {}
pub trait INSMetadataQuery: Sized + std::ops::Deref {
    unsafe fn startQuery(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startQuery)
    }
    unsafe fn stopQuery(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopQuery)
    }
    unsafe fn disableUpdates(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, disableUpdates)
    }
    unsafe fn enableUpdates(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enableUpdates)
    }
    unsafe fn resultAtIndex_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultAtIndex: idx)
    }
    unsafe fn enumerateResultsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateResultsUsingBlock: block)
    }
    unsafe fn enumerateResultsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateResultsWithOptions : opts usingBlock : block)
    }
    unsafe fn indexOfResult_(&self, result: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfResult: result)
    }
    unsafe fn valueOfAttribute_forResultAtIndex_(&self, attrName: NSString, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , valueOfAttribute : attrName forResultAtIndex : idx)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn predicate(&self) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicate)
    }
    unsafe fn setPredicate_(&self, predicate: NSPredicate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPredicate: predicate)
    }
    unsafe fn sortDescriptors(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortDescriptors)
    }
    unsafe fn setSortDescriptors_(&self, sortDescriptors: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSortDescriptors: sortDescriptors)
    }
    unsafe fn valueListAttributes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueListAttributes)
    }
    unsafe fn setValueListAttributes_(&self, valueListAttributes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setValueListAttributes: valueListAttributes)
    }
    unsafe fn groupingAttributes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupingAttributes)
    }
    unsafe fn setGroupingAttributes_(&self, groupingAttributes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGroupingAttributes: groupingAttributes)
    }
    unsafe fn notificationBatchingInterval(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, notificationBatchingInterval)
    }
    unsafe fn setNotificationBatchingInterval_(&self, notificationBatchingInterval: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setNotificationBatchingInterval: notificationBatchingInterval
        )
    }
    unsafe fn searchScopes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, searchScopes)
    }
    unsafe fn setSearchScopes_(&self, searchScopes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSearchScopes: searchScopes)
    }
    unsafe fn searchItems(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, searchItems)
    }
    unsafe fn setSearchItems_(&self, searchItems: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSearchItems: searchItems)
    }
    unsafe fn operationQueue(&self) -> NSOperationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, operationQueue)
    }
    unsafe fn setOperationQueue_(&self, operationQueue: NSOperationQueue)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setOperationQueue: operationQueue)
    }
    unsafe fn isStarted(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isStarted)
    }
    unsafe fn isGathering(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isGathering)
    }
    unsafe fn isStopped(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isStopped)
    }
    unsafe fn resultCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultCount)
    }
    unsafe fn results(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, results)
    }
    unsafe fn valueLists(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueLists)
    }
    unsafe fn groupedResults(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupedResults)
    }
}
pub trait PNSMetadataQueryDelegate: Sized + std::ops::Deref {
    unsafe fn metadataQuery_replacementObjectForResultObject_(
        &self,
        query: NSMetadataQuery,
        result: NSMetadataItem,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , metadataQuery : query replacementObjectForResultObject : result)
    }
    unsafe fn metadataQuery_replacementValueForAttribute_value_(
        &self,
        query: NSMetadataQuery,
        attrName: NSString,
        attrValue: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , metadataQuery : query replacementValueForAttribute : attrName value : attrValue)
    }
}
extern "C" {
    pub static NSMetadataQueryDidStartGatheringNotification: NSNotificationName;
}
extern "C" {
    pub static NSMetadataQueryGatheringProgressNotification: NSNotificationName;
}
extern "C" {
    pub static NSMetadataQueryDidFinishGatheringNotification: NSNotificationName;
}
extern "C" {
    pub static NSMetadataQueryDidUpdateNotification: NSNotificationName;
}
extern "C" {
    pub static NSMetadataQueryUpdateAddedItemsKey: NSString;
}
extern "C" {
    pub static NSMetadataQueryUpdateChangedItemsKey: NSString;
}
extern "C" {
    pub static NSMetadataQueryUpdateRemovedItemsKey: NSString;
}
extern "C" {
    pub static NSMetadataQueryResultContentRelevanceAttribute: NSString;
}
extern "C" {
    pub static NSMetadataQueryUserHomeScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryLocalComputerScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryNetworkScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryIndexedLocalComputerScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryIndexedNetworkScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryUbiquitousDocumentsScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryUbiquitousDataScope: NSString;
}
extern "C" {
    pub static NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope: NSString;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMetadataItem(pub id);
impl std::ops::Deref for NSMetadataItem {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMetadataItem {}
impl NSMetadataItem {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMetadataItem), alloc) })
    }
}
impl INSObject for NSMetadataItem {}
impl PNSObject for NSMetadataItem {}
impl From<NSMetadataItem> for NSObject {
    fn from(child: NSMetadataItem) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMetadataItem {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMetadataItem, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMetadataItem)) };
        if is_kind_of {
            Ok(NSMetadataItem(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMetadataItem")
        }
    }
}
impl INSMetadataItem for NSMetadataItem {}
pub trait INSMetadataItem: Sized + std::ops::Deref {
    unsafe fn initWithURL_(&self, url: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithURL: url)
    }
    unsafe fn valueForAttribute_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForAttribute: key)
    }
    unsafe fn valuesForAttributes_(&self, keys: NSArray) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valuesForAttributes: keys)
    }
    unsafe fn attributes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributes)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMetadataQueryAttributeValueTuple(pub id);
impl std::ops::Deref for NSMetadataQueryAttributeValueTuple {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMetadataQueryAttributeValueTuple {}
impl NSMetadataQueryAttributeValueTuple {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMetadataQueryAttributeValueTuple), alloc) })
    }
}
impl INSObject for NSMetadataQueryAttributeValueTuple {}
impl PNSObject for NSMetadataQueryAttributeValueTuple {}
impl From<NSMetadataQueryAttributeValueTuple> for NSObject {
    fn from(child: NSMetadataQueryAttributeValueTuple) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMetadataQueryAttributeValueTuple {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMetadataQueryAttributeValueTuple, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSMetadataQueryAttributeValueTuple)
            )
        };
        if is_kind_of {
            Ok(NSMetadataQueryAttributeValueTuple(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMetadataQueryAttributeValueTuple")
        }
    }
}
impl INSMetadataQueryAttributeValueTuple for NSMetadataQueryAttributeValueTuple {}
pub trait INSMetadataQueryAttributeValueTuple: Sized + std::ops::Deref {
    unsafe fn attribute(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attribute)
    }
    unsafe fn value(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, value)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMetadataQueryResultGroup(pub id);
impl std::ops::Deref for NSMetadataQueryResultGroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMetadataQueryResultGroup {}
impl NSMetadataQueryResultGroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMetadataQueryResultGroup), alloc) })
    }
}
impl INSObject for NSMetadataQueryResultGroup {}
impl PNSObject for NSMetadataQueryResultGroup {}
impl From<NSMetadataQueryResultGroup> for NSObject {
    fn from(child: NSMetadataQueryResultGroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMetadataQueryResultGroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMetadataQueryResultGroup, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMetadataQueryResultGroup)) };
        if is_kind_of {
            Ok(NSMetadataQueryResultGroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMetadataQueryResultGroup")
        }
    }
}
impl INSMetadataQueryResultGroup for NSMetadataQueryResultGroup {}
pub trait INSMetadataQueryResultGroup: Sized + std::ops::Deref {
    unsafe fn resultAtIndex_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultAtIndex: idx)
    }
    unsafe fn attribute(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attribute)
    }
    unsafe fn value(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, value)
    }
    unsafe fn subgroups(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subgroups)
    }
    unsafe fn resultCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resultCount)
    }
    unsafe fn results(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, results)
    }
}
extern "C" {
    pub static NSNetServicesErrorCode: NSString;
}
extern "C" {
    pub static NSNetServicesErrorDomain: NSErrorDomain;
}
pub const NSNetServicesError_NSNetServicesUnknownError: NSNetServicesError = -72000;
pub const NSNetServicesError_NSNetServicesCollisionError: NSNetServicesError = -72001;
pub const NSNetServicesError_NSNetServicesNotFoundError: NSNetServicesError = -72002;
pub const NSNetServicesError_NSNetServicesActivityInProgress: NSNetServicesError = -72003;
pub const NSNetServicesError_NSNetServicesBadArgumentError: NSNetServicesError = -72004;
pub const NSNetServicesError_NSNetServicesCancelledError: NSNetServicesError = -72005;
pub const NSNetServicesError_NSNetServicesInvalidError: NSNetServicesError = -72006;
pub const NSNetServicesError_NSNetServicesTimeoutError: NSNetServicesError = -72007;
pub const NSNetServicesError_NSNetServicesMissingRequiredConfigurationError: NSNetServicesError =
    -72008;
pub type NSNetServicesError = NSInteger;
pub const NSNetServiceOptions_NSNetServiceNoAutoRename: NSNetServiceOptions = 1;
pub const NSNetServiceOptions_NSNetServiceListenForConnections: NSNetServiceOptions = 2;
pub type NSNetServiceOptions = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNetService(pub id);
impl std::ops::Deref for NSNetService {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNetService {}
impl NSNetService {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNetService), alloc) })
    }
}
impl INSObject for NSNetService {}
impl PNSObject for NSNetService {}
impl From<NSNetService> for NSObject {
    fn from(child: NSNetService) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNetService {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNetService, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNetService)) };
        if is_kind_of {
            Ok(NSNetService(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNetService")
        }
    }
}
impl INSNetService for NSNetService {}
pub trait INSNetService: Sized + std::ops::Deref {
    unsafe fn initWithDomain_type_name_port_(
        &self,
        domain: NSString,
        type_: NSString,
        name: NSString,
        port: ::std::os::raw::c_int,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDomain : domain type : type_ name : name port : port)
    }
    unsafe fn initWithDomain_type_name_(
        &self,
        domain: NSString,
        type_: NSString,
        name: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDomain : domain type : type_ name : name)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn publish(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, publish)
    }
    unsafe fn publishWithOptions_(&self, options: NSNetServiceOptions)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, publishWithOptions: options)
    }
    unsafe fn resolve(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resolve)
    }
    unsafe fn stop(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stop)
    }
    unsafe fn resolveWithTimeout_(&self, timeout: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resolveWithTimeout: timeout)
    }
    unsafe fn getInputStream_outputStream_(
        &self,
        inputStream: *mut NSInputStream,
        outputStream: *mut NSOutputStream,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getInputStream : inputStream outputStream : outputStream)
    }
    unsafe fn setTXTRecordData_(&self, recordData: NSData) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTXTRecordData: recordData)
    }
    unsafe fn TXTRecordData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, TXTRecordData)
    }
    unsafe fn startMonitoring(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startMonitoring)
    }
    unsafe fn stopMonitoring(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopMonitoring)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn includesPeerToPeer(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesPeerToPeer)
    }
    unsafe fn setIncludesPeerToPeer_(&self, includesPeerToPeer: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIncludesPeerToPeer: includesPeerToPeer)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn type_(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, type)
    }
    unsafe fn domain(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domain)
    }
    unsafe fn hostName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hostName)
    }
    unsafe fn addresses(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addresses)
    }
    unsafe fn port(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn dictionaryFromTXTRecordData_(txtData: NSData) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSNetService), dictionaryFromTXTRecordData: txtData)
    }
    unsafe fn dataFromTXTRecordDictionary_(txtDictionary: NSDictionary) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSNetService),
            dataFromTXTRecordDictionary: txtDictionary
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNetServiceBrowser(pub id);
impl std::ops::Deref for NSNetServiceBrowser {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNetServiceBrowser {}
impl NSNetServiceBrowser {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNetServiceBrowser), alloc) })
    }
}
impl INSObject for NSNetServiceBrowser {}
impl PNSObject for NSNetServiceBrowser {}
impl From<NSNetServiceBrowser> for NSObject {
    fn from(child: NSNetServiceBrowser) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNetServiceBrowser {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNetServiceBrowser, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSNetServiceBrowser)) };
        if is_kind_of {
            Ok(NSNetServiceBrowser(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNetServiceBrowser")
        }
    }
}
impl INSNetServiceBrowser for NSNetServiceBrowser {}
pub trait INSNetServiceBrowser: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, aRunLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : aRunLoop forMode : mode)
    }
    unsafe fn searchForBrowsableDomains(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, searchForBrowsableDomains)
    }
    unsafe fn searchForRegistrationDomains(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, searchForRegistrationDomains)
    }
    unsafe fn searchForServicesOfType_inDomain_(&self, type_: NSString, domainString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , searchForServicesOfType : type_ inDomain : domainString)
    }
    unsafe fn stop(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stop)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn includesPeerToPeer(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesPeerToPeer)
    }
    unsafe fn setIncludesPeerToPeer_(&self, includesPeerToPeer: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setIncludesPeerToPeer: includesPeerToPeer)
    }
}
pub trait PNSNetServiceDelegate: Sized + std::ops::Deref {
    unsafe fn netServiceWillPublish_(&self, sender: NSNetService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceWillPublish: sender)
    }
    unsafe fn netServiceDidPublish_(&self, sender: NSNetService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceDidPublish: sender)
    }
    unsafe fn netService_didNotPublish_(&self, sender: NSNetService, errorDict: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netService : sender didNotPublish : errorDict)
    }
    unsafe fn netServiceWillResolve_(&self, sender: NSNetService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceWillResolve: sender)
    }
    unsafe fn netServiceDidResolveAddress_(&self, sender: NSNetService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceDidResolveAddress: sender)
    }
    unsafe fn netService_didNotResolve_(&self, sender: NSNetService, errorDict: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netService : sender didNotResolve : errorDict)
    }
    unsafe fn netServiceDidStop_(&self, sender: NSNetService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceDidStop: sender)
    }
    unsafe fn netService_didUpdateTXTRecordData_(&self, sender: NSNetService, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netService : sender didUpdateTXTRecordData : data)
    }
    unsafe fn netService_didAcceptConnectionWithInputStream_outputStream_(
        &self,
        sender: NSNetService,
        inputStream: NSInputStream,
        outputStream: NSOutputStream,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netService : sender didAcceptConnectionWithInputStream : inputStream outputStream : outputStream)
    }
}
pub trait PNSNetServiceBrowserDelegate: Sized + std::ops::Deref {
    unsafe fn netServiceBrowserWillSearch_(&self, browser: NSNetServiceBrowser)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceBrowserWillSearch: browser)
    }
    unsafe fn netServiceBrowserDidStopSearch_(&self, browser: NSNetServiceBrowser)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceBrowserDidStopSearch: browser)
    }
    unsafe fn netServiceBrowser_didNotSearch_(
        &self,
        browser: NSNetServiceBrowser,
        errorDict: NSDictionary,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netServiceBrowser : browser didNotSearch : errorDict)
    }
    unsafe fn netServiceBrowser_didFindDomain_moreComing_(
        &self,
        browser: NSNetServiceBrowser,
        domainString: NSString,
        moreComing: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netServiceBrowser : browser didFindDomain : domainString moreComing : moreComing)
    }
    unsafe fn netServiceBrowser_didFindService_moreComing_(
        &self,
        browser: NSNetServiceBrowser,
        service: NSNetService,
        moreComing: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netServiceBrowser : browser didFindService : service moreComing : moreComing)
    }
    unsafe fn netServiceBrowser_didRemoveDomain_moreComing_(
        &self,
        browser: NSNetServiceBrowser,
        domainString: NSString,
        moreComing: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netServiceBrowser : browser didRemoveDomain : domainString moreComing : moreComing)
    }
    unsafe fn netServiceBrowser_didRemoveService_moreComing_(
        &self,
        browser: NSNetServiceBrowser,
        service: NSNetService,
        moreComing: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , netServiceBrowser : browser didRemoveService : service moreComing : moreComing)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUbiquitousKeyValueStore(pub id);
impl std::ops::Deref for NSUbiquitousKeyValueStore {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUbiquitousKeyValueStore {}
impl NSUbiquitousKeyValueStore {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUbiquitousKeyValueStore), alloc) })
    }
}
impl INSObject for NSUbiquitousKeyValueStore {}
impl PNSObject for NSUbiquitousKeyValueStore {}
impl From<NSUbiquitousKeyValueStore> for NSObject {
    fn from(child: NSUbiquitousKeyValueStore) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUbiquitousKeyValueStore {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUbiquitousKeyValueStore, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSUbiquitousKeyValueStore)) };
        if is_kind_of {
            Ok(NSUbiquitousKeyValueStore(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUbiquitousKeyValueStore")
        }
    }
}
impl INSUbiquitousKeyValueStore for NSUbiquitousKeyValueStore {}
pub trait INSUbiquitousKeyValueStore: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, aKey: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: aKey)
    }
    unsafe fn setObject_forKey_(&self, anObject: id, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : anObject forKey : aKey)
    }
    unsafe fn removeObjectForKey_(&self, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: aKey)
    }
    unsafe fn stringForKey_(&self, aKey: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForKey: aKey)
    }
    unsafe fn arrayForKey_(&self, aKey: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arrayForKey: aKey)
    }
    unsafe fn dictionaryForKey_(&self, aKey: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryForKey: aKey)
    }
    unsafe fn dataForKey_(&self, aKey: NSString) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataForKey: aKey)
    }
    unsafe fn longLongForKey_(&self, aKey: NSString) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longLongForKey: aKey)
    }
    unsafe fn doubleForKey_(&self, aKey: NSString) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleForKey: aKey)
    }
    unsafe fn boolForKey_(&self, aKey: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, boolForKey: aKey)
    }
    unsafe fn setString_forKey_(&self, aString: NSString, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setString : aString forKey : aKey)
    }
    unsafe fn setData_forKey_(&self, aData: NSData, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setData : aData forKey : aKey)
    }
    unsafe fn setArray_forKey_(&self, anArray: NSArray, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setArray : anArray forKey : aKey)
    }
    unsafe fn setDictionary_forKey_(&self, aDictionary: NSDictionary, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDictionary : aDictionary forKey : aKey)
    }
    unsafe fn setLongLong_forKey_(&self, value: ::std::os::raw::c_longlong, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setLongLong : value forKey : aKey)
    }
    unsafe fn setDouble_forKey_(&self, value: f64, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDouble : value forKey : aKey)
    }
    unsafe fn setBool_forKey_(&self, value: BOOL, aKey: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setBool : value forKey : aKey)
    }
    unsafe fn synchronize(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, synchronize)
    }
    unsafe fn dictionaryRepresentation(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryRepresentation)
    }
    unsafe fn defaultStore() -> NSUbiquitousKeyValueStore
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUbiquitousKeyValueStore), defaultStore)
    }
}
extern "C" {
    pub static NSUbiquitousKeyValueStoreDidChangeExternallyNotification: NSNotificationName;
}
extern "C" {
    pub static NSUbiquitousKeyValueStoreChangeReasonKey: NSString;
}
extern "C" {
    pub static NSUbiquitousKeyValueStoreChangedKeysKey: NSString;
}
pub const NSUbiquitousKeyValueStoreServerChange: _bindgen_ty_57 = 0;
pub const NSUbiquitousKeyValueStoreInitialSyncChange: _bindgen_ty_57 = 1;
pub const NSUbiquitousKeyValueStoreQuotaViolationChange: _bindgen_ty_57 = 2;
pub const NSUbiquitousKeyValueStoreAccountChange: _bindgen_ty_57 = 3;
pub type _bindgen_ty_57 = NSInteger;
pub const NSUndoCloseGroupingRunLoopOrdering: NSUInteger = 350000;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUndoManager(pub id);
impl std::ops::Deref for NSUndoManager {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUndoManager {}
impl NSUndoManager {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUndoManager), alloc) })
    }
}
impl INSObject for NSUndoManager {}
impl PNSObject for NSUndoManager {}
impl From<NSUndoManager> for NSObject {
    fn from(child: NSUndoManager) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUndoManager {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUndoManager, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUndoManager)) };
        if is_kind_of {
            Ok(NSUndoManager(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUndoManager")
        }
    }
}
impl INSUndoManager for NSUndoManager {}
pub trait INSUndoManager: Sized + std::ops::Deref {
    unsafe fn beginUndoGrouping(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, beginUndoGrouping)
    }
    unsafe fn endUndoGrouping(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endUndoGrouping)
    }
    unsafe fn disableUndoRegistration(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, disableUndoRegistration)
    }
    unsafe fn enableUndoRegistration(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enableUndoRegistration)
    }
    unsafe fn undo(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undo)
    }
    unsafe fn redo(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redo)
    }
    unsafe fn undoNestedGroup(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undoNestedGroup)
    }
    unsafe fn removeAllActions(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllActions)
    }
    unsafe fn removeAllActionsWithTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllActionsWithTarget: target)
    }
    unsafe fn registerUndoWithTarget_selector_object_(
        &self,
        target: id,
        selector: objc::runtime::Sel,
        anObject: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerUndoWithTarget : target selector : selector object : anObject)
    }
    unsafe fn prepareWithInvocationTarget_(&self, target: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, prepareWithInvocationTarget: target)
    }
    unsafe fn registerUndoWithTarget_handler_(
        &self,
        target: id,
        undoHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerUndoWithTarget : target handler : undoHandler)
    }
    unsafe fn setActionIsDiscardable_(&self, discardable: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setActionIsDiscardable: discardable)
    }
    unsafe fn setActionName_(&self, actionName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setActionName: actionName)
    }
    unsafe fn undoMenuTitleForUndoActionName_(&self, actionName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undoMenuTitleForUndoActionName: actionName)
    }
    unsafe fn redoMenuTitleForUndoActionName_(&self, actionName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redoMenuTitleForUndoActionName: actionName)
    }
    unsafe fn groupingLevel(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupingLevel)
    }
    unsafe fn isUndoRegistrationEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isUndoRegistrationEnabled)
    }
    unsafe fn groupsByEvent(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, groupsByEvent)
    }
    unsafe fn setGroupsByEvent_(&self, groupsByEvent: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGroupsByEvent: groupsByEvent)
    }
    unsafe fn levelsOfUndo(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, levelsOfUndo)
    }
    unsafe fn setLevelsOfUndo_(&self, levelsOfUndo: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLevelsOfUndo: levelsOfUndo)
    }
    unsafe fn runLoopModes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, runLoopModes)
    }
    unsafe fn setRunLoopModes_(&self, runLoopModes: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRunLoopModes: runLoopModes)
    }
    unsafe fn canUndo(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canUndo)
    }
    unsafe fn canRedo(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canRedo)
    }
    unsafe fn isUndoing(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isUndoing)
    }
    unsafe fn isRedoing(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isRedoing)
    }
    unsafe fn undoActionIsDiscardable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undoActionIsDiscardable)
    }
    unsafe fn redoActionIsDiscardable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redoActionIsDiscardable)
    }
    unsafe fn undoActionName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undoActionName)
    }
    unsafe fn redoActionName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redoActionName)
    }
    unsafe fn undoMenuItemTitle(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, undoMenuItemTitle)
    }
    unsafe fn redoMenuItemTitle(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redoMenuItemTitle)
    }
}
extern "C" {
    pub static NSUndoManagerGroupIsDiscardableKey: NSString;
}
extern "C" {
    pub static NSUndoManagerCheckpointNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerWillUndoChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerWillRedoChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerDidUndoChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerDidRedoChangeNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerDidOpenUndoGroupNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerWillCloseUndoGroupNotification: NSNotificationName;
}
extern "C" {
    pub static NSUndoManagerDidCloseUndoGroupNotification: NSNotificationName;
}
extern "C" {
    pub static NSURLSessionTransferSizeUnknown: i64;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSession(pub id);
impl std::ops::Deref for NSURLSession {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSession {}
impl NSURLSession {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSession), alloc) })
    }
}
impl INSObject for NSURLSession {}
impl PNSObject for NSURLSession {}
impl From<NSURLSession> for NSObject {
    fn from(child: NSURLSession) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSession {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSession, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSession)) };
        if is_kind_of {
            Ok(NSURLSession(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSession")
        }
    }
}
impl INSURLSession for NSURLSession {}
pub trait INSURLSession: Sized + std::ops::Deref {
    unsafe fn finishTasksAndInvalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finishTasksAndInvalidate)
    }
    unsafe fn invalidateAndCancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidateAndCancel)
    }
    unsafe fn resetWithCompletionHandler_(&self, completionHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resetWithCompletionHandler: completionHandler)
    }
    unsafe fn flushWithCompletionHandler_(&self, completionHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, flushWithCompletionHandler: completionHandler)
    }
    unsafe fn getTasksWithCompletionHandler_(&self, completionHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getTasksWithCompletionHandler: completionHandler)
    }
    unsafe fn getAllTasksWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getAllTasksWithCompletionHandler: completionHandler)
    }
    unsafe fn dataTaskWithRequest_(&self, request: NSURLRequest) -> NSURLSessionDataTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataTaskWithRequest: request)
    }
    unsafe fn dataTaskWithURL_(&self, url: NSURL) -> NSURLSessionDataTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataTaskWithURL: url)
    }
    unsafe fn uploadTaskWithRequest_fromFile_(
        &self,
        request: NSURLRequest,
        fileURL: NSURL,
    ) -> NSURLSessionUploadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , uploadTaskWithRequest : request fromFile : fileURL)
    }
    unsafe fn uploadTaskWithRequest_fromData_(
        &self,
        request: NSURLRequest,
        bodyData: NSData,
    ) -> NSURLSessionUploadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , uploadTaskWithRequest : request fromData : bodyData)
    }
    unsafe fn uploadTaskWithStreamedRequest_(&self, request: NSURLRequest) -> NSURLSessionUploadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, uploadTaskWithStreamedRequest: request)
    }
    unsafe fn downloadTaskWithRequest_(&self, request: NSURLRequest) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, downloadTaskWithRequest: request)
    }
    unsafe fn downloadTaskWithURL_(&self, url: NSURL) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, downloadTaskWithURL: url)
    }
    unsafe fn downloadTaskWithResumeData_(&self, resumeData: NSData) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, downloadTaskWithResumeData: resumeData)
    }
    unsafe fn streamTaskWithHostName_port_(
        &self,
        hostname: NSString,
        port: NSInteger,
    ) -> NSURLSessionStreamTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , streamTaskWithHostName : hostname port : port)
    }
    unsafe fn streamTaskWithNetService_(&self, service: NSNetService) -> NSURLSessionStreamTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, streamTaskWithNetService: service)
    }
    unsafe fn webSocketTaskWithURL_(&self, url: NSURL) -> NSURLSessionWebSocketTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, webSocketTaskWithURL: url)
    }
    unsafe fn webSocketTaskWithURL_protocols_(
        &self,
        url: NSURL,
        protocols: NSArray,
    ) -> NSURLSessionWebSocketTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , webSocketTaskWithURL : url protocols : protocols)
    }
    unsafe fn webSocketTaskWithRequest_(&self, request: NSURLRequest) -> NSURLSessionWebSocketTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, webSocketTaskWithRequest: request)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn delegateQueue(&self) -> NSOperationQueue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegateQueue)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn configuration(&self) -> NSURLSessionConfiguration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, configuration)
    }
    unsafe fn sessionDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sessionDescription)
    }
    unsafe fn setSessionDescription_(&self, sessionDescription: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSessionDescription: sessionDescription)
    }
    unsafe fn sessionWithConfiguration_(configuration: NSURLSessionConfiguration) -> NSURLSession
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSURLSession),
            sessionWithConfiguration: configuration
        )
    }
    unsafe fn sessionWithConfiguration_delegate_delegateQueue_(
        configuration: NSURLSessionConfiguration,
        delegate: *mut u64,
        queue: NSOperationQueue,
    ) -> NSURLSession
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURLSession) , sessionWithConfiguration : configuration delegate : delegate delegateQueue : queue)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSession), new)
    }
    unsafe fn sharedSession() -> NSURLSession
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSession), sharedSession)
    }
}
impl NSURLSession_NSURLSessionAsynchronousConvenience for NSURLSession {}
pub trait NSURLSession_NSURLSessionAsynchronousConvenience: Sized + std::ops::Deref {
    unsafe fn dataTaskWithRequest_completionHandler_(
        &self,
        request: NSURLRequest,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionDataTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dataTaskWithRequest : request completionHandler : completionHandler)
    }
    unsafe fn dataTaskWithURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionDataTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dataTaskWithURL : url completionHandler : completionHandler)
    }
    unsafe fn uploadTaskWithRequest_fromFile_completionHandler_(
        &self,
        request: NSURLRequest,
        fileURL: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionUploadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , uploadTaskWithRequest : request fromFile : fileURL completionHandler : completionHandler)
    }
    unsafe fn uploadTaskWithRequest_fromData_completionHandler_(
        &self,
        request: NSURLRequest,
        bodyData: NSData,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionUploadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , uploadTaskWithRequest : request fromData : bodyData completionHandler : completionHandler)
    }
    unsafe fn downloadTaskWithRequest_completionHandler_(
        &self,
        request: NSURLRequest,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , downloadTaskWithRequest : request completionHandler : completionHandler)
    }
    unsafe fn downloadTaskWithURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , downloadTaskWithURL : url completionHandler : completionHandler)
    }
    unsafe fn downloadTaskWithResumeData_completionHandler_(
        &self,
        resumeData: NSData,
        completionHandler: *mut ::std::os::raw::c_void,
    ) -> NSURLSessionDownloadTask
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , downloadTaskWithResumeData : resumeData completionHandler : completionHandler)
    }
}
pub const NSURLSessionTaskState_NSURLSessionTaskStateRunning: NSURLSessionTaskState = 0;
pub const NSURLSessionTaskState_NSURLSessionTaskStateSuspended: NSURLSessionTaskState = 1;
pub const NSURLSessionTaskState_NSURLSessionTaskStateCanceling: NSURLSessionTaskState = 2;
pub const NSURLSessionTaskState_NSURLSessionTaskStateCompleted: NSURLSessionTaskState = 3;
pub type NSURLSessionTaskState = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionTask(pub id);
impl std::ops::Deref for NSURLSessionTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionTask {}
impl NSURLSessionTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionTask), alloc) })
    }
}
impl PNSCopying for NSURLSessionTask {}
impl PNSProgressReporting for NSURLSessionTask {}
impl INSObject for NSURLSessionTask {}
impl PNSObject for NSURLSessionTask {}
impl From<NSURLSessionTask> for NSObject {
    fn from(child: NSURLSessionTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionTask)) };
        if is_kind_of {
            Ok(NSURLSessionTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionTask")
        }
    }
}
impl INSURLSessionTask for NSURLSessionTask {}
pub trait INSURLSessionTask: Sized + std::ops::Deref {
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn suspend(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suspend)
    }
    unsafe fn resume(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resume)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn taskIdentifier(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, taskIdentifier)
    }
    unsafe fn originalRequest(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, originalRequest)
    }
    unsafe fn currentRequest(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentRequest)
    }
    unsafe fn response(&self) -> NSURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, response)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn progress(&self) -> NSProgress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, progress)
    }
    unsafe fn earliestBeginDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, earliestBeginDate)
    }
    unsafe fn setEarliestBeginDate_(&self, earliestBeginDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEarliestBeginDate: earliestBeginDate)
    }
    unsafe fn countOfBytesClientExpectsToSend(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesClientExpectsToSend)
    }
    unsafe fn setCountOfBytesClientExpectsToSend_(&self, countOfBytesClientExpectsToSend: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setCountOfBytesClientExpectsToSend: countOfBytesClientExpectsToSend
        )
    }
    unsafe fn countOfBytesClientExpectsToReceive(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesClientExpectsToReceive)
    }
    unsafe fn setCountOfBytesClientExpectsToReceive_(&self, countOfBytesClientExpectsToReceive: i64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setCountOfBytesClientExpectsToReceive: countOfBytesClientExpectsToReceive
        )
    }
    unsafe fn countOfBytesSent(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesSent)
    }
    unsafe fn countOfBytesReceived(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesReceived)
    }
    unsafe fn countOfBytesExpectedToSend(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesExpectedToSend)
    }
    unsafe fn countOfBytesExpectedToReceive(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfBytesExpectedToReceive)
    }
    unsafe fn taskDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, taskDescription)
    }
    unsafe fn setTaskDescription_(&self, taskDescription: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTaskDescription: taskDescription)
    }
    unsafe fn state(&self) -> NSURLSessionTaskState
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, state)
    }
    unsafe fn error(&self) -> NSError
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, error)
    }
    unsafe fn priority(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, priority)
    }
    unsafe fn setPriority_(&self, priority: f32)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPriority: priority)
    }
    unsafe fn prefersIncrementalDelivery(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, prefersIncrementalDelivery)
    }
    unsafe fn setPrefersIncrementalDelivery_(&self, prefersIncrementalDelivery: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setPrefersIncrementalDelivery: prefersIncrementalDelivery
        )
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionTask), new)
    }
}
extern "C" {
    pub static NSURLSessionTaskPriorityDefault: f32;
}
extern "C" {
    pub static NSURLSessionTaskPriorityLow: f32;
}
extern "C" {
    pub static NSURLSessionTaskPriorityHigh: f32;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionDataTask(pub id);
impl std::ops::Deref for NSURLSessionDataTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionDataTask {}
impl NSURLSessionDataTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionDataTask), alloc) })
    }
}
impl INSURLSessionTask for NSURLSessionDataTask {}
impl PNSCopying for NSURLSessionDataTask {}
impl PNSProgressReporting for NSURLSessionDataTask {}
impl From<NSURLSessionDataTask> for NSURLSessionTask {
    fn from(child: NSURLSessionDataTask) -> NSURLSessionTask {
        NSURLSessionTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionTask> for NSURLSessionDataTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionTask) -> Result<NSURLSessionDataTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionDataTask)) };
        if is_kind_of {
            Ok(NSURLSessionDataTask(parent.0))
        } else {
            Err("This NSURLSessionTask cannot be downcasted to NSURLSessionDataTask")
        }
    }
}
impl INSObject for NSURLSessionDataTask {}
impl PNSObject for NSURLSessionDataTask {}
impl From<NSURLSessionDataTask> for NSObject {
    fn from(child: NSURLSessionDataTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionDataTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionDataTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionDataTask)) };
        if is_kind_of {
            Ok(NSURLSessionDataTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionDataTask")
        }
    }
}
impl INSURLSessionDataTask for NSURLSessionDataTask {}
pub trait INSURLSessionDataTask: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionDataTask), new)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionUploadTask(pub id);
impl std::ops::Deref for NSURLSessionUploadTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionUploadTask {}
impl NSURLSessionUploadTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionUploadTask), alloc) })
    }
}
impl INSURLSessionDataTask for NSURLSessionUploadTask {}
impl From<NSURLSessionUploadTask> for NSURLSessionDataTask {
    fn from(child: NSURLSessionUploadTask) -> NSURLSessionDataTask {
        NSURLSessionDataTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionDataTask> for NSURLSessionUploadTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionDataTask) -> Result<NSURLSessionUploadTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionUploadTask)) };
        if is_kind_of {
            Ok(NSURLSessionUploadTask(parent.0))
        } else {
            Err("This NSURLSessionDataTask cannot be downcasted to NSURLSessionUploadTask")
        }
    }
}
impl INSURLSessionTask for NSURLSessionUploadTask {}
impl PNSCopying for NSURLSessionUploadTask {}
impl PNSProgressReporting for NSURLSessionUploadTask {}
impl From<NSURLSessionUploadTask> for NSURLSessionTask {
    fn from(child: NSURLSessionUploadTask) -> NSURLSessionTask {
        NSURLSessionTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionTask> for NSURLSessionUploadTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionTask) -> Result<NSURLSessionUploadTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionUploadTask)) };
        if is_kind_of {
            Ok(NSURLSessionUploadTask(parent.0))
        } else {
            Err("This NSURLSessionTask cannot be downcasted to NSURLSessionUploadTask")
        }
    }
}
impl INSObject for NSURLSessionUploadTask {}
impl PNSObject for NSURLSessionUploadTask {}
impl From<NSURLSessionUploadTask> for NSObject {
    fn from(child: NSURLSessionUploadTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionUploadTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionUploadTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionUploadTask)) };
        if is_kind_of {
            Ok(NSURLSessionUploadTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionUploadTask")
        }
    }
}
impl INSURLSessionUploadTask for NSURLSessionUploadTask {}
pub trait INSURLSessionUploadTask: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionUploadTask), new)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionDownloadTask(pub id);
impl std::ops::Deref for NSURLSessionDownloadTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionDownloadTask {}
impl NSURLSessionDownloadTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionDownloadTask), alloc) })
    }
}
impl INSURLSessionTask for NSURLSessionDownloadTask {}
impl PNSCopying for NSURLSessionDownloadTask {}
impl PNSProgressReporting for NSURLSessionDownloadTask {}
impl From<NSURLSessionDownloadTask> for NSURLSessionTask {
    fn from(child: NSURLSessionDownloadTask) -> NSURLSessionTask {
        NSURLSessionTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionTask> for NSURLSessionDownloadTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionTask) -> Result<NSURLSessionDownloadTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionDownloadTask)) };
        if is_kind_of {
            Ok(NSURLSessionDownloadTask(parent.0))
        } else {
            Err("This NSURLSessionTask cannot be downcasted to NSURLSessionDownloadTask")
        }
    }
}
impl INSObject for NSURLSessionDownloadTask {}
impl PNSObject for NSURLSessionDownloadTask {}
impl From<NSURLSessionDownloadTask> for NSObject {
    fn from(child: NSURLSessionDownloadTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionDownloadTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionDownloadTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionDownloadTask)) };
        if is_kind_of {
            Ok(NSURLSessionDownloadTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionDownloadTask")
        }
    }
}
impl INSURLSessionDownloadTask for NSURLSessionDownloadTask {}
pub trait INSURLSessionDownloadTask: Sized + std::ops::Deref {
    unsafe fn cancelByProducingResumeData_(&self, completionHandler: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelByProducingResumeData: completionHandler)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionDownloadTask), new)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionStreamTask(pub id);
impl std::ops::Deref for NSURLSessionStreamTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionStreamTask {}
impl NSURLSessionStreamTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionStreamTask), alloc) })
    }
}
impl INSURLSessionTask for NSURLSessionStreamTask {}
impl PNSCopying for NSURLSessionStreamTask {}
impl PNSProgressReporting for NSURLSessionStreamTask {}
impl From<NSURLSessionStreamTask> for NSURLSessionTask {
    fn from(child: NSURLSessionStreamTask) -> NSURLSessionTask {
        NSURLSessionTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionTask> for NSURLSessionStreamTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionTask) -> Result<NSURLSessionStreamTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionStreamTask)) };
        if is_kind_of {
            Ok(NSURLSessionStreamTask(parent.0))
        } else {
            Err("This NSURLSessionTask cannot be downcasted to NSURLSessionStreamTask")
        }
    }
}
impl INSObject for NSURLSessionStreamTask {}
impl PNSObject for NSURLSessionStreamTask {}
impl From<NSURLSessionStreamTask> for NSObject {
    fn from(child: NSURLSessionStreamTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionStreamTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionStreamTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionStreamTask)) };
        if is_kind_of {
            Ok(NSURLSessionStreamTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionStreamTask")
        }
    }
}
impl INSURLSessionStreamTask for NSURLSessionStreamTask {}
pub trait INSURLSessionStreamTask: Sized + std::ops::Deref {
    unsafe fn readDataOfMinLength_maxLength_timeout_completionHandler_(
        &self,
        minBytes: NSUInteger,
        maxBytes: NSUInteger,
        timeout: NSTimeInterval,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , readDataOfMinLength : minBytes maxLength : maxBytes timeout : timeout completionHandler : completionHandler)
    }
    unsafe fn writeData_timeout_completionHandler_(
        &self,
        data: NSData,
        timeout: NSTimeInterval,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , writeData : data timeout : timeout completionHandler : completionHandler)
    }
    unsafe fn captureStreams(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, captureStreams)
    }
    unsafe fn closeWrite(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeWrite)
    }
    unsafe fn closeRead(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeRead)
    }
    unsafe fn startSecureConnection(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startSecureConnection)
    }
    unsafe fn stopSecureConnection(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopSecureConnection)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionStreamTask), new)
    }
}
pub const NSURLSessionWebSocketMessageType_NSURLSessionWebSocketMessageTypeData:
    NSURLSessionWebSocketMessageType = 0;
pub const NSURLSessionWebSocketMessageType_NSURLSessionWebSocketMessageTypeString:
    NSURLSessionWebSocketMessageType = 1;
pub type NSURLSessionWebSocketMessageType = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionWebSocketMessage(pub id);
impl std::ops::Deref for NSURLSessionWebSocketMessage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionWebSocketMessage {}
impl NSURLSessionWebSocketMessage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionWebSocketMessage), alloc) })
    }
}
impl INSObject for NSURLSessionWebSocketMessage {}
impl PNSObject for NSURLSessionWebSocketMessage {}
impl From<NSURLSessionWebSocketMessage> for NSObject {
    fn from(child: NSURLSessionWebSocketMessage) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionWebSocketMessage {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionWebSocketMessage, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionWebSocketMessage)) };
        if is_kind_of {
            Ok(NSURLSessionWebSocketMessage(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionWebSocketMessage")
        }
    }
}
impl INSURLSessionWebSocketMessage for NSURLSessionWebSocketMessage {}
pub trait INSURLSessionWebSocketMessage: Sized + std::ops::Deref {
    unsafe fn initWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithData: data)
    }
    unsafe fn initWithString_(&self, string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: string)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn type_(&self) -> NSURLSessionWebSocketMessageType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, type)
    }
    unsafe fn data(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, data)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionWebSocketMessage), new)
    }
}
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeInvalid:
    NSURLSessionWebSocketCloseCode = 0;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeNormalClosure:
    NSURLSessionWebSocketCloseCode = 1000;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeGoingAway:
    NSURLSessionWebSocketCloseCode = 1001;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeProtocolError:
    NSURLSessionWebSocketCloseCode = 1002;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeUnsupportedData:
    NSURLSessionWebSocketCloseCode = 1003;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeNoStatusReceived:
    NSURLSessionWebSocketCloseCode = 1005;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeAbnormalClosure:
    NSURLSessionWebSocketCloseCode = 1006;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeInvalidFramePayloadData:
    NSURLSessionWebSocketCloseCode = 1007;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodePolicyViolation:
    NSURLSessionWebSocketCloseCode = 1008;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeMessageTooBig:
    NSURLSessionWebSocketCloseCode = 1009;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing:
    NSURLSessionWebSocketCloseCode = 1010;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeInternalServerError:
    NSURLSessionWebSocketCloseCode = 1011;
pub const NSURLSessionWebSocketCloseCode_NSURLSessionWebSocketCloseCodeTLSHandshakeFailure:
    NSURLSessionWebSocketCloseCode = 1015;
pub type NSURLSessionWebSocketCloseCode = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionWebSocketTask(pub id);
impl std::ops::Deref for NSURLSessionWebSocketTask {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionWebSocketTask {}
impl NSURLSessionWebSocketTask {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionWebSocketTask), alloc) })
    }
}
impl INSURLSessionTask for NSURLSessionWebSocketTask {}
impl PNSCopying for NSURLSessionWebSocketTask {}
impl PNSProgressReporting for NSURLSessionWebSocketTask {}
impl From<NSURLSessionWebSocketTask> for NSURLSessionTask {
    fn from(child: NSURLSessionWebSocketTask) -> NSURLSessionTask {
        NSURLSessionTask(child.0)
    }
}
impl std::convert::TryFrom<NSURLSessionTask> for NSURLSessionWebSocketTask {
    type Error = &'static str;
    fn try_from(parent: NSURLSessionTask) -> Result<NSURLSessionWebSocketTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionWebSocketTask)) };
        if is_kind_of {
            Ok(NSURLSessionWebSocketTask(parent.0))
        } else {
            Err("This NSURLSessionTask cannot be downcasted to NSURLSessionWebSocketTask")
        }
    }
}
impl INSObject for NSURLSessionWebSocketTask {}
impl PNSObject for NSURLSessionWebSocketTask {}
impl From<NSURLSessionWebSocketTask> for NSObject {
    fn from(child: NSURLSessionWebSocketTask) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionWebSocketTask {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionWebSocketTask, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionWebSocketTask)) };
        if is_kind_of {
            Ok(NSURLSessionWebSocketTask(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionWebSocketTask")
        }
    }
}
impl INSURLSessionWebSocketTask for NSURLSessionWebSocketTask {}
pub trait INSURLSessionWebSocketTask: Sized + std::ops::Deref {
    unsafe fn sendMessage_completionHandler_(
        &self,
        message: NSURLSessionWebSocketMessage,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendMessage : message completionHandler : completionHandler)
    }
    unsafe fn receiveMessageWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            receiveMessageWithCompletionHandler: completionHandler
        )
    }
    unsafe fn sendPingWithPongReceiveHandler_(
        &self,
        pongReceiveHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sendPingWithPongReceiveHandler: pongReceiveHandler)
    }
    unsafe fn cancelWithCloseCode_reason_(
        &self,
        closeCode: NSURLSessionWebSocketCloseCode,
        reason: NSData,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , cancelWithCloseCode : closeCode reason : reason)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn maximumMessageSize(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumMessageSize)
    }
    unsafe fn setMaximumMessageSize_(&self, maximumMessageSize: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumMessageSize: maximumMessageSize)
    }
    unsafe fn closeCode(&self) -> NSURLSessionWebSocketCloseCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeCode)
    }
    unsafe fn closeReason(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, closeReason)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionWebSocketTask), new)
    }
}
pub const NSURLSessionMultipathServiceType_NSURLSessionMultipathServiceTypeNone:
    NSURLSessionMultipathServiceType = 0;
pub const NSURLSessionMultipathServiceType_NSURLSessionMultipathServiceTypeHandover:
    NSURLSessionMultipathServiceType = 1;
pub const NSURLSessionMultipathServiceType_NSURLSessionMultipathServiceTypeInteractive:
    NSURLSessionMultipathServiceType = 2;
pub const NSURLSessionMultipathServiceType_NSURLSessionMultipathServiceTypeAggregate:
    NSURLSessionMultipathServiceType = 3;
pub type NSURLSessionMultipathServiceType = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionConfiguration(pub id);
impl std::ops::Deref for NSURLSessionConfiguration {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionConfiguration {}
impl NSURLSessionConfiguration {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionConfiguration), alloc) })
    }
}
impl PNSCopying for NSURLSessionConfiguration {}
impl INSObject for NSURLSessionConfiguration {}
impl PNSObject for NSURLSessionConfiguration {}
impl From<NSURLSessionConfiguration> for NSObject {
    fn from(child: NSURLSessionConfiguration) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionConfiguration {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionConfiguration, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionConfiguration)) };
        if is_kind_of {
            Ok(NSURLSessionConfiguration(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionConfiguration")
        }
    }
}
impl INSURLSessionConfiguration for NSURLSessionConfiguration {}
pub trait INSURLSessionConfiguration: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn identifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, identifier)
    }
    unsafe fn requestCachePolicy(&self) -> NSURLRequestCachePolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requestCachePolicy)
    }
    unsafe fn setRequestCachePolicy_(&self, requestCachePolicy: NSURLRequestCachePolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequestCachePolicy: requestCachePolicy)
    }
    unsafe fn timeoutIntervalForRequest(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeoutIntervalForRequest)
    }
    unsafe fn setTimeoutIntervalForRequest_(&self, timeoutIntervalForRequest: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTimeoutIntervalForRequest: timeoutIntervalForRequest
        )
    }
    unsafe fn timeoutIntervalForResource(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeoutIntervalForResource)
    }
    unsafe fn setTimeoutIntervalForResource_(&self, timeoutIntervalForResource: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTimeoutIntervalForResource: timeoutIntervalForResource
        )
    }
    unsafe fn networkServiceType(&self) -> NSURLRequestNetworkServiceType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkServiceType)
    }
    unsafe fn setNetworkServiceType_(&self, networkServiceType: NSURLRequestNetworkServiceType)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNetworkServiceType: networkServiceType)
    }
    unsafe fn allowsCellularAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsCellularAccess)
    }
    unsafe fn setAllowsCellularAccess_(&self, allowsCellularAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsCellularAccess: allowsCellularAccess)
    }
    unsafe fn allowsExpensiveNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsExpensiveNetworkAccess)
    }
    unsafe fn setAllowsExpensiveNetworkAccess_(&self, allowsExpensiveNetworkAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowsExpensiveNetworkAccess: allowsExpensiveNetworkAccess
        )
    }
    unsafe fn allowsConstrainedNetworkAccess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsConstrainedNetworkAccess)
    }
    unsafe fn setAllowsConstrainedNetworkAccess_(&self, allowsConstrainedNetworkAccess: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setAllowsConstrainedNetworkAccess: allowsConstrainedNetworkAccess
        )
    }
    unsafe fn requiresDNSSECValidation(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresDNSSECValidation)
    }
    unsafe fn setRequiresDNSSECValidation_(&self, requiresDNSSECValidation: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiresDNSSECValidation: requiresDNSSECValidation)
    }
    unsafe fn waitsForConnectivity(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, waitsForConnectivity)
    }
    unsafe fn setWaitsForConnectivity_(&self, waitsForConnectivity: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWaitsForConnectivity: waitsForConnectivity)
    }
    unsafe fn isDiscretionary(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDiscretionary)
    }
    unsafe fn setDiscretionary_(&self, discretionary: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDiscretionary: discretionary)
    }
    unsafe fn sharedContainerIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sharedContainerIdentifier)
    }
    unsafe fn setSharedContainerIdentifier_(&self, sharedContainerIdentifier: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setSharedContainerIdentifier: sharedContainerIdentifier
        )
    }
    unsafe fn sessionSendsLaunchEvents(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sessionSendsLaunchEvents)
    }
    unsafe fn setSessionSendsLaunchEvents_(&self, sessionSendsLaunchEvents: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSessionSendsLaunchEvents: sessionSendsLaunchEvents)
    }
    unsafe fn connectionProxyDictionary(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectionProxyDictionary)
    }
    unsafe fn setConnectionProxyDictionary_(&self, connectionProxyDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setConnectionProxyDictionary: connectionProxyDictionary
        )
    }
    unsafe fn TLSMinimumSupportedProtocol(&self) -> SSLProtocol
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, TLSMinimumSupportedProtocol)
    }
    unsafe fn setTLSMinimumSupportedProtocol_(&self, TLSMinimumSupportedProtocol: SSLProtocol)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTLSMinimumSupportedProtocol: TLSMinimumSupportedProtocol
        )
    }
    unsafe fn TLSMaximumSupportedProtocol(&self) -> SSLProtocol
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, TLSMaximumSupportedProtocol)
    }
    unsafe fn setTLSMaximumSupportedProtocol_(&self, TLSMaximumSupportedProtocol: SSLProtocol)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTLSMaximumSupportedProtocol: TLSMaximumSupportedProtocol
        )
    }
    unsafe fn TLSMinimumSupportedProtocolVersion(&self) -> tls_protocol_version_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, TLSMinimumSupportedProtocolVersion)
    }
    unsafe fn setTLSMinimumSupportedProtocolVersion_(
        &self,
        TLSMinimumSupportedProtocolVersion: tls_protocol_version_t,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTLSMinimumSupportedProtocolVersion: TLSMinimumSupportedProtocolVersion
        )
    }
    unsafe fn TLSMaximumSupportedProtocolVersion(&self) -> tls_protocol_version_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, TLSMaximumSupportedProtocolVersion)
    }
    unsafe fn setTLSMaximumSupportedProtocolVersion_(
        &self,
        TLSMaximumSupportedProtocolVersion: tls_protocol_version_t,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setTLSMaximumSupportedProtocolVersion: TLSMaximumSupportedProtocolVersion
        )
    }
    unsafe fn HTTPShouldUsePipelining(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldUsePipelining)
    }
    unsafe fn setHTTPShouldUsePipelining_(&self, HTTPShouldUsePipelining: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPShouldUsePipelining: HTTPShouldUsePipelining)
    }
    unsafe fn HTTPShouldSetCookies(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPShouldSetCookies)
    }
    unsafe fn setHTTPShouldSetCookies_(&self, HTTPShouldSetCookies: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPShouldSetCookies: HTTPShouldSetCookies)
    }
    unsafe fn HTTPCookieAcceptPolicy(&self) -> NSHTTPCookieAcceptPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPCookieAcceptPolicy)
    }
    unsafe fn setHTTPCookieAcceptPolicy_(&self, HTTPCookieAcceptPolicy: NSHTTPCookieAcceptPolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPCookieAcceptPolicy: HTTPCookieAcceptPolicy)
    }
    unsafe fn HTTPAdditionalHeaders(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPAdditionalHeaders)
    }
    unsafe fn setHTTPAdditionalHeaders_(&self, HTTPAdditionalHeaders: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPAdditionalHeaders: HTTPAdditionalHeaders)
    }
    unsafe fn HTTPMaximumConnectionsPerHost(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPMaximumConnectionsPerHost)
    }
    unsafe fn setHTTPMaximumConnectionsPerHost_(&self, HTTPMaximumConnectionsPerHost: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setHTTPMaximumConnectionsPerHost: HTTPMaximumConnectionsPerHost
        )
    }
    unsafe fn HTTPCookieStorage(&self) -> NSHTTPCookieStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, HTTPCookieStorage)
    }
    unsafe fn setHTTPCookieStorage_(&self, HTTPCookieStorage: NSHTTPCookieStorage)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHTTPCookieStorage: HTTPCookieStorage)
    }
    unsafe fn URLCredentialStorage(&self) -> NSURLCredentialStorage
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLCredentialStorage)
    }
    unsafe fn setURLCredentialStorage_(&self, URLCredentialStorage: NSURLCredentialStorage)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setURLCredentialStorage: URLCredentialStorage)
    }
    unsafe fn URLCache(&self) -> NSURLCache
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLCache)
    }
    unsafe fn setURLCache_(&self, URLCache: NSURLCache)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setURLCache: URLCache)
    }
    unsafe fn shouldUseExtendedBackgroundIdleMode(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldUseExtendedBackgroundIdleMode)
    }
    unsafe fn setShouldUseExtendedBackgroundIdleMode_(
        &self,
        shouldUseExtendedBackgroundIdleMode: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShouldUseExtendedBackgroundIdleMode: shouldUseExtendedBackgroundIdleMode
        )
    }
    unsafe fn protocolClasses(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, protocolClasses)
    }
    unsafe fn setProtocolClasses_(&self, protocolClasses: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProtocolClasses: protocolClasses)
    }
    unsafe fn multipathServiceType(&self) -> NSURLSessionMultipathServiceType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, multipathServiceType)
    }
    unsafe fn setMultipathServiceType_(
        &self,
        multipathServiceType: NSURLSessionMultipathServiceType,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMultipathServiceType: multipathServiceType)
    }
    unsafe fn backgroundSessionConfigurationWithIdentifier_(
        identifier: NSString,
    ) -> NSURLSessionConfiguration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSURLSessionConfiguration),
            backgroundSessionConfigurationWithIdentifier: identifier
        )
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionConfiguration), new)
    }
    unsafe fn defaultSessionConfiguration() -> NSURLSessionConfiguration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSURLSessionConfiguration),
            defaultSessionConfiguration
        )
    }
    unsafe fn ephemeralSessionConfiguration() -> NSURLSessionConfiguration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSURLSessionConfiguration),
            ephemeralSessionConfiguration
        )
    }
}
pub const NSURLSessionDelayedRequestDisposition_NSURLSessionDelayedRequestContinueLoading:
    NSURLSessionDelayedRequestDisposition = 0;
pub const NSURLSessionDelayedRequestDisposition_NSURLSessionDelayedRequestUseNewRequest:
    NSURLSessionDelayedRequestDisposition = 1;
pub const NSURLSessionDelayedRequestDisposition_NSURLSessionDelayedRequestCancel:
    NSURLSessionDelayedRequestDisposition = 2;
pub type NSURLSessionDelayedRequestDisposition = NSInteger;
pub const NSURLSessionAuthChallengeDisposition_NSURLSessionAuthChallengeUseCredential:
    NSURLSessionAuthChallengeDisposition = 0;
pub const NSURLSessionAuthChallengeDisposition_NSURLSessionAuthChallengePerformDefaultHandling:
    NSURLSessionAuthChallengeDisposition = 1;
pub const NSURLSessionAuthChallengeDisposition_NSURLSessionAuthChallengeCancelAuthenticationChallenge : NSURLSessionAuthChallengeDisposition = 2 ;
pub const NSURLSessionAuthChallengeDisposition_NSURLSessionAuthChallengeRejectProtectionSpace:
    NSURLSessionAuthChallengeDisposition = 3;
pub type NSURLSessionAuthChallengeDisposition = NSInteger;
pub const NSURLSessionResponseDisposition_NSURLSessionResponseCancel:
    NSURLSessionResponseDisposition = 0;
pub const NSURLSessionResponseDisposition_NSURLSessionResponseAllow:
    NSURLSessionResponseDisposition = 1;
pub const NSURLSessionResponseDisposition_NSURLSessionResponseBecomeDownload:
    NSURLSessionResponseDisposition = 2;
pub const NSURLSessionResponseDisposition_NSURLSessionResponseBecomeStream:
    NSURLSessionResponseDisposition = 3;
pub type NSURLSessionResponseDisposition = NSInteger;
pub trait PNSURLSessionDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_didBecomeInvalidWithError_(&self, session: NSURLSession, error: NSError)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session didBecomeInvalidWithError : error)
    }
    unsafe fn URLSession_didReceiveChallenge_completionHandler_(
        &self,
        session: NSURLSession,
        challenge: NSURLAuthenticationChallenge,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session didReceiveChallenge : challenge completionHandler : completionHandler)
    }
    unsafe fn URLSessionDidFinishEventsForBackgroundURLSession_(&self, session: NSURLSession)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            URLSessionDidFinishEventsForBackgroundURLSession: session
        )
    }
}
pub trait PNSURLSessionTaskDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_didCreateTask_(&self, session: NSURLSession, task: NSURLSessionTask)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session didCreateTask : task)
    }
    unsafe fn URLSession_task_willBeginDelayedRequest_completionHandler_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        request: NSURLRequest,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task willBeginDelayedRequest : request completionHandler : completionHandler)
    }
    unsafe fn URLSession_taskIsWaitingForConnectivity_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session taskIsWaitingForConnectivity : task)
    }
    unsafe fn URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        response: NSHTTPURLResponse,
        request: NSURLRequest,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task willPerformHTTPRedirection : response newRequest : request completionHandler : completionHandler)
    }
    unsafe fn URLSession_task_didReceiveChallenge_completionHandler_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        challenge: NSURLAuthenticationChallenge,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task didReceiveChallenge : challenge completionHandler : completionHandler)
    }
    unsafe fn URLSession_task_needNewBodyStream_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task needNewBodyStream : completionHandler)
    }
    unsafe fn URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        bytesSent: i64,
        totalBytesSent: i64,
        totalBytesExpectedToSend: i64,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task didSendBodyData : bytesSent totalBytesSent : totalBytesSent totalBytesExpectedToSend : totalBytesExpectedToSend)
    }
    unsafe fn URLSession_task_didFinishCollectingMetrics_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        metrics: NSURLSessionTaskMetrics,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task didFinishCollectingMetrics : metrics)
    }
    unsafe fn URLSession_task_didCompleteWithError_(
        &self,
        session: NSURLSession,
        task: NSURLSessionTask,
        error: NSError,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session task : task didCompleteWithError : error)
    }
}
pub trait PNSURLSessionDataDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_dataTask_didReceiveResponse_completionHandler_(
        &self,
        session: NSURLSession,
        dataTask: NSURLSessionDataTask,
        response: NSURLResponse,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session dataTask : dataTask didReceiveResponse : response completionHandler : completionHandler)
    }
    unsafe fn URLSession_dataTask_didBecomeDownloadTask_(
        &self,
        session: NSURLSession,
        dataTask: NSURLSessionDataTask,
        downloadTask: NSURLSessionDownloadTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session dataTask : dataTask didBecomeDownloadTask : downloadTask)
    }
    unsafe fn URLSession_dataTask_didBecomeStreamTask_(
        &self,
        session: NSURLSession,
        dataTask: NSURLSessionDataTask,
        streamTask: NSURLSessionStreamTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session dataTask : dataTask didBecomeStreamTask : streamTask)
    }
    unsafe fn URLSession_dataTask_didReceiveData_(
        &self,
        session: NSURLSession,
        dataTask: NSURLSessionDataTask,
        data: NSData,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session dataTask : dataTask didReceiveData : data)
    }
    unsafe fn URLSession_dataTask_willCacheResponse_completionHandler_(
        &self,
        session: NSURLSession,
        dataTask: NSURLSessionDataTask,
        proposedResponse: NSCachedURLResponse,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session dataTask : dataTask willCacheResponse : proposedResponse completionHandler : completionHandler)
    }
}
pub trait PNSURLSessionDownloadDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_downloadTask_didFinishDownloadingToURL_(
        &self,
        session: NSURLSession,
        downloadTask: NSURLSessionDownloadTask,
        location: NSURL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session downloadTask : downloadTask didFinishDownloadingToURL : location)
    }
    unsafe fn URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite_(
        &self,
        session: NSURLSession,
        downloadTask: NSURLSessionDownloadTask,
        bytesWritten: i64,
        totalBytesWritten: i64,
        totalBytesExpectedToWrite: i64,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session downloadTask : downloadTask didWriteData : bytesWritten totalBytesWritten : totalBytesWritten totalBytesExpectedToWrite : totalBytesExpectedToWrite)
    }
    unsafe fn URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes_(
        &self,
        session: NSURLSession,
        downloadTask: NSURLSessionDownloadTask,
        fileOffset: i64,
        expectedTotalBytes: i64,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session downloadTask : downloadTask didResumeAtOffset : fileOffset expectedTotalBytes : expectedTotalBytes)
    }
}
pub trait PNSURLSessionStreamDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_readClosedForStreamTask_(
        &self,
        session: NSURLSession,
        streamTask: NSURLSessionStreamTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session readClosedForStreamTask : streamTask)
    }
    unsafe fn URLSession_writeClosedForStreamTask_(
        &self,
        session: NSURLSession,
        streamTask: NSURLSessionStreamTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session writeClosedForStreamTask : streamTask)
    }
    unsafe fn URLSession_betterRouteDiscoveredForStreamTask_(
        &self,
        session: NSURLSession,
        streamTask: NSURLSessionStreamTask,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session betterRouteDiscoveredForStreamTask : streamTask)
    }
    unsafe fn URLSession_streamTask_didBecomeInputStream_outputStream_(
        &self,
        session: NSURLSession,
        streamTask: NSURLSessionStreamTask,
        inputStream: NSInputStream,
        outputStream: NSOutputStream,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session streamTask : streamTask didBecomeInputStream : inputStream outputStream : outputStream)
    }
}
pub trait PNSURLSessionWebSocketDelegate: Sized + std::ops::Deref {
    unsafe fn URLSession_webSocketTask_didOpenWithProtocol_(
        &self,
        session: NSURLSession,
        webSocketTask: NSURLSessionWebSocketTask,
        protocol: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session webSocketTask : webSocketTask didOpenWithProtocol : protocol)
    }
    unsafe fn URLSession_webSocketTask_didCloseWithCode_reason_(
        &self,
        session: NSURLSession,
        webSocketTask: NSURLSessionWebSocketTask,
        closeCode: NSURLSessionWebSocketCloseCode,
        reason: NSData,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLSession : session webSocketTask : webSocketTask didCloseWithCode : closeCode reason : reason)
    }
}
extern "C" {
    pub static NSURLSessionDownloadTaskResumeData: NSString;
}
impl NSURLSessionConfiguration_NSURLSessionDeprecated for NSURLSessionConfiguration {}
pub trait NSURLSessionConfiguration_NSURLSessionDeprecated: Sized + std::ops::Deref {
    unsafe fn backgroundSessionConfiguration_(identifier: NSString) -> NSURLSessionConfiguration
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSURLSessionConfiguration),
            backgroundSessionConfiguration: identifier
        )
    }
}
pub const NSURLSessionTaskMetricsResourceFetchType_NSURLSessionTaskMetricsResourceFetchTypeUnknown : NSURLSessionTaskMetricsResourceFetchType = 0 ;
pub const NSURLSessionTaskMetricsResourceFetchType_NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad : NSURLSessionTaskMetricsResourceFetchType = 1 ;
pub const NSURLSessionTaskMetricsResourceFetchType_NSURLSessionTaskMetricsResourceFetchTypeServerPush : NSURLSessionTaskMetricsResourceFetchType = 2 ;
pub const NSURLSessionTaskMetricsResourceFetchType_NSURLSessionTaskMetricsResourceFetchTypeLocalCache : NSURLSessionTaskMetricsResourceFetchType = 3 ;
pub type NSURLSessionTaskMetricsResourceFetchType = NSInteger;
pub const NSURLSessionTaskMetricsDomainResolutionProtocol_NSURLSessionTaskMetricsDomainResolutionProtocolUnknown : NSURLSessionTaskMetricsDomainResolutionProtocol = 0 ;
pub const NSURLSessionTaskMetricsDomainResolutionProtocol_NSURLSessionTaskMetricsDomainResolutionProtocolUDP : NSURLSessionTaskMetricsDomainResolutionProtocol = 1 ;
pub const NSURLSessionTaskMetricsDomainResolutionProtocol_NSURLSessionTaskMetricsDomainResolutionProtocolTCP : NSURLSessionTaskMetricsDomainResolutionProtocol = 2 ;
pub const NSURLSessionTaskMetricsDomainResolutionProtocol_NSURLSessionTaskMetricsDomainResolutionProtocolTLS : NSURLSessionTaskMetricsDomainResolutionProtocol = 3 ;
pub const NSURLSessionTaskMetricsDomainResolutionProtocol_NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS : NSURLSessionTaskMetricsDomainResolutionProtocol = 4 ;
pub type NSURLSessionTaskMetricsDomainResolutionProtocol = NSInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionTaskTransactionMetrics(pub id);
impl std::ops::Deref for NSURLSessionTaskTransactionMetrics {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionTaskTransactionMetrics {}
impl NSURLSessionTaskTransactionMetrics {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionTaskTransactionMetrics), alloc) })
    }
}
impl INSObject for NSURLSessionTaskTransactionMetrics {}
impl PNSObject for NSURLSessionTaskTransactionMetrics {}
impl From<NSURLSessionTaskTransactionMetrics> for NSObject {
    fn from(child: NSURLSessionTaskTransactionMetrics) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionTaskTransactionMetrics {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionTaskTransactionMetrics, Self::Error> {
        let is_kind_of: bool = unsafe {
            msg_send!(
                parent,
                isKindOfClass: class!(NSURLSessionTaskTransactionMetrics)
            )
        };
        if is_kind_of {
            Ok(NSURLSessionTaskTransactionMetrics(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionTaskTransactionMetrics")
        }
    }
}
impl INSURLSessionTaskTransactionMetrics for NSURLSessionTaskTransactionMetrics {}
pub trait INSURLSessionTaskTransactionMetrics: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn request(&self) -> NSURLRequest
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, request)
    }
    unsafe fn response(&self) -> NSURLResponse
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, response)
    }
    unsafe fn fetchStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fetchStartDate)
    }
    unsafe fn domainLookupStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domainLookupStartDate)
    }
    unsafe fn domainLookupEndDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domainLookupEndDate)
    }
    unsafe fn connectStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectStartDate)
    }
    unsafe fn secureConnectionStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secureConnectionStartDate)
    }
    unsafe fn secureConnectionEndDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secureConnectionEndDate)
    }
    unsafe fn connectEndDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectEndDate)
    }
    unsafe fn requestStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requestStartDate)
    }
    unsafe fn requestEndDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requestEndDate)
    }
    unsafe fn responseStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, responseStartDate)
    }
    unsafe fn responseEndDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, responseEndDate)
    }
    unsafe fn networkProtocolName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkProtocolName)
    }
    unsafe fn isProxyConnection(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxyConnection)
    }
    unsafe fn isReusedConnection(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isReusedConnection)
    }
    unsafe fn resourceFetchType(&self) -> NSURLSessionTaskMetricsResourceFetchType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resourceFetchType)
    }
    unsafe fn countOfRequestHeaderBytesSent(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfRequestHeaderBytesSent)
    }
    unsafe fn countOfRequestBodyBytesSent(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfRequestBodyBytesSent)
    }
    unsafe fn countOfRequestBodyBytesBeforeEncoding(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfRequestBodyBytesBeforeEncoding)
    }
    unsafe fn countOfResponseHeaderBytesReceived(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfResponseHeaderBytesReceived)
    }
    unsafe fn countOfResponseBodyBytesReceived(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfResponseBodyBytesReceived)
    }
    unsafe fn countOfResponseBodyBytesAfterDecoding(&self) -> i64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfResponseBodyBytesAfterDecoding)
    }
    unsafe fn localAddress(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localAddress)
    }
    unsafe fn localPort(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localPort)
    }
    unsafe fn remoteAddress(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteAddress)
    }
    unsafe fn remotePort(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remotePort)
    }
    unsafe fn negotiatedTLSProtocolVersion(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negotiatedTLSProtocolVersion)
    }
    unsafe fn negotiatedTLSCipherSuite(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, negotiatedTLSCipherSuite)
    }
    unsafe fn isCellular(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCellular)
    }
    unsafe fn isExpensive(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExpensive)
    }
    unsafe fn isConstrained(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isConstrained)
    }
    unsafe fn isMultipath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMultipath)
    }
    unsafe fn domainResolutionProtocol(&self) -> NSURLSessionTaskMetricsDomainResolutionProtocol
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domainResolutionProtocol)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionTaskTransactionMetrics), new)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURLSessionTaskMetrics(pub id);
impl std::ops::Deref for NSURLSessionTaskMetrics {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURLSessionTaskMetrics {}
impl NSURLSessionTaskMetrics {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURLSessionTaskMetrics), alloc) })
    }
}
impl INSObject for NSURLSessionTaskMetrics {}
impl PNSObject for NSURLSessionTaskMetrics {}
impl From<NSURLSessionTaskMetrics> for NSObject {
    fn from(child: NSURLSessionTaskMetrics) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURLSessionTaskMetrics {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURLSessionTaskMetrics, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSURLSessionTaskMetrics)) };
        if is_kind_of {
            Ok(NSURLSessionTaskMetrics(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURLSessionTaskMetrics")
        }
    }
}
impl INSURLSessionTaskMetrics for NSURLSessionTaskMetrics {}
pub trait INSURLSessionTaskMetrics: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn transactionMetrics(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, transactionMetrics)
    }
    unsafe fn taskInterval(&self) -> NSDateInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, taskInterval)
    }
    unsafe fn redirectCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, redirectCount)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURLSessionTaskMetrics), new)
    }
}
pub type NSUserActivityPersistentIdentifier = NSString;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUserActivity(pub id);
impl std::ops::Deref for NSUserActivity {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUserActivity {}
impl NSUserActivity {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUserActivity), alloc) })
    }
}
impl INSObject for NSUserActivity {}
impl PNSObject for NSUserActivity {}
impl From<NSUserActivity> for NSObject {
    fn from(child: NSUserActivity) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUserActivity {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUserActivity, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUserActivity)) };
        if is_kind_of {
            Ok(NSUserActivity(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUserActivity")
        }
    }
}
impl INSUserActivity for NSUserActivity {}
pub trait INSUserActivity: Sized + std::ops::Deref {
    unsafe fn initWithActivityType_(&self, activityType: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithActivityType: activityType)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn addUserInfoEntriesFromDictionary_(&self, otherDictionary: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addUserInfoEntriesFromDictionary: otherDictionary)
    }
    unsafe fn becomeCurrent(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, becomeCurrent)
    }
    unsafe fn resignCurrent(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resignCurrent)
    }
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn getContinuationStreamsWithCompletionHandler_(
        &self,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            getContinuationStreamsWithCompletionHandler: completionHandler
        )
    }
    unsafe fn activityType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, activityType)
    }
    unsafe fn title(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, title)
    }
    unsafe fn setTitle_(&self, title: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTitle: title)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn setUserInfo_(&self, userInfo: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUserInfo: userInfo)
    }
    unsafe fn requiredUserInfoKeys(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiredUserInfoKeys)
    }
    unsafe fn setRequiredUserInfoKeys_(&self, requiredUserInfoKeys: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiredUserInfoKeys: requiredUserInfoKeys)
    }
    unsafe fn needsSave(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, needsSave)
    }
    unsafe fn setNeedsSave_(&self, needsSave: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNeedsSave: needsSave)
    }
    unsafe fn webpageURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, webpageURL)
    }
    unsafe fn setWebpageURL_(&self, webpageURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWebpageURL: webpageURL)
    }
    unsafe fn referrerURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, referrerURL)
    }
    unsafe fn setReferrerURL_(&self, referrerURL: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReferrerURL: referrerURL)
    }
    unsafe fn expirationDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, expirationDate)
    }
    unsafe fn setExpirationDate_(&self, expirationDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setExpirationDate: expirationDate)
    }
    unsafe fn keywords(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keywords)
    }
    unsafe fn setKeywords_(&self, keywords: NSSet)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setKeywords: keywords)
    }
    unsafe fn supportsContinuationStreams(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsContinuationStreams)
    }
    unsafe fn setSupportsContinuationStreams_(&self, supportsContinuationStreams: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setSupportsContinuationStreams: supportsContinuationStreams
        )
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn targetContentIdentifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, targetContentIdentifier)
    }
    unsafe fn setTargetContentIdentifier_(&self, targetContentIdentifier: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTargetContentIdentifier: targetContentIdentifier)
    }
    unsafe fn isEligibleForHandoff(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEligibleForHandoff)
    }
    unsafe fn setEligibleForHandoff_(&self, eligibleForHandoff: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEligibleForHandoff: eligibleForHandoff)
    }
    unsafe fn isEligibleForSearch(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEligibleForSearch)
    }
    unsafe fn setEligibleForSearch_(&self, eligibleForSearch: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEligibleForSearch: eligibleForSearch)
    }
    unsafe fn isEligibleForPublicIndexing(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEligibleForPublicIndexing)
    }
    unsafe fn setEligibleForPublicIndexing_(&self, eligibleForPublicIndexing: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setEligibleForPublicIndexing: eligibleForPublicIndexing
        )
    }
    unsafe fn isEligibleForPrediction(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEligibleForPrediction)
    }
    unsafe fn setEligibleForPrediction_(&self, eligibleForPrediction: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEligibleForPrediction: eligibleForPrediction)
    }
    unsafe fn persistentIdentifier(&self) -> NSUserActivityPersistentIdentifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, persistentIdentifier)
    }
    unsafe fn setPersistentIdentifier_(&self, persistentIdentifier: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPersistentIdentifier: persistentIdentifier)
    }
    unsafe fn deleteSavedUserActivitiesWithPersistentIdentifiers_completionHandler_(
        persistentIdentifiers: NSArray,
        handler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSUserActivity) , deleteSavedUserActivitiesWithPersistentIdentifiers : persistentIdentifiers completionHandler : handler)
    }
    unsafe fn deleteAllSavedUserActivitiesWithCompletionHandler_(
        handler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSUserActivity),
            deleteAllSavedUserActivitiesWithCompletionHandler: handler
        )
    }
}
extern "C" {
    pub static NSUserActivityTypeBrowsingWeb: NSString;
}
pub trait PNSUserActivityDelegate: Sized + std::ops::Deref {
    unsafe fn userActivityWillSave_(&self, userActivity: NSUserActivity)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userActivityWillSave: userActivity)
    }
    unsafe fn userActivityWasContinued_(&self, userActivity: NSUserActivity)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userActivityWasContinued: userActivity)
    }
    unsafe fn userActivity_didReceiveInputStream_outputStream_(
        &self,
        userActivity: NSUserActivity,
        inputStream: NSInputStream,
        outputStream: NSOutputStream,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , userActivity : userActivity didReceiveInputStream : inputStream outputStream : outputStream)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSUUID(pub id);
impl std::ops::Deref for NSUUID {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSUUID {}
impl NSUUID {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSUUID), alloc) })
    }
}
impl PNSCopying for NSUUID {}
impl PNSSecureCoding for NSUUID {}
impl INSObject for NSUUID {}
impl PNSObject for NSUUID {}
impl From<NSUUID> for NSObject {
    fn from(child: NSUUID) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSUUID {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSUUID, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSUUID)) };
        if is_kind_of {
            Ok(NSUUID(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSUUID")
        }
    }
}
impl INSUUID for NSUUID {}
pub trait INSUUID: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithUUIDString_(&self, string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUUIDString: string)
    }
    unsafe fn initWithUUIDBytes_(&self, bytes: *const ::std::os::raw::c_uchar) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUUIDBytes: bytes)
    }
    unsafe fn getUUIDBytes_(&self, uuid: *mut ::std::os::raw::c_uchar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getUUIDBytes: uuid)
    }
    unsafe fn compare_(&self, otherUUID: NSUUID) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: otherUUID)
    }
    unsafe fn UUIDString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, UUIDString)
    }
    unsafe fn UUID() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSUUID), UUID)
    }
}
pub const kMIDIInvalidClient: _bindgen_ty_58 = -10830;
pub const kMIDIInvalidPort: _bindgen_ty_58 = -10831;
pub const kMIDIWrongEndpointType: _bindgen_ty_58 = -10832;
pub const kMIDINoConnection: _bindgen_ty_58 = -10833;
pub const kMIDIUnknownEndpoint: _bindgen_ty_58 = -10834;
pub const kMIDIUnknownProperty: _bindgen_ty_58 = -10835;
pub const kMIDIWrongPropertyType: _bindgen_ty_58 = -10836;
pub const kMIDINoCurrentSetup: _bindgen_ty_58 = -10837;
pub const kMIDIMessageSendErr: _bindgen_ty_58 = -10838;
pub const kMIDIServerStartErr: _bindgen_ty_58 = -10839;
pub const kMIDISetupFormatErr: _bindgen_ty_58 = -10840;
pub const kMIDIWrongThread: _bindgen_ty_58 = -10841;
pub const kMIDIObjectNotFound: _bindgen_ty_58 = -10842;
pub const kMIDIIDNotUnique: _bindgen_ty_58 = -10843;
pub const kMIDINotPermitted: _bindgen_ty_58 = -10844;
pub const kMIDIUnknownError: _bindgen_ty_58 = -10845;
pub type _bindgen_ty_58 = OSStatus;
pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIDeviceRef = MIDIObjectRef;
pub type MIDIEntityRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub const MIDIObjectType_kMIDIObjectType_Other: MIDIObjectType = -1;
pub const MIDIObjectType_kMIDIObjectType_Device: MIDIObjectType = 0;
pub const MIDIObjectType_kMIDIObjectType_Entity: MIDIObjectType = 1;
pub const MIDIObjectType_kMIDIObjectType_Source: MIDIObjectType = 2;
pub const MIDIObjectType_kMIDIObjectType_Destination: MIDIObjectType = 3;
pub const MIDIObjectType_kMIDIObjectType_ExternalDevice: MIDIObjectType = 16;
pub const MIDIObjectType_kMIDIObjectType_ExternalEntity: MIDIObjectType = 17;
pub const MIDIObjectType_kMIDIObjectType_ExternalSource: MIDIObjectType = 18;
pub const MIDIObjectType_kMIDIObjectType_ExternalDestination: MIDIObjectType = 19;
pub type MIDIObjectType = SInt32;
extern "C" {
    pub static kMIDIObjectType_ExternalMask: MIDIObjectType;
}
pub type MIDIUniqueID = SInt32;
pub const kMIDIInvalidUniqueID: _bindgen_ty_59 = 0;
pub type _bindgen_ty_59 = MIDIUniqueID;
pub const MIDIProtocolID_kMIDIProtocol_1_0: MIDIProtocolID = 1;
pub const MIDIProtocolID_kMIDIProtocol_2_0: MIDIProtocolID = 2;
pub type MIDIProtocolID = SInt32;
pub type MIDINotifyProc = ::std::option::Option<
    unsafe extern "C" fn(message: *const MIDINotification, refCon: *mut ::std::os::raw::c_void),
>;
pub type MIDINotifyBlock = *mut ::std::os::raw::c_void;
pub type MIDIReceiveBlock = *mut ::std::os::raw::c_void;
pub type MIDIReadProc = ::std::option::Option<
    unsafe extern "C" fn(
        pktlist: *const MIDIPacketList,
        readProcRefCon: *mut ::std::os::raw::c_void,
        srcConnRefCon: *mut ::std::os::raw::c_void,
    ),
>;
pub type MIDIReadBlock = *mut ::std::os::raw::c_void;
pub type MIDICompletionProc =
    ::std::option::Option<unsafe extern "C" fn(request: *mut MIDISysexSendRequest)>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MIDIEventPacket {
    pub timeStamp: MIDITimeStamp,
    pub wordCount: UInt32,
    pub words: [UInt32; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIEventList {
    pub protocol: MIDIProtocolID,
    pub numPackets: UInt32,
    pub packet: [MIDIEventPacket; 1usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDISysexSendRequest {
    pub destination: MIDIEndpointRef,
    pub data: *const Byte,
    pub bytesToSend: UInt32,
    pub complete: Boolean,
    pub reserved: [Byte; 3usize],
    pub completionProc: MIDICompletionProc,
    pub completionRefCon: *mut ::std::os::raw::c_void,
}
pub const MIDINotificationMessageID_kMIDIMsgSetupChanged: MIDINotificationMessageID = 1;
pub const MIDINotificationMessageID_kMIDIMsgObjectAdded: MIDINotificationMessageID = 2;
pub const MIDINotificationMessageID_kMIDIMsgObjectRemoved: MIDINotificationMessageID = 3;
pub const MIDINotificationMessageID_kMIDIMsgPropertyChanged: MIDINotificationMessageID = 4;
pub const MIDINotificationMessageID_kMIDIMsgThruConnectionsChanged: MIDINotificationMessageID = 5;
pub const MIDINotificationMessageID_kMIDIMsgSerialPortOwnerChanged: MIDINotificationMessageID = 6;
pub const MIDINotificationMessageID_kMIDIMsgIOError: MIDINotificationMessageID = 7;
pub type MIDINotificationMessageID = SInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDINotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIObjectAddRemoveNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub parent: MIDIObjectRef,
    pub parentType: MIDIObjectType,
    pub child: MIDIObjectRef,
    pub childType: MIDIObjectType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIObjectPropertyChangeNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub object: MIDIObjectRef,
    pub objectType: MIDIObjectType,
    pub propertyName: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIIOErrorNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub driverDevice: MIDIDeviceRef,
    pub errorCode: OSStatus,
}
extern "C" {
    pub static kMIDIPropertyName: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyManufacturer: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyModel: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyUniqueID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDeviceID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceiveChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxSysExSpeed: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyAdvanceScheduleTimeMuSec: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsEmbeddedEntity: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsBroadcast: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySingleRealtimeEntity: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyConnectionUniqueID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyOffline: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyPrivate: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverOwner: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyFactoryPatchNameFile: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyUserPatchNameFile: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyNameConfiguration: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyNameConfigurationDictionary: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyImage: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverVersion: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsGeneralMIDI: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsMMC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyCanRoute: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesClock: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesMTC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesNotes: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesProgramChanges: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesBankSelectMSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesBankSelectLSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsClock: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsMTC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsNotes: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsProgramChanges: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsBankSelectMSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsBankSelectLSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyPanDisruptsStereo: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsSampler: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsDrumMachine: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsMixer: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsEffectUnit: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxReceiveChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxTransmitChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverDeviceEditorApp: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsShowControl: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDisplayName: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyProtocolID: CFStringRef;
}
extern "C" {
    pub fn MIDIClientCreate(
        name: CFStringRef,
        notifyProc: MIDINotifyProc,
        notifyRefCon: *mut ::std::os::raw::c_void,
        outClient: *mut MIDIClientRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIClientCreateWithBlock(
        name: CFStringRef,
        outClient: *mut MIDIClientRef,
        notifyBlock: MIDINotifyBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreateWithProtocol(
        client: MIDIClientRef,
        portName: CFStringRef,
        protocol: MIDIProtocolID,
        outPort: *mut MIDIPortRef,
        receiveBlock: MIDIReceiveBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreate(
        client: MIDIClientRef,
        portName: CFStringRef,
        readProc: MIDIReadProc,
        refCon: *mut ::std::os::raw::c_void,
        outPort: *mut MIDIPortRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreateWithBlock(
        client: MIDIClientRef,
        portName: CFStringRef,
        outPort: *mut MIDIPortRef,
        readBlock: MIDIReadBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIOutputPortCreate(
        client: MIDIClientRef,
        portName: CFStringRef,
        outPort: *mut MIDIPortRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortConnectSource(
        port: MIDIPortRef,
        source: MIDIEndpointRef,
        connRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortDisconnectSource(port: MIDIPortRef, source: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfDevices() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
}
extern "C" {
    pub fn MIDIDeviceGetNumberOfEntities(device: MIDIDeviceRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIDeviceGetEntity(device: MIDIDeviceRef, entityIndex0: ItemCount) -> MIDIEntityRef;
}
extern "C" {
    pub fn MIDIEntityGetNumberOfSources(entity: MIDIEntityRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIEntityGetSource(entity: MIDIEntityRef, sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEntityGetNumberOfDestinations(entity: MIDIEntityRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIEntityGetDestination(
        entity: MIDIEntityRef,
        destIndex0: ItemCount,
    ) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEntityGetDevice(inEntity: MIDIEntityRef, outDevice: *mut MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfSources() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIGetNumberOfDestinations() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetDestination(destIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEndpointGetEntity(
        inEndpoint: MIDIEndpointRef,
        outEntity: *mut MIDIEntityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreateWithProtocol(
        client: MIDIClientRef,
        name: CFStringRef,
        protocol: MIDIProtocolID,
        outDest: *mut MIDIEndpointRef,
        readBlock: MIDIReceiveBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreate(
        client: MIDIClientRef,
        name: CFStringRef,
        readProc: MIDIReadProc,
        refCon: *mut ::std::os::raw::c_void,
        outDest: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreateWithBlock(
        client: MIDIClientRef,
        name: CFStringRef,
        outDest: *mut MIDIEndpointRef,
        readBlock: MIDIReadBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISourceCreateWithProtocol(
        client: MIDIClientRef,
        name: CFStringRef,
        protocol: MIDIProtocolID,
        outSrc: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISourceCreate(
        client: MIDIClientRef,
        name: CFStringRef,
        outSrc: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIEndpointDispose(endpt: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfExternalDevices() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetExternalDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
}
extern "C" {
    pub fn MIDIObjectGetIntegerProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outValue: *mut SInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetIntegerProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        value: SInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetStringProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        str_: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetStringProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        str_: CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetDataProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetDataProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        data: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetDictionaryProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outDict: *mut CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetDictionaryProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        dict: CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetProperties(
        obj: MIDIObjectRef,
        outProperties: *mut CFPropertyListRef,
        deep: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectRemoveProperty(obj: MIDIObjectRef, propertyID: CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectFindByUniqueID(
        inUniqueID: MIDIUniqueID,
        outObject: *mut MIDIObjectRef,
        outObjectType: *mut MIDIObjectType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISendEventList(
        port: MIDIPortRef,
        dest: MIDIEndpointRef,
        evtlist: *const MIDIEventList,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISend(
        port: MIDIPortRef,
        dest: MIDIEndpointRef,
        pktlist: *const MIDIPacketList,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISendSysex(request: *mut MIDISysexSendRequest) -> OSStatus;
}
extern "C" {
    pub fn MIDIReceivedEventList(src: MIDIEndpointRef, evtlist: *const MIDIEventList) -> OSStatus;
}
extern "C" {
    pub fn MIDIReceived(src: MIDIEndpointRef, pktlist: *const MIDIPacketList) -> OSStatus;
}
extern "C" {
    pub fn MIDIFlushOutput(dest: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIRestart() -> OSStatus;
}
extern "C" {
    pub fn MIDIEventListInit(
        evtlist: *mut MIDIEventList,
        protocol: MIDIProtocolID,
    ) -> *mut MIDIEventPacket;
}
extern "C" {
    pub fn MIDIEventListAdd(
        evtlist: *mut MIDIEventList,
        listSize: ByteCount,
        curPacket: *mut MIDIEventPacket,
        time: MIDITimeStamp,
        wordCount: ByteCount,
        words: *const UInt32,
    ) -> *mut MIDIEventPacket;
}
extern "C" {
    pub fn MIDIPacketListInit(pktlist: *mut MIDIPacketList) -> *mut MIDIPacket;
}
extern "C" {
    pub fn MIDIPacketListAdd(
        pktlist: *mut MIDIPacketList,
        listSize: ByteCount,
        curPacket: *mut MIDIPacket,
        time: MIDITimeStamp,
        nData: ByteCount,
        data: *const Byte,
    ) -> *mut MIDIPacket;
}
pub type MIDISetupRef = MIDIObjectRef;
extern "C" {
    pub fn MIDISetupCreate(outSetup: *mut MIDISetupRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupDispose(setup: MIDISetupRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupInstall(setup: MIDISetupRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupGetCurrent(outSetup: *mut MIDISetupRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupToData(setup: MIDISetupRef, outData: *mut CFDataRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupFromData(data: CFDataRef, outSetup: *mut MIDISetupRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceNewEntity(
        device: MIDIDeviceRef,
        name: CFStringRef,
        protocol: MIDIProtocolID,
        embedded: Boolean,
        numSourceEndpoints: ItemCount,
        numDestinationEndpoints: ItemCount,
        newEntity: *mut MIDIEntityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceAddEntity(
        device: MIDIDeviceRef,
        name: CFStringRef,
        embedded: Boolean,
        numSourceEndpoints: ItemCount,
        numDestinationEndpoints: ItemCount,
        newEntity: *mut MIDIEntityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceRemoveEntity(device: MIDIDeviceRef, entity: MIDIEntityRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIEntityAddOrRemoveEndpoints(
        entity: MIDIEntityRef,
        numSourceEndpoints: ItemCount,
        numDestinationEndpoints: ItemCount,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupAddDevice(device: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupRemoveDevice(device: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupAddExternalDevice(device: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDISetupRemoveExternalDevice(device: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetSerialPortOwner(
        portName: CFStringRef,
        outDriverName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISetSerialPortOwner(portName: CFStringRef, driverName: CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetSerialPortDrivers(outDriverNames: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIExternalDeviceCreate(
        name: CFStringRef,
        manufacturer: CFStringRef,
        model: CFStringRef,
        outDevice: *mut MIDIDeviceRef,
    ) -> OSStatus;
}
pub type MIDIThruConnectionRef = MIDIObjectRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIValueMap {
    pub value: [UInt8; 128usize],
}
pub const MIDITransformType_kMIDITransform_None: MIDITransformType = 0;
pub const MIDITransformType_kMIDITransform_FilterOut: MIDITransformType = 1;
pub const MIDITransformType_kMIDITransform_MapControl: MIDITransformType = 2;
pub const MIDITransformType_kMIDITransform_Add: MIDITransformType = 8;
pub const MIDITransformType_kMIDITransform_Scale: MIDITransformType = 9;
pub const MIDITransformType_kMIDITransform_MinValue: MIDITransformType = 10;
pub const MIDITransformType_kMIDITransform_MaxValue: MIDITransformType = 11;
pub const MIDITransformType_kMIDITransform_MapValue: MIDITransformType = 12;
pub type MIDITransformType = UInt16;
pub const kMIDIThruConnection_MaxEndpoints: _bindgen_ty_60 = 8;
pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
pub const MIDITransformControlType_kMIDIControlType_7Bit: MIDITransformControlType = 0;
pub const MIDITransformControlType_kMIDIControlType_14Bit: MIDITransformControlType = 1;
pub const MIDITransformControlType_kMIDIControlType_7BitRPN: MIDITransformControlType = 2;
pub const MIDITransformControlType_kMIDIControlType_14BitRPN: MIDITransformControlType = 3;
pub const MIDITransformControlType_kMIDIControlType_7BitNRPN: MIDITransformControlType = 4;
pub const MIDITransformControlType_kMIDIControlType_14BitNRPN: MIDITransformControlType = 5;
pub type MIDITransformControlType = UInt8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDITransform {
    pub transform: MIDITransformType,
    pub param: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIControlTransform {
    pub controlType: MIDITransformControlType,
    pub remappedControlType: MIDITransformControlType,
    pub controlNumber: UInt16,
    pub transform: MIDITransformType,
    pub param: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIThruConnectionEndpoint {
    pub endpointRef: MIDIEndpointRef,
    pub uniqueID: MIDIUniqueID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIThruConnectionParams {
    pub version: UInt32,
    pub numSources: UInt32,
    pub sources: [MIDIThruConnectionEndpoint; 8usize],
    pub numDestinations: UInt32,
    pub destinations: [MIDIThruConnectionEndpoint; 8usize],
    pub channelMap: [UInt8; 16usize],
    pub lowVelocity: UInt8,
    pub highVelocity: UInt8,
    pub lowNote: UInt8,
    pub highNote: UInt8,
    pub noteNumber: MIDITransform,
    pub velocity: MIDITransform,
    pub keyPressure: MIDITransform,
    pub channelPressure: MIDITransform,
    pub programChange: MIDITransform,
    pub pitchBend: MIDITransform,
    pub filterOutSysEx: UInt8,
    pub filterOutMTC: UInt8,
    pub filterOutBeatClock: UInt8,
    pub filterOutTuneRequest: UInt8,
    pub reserved2: [UInt8; 3usize],
    pub filterOutAllControls: UInt8,
    pub numControlTransforms: UInt16,
    pub numMaps: UInt16,
    pub reserved3: [UInt16; 4usize],
}
extern "C" {
    pub fn MIDIThruConnectionParamsInitialize(inConnectionParams: *mut MIDIThruConnectionParams);
}
extern "C" {
    pub fn MIDIThruConnectionCreate(
        inPersistentOwnerID: CFStringRef,
        inConnectionParams: CFDataRef,
        outConnection: *mut MIDIThruConnectionRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIThruConnectionDispose(connection: MIDIThruConnectionRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIThruConnectionGetParams(
        connection: MIDIThruConnectionRef,
        outConnectionParams: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIThruConnectionSetParams(
        connection: MIDIThruConnectionRef,
        inConnectionParams: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIThruConnectionFind(
        inPersistentOwnerID: CFStringRef,
        outConnectionList: *mut CFDataRef,
    ) -> OSStatus;
}
pub type MIDIDriverRef = *mut *mut MIDIDriverInterface;
pub type MIDIDeviceListRef = MIDIObjectRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIDriverInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub FindDevices: ::std::option::Option<
        unsafe extern "C" fn(self_: MIDIDriverRef, devList: MIDIDeviceListRef) -> OSStatus,
    >,
    pub Start: ::std::option::Option<
        unsafe extern "C" fn(self_: MIDIDriverRef, devList: MIDIDeviceListRef) -> OSStatus,
    >,
    pub Stop: ::std::option::Option<unsafe extern "C" fn(self_: MIDIDriverRef) -> OSStatus>,
    pub Configure: ::std::option::Option<
        unsafe extern "C" fn(self_: MIDIDriverRef, device: MIDIDeviceRef) -> OSStatus,
    >,
    pub Send: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            pktlist: *const MIDIPacketList,
            destRefCon1: *mut ::std::os::raw::c_void,
            destRefCon2: *mut ::std::os::raw::c_void,
        ) -> OSStatus,
    >,
    pub EnableSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            src: MIDIEndpointRef,
            enabled: Boolean,
        ) -> OSStatus,
    >,
    pub Flush: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            dest: MIDIEndpointRef,
            destRefCon1: *mut ::std::os::raw::c_void,
            destRefCon2: *mut ::std::os::raw::c_void,
        ) -> OSStatus,
    >,
    pub Monitor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            dest: MIDIEndpointRef,
            pktlist: *const MIDIPacketList,
        ) -> OSStatus,
    >,
    pub SendPackets: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            pktlist: *const MIDIEventList,
            destRefCon1: *mut ::std::os::raw::c_void,
            destRefCon2: *mut ::std::os::raw::c_void,
        ) -> OSStatus,
    >,
    pub MonitorEvents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: MIDIDriverRef,
            dest: MIDIEndpointRef,
            pktlist: *const MIDIEventList,
        ) -> OSStatus,
    >,
}
extern "C" {
    pub static kMIDIDriverPropertyUsesSerial: CFStringRef;
}
extern "C" {
    pub fn MIDIDeviceCreate(
        owner: MIDIDriverRef,
        name: CFStringRef,
        manufacturer: CFStringRef,
        model: CFStringRef,
        outDevice: *mut MIDIDeviceRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceDispose(device: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceListGetNumberOfDevices(devList: MIDIDeviceListRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIDeviceListGetDevice(devList: MIDIDeviceListRef, index0: ItemCount) -> MIDIDeviceRef;
}
extern "C" {
    pub fn MIDIDeviceListAddDevice(devList: MIDIDeviceListRef, dev: MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIDeviceListDispose(devList: MIDIDeviceListRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIEndpointSetRefCons(
        endpt: MIDIEndpointRef,
        ref1: *mut ::std::os::raw::c_void,
        ref2: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIEndpointGetRefCons(
        endpt: MIDIEndpointRef,
        ref1: *mut *mut ::std::os::raw::c_void,
        ref2: *mut *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetDriverIORunLoop() -> CFRunLoopRef;
}
extern "C" {
    pub fn MIDIGetDriverDeviceList(driver: MIDIDriverRef) -> MIDIDeviceListRef;
}
extern "C" {
    pub fn MIDIDriverEnableMonitoring(driver: MIDIDriverRef, enabled: Boolean) -> OSStatus;
}
pub const MIDIMessageType_kMIDIMessageTypeUtility: MIDIMessageType = 0;
pub const MIDIMessageType_kMIDIMessageTypeSystem: MIDIMessageType = 1;
pub const MIDIMessageType_kMIDIMessageTypeChannelVoice1: MIDIMessageType = 2;
pub const MIDIMessageType_kMIDIMessageTypeSysEx: MIDIMessageType = 3;
pub const MIDIMessageType_kMIDIMessageTypeChannelVoice2: MIDIMessageType = 4;
pub const MIDIMessageType_kMIDIMessageTypeData128: MIDIMessageType = 5;
pub const MIDIMessageType_kMIDIMessageTypeUnknownF: MIDIMessageType = 15;
pub type MIDIMessageType = ::std::os::raw::c_uint;
pub const MIDICVStatus_kMIDICVStatusNoteOff: MIDICVStatus = 8;
pub const MIDICVStatus_kMIDICVStatusNoteOn: MIDICVStatus = 9;
pub const MIDICVStatus_kMIDICVStatusPolyPressure: MIDICVStatus = 10;
pub const MIDICVStatus_kMIDICVStatusControlChange: MIDICVStatus = 11;
pub const MIDICVStatus_kMIDICVStatusProgramChange: MIDICVStatus = 12;
pub const MIDICVStatus_kMIDICVStatusChannelPressure: MIDICVStatus = 13;
pub const MIDICVStatus_kMIDICVStatusPitchBend: MIDICVStatus = 14;
pub const MIDICVStatus_kMIDICVStatusRegisteredPNC: MIDICVStatus = 0;
pub const MIDICVStatus_kMIDICVStatusAssignablePNC: MIDICVStatus = 1;
pub const MIDICVStatus_kMIDICVStatusRegisteredControl: MIDICVStatus = 2;
pub const MIDICVStatus_kMIDICVStatusAssignableControl: MIDICVStatus = 3;
pub const MIDICVStatus_kMIDICVStatusRelRegisteredControl: MIDICVStatus = 4;
pub const MIDICVStatus_kMIDICVStatusRelAssignableControl: MIDICVStatus = 5;
pub const MIDICVStatus_kMIDICVStatusPerNotePitchBend: MIDICVStatus = 6;
pub const MIDICVStatus_kMIDICVStatusPerNoteMgmt: MIDICVStatus = 15;
pub type MIDICVStatus = ::std::os::raw::c_uint;
pub const MIDISystemStatus_kMIDIStatusStartOfExclusive: MIDISystemStatus = 240;
pub const MIDISystemStatus_kMIDIStatusEndOfExclusive: MIDISystemStatus = 247;
pub const MIDISystemStatus_kMIDIStatusMTC: MIDISystemStatus = 241;
pub const MIDISystemStatus_kMIDIStatusSongPosPointer: MIDISystemStatus = 242;
pub const MIDISystemStatus_kMIDIStatusSongSelect: MIDISystemStatus = 243;
pub const MIDISystemStatus_kMIDIStatusTuneRequest: MIDISystemStatus = 246;
pub const MIDISystemStatus_kMIDIStatusTimingClock: MIDISystemStatus = 248;
pub const MIDISystemStatus_kMIDIStatusStart: MIDISystemStatus = 250;
pub const MIDISystemStatus_kMIDIStatusContinue: MIDISystemStatus = 251;
pub const MIDISystemStatus_kMIDIStatusStop: MIDISystemStatus = 252;
pub const MIDISystemStatus_kMIDIStatusActiveSending: MIDISystemStatus = 254;
pub const MIDISystemStatus_kMIDIStatusActiveSensing: MIDISystemStatus = 254;
pub const MIDISystemStatus_kMIDIStatusSystemReset: MIDISystemStatus = 255;
pub type MIDISystemStatus = ::std::os::raw::c_uint;
pub const MIDISysExStatus_kMIDISysExStatusComplete: MIDISysExStatus = 0;
pub const MIDISysExStatus_kMIDISysExStatusStart: MIDISysExStatus = 1;
pub const MIDISysExStatus_kMIDISysExStatusContinue: MIDISysExStatus = 2;
pub const MIDISysExStatus_kMIDISysExStatusEnd: MIDISysExStatus = 3;
pub const MIDISysExStatus_kMIDISysExStatusMixedDataSetHeader: MIDISysExStatus = 8;
pub const MIDISysExStatus_kMIDISysExStatusMixedDataSetPayload: MIDISysExStatus = 9;
pub type MIDISysExStatus = ::std::os::raw::c_uint;
pub const MIDIUtilityStatus_kMIDIUtilityStatusNOOP: MIDIUtilityStatus = 0;
pub const MIDIUtilityStatus_kMIDIUtilityStatusJitterReductionClock: MIDIUtilityStatus = 1;
pub const MIDIUtilityStatus_kMIDIUtilityStatusJitterReductionTimestamp: MIDIUtilityStatus = 2;
pub type MIDIUtilityStatus = ::std::os::raw::c_uint;
pub const MIDINoteAttribute_kMIDINoteAttributeNone: MIDINoteAttribute = 0;
pub const MIDINoteAttribute_kMIDINoteAttributeManufacturerSpecific: MIDINoteAttribute = 1;
pub const MIDINoteAttribute_kMIDINoteAttributeProfileSpecific: MIDINoteAttribute = 2;
pub const MIDINoteAttribute_kMIDINoteAttributePitch: MIDINoteAttribute = 3;
pub type MIDINoteAttribute = UInt8;
pub const MIDIProgramChangeOptions_kMIDIProgramChangeBankValid: MIDIProgramChangeOptions = 1;
pub type MIDIProgramChangeOptions = UInt8;
pub const MIDIPerNoteManagementOptions_kMIDIPerNoteManagementReset: MIDIPerNoteManagementOptions =
    1;
pub const MIDIPerNoteManagementOptions_kMIDIPerNoteManagementDetach: MIDIPerNoteManagementOptions =
    2;
pub type MIDIPerNoteManagementOptions = UInt8;
pub type MIDIMessage_32 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIMessage_64 {
    pub word0: UInt32,
    pub word1: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIMessage_96 {
    pub word0: UInt32,
    pub word1: UInt32,
    pub word2: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIMessage_128 {
    pub word0: UInt32,
    pub word1: UInt32,
    pub word2: UInt32,
    pub word3: UInt32,
}
pub const kMIDI1UPMaxSysexSize: UInt8 = 6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1,
    pub type_: MIDIMessageType,
    pub group: UInt8,
    pub reserved: [UInt8; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_7,
    pub utility: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_1,
    pub system: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_2,
    pub channelVoice1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3,
    pub sysEx: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_4,
    pub channelVoice2: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5,
    pub data128: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6,
    pub unknown: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub status: MIDIUtilityStatus,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub jitterReductionClock: UInt16,
    pub jitterReductionTimestamp: UInt16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub status: MIDISystemStatus,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub timeCode: UInt8,
    pub songPositionPointer: UInt16,
    pub songSelect: UInt8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1,
    pub status: MIDICVStatus,
    pub channel: UInt8,
    pub reserved: [UInt8; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 {
    pub __bindgen_anon_1:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_3,
    pub note: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1,
    pub polyPressure: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2,
    pub controlChange: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_3,
    pub program: UInt8,
    pub channelPressure: UInt8,
    pub pitchBend: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 {
    pub number: UInt8,
    pub velocity: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_2 {
    pub noteNumber: UInt8,
    pub pressure: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_3 {
    pub index: UInt8,
    pub data: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_4 {
    pub status: MIDISysExStatus,
    pub channel: UInt8,
    pub data: [UInt8; 6usize],
    pub reserved: UInt8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub status: MIDICVStatus,
    pub channel: UInt8,
    pub reserved: [UInt8; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub __bindgen_anon_1:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_6,
    pub __bindgen_anon_7:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_7,
    pub __bindgen_anon_8:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_8,
    pub __bindgen_anon_9:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_9,
    pub __bindgen_anon_10:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_10,
    pub note: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub polyPressure: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub controlChange: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    pub programChange: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4,
    pub channelPressure:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5,
    pub pitchBend: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_6,
    pub perNoteController:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_7,
    pub controller: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_8,
    pub perNotePitchBend:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_9,
    pub perNoteManagement:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_10,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub number: UInt8,
    pub attributeType: MIDINoteAttribute,
    pub velocity: UInt16,
    pub attribute: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub noteNumber: UInt8,
    pub reserved: UInt8,
    pub pressure: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub index: UInt8,
    pub reserved: UInt8,
    pub data: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_4 {
    pub options: MIDIProgramChangeOptions,
    pub program: UInt8,
    pub reserved: [UInt8; 2usize],
    pub bank: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_5 {
    pub data: UInt32,
    pub reserved: [UInt8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_6 {
    pub data: UInt32,
    pub reserved: [UInt8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_7 {
    pub noteNumber: UInt8,
    pub index: UInt8,
    pub data: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_8 {
    pub bank: UInt8,
    pub index: UInt8,
    pub data: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_9 {
    pub noteNumber: UInt8,
    pub reserved: UInt8,
    pub bend: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_10 {
    pub note: UInt8,
    pub options: MIDIPerNoteManagementOptions,
    pub reserved: [UInt8; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6 {
    pub __bindgen_anon_1: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1,
    pub status: MIDISysExStatus,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1 {
    pub __bindgen_anon_1:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2:
        MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
    pub sysex8: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1,
    pub mixedDataSet: MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_1 {
    pub byteCount: UInt8,
    pub streamID: UInt8,
    pub data: [UInt8; 13usize],
    pub reserved: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_6__bindgen_ty_1__bindgen_ty_2 {
    pub mdsID: UInt8,
    pub data: [UInt8; 14usize],
    pub reserved: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIUniversalMessage__bindgen_ty_1__bindgen_ty_7 {
    pub words: [UInt32; 4usize],
}
pub type MIDIEventVisitor = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        timeStamp: MIDITimeStamp,
        message: MIDIUniversalMessage,
    ),
>;
extern "C" {
    pub fn MIDIEventListForEachEvent(
        evtlist: *const MIDIEventList,
        visitor: MIDIEventVisitor,
        visitorContext: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn MIDIBluetoothDriverActivateAllConnections() -> OSStatus;
}
extern "C" {
    pub fn MIDIBluetoothDriverDisconnect(uuid: CFStringRef) -> OSStatus;
}
extern "C" {
    pub static MIDINetworkBonjourServiceType: NSString;
}
extern "C" {
    pub static MIDINetworkNotificationContactsDidChange: NSString;
}
extern "C" {
    pub static MIDINetworkNotificationSessionDidChange: NSString;
}
pub const MIDINetworkConnectionPolicy_MIDINetworkConnectionPolicy_NoOne:
    MIDINetworkConnectionPolicy = 0;
pub const MIDINetworkConnectionPolicy_MIDINetworkConnectionPolicy_HostsInContactList:
    MIDINetworkConnectionPolicy = 1;
pub const MIDINetworkConnectionPolicy_MIDINetworkConnectionPolicy_Anyone:
    MIDINetworkConnectionPolicy = 2;
pub type MIDINetworkConnectionPolicy = NSUInteger;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDINetworkHost(pub id);
impl std::ops::Deref for MIDINetworkHost {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDINetworkHost {}
impl MIDINetworkHost {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDINetworkHost), alloc) })
    }
}
impl INSObject for MIDINetworkHost {}
impl PNSObject for MIDINetworkHost {}
impl From<MIDINetworkHost> for NSObject {
    fn from(child: MIDINetworkHost) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDINetworkHost {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDINetworkHost, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(MIDINetworkHost)) };
        if is_kind_of {
            Ok(MIDINetworkHost(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDINetworkHost")
        }
    }
}
impl IMIDINetworkHost for MIDINetworkHost {}
pub trait IMIDINetworkHost: Sized + std::ops::Deref {
    unsafe fn hasSameAddressAs_(&self, other: MIDINetworkHost) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasSameAddressAs: other)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn address(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, address)
    }
    unsafe fn port(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn netServiceName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceName)
    }
    unsafe fn netServiceDomain(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, netServiceDomain)
    }
    unsafe fn hostWithName_address_port_(
        name: NSString,
        address: NSString,
        port: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (MIDINetworkHost) , hostWithName : name address : address port : port)
    }
    unsafe fn hostWithName_netService_(name: NSString, netService: NSNetService) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (MIDINetworkHost) , hostWithName : name netService : netService)
    }
    unsafe fn hostWithName_netServiceName_netServiceDomain_(
        name: NSString,
        netServiceName: NSString,
        netServiceDomain: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (MIDINetworkHost) , hostWithName : name netServiceName : netServiceName netServiceDomain : netServiceDomain)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDINetworkConnection(pub id);
impl std::ops::Deref for MIDINetworkConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDINetworkConnection {}
impl MIDINetworkConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDINetworkConnection), alloc) })
    }
}
impl INSObject for MIDINetworkConnection {}
impl PNSObject for MIDINetworkConnection {}
impl From<MIDINetworkConnection> for NSObject {
    fn from(child: MIDINetworkConnection) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDINetworkConnection {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDINetworkConnection, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDINetworkConnection)) };
        if is_kind_of {
            Ok(MIDINetworkConnection(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDINetworkConnection")
        }
    }
}
impl IMIDINetworkConnection for MIDINetworkConnection {}
pub trait IMIDINetworkConnection: Sized + std::ops::Deref {
    unsafe fn host(&self) -> MIDINetworkHost
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, host)
    }
    unsafe fn connectionWithHost_(host: MIDINetworkHost) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(MIDINetworkConnection), connectionWithHost: host)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDINetworkSession(pub id);
impl std::ops::Deref for MIDINetworkSession {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDINetworkSession {}
impl MIDINetworkSession {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDINetworkSession), alloc) })
    }
}
impl INSObject for MIDINetworkSession {}
impl PNSObject for MIDINetworkSession {}
impl From<MIDINetworkSession> for NSObject {
    fn from(child: MIDINetworkSession) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDINetworkSession {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDINetworkSession, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDINetworkSession)) };
        if is_kind_of {
            Ok(MIDINetworkSession(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDINetworkSession")
        }
    }
}
impl IMIDINetworkSession for MIDINetworkSession {}
pub trait IMIDINetworkSession: Sized + std::ops::Deref {
    unsafe fn contacts(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, contacts)
    }
    unsafe fn addContact_(&self, contact: MIDINetworkHost) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addContact: contact)
    }
    unsafe fn removeContact_(&self, contact: MIDINetworkHost) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeContact: contact)
    }
    unsafe fn connections(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connections)
    }
    unsafe fn addConnection_(&self, connection: MIDINetworkConnection) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addConnection: connection)
    }
    unsafe fn removeConnection_(&self, connection: MIDINetworkConnection) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeConnection: connection)
    }
    unsafe fn sourceEndpoint(&self) -> MIDIEndpointRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sourceEndpoint)
    }
    unsafe fn destinationEndpoint(&self) -> MIDIEndpointRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, destinationEndpoint)
    }
    unsafe fn isEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEnabled)
    }
    unsafe fn setEnabled_(&self, enabled: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEnabled: enabled)
    }
    unsafe fn networkPort(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkPort)
    }
    unsafe fn networkName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, networkName)
    }
    unsafe fn localName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localName)
    }
    unsafe fn connectionPolicy(&self) -> MIDINetworkConnectionPolicy
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectionPolicy)
    }
    unsafe fn setConnectionPolicy_(&self, connectionPolicy: MIDINetworkConnectionPolicy)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setConnectionPolicy: connectionPolicy)
    }
    unsafe fn defaultSession() -> MIDINetworkSession
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(MIDINetworkSession), defaultSession)
    }
}
pub type MIDIChannelNumber = u8;
pub const MIDIChannelsWholePort: MIDIChannelNumber = 127;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIDeviceIdentification {
    pub manufacturer: [u8; 3usize],
    pub family: [u8; 2usize],
    pub modelNumber: [u8; 2usize],
    pub revisionLevel: [u8; 4usize],
    pub reserved: [u8; 5usize],
}
pub type MIDICIInitiatiorMUID = NSNumber;
pub type MIDICIProfileStateList = NSArray;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIDeviceInfo(pub id);
impl std::ops::Deref for MIDICIDeviceInfo {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIDeviceInfo {}
impl MIDICIDeviceInfo {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIDeviceInfo), alloc) })
    }
}
impl PNSSecureCoding for MIDICIDeviceInfo {}
impl INSObject for MIDICIDeviceInfo {}
impl PNSObject for MIDICIDeviceInfo {}
impl From<MIDICIDeviceInfo> for NSObject {
    fn from(child: MIDICIDeviceInfo) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIDeviceInfo {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIDeviceInfo, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIDeviceInfo)) };
        if is_kind_of {
            Ok(MIDICIDeviceInfo(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIDeviceInfo")
        }
    }
}
impl IMIDICIDeviceInfo for MIDICIDeviceInfo {}
pub trait IMIDICIDeviceInfo: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithDestination_manufacturer_family_model_revision_(
        &self,
        midiDestination: MIDIEntityRef,
        manufacturer: NSData,
        family: NSData,
        modelNumber: NSData,
        revisionLevel: NSData,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDestination : midiDestination manufacturer : manufacturer family : family model : modelNumber revision : revisionLevel)
    }
    unsafe fn manufacturerID(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, manufacturerID)
    }
    unsafe fn family(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, family)
    }
    unsafe fn modelNumber(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, modelNumber)
    }
    unsafe fn revisionLevel(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, revisionLevel)
    }
    unsafe fn midiDestination(&self) -> MIDIEndpointRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, midiDestination)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIProfile(pub id);
impl std::ops::Deref for MIDICIProfile {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIProfile {}
impl MIDICIProfile {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIProfile), alloc) })
    }
}
impl PNSSecureCoding for MIDICIProfile {}
impl INSObject for MIDICIProfile {}
impl PNSObject for MIDICIProfile {}
impl From<MIDICIProfile> for NSObject {
    fn from(child: MIDICIProfile) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIProfile {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIProfile, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIProfile)) };
        if is_kind_of {
            Ok(MIDICIProfile(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIProfile")
        }
    }
}
impl IMIDICIProfile for MIDICIProfile {}
pub trait IMIDICIProfile: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithData_(&self, data: NSData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithData: data)
    }
    unsafe fn initWithData_name_(&self, data: NSData, inName: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithData : data name : inName)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn profileID(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileID)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIProfileState(pub id);
impl std::ops::Deref for MIDICIProfileState {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIProfileState {}
impl MIDICIProfileState {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIProfileState), alloc) })
    }
}
impl PNSSecureCoding for MIDICIProfileState {}
impl INSObject for MIDICIProfileState {}
impl PNSObject for MIDICIProfileState {}
impl From<MIDICIProfileState> for NSObject {
    fn from(child: MIDICIProfileState) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIProfileState {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIProfileState, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIProfileState)) };
        if is_kind_of {
            Ok(MIDICIProfileState(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIProfileState")
        }
    }
}
impl IMIDICIProfileState for MIDICIProfileState {}
pub trait IMIDICIProfileState: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithChannel_enabledProfiles_disabledProfiles_(
        &self,
        midiChannelNum: MIDIChannelNumber,
        enabled: NSArray,
        disabled: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithChannel : midiChannelNum enabledProfiles : enabled disabledProfiles : disabled)
    }
    unsafe fn initWithEnabledProfiles_disabledProfiles_(
        &self,
        enabled: NSArray,
        disabled: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithEnabledProfiles : enabled disabledProfiles : disabled)
    }
    unsafe fn midiChannel(&self) -> MIDIChannelNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, midiChannel)
    }
    unsafe fn enabledProfiles(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enabledProfiles)
    }
    unsafe fn disabledProfiles(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, disabledProfiles)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIDiscoveredNode(pub id);
impl std::ops::Deref for MIDICIDiscoveredNode {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIDiscoveredNode {}
impl MIDICIDiscoveredNode {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIDiscoveredNode), alloc) })
    }
}
impl PNSSecureCoding for MIDICIDiscoveredNode {}
impl INSObject for MIDICIDiscoveredNode {}
impl PNSObject for MIDICIDiscoveredNode {}
impl From<MIDICIDiscoveredNode> for NSObject {
    fn from(child: MIDICIDiscoveredNode) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIDiscoveredNode {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIDiscoveredNode, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIDiscoveredNode)) };
        if is_kind_of {
            Ok(MIDICIDiscoveredNode(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIDiscoveredNode")
        }
    }
}
impl IMIDICIDiscoveredNode for MIDICIDiscoveredNode {}
pub trait IMIDICIDiscoveredNode: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn destination(&self) -> MIDIEntityRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, destination)
    }
    unsafe fn deviceInfo(&self) -> MIDICIDeviceInfo
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deviceInfo)
    }
    unsafe fn supportsProfiles(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsProfiles)
    }
    unsafe fn supportsProperties(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsProperties)
    }
    unsafe fn maximumSysExSize(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumSysExSize)
    }
}
pub type MIDICIProfileChangedBlock = *mut ::std::os::raw::c_void;
pub type MIDICISessionDisconnectBlock = *mut ::std::os::raw::c_void;
pub type MIDICIProfileSpecificDataBlock = *mut ::std::os::raw::c_void;
pub type MIDICIDiscoveryResponseBlock = *mut ::std::os::raw::c_void;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICISession(pub id);
impl std::ops::Deref for MIDICISession {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICISession {}
impl MIDICISession {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICISession), alloc) })
    }
}
impl INSObject for MIDICISession {}
impl PNSObject for MIDICISession {}
impl From<MIDICISession> for NSObject {
    fn from(child: MIDICISession) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICISession {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICISession, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(MIDICISession)) };
        if is_kind_of {
            Ok(MIDICISession(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICISession")
        }
    }
}
impl IMIDICISession for MIDICISession {}
pub trait IMIDICISession: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithDiscoveredNode_dataReadyHandler_disconnectHandler_(
        &self,
        discoveredNode: MIDICIDiscoveredNode,
        handler: *mut ::std::os::raw::c_void,
        disconnectHandler: MIDICISessionDisconnectBlock,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDiscoveredNode : discoveredNode dataReadyHandler : handler disconnectHandler : disconnectHandler)
    }
    unsafe fn profileStateForChannel_(&self, channel: MIDIChannelNumber) -> MIDICIProfileState
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileStateForChannel: channel)
    }
    unsafe fn enableProfile_onChannel_error_(
        &self,
        profile: MIDICIProfile,
        channel: MIDIChannelNumber,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enableProfile : profile onChannel : channel error : outError)
    }
    unsafe fn disableProfile_onChannel_error_(
        &self,
        profile: MIDICIProfile,
        channel: MIDIChannelNumber,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , disableProfile : profile onChannel : channel error : outError)
    }
    unsafe fn sendProfile_onChannel_profileData_(
        &self,
        profile: MIDICIProfile,
        channel: MIDIChannelNumber,
        profileSpecificData: NSData,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendProfile : profile onChannel : channel profileData : profileSpecificData)
    }
    unsafe fn midiDestination(&self) -> MIDIEntityRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, midiDestination)
    }
    unsafe fn supportsProfileCapability(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsProfileCapability)
    }
    unsafe fn supportsPropertyCapability(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsPropertyCapability)
    }
    unsafe fn deviceInfo(&self) -> MIDICIDeviceInfo
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deviceInfo)
    }
    unsafe fn maxSysExSize(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maxSysExSize)
    }
    unsafe fn maxPropertyRequests(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maxPropertyRequests)
    }
    unsafe fn profileChangedCallback(&self) -> MIDICIProfileChangedBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileChangedCallback)
    }
    unsafe fn setProfileChangedCallback_(&self, profileChangedCallback: MIDICIProfileChangedBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProfileChangedCallback: profileChangedCallback)
    }
    unsafe fn profileSpecificDataHandler(&self) -> MIDICIProfileSpecificDataBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileSpecificDataHandler)
    }
    unsafe fn setProfileSpecificDataHandler_(
        &self,
        profileSpecificDataHandler: MIDICIProfileSpecificDataBlock,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setProfileSpecificDataHandler: profileSpecificDataHandler
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIDiscoveryManager(pub id);
impl std::ops::Deref for MIDICIDiscoveryManager {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIDiscoveryManager {}
impl MIDICIDiscoveryManager {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIDiscoveryManager), alloc) })
    }
}
impl INSObject for MIDICIDiscoveryManager {}
impl PNSObject for MIDICIDiscoveryManager {}
impl From<MIDICIDiscoveryManager> for NSObject {
    fn from(child: MIDICIDiscoveryManager) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIDiscoveryManager {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIDiscoveryManager, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIDiscoveryManager)) };
        if is_kind_of {
            Ok(MIDICIDiscoveryManager(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIDiscoveryManager")
        }
    }
}
impl IMIDICIDiscoveryManager for MIDICIDiscoveryManager {}
pub trait IMIDICIDiscoveryManager: Sized + std::ops::Deref {
    unsafe fn discoverWithHandler_(&self, completedHandler: MIDICIDiscoveryResponseBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, discoverWithHandler: completedHandler)
    }
    unsafe fn sharedInstance() -> MIDICIDiscoveryManager
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(MIDICIDiscoveryManager), sharedInstance)
    }
}
pub trait PMIDICIProfileResponderDelegate: Sized + std::ops::Deref {
    unsafe fn connectInitiator_withDeviceInfo_(
        &self,
        initiatorMUID: NSNumber,
        deviceInfo: MIDICIDeviceInfo,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , connectInitiator : initiatorMUID withDeviceInfo : deviceInfo)
    }
    unsafe fn initiatorDisconnected_(&self, initiatorMUID: NSNumber)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initiatorDisconnected: initiatorMUID)
    }
    unsafe fn willSetProfile_onChannel_enabled_(
        &self,
        aProfile: MIDICIProfile,
        channel: MIDIChannelNumber,
        shouldEnable: BOOL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , willSetProfile : aProfile onChannel : channel enabled : shouldEnable)
    }
    unsafe fn handleDataForProfile_onChannel_data_(
        &self,
        aProfile: MIDICIProfile,
        channel: MIDIChannelNumber,
        inData: NSData,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , handleDataForProfile : aProfile onChannel : channel data : inData)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct MIDICIResponder(pub id);
impl std::ops::Deref for MIDICIResponder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for MIDICIResponder {}
impl MIDICIResponder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(MIDICIResponder), alloc) })
    }
}
impl INSObject for MIDICIResponder {}
impl PNSObject for MIDICIResponder {}
impl From<MIDICIResponder> for NSObject {
    fn from(child: MIDICIResponder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for MIDICIResponder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<MIDICIResponder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(MIDICIResponder)) };
        if is_kind_of {
            Ok(MIDICIResponder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to MIDICIResponder")
        }
    }
}
impl IMIDICIResponder for MIDICIResponder {}
pub trait IMIDICIResponder: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithDeviceInfo_profileDelegate_profileStates_supportProperties_(
        &self,
        deviceInfo: MIDICIDeviceInfo,
        delegate: *mut u64,
        profileList: NSArray,
        propertiesSupported: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDeviceInfo : deviceInfo profileDelegate : delegate profileStates : profileList supportProperties : propertiesSupported)
    }
    unsafe fn notifyProfile_onChannel_isEnabled_(
        &self,
        aProfile: MIDICIProfile,
        channel: MIDIChannelNumber,
        enabledState: BOOL,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , notifyProfile : aProfile onChannel : channel isEnabled : enabledState)
    }
    unsafe fn sendProfile_onChannel_profileData_(
        &self,
        aProfile: MIDICIProfile,
        channel: MIDIChannelNumber,
        profileSpecificData: NSData,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendProfile : aProfile onChannel : channel profileData : profileSpecificData)
    }
    unsafe fn start(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, start)
    }
    unsafe fn stop(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stop)
    }
    unsafe fn initiators(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initiators)
    }
    unsafe fn profileDelegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileDelegate)
    }
    unsafe fn deviceInfo(&self) -> MIDICIDeviceInfo
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deviceInfo)
    }
}
pub const AudioComponentFlags_kAudioComponentFlag_Unsearchable: AudioComponentFlags = 1;
pub const AudioComponentFlags_kAudioComponentFlag_SandboxSafe: AudioComponentFlags = 2;
pub const AudioComponentFlags_kAudioComponentFlag_IsV3AudioUnit: AudioComponentFlags = 4;
pub const AudioComponentFlags_kAudioComponentFlag_RequiresAsyncInstantiation: AudioComponentFlags =
    8;
pub const AudioComponentFlags_kAudioComponentFlag_CanLoadInProcess: AudioComponentFlags = 16;
pub type AudioComponentFlags = UInt32;
pub const AudioComponentInstantiationOptions_kAudioComponentInstantiation_LoadOutOfProcess:
    AudioComponentInstantiationOptions = 1;
pub const AudioComponentInstantiationOptions_kAudioComponentInstantiation_LoadInProcess:
    AudioComponentInstantiationOptions = 2;
pub const AudioComponentInstantiationOptions_kAudioComponentInstantiation_LoadedRemotely:
    AudioComponentInstantiationOptions = 2147483648;
pub type AudioComponentInstantiationOptions = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioComponentDescription {
    pub componentType: OSType,
    pub componentSubType: OSType,
    pub componentManufacturer: OSType,
    pub componentFlags: UInt32,
    pub componentFlagsMask: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioComponent {
    _unused: [u8; 0],
}
pub type AudioComponent = *mut OpaqueAudioComponent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioComponentInstance {
    _unused: [u8; 0],
}
pub type AudioComponentInstance = *mut OpaqueAudioComponentInstance;
pub type AudioComponentMethod = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, ...) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioComponentPlugInInterface {
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            mInstance: AudioComponentInstance,
        ) -> OSStatus,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>,
    pub Lookup:
        ::std::option::Option<unsafe extern "C" fn(selector: SInt16) -> AudioComponentMethod>,
    pub reserved: *mut ::std::os::raw::c_void,
}
pub type AudioComponentFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        inDesc: *const AudioComponentDescription,
    ) -> *mut AudioComponentPlugInInterface,
>;
extern "C" {
    pub fn AudioComponentFindNext(
        inComponent: AudioComponent,
        inDesc: *const AudioComponentDescription,
    ) -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentCount(inDesc: *const AudioComponentDescription) -> UInt32;
}
extern "C" {
    pub fn AudioComponentCopyName(
        inComponent: AudioComponent,
        outName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentGetDescription(
        inComponent: AudioComponent,
        outDesc: *mut AudioComponentDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentGetVersion(
        inComponent: AudioComponent,
        outVersion: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstanceNew(
        inComponent: AudioComponent,
        outInstance: *mut AudioComponentInstance,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstantiate(
        inComponent: AudioComponent,
        inOptions: AudioComponentInstantiationOptions,
        inCompletionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioComponentInstanceDispose(inInstance: AudioComponentInstance) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstanceGetComponent(inInstance: AudioComponentInstance)
        -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentInstanceCanDo(
        inInstance: AudioComponentInstance,
        inSelectorID: SInt16,
    ) -> Boolean;
}
extern "C" {
    pub fn AudioComponentRegister(
        inDesc: *const AudioComponentDescription,
        inName: CFStringRef,
        inVersion: UInt32,
        inFactory: AudioComponentFactoryFunction,
    ) -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentCopyConfigurationInfo(
        inComponent: AudioComponent,
        outConfigurationInfo: *mut CFDictionaryRef,
    ) -> OSStatus;
}
pub const AudioComponentValidationResult_kAudioComponentValidationResult_Unknown:
    AudioComponentValidationResult = 0;
pub const AudioComponentValidationResult_kAudioComponentValidationResult_Passed:
    AudioComponentValidationResult = 1;
pub const AudioComponentValidationResult_kAudioComponentValidationResult_Failed:
    AudioComponentValidationResult = 2;
pub const AudioComponentValidationResult_kAudioComponentValidationResult_TimedOut:
    AudioComponentValidationResult = 3;
pub const AudioComponentValidationResult_kAudioComponentValidationResult_UnauthorizedError_Open:
    AudioComponentValidationResult = 4;
pub const AudioComponentValidationResult_kAudioComponentValidationResult_UnauthorizedError_Init:
    AudioComponentValidationResult = 5;
pub type AudioComponentValidationResult = UInt32;
extern "C" {
    pub fn AudioComponentValidate(
        inComponent: AudioComponent,
        inValidationParameters: CFDictionaryRef,
        outValidationResult: *mut AudioComponentValidationResult,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentValidateWithResults(
        inComponent: AudioComponent,
        inValidationParameters: CFDictionaryRef,
        inCompletionHandler: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub type AudioCodec = AudioComponentInstance;
pub type AudioCodecPropertyID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioCodecMagicCookieInfo {
    pub mMagicCookieSize: UInt32,
    pub mMagicCookie: *const ::std::os::raw::c_void,
}
pub const kAudioCodecPropertySupportedInputFormats: _bindgen_ty_61 = 1768320291;
pub const kAudioCodecPropertySupportedOutputFormats: _bindgen_ty_61 = 1868983587;
pub const kAudioCodecPropertyAvailableInputSampleRates: _bindgen_ty_61 = 1634300786;
pub const kAudioCodecPropertyAvailableOutputSampleRates: _bindgen_ty_61 = 1634694002;
pub const kAudioCodecPropertyAvailableBitRateRange: _bindgen_ty_61 = 1633841780;
pub const kAudioCodecPropertyMinimumNumberInputPackets: _bindgen_ty_61 = 1835952496;
pub const kAudioCodecPropertyMinimumNumberOutputPackets: _bindgen_ty_61 = 1835954032;
pub const kAudioCodecPropertyAvailableNumberChannels: _bindgen_ty_61 = 1668116067;
pub const kAudioCodecPropertyDoesSampleRateConversion: _bindgen_ty_61 = 1819112035;
pub const kAudioCodecPropertyAvailableInputChannelLayoutTags: _bindgen_ty_61 = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayoutTags: _bindgen_ty_61 = 1634689900;
pub const kAudioCodecPropertyInputFormatsForOutputFormat: _bindgen_ty_61 = 1768305775;
pub const kAudioCodecPropertyOutputFormatsForInputFormat: _bindgen_ty_61 = 1868969065;
pub const kAudioCodecPropertyFormatInfo: _bindgen_ty_61 = 1633904233;
pub type _bindgen_ty_61 = AudioCodecPropertyID;
pub const kAudioCodecPropertyInputBufferSize: _bindgen_ty_62 = 1952609638;
pub const kAudioCodecPropertyPacketFrameSize: _bindgen_ty_62 = 1885432678;
pub const kAudioCodecPropertyHasVariablePacketByteSizes: _bindgen_ty_62 = 1987078975;
pub const kAudioCodecPropertyEmploysDependentPackets: _bindgen_ty_62 = 1685089087;
pub const kAudioCodecPropertyMaximumPacketByteSize: _bindgen_ty_62 = 1885432674;
pub const kAudioCodecPropertyPacketSizeLimitForVBR: _bindgen_ty_62 = 1885432684;
pub const kAudioCodecPropertyCurrentInputFormat: _bindgen_ty_62 = 1768320372;
pub const kAudioCodecPropertyCurrentOutputFormat: _bindgen_ty_62 = 1868983668;
pub const kAudioCodecPropertyMagicCookie: _bindgen_ty_62 = 1802857321;
pub const kAudioCodecPropertyUsedInputBufferSize: _bindgen_ty_62 = 1969386854;
pub const kAudioCodecPropertyIsInitialized: _bindgen_ty_62 = 1768843636;
pub const kAudioCodecPropertyCurrentTargetBitRate: _bindgen_ty_62 = 1651663220;
pub const kAudioCodecPropertyCurrentInputSampleRate: _bindgen_ty_62 = 1667855218;
pub const kAudioCodecPropertyCurrentOutputSampleRate: _bindgen_ty_62 = 1668248434;
pub const kAudioCodecPropertyQualitySetting: _bindgen_ty_62 = 1936876401;
pub const kAudioCodecPropertyApplicableBitRateRange: _bindgen_ty_62 = 1651668065;
pub const kAudioCodecPropertyRecommendedBitRateRange: _bindgen_ty_62 = 1651668082;
pub const kAudioCodecPropertyApplicableInputSampleRates: _bindgen_ty_62 = 1769173601;
pub const kAudioCodecPropertyApplicableOutputSampleRates: _bindgen_ty_62 = 1869836897;
pub const kAudioCodecPropertyPaddedZeros: _bindgen_ty_62 = 1885430832;
pub const kAudioCodecPropertyPrimeMethod: _bindgen_ty_62 = 1886547309;
pub const kAudioCodecPropertyPrimeInfo: _bindgen_ty_62 = 1886546285;
pub const kAudioCodecPropertyCurrentInputChannelLayout: _bindgen_ty_62 = 1768123424;
pub const kAudioCodecPropertyCurrentOutputChannelLayout: _bindgen_ty_62 = 1868786720;
pub const kAudioCodecPropertySettings: _bindgen_ty_62 = 1633907488;
pub const kAudioCodecPropertyFormatList: _bindgen_ty_62 = 1633904236;
pub const kAudioCodecPropertyBitRateControlMode: _bindgen_ty_62 = 1633903206;
pub const kAudioCodecPropertySoundQualityForVBR: _bindgen_ty_62 = 1986163313;
pub const kAudioCodecPropertyBitRateForVBR: _bindgen_ty_62 = 1986163298;
pub const kAudioCodecPropertyDelayMode: _bindgen_ty_62 = 1684893540;
pub const kAudioCodecPropertyAdjustLocalQuality: _bindgen_ty_62 = 1584488812;
pub const kAudioCodecPropertyProgramTargetLevel: _bindgen_ty_62 = 1886418028;
pub const kAudioCodecPropertyDynamicRangeControlMode: _bindgen_ty_62 = 1835299427;
pub const kAudioCodecPropertyProgramTargetLevelConstant: _bindgen_ty_62 = 1886678115;
pub type _bindgen_ty_62 = AudioCodecPropertyID;
pub const kAudioCodecQuality_Max: _bindgen_ty_63 = 127;
pub const kAudioCodecQuality_High: _bindgen_ty_63 = 96;
pub const kAudioCodecQuality_Medium: _bindgen_ty_63 = 64;
pub const kAudioCodecQuality_Low: _bindgen_ty_63 = 32;
pub const kAudioCodecQuality_Min: _bindgen_ty_63 = 0;
pub type _bindgen_ty_63 = UInt32;
pub const kAudioCodecPrimeMethod_Pre: _bindgen_ty_64 = 0;
pub const kAudioCodecPrimeMethod_Normal: _bindgen_ty_64 = 1;
pub const kAudioCodecPrimeMethod_None: _bindgen_ty_64 = 2;
pub type _bindgen_ty_64 = UInt32;
pub const kAudioCodecBitRateControlMode_Constant: _bindgen_ty_65 = 0;
pub const kAudioCodecBitRateControlMode_LongTermAverage: _bindgen_ty_65 = 1;
pub const kAudioCodecBitRateControlMode_VariableConstrained: _bindgen_ty_65 = 2;
pub const kAudioCodecBitRateControlMode_Variable: _bindgen_ty_65 = 3;
pub type _bindgen_ty_65 = UInt32;
pub const kAudioCodecDelayMode_Compatibility: _bindgen_ty_66 = 0;
pub const kAudioCodecDelayMode_Minimum: _bindgen_ty_66 = 1;
pub const kAudioCodecDelayMode_Optimal: _bindgen_ty_66 = 2;
pub type _bindgen_ty_66 = UInt32;
pub const kProgramTargetLevel_None: _bindgen_ty_67 = 0;
pub const kProgramTargetLevel_Minus31dB: _bindgen_ty_67 = 1;
pub const kProgramTargetLevel_Minus23dB: _bindgen_ty_67 = 2;
pub const kProgramTargetLevel_Minus20dB: _bindgen_ty_67 = 3;
pub type _bindgen_ty_67 = UInt32;
pub const kDynamicRangeControlMode_None: _bindgen_ty_68 = 0;
pub const kDynamicRangeControlMode_Light: _bindgen_ty_68 = 1;
pub const kDynamicRangeControlMode_Heavy: _bindgen_ty_68 = 2;
pub type _bindgen_ty_68 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioCodecPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
pub const AudioSettingsFlags_kAudioSettingsFlags_ExpertParameter: AudioSettingsFlags = 1;
pub const AudioSettingsFlags_kAudioSettingsFlags_InvisibleParameter: AudioSettingsFlags = 2;
pub const AudioSettingsFlags_kAudioSettingsFlags_MetaParameter: AudioSettingsFlags = 4;
pub const AudioSettingsFlags_kAudioSettingsFlags_UserInterfaceParameter: AudioSettingsFlags = 8;
pub type AudioSettingsFlags = UInt32;
pub const kAudioCodecProduceOutputPacketFailure: _bindgen_ty_69 = 1;
pub const kAudioCodecProduceOutputPacketSuccess: _bindgen_ty_69 = 2;
pub const kAudioCodecProduceOutputPacketSuccessHasMore: _bindgen_ty_69 = 3;
pub const kAudioCodecProduceOutputPacketNeedsMoreInputData: _bindgen_ty_69 = 4;
pub const kAudioCodecProduceOutputPacketAtEOF: _bindgen_ty_69 = 5;
pub const kAudioCodecProduceOutputPacketSuccessConcealed: _bindgen_ty_69 = 6;
pub type _bindgen_ty_69 = UInt32;
pub const kAudioCodecGetPropertyInfoSelect: _bindgen_ty_70 = 1;
pub const kAudioCodecGetPropertySelect: _bindgen_ty_70 = 2;
pub const kAudioCodecSetPropertySelect: _bindgen_ty_70 = 3;
pub const kAudioCodecInitializeSelect: _bindgen_ty_70 = 4;
pub const kAudioCodecUninitializeSelect: _bindgen_ty_70 = 5;
pub const kAudioCodecAppendInputDataSelect: _bindgen_ty_70 = 6;
pub const kAudioCodecProduceOutputDataSelect: _bindgen_ty_70 = 7;
pub const kAudioCodecResetSelect: _bindgen_ty_70 = 8;
pub const kAudioCodecAppendInputBufferListSelect: _bindgen_ty_70 = 9;
pub const kAudioCodecProduceOutputBufferListSelect: _bindgen_ty_70 = 10;
pub type _bindgen_ty_70 = UInt32;
pub const kAudioCodecNoError: _bindgen_ty_71 = 0;
pub const kAudioCodecUnspecifiedError: _bindgen_ty_71 = 2003329396;
pub const kAudioCodecUnknownPropertyError: _bindgen_ty_71 = 2003332927;
pub const kAudioCodecBadPropertySizeError: _bindgen_ty_71 = 561211770;
pub const kAudioCodecIllegalOperationError: _bindgen_ty_71 = 1852797029;
pub const kAudioCodecUnsupportedFormatError: _bindgen_ty_71 = 560226676;
pub const kAudioCodecStateError: _bindgen_ty_71 = 561214580;
pub const kAudioCodecNotEnoughBufferSpaceError: _bindgen_ty_71 = 560100710;
pub const kAudioCodecBadDataError: _bindgen_ty_71 = 1650549857;
pub type _bindgen_ty_71 = OSStatus;
extern "C" {
    pub fn AudioCodecGetPropertyInfo(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecGetProperty(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecSetProperty(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecInitialize(
        inCodec: AudioCodec,
        inInputFormat: *const AudioStreamBasicDescription,
        inOutputFormat: *const AudioStreamBasicDescription,
        inMagicCookie: *const ::std::os::raw::c_void,
        inMagicCookieByteSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecUninitialize(inCodec: AudioCodec) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecAppendInputData(
        inCodec: AudioCodec,
        inInputData: *const ::std::os::raw::c_void,
        ioInputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecProduceOutputPackets(
        inCodec: AudioCodec,
        outOutputData: *mut ::std::os::raw::c_void,
        ioOutputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecAppendInputBufferList(
        inCodec: AudioCodec,
        inBufferList: *const AudioBufferList,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
        outBytesConsumed: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecProduceOutputBufferList(
        inCodec: AudioCodec,
        ioBufferList: *mut AudioBufferList,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecReset(inCodec: AudioCodec) -> OSStatus;
}
pub type AudioCodecGetPropertyInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus,
>;
pub type AudioCodecGetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioCodecSetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioCodecInitializeProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInputFormat: *const AudioStreamBasicDescription,
        inOutputFormat: *const AudioStreamBasicDescription,
        inMagicCookie: *const ::std::os::raw::c_void,
        inMagicCookieByteSize: UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecUninitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioCodecAppendInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInputData: *const ::std::os::raw::c_void,
        ioInputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
    ) -> OSStatus,
>;
pub type AudioCodecProduceOutputPacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        outOutputData: *mut ::std::os::raw::c_void,
        ioOutputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecResetProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioCodecAppendInputBufferListProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioBufferList: *const AudioBufferList,
        inNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
        outBytesConsumed: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecProduceOutputBufferListProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioBufferList: *mut AudioBufferList,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus,
>;
pub const kAudioCodecPropertyMinimumDelayMode: _bindgen_ty_72 = 1835296108;
pub type _bindgen_ty_72 = AudioCodecPropertyID;
pub const kAudioCodecPropertyNameCFString: _bindgen_ty_73 = 1819173229;
pub const kAudioCodecPropertyManufacturerCFString: _bindgen_ty_73 = 1819107691;
pub const kAudioCodecPropertyFormatCFString: _bindgen_ty_73 = 1818652530;
pub type _bindgen_ty_73 = AudioCodecPropertyID;
pub const kAudioCodecPropertyRequiresPacketDescription: _bindgen_ty_74 = 1885432676;
pub const kAudioCodecPropertyAvailableBitRates: _bindgen_ty_74 = 1651668003;
pub const kAudioCodecExtendFrequencies: _bindgen_ty_74 = 1633903974;
pub const kAudioCodecUseRecommendedSampleRate: _bindgen_ty_74 = 1970434930;
pub const kAudioCodecOutputPrecedence: _bindgen_ty_74 = 1869639794;
pub const kAudioCodecBitRateFormat: _bindgen_ty_74 = 1633903206;
pub const kAudioCodecDoesSampleRateConversion: _bindgen_ty_74 = 1819112035;
pub const kAudioCodecInputFormatsForOutputFormat: _bindgen_ty_74 = 1768305775;
pub const kAudioCodecOutputFormatsForInputFormat: _bindgen_ty_74 = 1868969065;
pub const kAudioCodecPropertyInputChannelLayout: _bindgen_ty_74 = 1768123424;
pub const kAudioCodecPropertyOutputChannelLayout: _bindgen_ty_74 = 1868786720;
pub const kAudioCodecPropertyAvailableInputChannelLayouts: _bindgen_ty_74 = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayouts: _bindgen_ty_74 = 1634689900;
pub const kAudioCodecPropertyZeroFramesPadded: _bindgen_ty_74 = 1885430832;
pub type _bindgen_ty_74 = AudioCodecPropertyID;
pub const kAudioCodecBitRateFormat_CBR: _bindgen_ty_75 = 0;
pub const kAudioCodecBitRateFormat_ABR: _bindgen_ty_75 = 1;
pub const kAudioCodecBitRateFormat_VBR: _bindgen_ty_75 = 2;
pub type _bindgen_ty_75 = UInt32;
pub const kAudioCodecOutputPrecedenceNone: _bindgen_ty_76 = 0;
pub const kAudioCodecOutputPrecedenceBitRate: _bindgen_ty_76 = 1;
pub const kAudioCodecOutputPrecedenceSampleRate: _bindgen_ty_76 = 2;
pub type _bindgen_ty_76 = UInt32;
pub type MagicCookieInfo = AudioCodecMagicCookieInfo;
pub const kHintBasic: _bindgen_ty_77 = 0;
pub const kHintAdvanced: _bindgen_ty_77 = 1;
pub const kHintHidden: _bindgen_ty_77 = 2;
pub type _bindgen_ty_77 = UInt32;
pub type AudioUnit = AudioComponentInstance;
pub const kAudioUnitType_Output: _bindgen_ty_78 = 1635086197;
pub const kAudioUnitType_MusicDevice: _bindgen_ty_78 = 1635085685;
pub const kAudioUnitType_MusicEffect: _bindgen_ty_78 = 1635085670;
pub const kAudioUnitType_FormatConverter: _bindgen_ty_78 = 1635083875;
pub const kAudioUnitType_Effect: _bindgen_ty_78 = 1635083896;
pub const kAudioUnitType_Mixer: _bindgen_ty_78 = 1635085688;
pub const kAudioUnitType_Panner: _bindgen_ty_78 = 1635086446;
pub const kAudioUnitType_Generator: _bindgen_ty_78 = 1635084142;
pub const kAudioUnitType_OfflineEffect: _bindgen_ty_78 = 1635086188;
pub const kAudioUnitType_MIDIProcessor: _bindgen_ty_78 = 1635085673;
pub const kAudioUnitType_SpeechSynthesizer: _bindgen_ty_78 = 1635087216;
pub type _bindgen_ty_78 = UInt32;
pub const kAudioUnitType_RemoteEffect: _bindgen_ty_79 = 1635086968;
pub const kAudioUnitType_RemoteGenerator: _bindgen_ty_79 = 1635086951;
pub const kAudioUnitType_RemoteInstrument: _bindgen_ty_79 = 1635086953;
pub const kAudioUnitType_RemoteMusicEffect: _bindgen_ty_79 = 1635086957;
pub type _bindgen_ty_79 = UInt32;
pub const kAudioUnitManufacturer_Apple: _bindgen_ty_80 = 1634758764;
pub type _bindgen_ty_80 = UInt32;
pub const kAudioUnitSubType_GenericOutput: _bindgen_ty_81 = 1734700658;
pub const kAudioUnitSubType_VoiceProcessingIO: _bindgen_ty_81 = 1987078511;
pub type _bindgen_ty_81 = UInt32;
pub const kAudioUnitSubType_RemoteIO: _bindgen_ty_82 = 1919512419;
pub type _bindgen_ty_82 = UInt32;
pub const kAudioUnitSubType_Sampler: _bindgen_ty_83 = 1935764848;
pub const kAudioUnitSubType_MIDISynth: _bindgen_ty_83 = 1836284270;
pub type _bindgen_ty_83 = UInt32;
pub const kAudioUnitSubType_AUConverter: _bindgen_ty_84 = 1668247158;
pub const kAudioUnitSubType_Varispeed: _bindgen_ty_84 = 1986097769;
pub const kAudioUnitSubType_DeferredRenderer: _bindgen_ty_84 = 1684366962;
pub const kAudioUnitSubType_Splitter: _bindgen_ty_84 = 1936747636;
pub const kAudioUnitSubType_MultiSplitter: _bindgen_ty_84 = 1836281964;
pub const kAudioUnitSubType_Merger: _bindgen_ty_84 = 1835364967;
pub const kAudioUnitSubType_NewTimePitch: _bindgen_ty_84 = 1853191280;
pub const kAudioUnitSubType_AUiPodTimeOther: _bindgen_ty_84 = 1768977519;
pub const kAudioUnitSubType_RoundTripAAC: _bindgen_ty_84 = 1918984547;
pub type _bindgen_ty_84 = UInt32;
pub const kAudioUnitSubType_TimePitch: _bindgen_ty_85 = 1953329268;
pub type _bindgen_ty_85 = UInt32;
pub const kAudioUnitSubType_AUiPodTime: _bindgen_ty_86 = 1768977517;
pub type _bindgen_ty_86 = UInt32;
pub const kAudioUnitSubType_PeakLimiter: _bindgen_ty_87 = 1819112562;
pub const kAudioUnitSubType_DynamicsProcessor: _bindgen_ty_87 = 1684237680;
pub const kAudioUnitSubType_LowPassFilter: _bindgen_ty_87 = 1819304307;
pub const kAudioUnitSubType_HighPassFilter: _bindgen_ty_87 = 1752195443;
pub const kAudioUnitSubType_BandPassFilter: _bindgen_ty_87 = 1651532147;
pub const kAudioUnitSubType_HighShelfFilter: _bindgen_ty_87 = 1752393830;
pub const kAudioUnitSubType_LowShelfFilter: _bindgen_ty_87 = 1819502694;
pub const kAudioUnitSubType_ParametricEQ: _bindgen_ty_87 = 1886217585;
pub const kAudioUnitSubType_Distortion: _bindgen_ty_87 = 1684632436;
pub const kAudioUnitSubType_Delay: _bindgen_ty_87 = 1684368505;
pub const kAudioUnitSubType_SampleDelay: _bindgen_ty_87 = 1935961209;
pub const kAudioUnitSubType_NBandEQ: _bindgen_ty_87 = 1851942257;
pub const kAudioUnitSubType_Reverb2: _bindgen_ty_87 = 1920361010;
pub const kAudioUnitSubType_AUSoundIsolation: _bindgen_ty_87 = 1987012979;
pub type _bindgen_ty_87 = UInt32;
pub const kAudioUnitSubType_AUiPodEQ: _bindgen_ty_88 = 1768973681;
pub type _bindgen_ty_88 = UInt32;
pub const kAudioUnitSubType_MultiChannelMixer: _bindgen_ty_89 = 1835232632;
pub const kAudioUnitSubType_MatrixMixer: _bindgen_ty_89 = 1836608888;
pub const kAudioUnitSubType_SpatialMixer: _bindgen_ty_89 = 862217581;
pub type _bindgen_ty_89 = UInt32;
pub const kAudioUnitSubType_AU3DMixerEmbedded: _bindgen_ty_90 = 862217581;
pub type _bindgen_ty_90 = UInt32;
pub const kAudioUnitSubType_ScheduledSoundPlayer: _bindgen_ty_91 = 1936945260;
pub const kAudioUnitSubType_AudioFilePlayer: _bindgen_ty_91 = 1634103404;
pub type _bindgen_ty_91 = UInt32;
pub const AudioUnitRenderActionFlags_kAudioUnitRenderAction_PreRender: AudioUnitRenderActionFlags =
    4;
pub const AudioUnitRenderActionFlags_kAudioUnitRenderAction_PostRender: AudioUnitRenderActionFlags =
    8;
pub const AudioUnitRenderActionFlags_kAudioUnitRenderAction_OutputIsSilence:
    AudioUnitRenderActionFlags = 16;
pub const AudioUnitRenderActionFlags_kAudioOfflineUnitRenderAction_Preflight:
    AudioUnitRenderActionFlags = 32;
pub const AudioUnitRenderActionFlags_kAudioOfflineUnitRenderAction_Render:
    AudioUnitRenderActionFlags = 64;
pub const AudioUnitRenderActionFlags_kAudioOfflineUnitRenderAction_Complete:
    AudioUnitRenderActionFlags = 128;
pub const AudioUnitRenderActionFlags_kAudioUnitRenderAction_PostRenderError:
    AudioUnitRenderActionFlags = 256;
pub const AudioUnitRenderActionFlags_kAudioUnitRenderAction_DoNotCheckRenderArgs:
    AudioUnitRenderActionFlags = 512;
pub type AudioUnitRenderActionFlags = UInt32;
pub const kAudioUnitErr_InvalidProperty: _bindgen_ty_92 = -10879;
pub const kAudioUnitErr_InvalidParameter: _bindgen_ty_92 = -10878;
pub const kAudioUnitErr_InvalidElement: _bindgen_ty_92 = -10877;
pub const kAudioUnitErr_NoConnection: _bindgen_ty_92 = -10876;
pub const kAudioUnitErr_FailedInitialization: _bindgen_ty_92 = -10875;
pub const kAudioUnitErr_TooManyFramesToProcess: _bindgen_ty_92 = -10874;
pub const kAudioUnitErr_InvalidFile: _bindgen_ty_92 = -10871;
pub const kAudioUnitErr_UnknownFileType: _bindgen_ty_92 = -10870;
pub const kAudioUnitErr_FileNotSpecified: _bindgen_ty_92 = -10869;
pub const kAudioUnitErr_FormatNotSupported: _bindgen_ty_92 = -10868;
pub const kAudioUnitErr_Uninitialized: _bindgen_ty_92 = -10867;
pub const kAudioUnitErr_InvalidScope: _bindgen_ty_92 = -10866;
pub const kAudioUnitErr_PropertyNotWritable: _bindgen_ty_92 = -10865;
pub const kAudioUnitErr_CannotDoInCurrentContext: _bindgen_ty_92 = -10863;
pub const kAudioUnitErr_InvalidPropertyValue: _bindgen_ty_92 = -10851;
pub const kAudioUnitErr_PropertyNotInUse: _bindgen_ty_92 = -10850;
pub const kAudioUnitErr_Initialized: _bindgen_ty_92 = -10849;
pub const kAudioUnitErr_InvalidOfflineRender: _bindgen_ty_92 = -10848;
pub const kAudioUnitErr_Unauthorized: _bindgen_ty_92 = -10847;
pub const kAudioUnitErr_MIDIOutputBufferFull: _bindgen_ty_92 = -66753;
pub const kAudioComponentErr_InstanceTimedOut: _bindgen_ty_92 = -66754;
pub const kAudioComponentErr_InstanceInvalidated: _bindgen_ty_92 = -66749;
pub const kAudioUnitErr_RenderTimeout: _bindgen_ty_92 = -66745;
pub const kAudioUnitErr_ExtensionNotFound: _bindgen_ty_92 = -66744;
pub const kAudioUnitErr_InvalidParameterValue: _bindgen_ty_92 = -66743;
pub const kAudioUnitErr_InvalidFilePath: _bindgen_ty_92 = -66742;
pub const kAudioUnitErr_MissingKey: _bindgen_ty_92 = -66741;
pub type _bindgen_ty_92 = OSStatus;
pub const kAudioComponentErr_DuplicateDescription: _bindgen_ty_93 = -66752;
pub const kAudioComponentErr_UnsupportedType: _bindgen_ty_93 = -66751;
pub const kAudioComponentErr_TooManyInstances: _bindgen_ty_93 = -66750;
pub const kAudioComponentErr_NotPermitted: _bindgen_ty_93 = -66748;
pub const kAudioComponentErr_InitializationTimedOut: _bindgen_ty_93 = -66747;
pub const kAudioComponentErr_InvalidFormat: _bindgen_ty_93 = -66746;
pub type _bindgen_ty_93 = OSStatus;
pub type AudioUnitPropertyID = UInt32;
pub type AudioUnitScope = UInt32;
pub type AudioUnitElement = UInt32;
pub type AudioUnitParameterID = UInt32;
pub type AudioUnitParameterValue = Float32;
pub const AUParameterEventType_kParameterEvent_Immediate: AUParameterEventType = 1;
pub const AUParameterEventType_kParameterEvent_Ramped: AUParameterEventType = 2;
pub type AUParameterEventType = UInt32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AudioUnitParameterEvent {
    pub __bindgen_anon_1: AudioUnitParameterEvent__bindgen_ty_1,
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub parameter: AudioUnitParameterID,
    pub eventType: AUParameterEventType,
    pub eventValues: AudioUnitParameterEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AudioUnitParameterEvent__bindgen_ty_1 {
    pub __bindgen_anon_1: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2,
    pub ramp: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1,
    pub immediate: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1 {
    pub startBufferOffset: SInt32,
    pub durationInFrames: UInt32,
    pub startValue: AudioUnitParameterValue,
    pub endValue: AudioUnitParameterValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2 {
    pub bufferOffset: UInt32,
    pub value: AudioUnitParameterValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameter {
    pub mAudioUnit: AudioUnit,
    pub mParameterID: AudioUnitParameterID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitProperty {
    pub mAudioUnit: AudioUnit,
    pub mPropertyID: AudioUnitPropertyID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
pub type AURenderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ),
>;
pub type AUInputSamplesInOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        inOutputTimeStamp: *const AudioTimeStamp,
        inInputSample: Float64,
        inNumberInputSamples: Float64,
    ),
>;
extern "C" {
    pub static kAudioComponentRegistrationsChangedNotification: CFStringRef;
}
extern "C" {
    pub static kAudioComponentInstanceInvalidationNotification: CFStringRef;
}
extern "C" {
    pub fn AudioUnitInitialize(inUnit: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitUninitialize(inUnit: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetPropertyInfo(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetProperty(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitSetProperty(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitAddPropertyListener(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inProc: AudioUnitPropertyListenerProc,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRemovePropertyListenerWithUserData(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inProc: AudioUnitPropertyListenerProc,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitAddRenderNotify(
        inUnit: AudioUnit,
        inProc: AURenderCallback,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRemoveRenderNotify(
        inUnit: AudioUnit,
        inProc: AURenderCallback,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetParameter(
        inUnit: AudioUnit,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outValue: *mut AudioUnitParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitSetParameter(
        inUnit: AudioUnit,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitScheduleParameters(
        inUnit: AudioUnit,
        inParameterEvent: *const AudioUnitParameterEvent,
        inNumParamEvents: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRender(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitProcess(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitProcessMultiple(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        inNumberInputBufferLists: UInt32,
        inInputBufferLists: *mut *const AudioBufferList,
        inNumberOutputBufferLists: UInt32,
        ioOutputBufferLists: *mut *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitReset(
        inUnit: AudioUnit,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioOutputUnitPublish(
        inDesc: *const AudioComponentDescription,
        inName: CFStringRef,
        inVersion: UInt32,
        inOutputUnit: AudioUnit,
    ) -> OSStatus;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct UIImage(pub id);
impl std::ops::Deref for UIImage {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for UIImage {}
impl UIImage {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(UIImage), alloc) })
    }
}
impl IUIImage for UIImage {}
pub trait IUIImage: Sized + std::ops::Deref {}
extern "C" {
    pub fn AudioOutputUnitGetHostIcon(au: AudioUnit, desiredPointSize: f32) -> UIImage;
}
extern "C" {
    pub fn AudioComponentGetIcon(comp: AudioComponent, desiredPointSize: f32) -> UIImage;
}
extern "C" {
    pub fn AudioComponentGetLastActiveTime(comp: AudioComponent) -> CFAbsoluteTime;
}
extern "C" {
    pub fn AudioComponentCopyIcon(comp: AudioComponent) -> UIImage;
}
extern "C" {
    pub fn AudioUnitExtensionSetComponentList(
        extensionIdentifier: CFStringRef,
        audioComponentInfo: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitExtensionCopyComponentList(extensionIdentifier: CFStringRef) -> CFArrayRef;
}
pub const kAudioUnitRange: _bindgen_ty_94 = 0;
pub const kAudioUnitInitializeSelect: _bindgen_ty_94 = 1;
pub const kAudioUnitUninitializeSelect: _bindgen_ty_94 = 2;
pub const kAudioUnitGetPropertyInfoSelect: _bindgen_ty_94 = 3;
pub const kAudioUnitGetPropertySelect: _bindgen_ty_94 = 4;
pub const kAudioUnitSetPropertySelect: _bindgen_ty_94 = 5;
pub const kAudioUnitAddPropertyListenerSelect: _bindgen_ty_94 = 10;
pub const kAudioUnitRemovePropertyListenerSelect: _bindgen_ty_94 = 11;
pub const kAudioUnitRemovePropertyListenerWithUserDataSelect: _bindgen_ty_94 = 18;
pub const kAudioUnitAddRenderNotifySelect: _bindgen_ty_94 = 15;
pub const kAudioUnitRemoveRenderNotifySelect: _bindgen_ty_94 = 16;
pub const kAudioUnitGetParameterSelect: _bindgen_ty_94 = 6;
pub const kAudioUnitSetParameterSelect: _bindgen_ty_94 = 7;
pub const kAudioUnitScheduleParametersSelect: _bindgen_ty_94 = 17;
pub const kAudioUnitRenderSelect: _bindgen_ty_94 = 14;
pub const kAudioUnitResetSelect: _bindgen_ty_94 = 9;
pub const kAudioUnitComplexRenderSelect: _bindgen_ty_94 = 19;
pub const kAudioUnitProcessSelect: _bindgen_ty_94 = 20;
pub const kAudioUnitProcessMultipleSelect: _bindgen_ty_94 = 21;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub type AudioUnitInitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioUnitUninitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioUnitGetPropertyInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        scope: AudioUnitScope,
        elem: AudioUnitElement,
        outDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus,
>;
pub type AudioUnitGetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitSetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitAddPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitRemovePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
    ) -> OSStatus,
>;
pub type AudioUnitRemovePropertyListenerWithUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitAddRenderNotifyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        proc_: AURenderCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitRemoveRenderNotifyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        proc_: AURenderCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitScheduleParametersProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        events: *const AudioUnitParameterEvent,
        numEvents: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitResetProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ) -> OSStatus,
>;
pub type AudioUnitComplexRenderProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberOfPackets: UInt32,
        outNumberOfPackets: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        ioData: *mut AudioBufferList,
        outMetadata: *mut ::std::os::raw::c_void,
        outMetadataByteSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitProcessProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitProcessMultipleProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        inNumberInputBufferLists: UInt32,
        inInputBufferLists: *mut *const AudioBufferList,
        inNumberOutputBufferLists: UInt32,
        ioOutputBufferLists: *mut *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitGetParameterProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outValue: *mut AudioUnitParameterValue,
    ) -> OSStatus,
>;
pub type AudioUnitSetParameterProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitRenderProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub const kAudioUnitErr_IllegalInstrument: _bindgen_ty_95 = -10873;
pub const kAudioUnitErr_InstrumentTypeNotFound: _bindgen_ty_95 = -10872;
pub type _bindgen_ty_95 = OSStatus;
pub const kAudioUnitScope_Global: _bindgen_ty_96 = 0;
pub const kAudioUnitScope_Input: _bindgen_ty_96 = 1;
pub const kAudioUnitScope_Output: _bindgen_ty_96 = 2;
pub const kAudioUnitScope_Group: _bindgen_ty_96 = 3;
pub const kAudioUnitScope_Part: _bindgen_ty_96 = 4;
pub const kAudioUnitScope_Note: _bindgen_ty_96 = 5;
pub const kAudioUnitScope_Layer: _bindgen_ty_96 = 6;
pub const kAudioUnitScope_LayerItem: _bindgen_ty_96 = 7;
pub type _bindgen_ty_96 = AudioUnitScope;
pub const kAudioUnitProperty_ClassInfo: _bindgen_ty_97 = 0;
pub const kAudioUnitProperty_MakeConnection: _bindgen_ty_97 = 1;
pub const kAudioUnitProperty_SampleRate: _bindgen_ty_97 = 2;
pub const kAudioUnitProperty_ParameterList: _bindgen_ty_97 = 3;
pub const kAudioUnitProperty_ParameterInfo: _bindgen_ty_97 = 4;
pub const kAudioUnitProperty_CPULoad: _bindgen_ty_97 = 6;
pub const kAudioUnitProperty_StreamFormat: _bindgen_ty_97 = 8;
pub const kAudioUnitProperty_ElementCount: _bindgen_ty_97 = 11;
pub const kAudioUnitProperty_Latency: _bindgen_ty_97 = 12;
pub const kAudioUnitProperty_SupportedNumChannels: _bindgen_ty_97 = 13;
pub const kAudioUnitProperty_MaximumFramesPerSlice: _bindgen_ty_97 = 14;
pub const kAudioUnitProperty_ParameterValueStrings: _bindgen_ty_97 = 16;
pub const kAudioUnitProperty_AudioChannelLayout: _bindgen_ty_97 = 19;
pub const kAudioUnitProperty_TailTime: _bindgen_ty_97 = 20;
pub const kAudioUnitProperty_BypassEffect: _bindgen_ty_97 = 21;
pub const kAudioUnitProperty_LastRenderError: _bindgen_ty_97 = 22;
pub const kAudioUnitProperty_SetRenderCallback: _bindgen_ty_97 = 23;
pub const kAudioUnitProperty_FactoryPresets: _bindgen_ty_97 = 24;
pub const kAudioUnitProperty_RenderQuality: _bindgen_ty_97 = 26;
pub const kAudioUnitProperty_HostCallbacks: _bindgen_ty_97 = 27;
pub const kAudioUnitProperty_InPlaceProcessing: _bindgen_ty_97 = 29;
pub const kAudioUnitProperty_ElementName: _bindgen_ty_97 = 30;
pub const kAudioUnitProperty_SupportedChannelLayoutTags: _bindgen_ty_97 = 32;
pub const kAudioUnitProperty_PresentPreset: _bindgen_ty_97 = 36;
pub const kAudioUnitProperty_DependentParameters: _bindgen_ty_97 = 45;
pub const kAudioUnitProperty_InputSamplesInOutput: _bindgen_ty_97 = 49;
pub const kAudioUnitProperty_ShouldAllocateBuffer: _bindgen_ty_97 = 51;
pub const kAudioUnitProperty_FrequencyResponse: _bindgen_ty_97 = 52;
pub const kAudioUnitProperty_ParameterHistoryInfo: _bindgen_ty_97 = 53;
pub const kAudioUnitProperty_NickName: _bindgen_ty_97 = 54;
pub const kAudioUnitProperty_OfflineRender: _bindgen_ty_97 = 37;
pub const kAudioUnitProperty_ParameterIDName: _bindgen_ty_97 = 34;
pub const kAudioUnitProperty_ParameterStringFromValue: _bindgen_ty_97 = 33;
pub const kAudioUnitProperty_ParameterClumpName: _bindgen_ty_97 = 35;
pub const kAudioUnitProperty_ParameterValueFromString: _bindgen_ty_97 = 38;
pub const kAudioUnitProperty_ContextName: _bindgen_ty_97 = 25;
pub const kAudioUnitProperty_PresentationLatency: _bindgen_ty_97 = 40;
pub const kAudioUnitProperty_ClassInfoFromDocument: _bindgen_ty_97 = 50;
pub const kAudioUnitProperty_RequestViewController: _bindgen_ty_97 = 56;
pub const kAudioUnitProperty_ParametersForOverview: _bindgen_ty_97 = 57;
pub const kAudioUnitProperty_SupportsMPE: _bindgen_ty_97 = 58;
pub const kAudioUnitProperty_RenderContextObserver: _bindgen_ty_97 = 60;
pub const kAudioUnitProperty_LastRenderSampleTime: _bindgen_ty_97 = 61;
pub const kAudioUnitProperty_LoadedOutOfProcess: _bindgen_ty_97 = 62;
pub const kAudioUnitProperty_MIDIOutputCallbackInfo: _bindgen_ty_97 = 47;
pub const kAudioUnitProperty_MIDIOutputCallback: _bindgen_ty_97 = 48;
pub const kAudioUnitProperty_MIDIOutputEventListCallback: _bindgen_ty_97 = 63;
pub const kAudioUnitProperty_AudioUnitMIDIProtocol: _bindgen_ty_97 = 64;
pub const kAudioUnitProperty_HostMIDIProtocol: _bindgen_ty_97 = 65;
pub const kAudioUnitProperty_MIDIOutputBufferSizeHint: _bindgen_ty_97 = 66;
pub type _bindgen_ty_97 = AudioUnitPropertyID;
pub const kAudioUnitProperty_RemoteControlEventListener: _bindgen_ty_98 = 100;
pub const kAudioUnitProperty_IsInterAppConnected: _bindgen_ty_98 = 101;
pub const kAudioUnitProperty_PeerURL: _bindgen_ty_98 = 102;
pub type _bindgen_ty_98 = AudioUnitPropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitConnection {
    pub sourceAudioUnit: AudioUnit,
    pub sourceOutputNumber: UInt32,
    pub destInputNumber: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUChannelInfo {
    pub inChannels: SInt16,
    pub outChannels: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitExternalBuffer {
    pub buffer: *mut Byte,
    pub size: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AURenderCallbackStruct {
    pub inputProc: AURenderCallback,
    pub inputProcRefCon: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUPreset {
    pub presetNumber: SInt32,
    pub presetName: CFStringRef,
}
pub const kRenderQuality_Max: _bindgen_ty_99 = 127;
pub const kRenderQuality_High: _bindgen_ty_99 = 96;
pub const kRenderQuality_Medium: _bindgen_ty_99 = 64;
pub const kRenderQuality_Low: _bindgen_ty_99 = 32;
pub const kRenderQuality_Min: _bindgen_ty_99 = 0;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
pub const kNumberOfResponseFrequencies: _bindgen_ty_100 = 1024;
pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitFrequencyResponseBin {
    pub mFrequency: Float64,
    pub mMagnitude: Float64,
}
pub type HostCallback_GetBeatAndTempo = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outCurrentBeat: *mut Float64,
        outCurrentTempo: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetMusicalTimeLocation = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outDeltaSampleOffsetToNextBeat: *mut UInt32,
        outTimeSig_Numerator: *mut Float32,
        outTimeSig_Denominator: *mut UInt32,
        outCurrentMeasureDownBeat: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetTransportState = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outIsPlaying: *mut Boolean,
        outTransportStateChanged: *mut Boolean,
        outCurrentSampleInTimeLine: *mut Float64,
        outIsCycling: *mut Boolean,
        outCycleStartBeat: *mut Float64,
        outCycleEndBeat: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetTransportState2 = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outIsPlaying: *mut Boolean,
        outIsRecording: *mut Boolean,
        outTransportStateChanged: *mut Boolean,
        outCurrentSampleInTimeLine: *mut Float64,
        outIsCycling: *mut Boolean,
        outCycleStartBeat: *mut Float64,
        outCycleEndBeat: *mut Float64,
    ) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HostCallbackInfo {
    pub hostUserData: *mut ::std::os::raw::c_void,
    pub beatAndTempoProc: HostCallback_GetBeatAndTempo,
    pub musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation,
    pub transportStateProc: HostCallback_GetTransportState,
    pub transportStateProc2: HostCallback_GetTransportState2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUDependentParameter {
    pub mScope: AudioUnitScope,
    pub mParameterID: AudioUnitParameterID,
}
pub type AUMIDIOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        timeStamp: *const AudioTimeStamp,
        midiOutNum: UInt32,
        pktlist: *const MIDIPacketList,
    ) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUMIDIOutputCallbackStruct {
    pub midiOutputCallback: AUMIDIOutputCallback,
    pub userData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUInputSamplesInOutputCallbackStruct {
    pub inputToOutputCallback: AUInputSamplesInOutputCallback,
    pub userData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterHistoryInfo {
    pub updatesPerSecond: Float32,
    pub historyDurationInSeconds: Float32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitRenderContext {
    pub workgroup: os_workgroup_t,
    pub reserved: [u32; 6usize],
}
pub type AURenderContextObserver = *mut ::std::os::raw::c_void;
pub type AUEventSampleTime = i64;
pub type AUMIDIEventListBlock = *mut ::std::os::raw::c_void;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Generic: AudioUnitParameterUnit = 0;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Indexed: AudioUnitParameterUnit = 1;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Boolean: AudioUnitParameterUnit = 2;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Percent: AudioUnitParameterUnit = 3;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Seconds: AudioUnitParameterUnit = 4;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_SampleFrames: AudioUnitParameterUnit = 5;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Phase: AudioUnitParameterUnit = 6;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Rate: AudioUnitParameterUnit = 7;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Hertz: AudioUnitParameterUnit = 8;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Cents: AudioUnitParameterUnit = 9;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_RelativeSemiTones: AudioUnitParameterUnit =
    10;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_MIDINoteNumber: AudioUnitParameterUnit =
    11;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_MIDIController: AudioUnitParameterUnit =
    12;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Decibels: AudioUnitParameterUnit = 13;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_LinearGain: AudioUnitParameterUnit = 14;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Degrees: AudioUnitParameterUnit = 15;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_EqualPowerCrossfade:
    AudioUnitParameterUnit = 16;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_MixerFaderCurve1: AudioUnitParameterUnit =
    17;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Pan: AudioUnitParameterUnit = 18;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Meters: AudioUnitParameterUnit = 19;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_AbsoluteCents: AudioUnitParameterUnit = 20;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Octaves: AudioUnitParameterUnit = 21;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_BPM: AudioUnitParameterUnit = 22;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Beats: AudioUnitParameterUnit = 23;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Milliseconds: AudioUnitParameterUnit = 24;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_Ratio: AudioUnitParameterUnit = 25;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_CustomUnit: AudioUnitParameterUnit = 26;
pub const AudioUnitParameterUnit_kAudioUnitParameterUnit_MIDI2Controller: AudioUnitParameterUnit =
    27;
pub type AudioUnitParameterUnit = UInt32;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_CFNameRelease:
    AudioUnitParameterOptions = 16;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_OmitFromPresets:
    AudioUnitParameterOptions = 8192;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_PlotHistory: AudioUnitParameterOptions =
    16384;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_MeterReadOnly:
    AudioUnitParameterOptions = 32768;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplayMask: AudioUnitParameterOptions =
    4653056;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplaySquareRoot:
    AudioUnitParameterOptions = 65536;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplaySquared:
    AudioUnitParameterOptions = 131072;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplayCubed:
    AudioUnitParameterOptions = 196608;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplayCubeRoot:
    AudioUnitParameterOptions = 262144;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplayExponential:
    AudioUnitParameterOptions = 327680;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_HasClump: AudioUnitParameterOptions =
    1048576;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_ValuesHaveStrings:
    AudioUnitParameterOptions = 2097152;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_DisplayLogarithmic:
    AudioUnitParameterOptions = 4194304;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_IsHighResolution:
    AudioUnitParameterOptions = 8388608;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_NonRealTime: AudioUnitParameterOptions =
    16777216;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_CanRamp: AudioUnitParameterOptions =
    33554432;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_ExpertMode: AudioUnitParameterOptions =
    67108864;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_HasCFNameString:
    AudioUnitParameterOptions = 134217728;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_IsGlobalMeta:
    AudioUnitParameterOptions = 268435456;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_IsElementMeta:
    AudioUnitParameterOptions = 536870912;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_IsReadable: AudioUnitParameterOptions =
    1073741824;
pub const AudioUnitParameterOptions_kAudioUnitParameterFlag_IsWritable: AudioUnitParameterOptions =
    2147483648;
pub type AudioUnitParameterOptions = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterInfo {
    pub name: [::std::os::raw::c_char; 52usize],
    pub unitName: CFStringRef,
    pub clumpID: UInt32,
    pub cfNameString: CFStringRef,
    pub unit: AudioUnitParameterUnit,
    pub minValue: AudioUnitParameterValue,
    pub maxValue: AudioUnitParameterValue,
    pub defaultValue: AudioUnitParameterValue,
    pub flags: AudioUnitParameterOptions,
}
pub const kAudioUnitClumpID_System: _bindgen_ty_101 = 0;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
pub const kAudioUnitParameterName_Full: _bindgen_ty_102 = -1;
pub type _bindgen_ty_102 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterNameInfo {
    pub inID: AudioUnitParameterID,
    pub inDesiredLength: SInt32,
    pub outName: CFStringRef,
}
pub type AudioUnitParameterIDName = AudioUnitParameterNameInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterStringFromValue {
    pub inParamID: AudioUnitParameterID,
    pub inValue: *const AudioUnitParameterValue,
    pub outString: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterValueFromString {
    pub inParamID: AudioUnitParameterID,
    pub inString: CFStringRef,
    pub outValue: AudioUnitParameterValue,
}
pub const AudioUnitRemoteControlEvent_kAudioUnitRemoteControlEvent_TogglePlayPause:
    AudioUnitRemoteControlEvent = 1;
pub const AudioUnitRemoteControlEvent_kAudioUnitRemoteControlEvent_ToggleRecord:
    AudioUnitRemoteControlEvent = 2;
pub const AudioUnitRemoteControlEvent_kAudioUnitRemoteControlEvent_Rewind:
    AudioUnitRemoteControlEvent = 3;
pub type AudioUnitRemoteControlEvent = UInt32;
pub type AudioUnitRemoteControlEventListener = *mut ::std::os::raw::c_void;
pub const kAudioUnitProperty_SampleRateConverterComplexity: _bindgen_ty_103 = 3014;
pub type _bindgen_ty_103 = AudioUnitPropertyID;
pub const kAudioUnitSampleRateConverterComplexity_Linear: _bindgen_ty_104 = 1818848869;
pub const kAudioUnitSampleRateConverterComplexity_Normal: _bindgen_ty_104 = 1852797549;
pub const kAudioUnitSampleRateConverterComplexity_Mastering: _bindgen_ty_104 = 1650553971;
pub type _bindgen_ty_104 = UInt32;
pub const kAudioOutputUnitProperty_CurrentDevice: _bindgen_ty_105 = 2000;
pub const kAudioOutputUnitProperty_IsRunning: _bindgen_ty_105 = 2001;
pub const kAudioOutputUnitProperty_ChannelMap: _bindgen_ty_105 = 2002;
pub const kAudioOutputUnitProperty_EnableIO: _bindgen_ty_105 = 2003;
pub const kAudioOutputUnitProperty_StartTime: _bindgen_ty_105 = 2004;
pub const kAudioOutputUnitProperty_SetInputCallback: _bindgen_ty_105 = 2005;
pub const kAudioOutputUnitProperty_HasIO: _bindgen_ty_105 = 2006;
pub const kAudioOutputUnitProperty_StartTimestampsAtZero: _bindgen_ty_105 = 2007;
pub const kAudioOutputUnitProperty_OSWorkgroup: _bindgen_ty_105 = 2015;
pub type _bindgen_ty_105 = AudioUnitPropertyID;
pub const kAudioOutputUnitProperty_MIDICallbacks: _bindgen_ty_106 = 2010;
pub const kAudioOutputUnitProperty_HostReceivesRemoteControlEvents: _bindgen_ty_106 = 2011;
pub const kAudioOutputUnitProperty_RemoteControlToHost: _bindgen_ty_106 = 2012;
pub const kAudioOutputUnitProperty_HostTransportState: _bindgen_ty_106 = 2013;
pub const kAudioOutputUnitProperty_NodeComponentDescription: _bindgen_ty_106 = 2014;
pub type _bindgen_ty_106 = AudioUnitPropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioOutputUnitMIDICallbacks {
    pub userData: *mut ::std::os::raw::c_void,
    pub MIDIEventProc: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            inStatus: UInt32,
            inData1: UInt32,
            inData2: UInt32,
            inOffsetSampleFrame: UInt32,
        ),
    >,
    pub MIDISysExProc: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            inData: *const UInt8,
            inLength: UInt32,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioOutputUnitStartAtTimeParams {
    pub mTimestamp: AudioTimeStamp,
    pub mFlags: UInt32,
}
pub const kAUVoiceIOProperty_BypassVoiceProcessing: _bindgen_ty_107 = 2100;
pub const kAUVoiceIOProperty_VoiceProcessingEnableAGC: _bindgen_ty_107 = 2101;
pub const kAUVoiceIOProperty_MuteOutput: _bindgen_ty_107 = 2104;
pub type _bindgen_ty_107 = AudioUnitPropertyID;
pub const AUVoiceIOSpeechActivityEvent_kAUVoiceIOSpeechActivityHasStarted:
    AUVoiceIOSpeechActivityEvent = 0;
pub const AUVoiceIOSpeechActivityEvent_kAUVoiceIOSpeechActivityHasEnded:
    AUVoiceIOSpeechActivityEvent = 1;
pub type AUVoiceIOSpeechActivityEvent = UInt32;
pub type AUVoiceIOMutedSpeechActivityEventListener = *mut ::std::os::raw::c_void;
pub const kAUVoiceIOProperty_MutedSpeechActivityEventListener: _bindgen_ty_108 = 2106;
pub type _bindgen_ty_108 = AudioUnitPropertyID;
pub const kAUVoiceIOProperty_DuckNonVoiceAudio: _bindgen_ty_109 = 2102;
pub type _bindgen_ty_109 = AudioUnitPropertyID;
pub const kAUVoiceIOProperty_VoiceProcessingQuality: _bindgen_ty_110 = 2103;
pub type _bindgen_ty_110 = AudioUnitPropertyID;
pub const kAUNBandEQProperty_NumberOfBands: _bindgen_ty_111 = 2200;
pub const kAUNBandEQProperty_MaxNumberOfBands: _bindgen_ty_111 = 2201;
pub const kAUNBandEQProperty_BiquadCoefficients: _bindgen_ty_111 = 2203;
pub type _bindgen_ty_111 = AudioUnitPropertyID;
pub const kAudioUnitProperty_MeteringMode: _bindgen_ty_112 = 3007;
pub const kAudioUnitProperty_MatrixLevels: _bindgen_ty_112 = 3006;
pub const kAudioUnitProperty_MatrixDimensions: _bindgen_ty_112 = 3009;
pub const kAudioUnitProperty_MeterClipping: _bindgen_ty_112 = 3011;
pub const kAudioUnitProperty_InputAnchorTimeStamp: _bindgen_ty_112 = 3016;
pub type _bindgen_ty_112 = AudioUnitPropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitMeterClipping {
    pub peakValueSinceLastCall: Float32,
    pub sawInfinity: Boolean,
    pub sawNotANumber: Boolean,
}
pub const kAudioUnitProperty_ReverbRoomType: _bindgen_ty_113 = 10;
pub const kAudioUnitProperty_UsesInternalReverb: _bindgen_ty_113 = 1005;
pub const kAudioUnitProperty_SpatializationAlgorithm: _bindgen_ty_113 = 3000;
pub const kAudioUnitProperty_SpatialMixerRenderingFlags: _bindgen_ty_113 = 3003;
pub const kAudioUnitProperty_SpatialMixerSourceMode: _bindgen_ty_113 = 3005;
pub const kAudioUnitProperty_SpatialMixerDistanceParams: _bindgen_ty_113 = 3010;
pub const kAudioUnitProperty_SpatialMixerAttenuationCurve: _bindgen_ty_113 = 3013;
pub const kAudioUnitProperty_SpatialMixerOutputType: _bindgen_ty_113 = 3100;
pub const kAudioUnitProperty_SpatialMixerPointSourceInHeadMode: _bindgen_ty_113 = 3103;
pub const kAudioUnitProperty_SpatialMixerEnableHeadTracking: _bindgen_ty_113 = 3111;
pub const kAudioUnitProperty_SpatialMixerPersonalizedHRTFMode: _bindgen_ty_113 = 3113;
pub type _bindgen_ty_113 = AudioUnitPropertyID;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_EqualPowerPanning:
    AUSpatializationAlgorithm = 0;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_SphericalHead:
    AUSpatializationAlgorithm = 1;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_HRTF: AUSpatializationAlgorithm = 2;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_SoundField: AUSpatializationAlgorithm =
    3;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_VectorBasedPanning:
    AUSpatializationAlgorithm = 4;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_StereoPassThrough:
    AUSpatializationAlgorithm = 5;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_HRTFHQ: AUSpatializationAlgorithm = 6;
pub const AUSpatializationAlgorithm_kSpatializationAlgorithm_UseOutputType:
    AUSpatializationAlgorithm = 7;
pub type AUSpatializationAlgorithm = UInt32;
pub const AUSpatialMixerSourceMode_kSpatialMixerSourceMode_SpatializeIfMono:
    AUSpatialMixerSourceMode = 0;
pub const AUSpatialMixerSourceMode_kSpatialMixerSourceMode_Bypass: AUSpatialMixerSourceMode = 1;
pub const AUSpatialMixerSourceMode_kSpatialMixerSourceMode_PointSource: AUSpatialMixerSourceMode =
    2;
pub const AUSpatialMixerSourceMode_kSpatialMixerSourceMode_AmbienceBed: AUSpatialMixerSourceMode =
    3;
pub type AUSpatialMixerSourceMode = UInt32;
pub const AUReverbRoomType_kReverbRoomType_SmallRoom: AUReverbRoomType = 0;
pub const AUReverbRoomType_kReverbRoomType_MediumRoom: AUReverbRoomType = 1;
pub const AUReverbRoomType_kReverbRoomType_LargeRoom: AUReverbRoomType = 2;
pub const AUReverbRoomType_kReverbRoomType_MediumHall: AUReverbRoomType = 3;
pub const AUReverbRoomType_kReverbRoomType_LargeHall: AUReverbRoomType = 4;
pub const AUReverbRoomType_kReverbRoomType_Plate: AUReverbRoomType = 5;
pub const AUReverbRoomType_kReverbRoomType_MediumChamber: AUReverbRoomType = 6;
pub const AUReverbRoomType_kReverbRoomType_LargeChamber: AUReverbRoomType = 7;
pub const AUReverbRoomType_kReverbRoomType_Cathedral: AUReverbRoomType = 8;
pub const AUReverbRoomType_kReverbRoomType_LargeRoom2: AUReverbRoomType = 9;
pub const AUReverbRoomType_kReverbRoomType_MediumHall2: AUReverbRoomType = 10;
pub const AUReverbRoomType_kReverbRoomType_MediumHall3: AUReverbRoomType = 11;
pub const AUReverbRoomType_kReverbRoomType_LargeHall2: AUReverbRoomType = 12;
pub type AUReverbRoomType = UInt32;
pub const AUSpatialMixerAttenuationCurve_kSpatialMixerAttenuationCurve_Power:
    AUSpatialMixerAttenuationCurve = 0;
pub const AUSpatialMixerAttenuationCurve_kSpatialMixerAttenuationCurve_Exponential:
    AUSpatialMixerAttenuationCurve = 1;
pub const AUSpatialMixerAttenuationCurve_kSpatialMixerAttenuationCurve_Inverse:
    AUSpatialMixerAttenuationCurve = 2;
pub const AUSpatialMixerAttenuationCurve_kSpatialMixerAttenuationCurve_Linear:
    AUSpatialMixerAttenuationCurve = 3;
pub type AUSpatialMixerAttenuationCurve = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MixerDistanceParams {
    pub mReferenceDistance: Float32,
    pub mMaxDistance: Float32,
    pub mMaxAttenuation: Float32,
}
pub const AUSpatialMixerRenderingFlags_kSpatialMixerRenderingFlags_InterAuralDelay:
    AUSpatialMixerRenderingFlags = 1;
pub const AUSpatialMixerRenderingFlags_kSpatialMixerRenderingFlags_DistanceAttenuation:
    AUSpatialMixerRenderingFlags = 4;
pub type AUSpatialMixerRenderingFlags = UInt32;
pub const AUSpatialMixerPersonalizedHRTFMode_kSpatialMixerPersonalizedHRTFMode_Off:
    AUSpatialMixerPersonalizedHRTFMode = 0;
pub const AUSpatialMixerPersonalizedHRTFMode_kSpatialMixerPersonalizedHRTFMode_On:
    AUSpatialMixerPersonalizedHRTFMode = 1;
pub const AUSpatialMixerPersonalizedHRTFMode_kSpatialMixerPersonalizedHRTFMode_Auto:
    AUSpatialMixerPersonalizedHRTFMode = 2;
pub type AUSpatialMixerPersonalizedHRTFMode = UInt32;
pub const AUSpatialMixerOutputType_kSpatialMixerOutputType_Headphones: AUSpatialMixerOutputType = 1;
pub const AUSpatialMixerOutputType_kSpatialMixerOutputType_BuiltInSpeakers:
    AUSpatialMixerOutputType = 2;
pub const AUSpatialMixerOutputType_kSpatialMixerOutputType_ExternalSpeakers:
    AUSpatialMixerOutputType = 3;
pub type AUSpatialMixerOutputType = UInt32;
pub const AUSpatialMixerPointSourceInHeadMode_kSpatialMixerPointSourceInHeadMode_Mono:
    AUSpatialMixerPointSourceInHeadMode = 0;
pub const AUSpatialMixerPointSourceInHeadMode_kSpatialMixerPointSourceInHeadMode_Bypass:
    AUSpatialMixerPointSourceInHeadMode = 1;
pub type AUSpatialMixerPointSourceInHeadMode = UInt32;
pub const kAudioUnitProperty_3DMixerDistanceParams: _bindgen_ty_114 = 3010;
pub const kAudioUnitProperty_3DMixerAttenuationCurve: _bindgen_ty_114 = 3013;
pub const kAudioUnitProperty_DopplerShift: _bindgen_ty_114 = 3002;
pub const kAudioUnitProperty_3DMixerRenderingFlags: _bindgen_ty_114 = 3003;
pub const kAudioUnitProperty_3DMixerDistanceAtten: _bindgen_ty_114 = 3004;
pub const kAudioUnitProperty_ReverbPreset: _bindgen_ty_114 = 3012;
pub type _bindgen_ty_114 = AudioUnitPropertyID;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_InterAuralDelay: AU3DMixerRenderingFlags =
    1;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_DopplerShift: AU3DMixerRenderingFlags = 2;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_DistanceAttenuation:
    AU3DMixerRenderingFlags = 4;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_DistanceFilter: AU3DMixerRenderingFlags =
    8;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_DistanceDiffusion:
    AU3DMixerRenderingFlags = 16;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_LinearDistanceAttenuation:
    AU3DMixerRenderingFlags = 32;
pub const AU3DMixerRenderingFlags_k3DMixerRenderingFlags_ConstantReverbBlend:
    AU3DMixerRenderingFlags = 64;
pub type AU3DMixerRenderingFlags = UInt32;
pub const AU3DMixerAttenuationCurve_k3DMixerAttenuationCurve_Power: AU3DMixerAttenuationCurve = 0;
pub const AU3DMixerAttenuationCurve_k3DMixerAttenuationCurve_Exponential:
    AU3DMixerAttenuationCurve = 1;
pub const AU3DMixerAttenuationCurve_k3DMixerAttenuationCurve_Inverse: AU3DMixerAttenuationCurve = 2;
pub const AU3DMixerAttenuationCurve_k3DMixerAttenuationCurve_Linear: AU3DMixerAttenuationCurve = 3;
pub type AU3DMixerAttenuationCurve = UInt32;
pub const kAudioUnitProperty_ScheduleAudioSlice: _bindgen_ty_115 = 3300;
pub const kAudioUnitProperty_ScheduleStartTimeStamp: _bindgen_ty_115 = 3301;
pub const kAudioUnitProperty_CurrentPlayTime: _bindgen_ty_115 = 3302;
pub type _bindgen_ty_115 = AudioUnitPropertyID;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_Complete: AUScheduledAudioSliceFlags =
    1;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_BeganToRender:
    AUScheduledAudioSliceFlags = 2;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_BeganToRenderLate:
    AUScheduledAudioSliceFlags = 4;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_Loop: AUScheduledAudioSliceFlags = 8;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_Interrupt:
    AUScheduledAudioSliceFlags = 16;
pub const AUScheduledAudioSliceFlags_kScheduledAudioSliceFlag_InterruptAtLoop:
    AUScheduledAudioSliceFlags = 32;
pub type AUScheduledAudioSliceFlags = UInt32;
pub type ScheduledAudioSliceCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        bufferList: *mut ScheduledAudioSlice,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledAudioSlice {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioSliceCompletionProc,
    pub mCompletionProcUserData: *mut ::std::os::raw::c_void,
    pub mFlags: AUScheduledAudioSliceFlags,
    pub mReserved: UInt32,
    pub mReserved2: *mut ::std::os::raw::c_void,
    pub mNumberFrames: UInt32,
    pub mBufferList: *mut AudioBufferList,
}
pub const kAudioUnitProperty_ScheduledFileIDs: _bindgen_ty_116 = 3310;
pub const kAudioUnitProperty_ScheduledFileRegion: _bindgen_ty_116 = 3311;
pub const kAudioUnitProperty_ScheduledFilePrime: _bindgen_ty_116 = 3312;
pub const kAudioUnitProperty_ScheduledFileBufferSizeFrames: _bindgen_ty_116 = 3313;
pub const kAudioUnitProperty_ScheduledFileNumberBuffers: _bindgen_ty_116 = 3314;
pub type _bindgen_ty_116 = AudioUnitPropertyID;
pub type ScheduledAudioFileRegionCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        fileRegion: *mut ScheduledAudioFileRegion,
        result: OSStatus,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledAudioFileRegion {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioFileRegionCompletionProc,
    pub mCompletionProcUserData: *mut ::std::os::raw::c_void,
    pub mAudioFile: *mut OpaqueAudioFileID,
    pub mLoopCount: UInt32,
    pub mStartFrame: SInt64,
    pub mFramesToPlay: UInt32,
}
pub const kMusicDeviceProperty_InstrumentName: _bindgen_ty_117 = 1001;
pub const kMusicDeviceProperty_InstrumentNumber: _bindgen_ty_117 = 1004;
pub type _bindgen_ty_117 = AudioUnitPropertyID;
pub const kMusicDeviceProperty_InstrumentCount: _bindgen_ty_118 = 1000;
pub const kMusicDeviceProperty_BankName: _bindgen_ty_118 = 1007;
pub const kMusicDeviceProperty_SoundBankURL: _bindgen_ty_118 = 1100;
pub type _bindgen_ty_118 = AudioUnitPropertyID;
pub const kAUMIDISynthProperty_EnablePreload: _bindgen_ty_119 = 4119;
pub type _bindgen_ty_119 = AudioUnitPropertyID;
pub const kAUSamplerProperty_LoadInstrument: _bindgen_ty_120 = 4102;
pub const kAUSamplerProperty_LoadAudioFiles: _bindgen_ty_120 = 4101;
pub type _bindgen_ty_120 = AudioUnitPropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUSamplerInstrumentData {
    pub fileURL: CFURLRef,
    pub instrumentType: UInt8,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
}
pub const kInstrumentType_DLSPreset: _bindgen_ty_121 = 1;
pub const kInstrumentType_SF2Preset: _bindgen_ty_121 = 1;
pub const kInstrumentType_AUPreset: _bindgen_ty_121 = 2;
pub const kInstrumentType_Audiofile: _bindgen_ty_121 = 3;
pub const kInstrumentType_EXS24: _bindgen_ty_121 = 4;
pub type _bindgen_ty_121 = ::std::os::raw::c_uint;
pub const kAUSampler_DefaultPercussionBankMSB: _bindgen_ty_122 = 120;
pub const kAUSampler_DefaultMelodicBankMSB: _bindgen_ty_122 = 121;
pub const kAUSampler_DefaultBankLSB: _bindgen_ty_122 = 0;
pub type _bindgen_ty_122 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_DeferredRendererPullSize: _bindgen_ty_123 = 3320;
pub const kAudioUnitProperty_DeferredRendererExtraLatency: _bindgen_ty_123 = 3321;
pub const kAudioUnitProperty_DeferredRendererWaitFrames: _bindgen_ty_123 = 3322;
pub type _bindgen_ty_123 = AudioUnitPropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUSamplerBankPresetData {
    pub bankURL: CFURLRef,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
    pub reserved: UInt8,
}
pub const kAUSamplerProperty_LoadPresetFromBank: _bindgen_ty_124 = 4100;
pub const kAUSamplerProperty_BankAndPreset: _bindgen_ty_124 = 4100;
pub type _bindgen_ty_124 = AudioUnitPropertyID;
pub type AUValue = f32;
pub type AUParameterAddress = u64;
pub const AUParameterAutomationEventType_AUParameterAutomationEventTypeValue:
    AUParameterAutomationEventType = 0;
pub const AUParameterAutomationEventType_AUParameterAutomationEventTypeTouch:
    AUParameterAutomationEventType = 1;
pub const AUParameterAutomationEventType_AUParameterAutomationEventTypeRelease:
    AUParameterAutomationEventType = 2;
pub type AUParameterAutomationEventType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AURecordedParameterEvent {
    pub hostTime: u64,
    pub address: AUParameterAddress,
    pub value: AUValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUParameterAutomationEvent {
    pub hostTime: u64,
    pub address: AUParameterAddress,
    pub value: AUValue,
    pub eventType: AUParameterAutomationEventType,
    pub reserved: u64,
}
pub type AUParameterObserver = *mut ::std::os::raw::c_void;
pub type AUParameterRecordingObserver = *mut ::std::os::raw::c_void;
pub type AUParameterAutomationObserver = *mut ::std::os::raw::c_void;
pub type AUParameterObserverToken = *mut ::std::os::raw::c_void;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUParameterNode(pub id);
impl std::ops::Deref for AUParameterNode {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUParameterNode {}
impl AUParameterNode {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUParameterNode), alloc) })
    }
}
impl INSObject for AUParameterNode {}
impl PNSObject for AUParameterNode {}
impl From<AUParameterNode> for NSObject {
    fn from(child: AUParameterNode) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUParameterNode {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUParameterNode, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterNode)) };
        if is_kind_of {
            Ok(AUParameterNode(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUParameterNode")
        }
    }
}
impl IAUParameterNode for AUParameterNode {}
pub trait IAUParameterNode: Sized + std::ops::Deref {
    unsafe fn displayNameWithLength_(&self, maximumLength: NSInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, displayNameWithLength: maximumLength)
    }
    unsafe fn tokenByAddingParameterObserver_(
        &self,
        observer: AUParameterObserver,
    ) -> AUParameterObserverToken
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tokenByAddingParameterObserver: observer)
    }
    unsafe fn tokenByAddingParameterRecordingObserver_(
        &self,
        observer: AUParameterRecordingObserver,
    ) -> AUParameterObserverToken
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tokenByAddingParameterRecordingObserver: observer)
    }
    unsafe fn tokenByAddingParameterAutomationObserver_(
        &self,
        observer: AUParameterAutomationObserver,
    ) -> AUParameterObserverToken
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tokenByAddingParameterAutomationObserver: observer)
    }
    unsafe fn removeParameterObserver_(&self, token: AUParameterObserverToken)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeParameterObserver: token)
    }
    unsafe fn identifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, identifier)
    }
    unsafe fn keyPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyPath)
    }
    unsafe fn displayName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, displayName)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUParameterGroup(pub id);
impl std::ops::Deref for AUParameterGroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUParameterGroup {}
impl AUParameterGroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUParameterGroup), alloc) })
    }
}
impl PNSSecureCoding for AUParameterGroup {}
impl IAUParameterNode for AUParameterGroup {}
impl From<AUParameterGroup> for AUParameterNode {
    fn from(child: AUParameterGroup) -> AUParameterNode {
        AUParameterNode(child.0)
    }
}
impl std::convert::TryFrom<AUParameterNode> for AUParameterGroup {
    type Error = &'static str;
    fn try_from(parent: AUParameterNode) -> Result<AUParameterGroup, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterGroup)) };
        if is_kind_of {
            Ok(AUParameterGroup(parent.0))
        } else {
            Err("This AUParameterNode cannot be downcasted to AUParameterGroup")
        }
    }
}
impl INSObject for AUParameterGroup {}
impl PNSObject for AUParameterGroup {}
impl From<AUParameterGroup> for NSObject {
    fn from(child: AUParameterGroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUParameterGroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUParameterGroup, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterGroup)) };
        if is_kind_of {
            Ok(AUParameterGroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUParameterGroup")
        }
    }
}
impl IAUParameterGroup for AUParameterGroup {}
pub trait IAUParameterGroup: Sized + std::ops::Deref {
    unsafe fn children(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, children)
    }
    unsafe fn allParameters(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allParameters)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUParameterTree(pub id);
impl std::ops::Deref for AUParameterTree {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUParameterTree {}
impl AUParameterTree {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUParameterTree), alloc) })
    }
}
impl PNSSecureCoding for AUParameterTree {}
impl IAUParameterGroup for AUParameterTree {}
impl From<AUParameterTree> for AUParameterGroup {
    fn from(child: AUParameterTree) -> AUParameterGroup {
        AUParameterGroup(child.0)
    }
}
impl std::convert::TryFrom<AUParameterGroup> for AUParameterTree {
    type Error = &'static str;
    fn try_from(parent: AUParameterGroup) -> Result<AUParameterTree, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterTree)) };
        if is_kind_of {
            Ok(AUParameterTree(parent.0))
        } else {
            Err("This AUParameterGroup cannot be downcasted to AUParameterTree")
        }
    }
}
impl IAUParameterNode for AUParameterTree {}
impl From<AUParameterTree> for AUParameterNode {
    fn from(child: AUParameterTree) -> AUParameterNode {
        AUParameterNode(child.0)
    }
}
impl std::convert::TryFrom<AUParameterNode> for AUParameterTree {
    type Error = &'static str;
    fn try_from(parent: AUParameterNode) -> Result<AUParameterTree, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterTree)) };
        if is_kind_of {
            Ok(AUParameterTree(parent.0))
        } else {
            Err("This AUParameterNode cannot be downcasted to AUParameterTree")
        }
    }
}
impl INSObject for AUParameterTree {}
impl PNSObject for AUParameterTree {}
impl From<AUParameterTree> for NSObject {
    fn from(child: AUParameterTree) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUParameterTree {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUParameterTree, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameterTree)) };
        if is_kind_of {
            Ok(AUParameterTree(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUParameterTree")
        }
    }
}
impl IAUParameterTree for AUParameterTree {}
pub trait IAUParameterTree: Sized + std::ops::Deref {
    unsafe fn parameterWithAddress_(&self, address: AUParameterAddress) -> AUParameter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parameterWithAddress: address)
    }
    unsafe fn parameterWithID_scope_element_(
        &self,
        paramID: AudioUnitParameterID,
        scope: AudioUnitScope,
        element: AudioUnitElement,
    ) -> AUParameter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , parameterWithID : paramID scope : scope element : element)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUParameter(pub id);
impl std::ops::Deref for AUParameter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUParameter {}
impl AUParameter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUParameter), alloc) })
    }
}
impl PNSSecureCoding for AUParameter {}
impl IAUParameterNode for AUParameter {}
impl From<AUParameter> for AUParameterNode {
    fn from(child: AUParameter) -> AUParameterNode {
        AUParameterNode(child.0)
    }
}
impl std::convert::TryFrom<AUParameterNode> for AUParameter {
    type Error = &'static str;
    fn try_from(parent: AUParameterNode) -> Result<AUParameter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameter)) };
        if is_kind_of {
            Ok(AUParameter(parent.0))
        } else {
            Err("This AUParameterNode cannot be downcasted to AUParameter")
        }
    }
}
impl INSObject for AUParameter {}
impl PNSObject for AUParameter {}
impl From<AUParameter> for NSObject {
    fn from(child: AUParameter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUParameter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUParameter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUParameter)) };
        if is_kind_of {
            Ok(AUParameter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUParameter")
        }
    }
}
impl IAUParameter for AUParameter {}
pub trait IAUParameter: Sized + std::ops::Deref {
    unsafe fn setValue_originator_(&self, value: AUValue, originator: AUParameterObserverToken)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value originator : originator)
    }
    unsafe fn setValue_originator_atHostTime_(
        &self,
        value: AUValue,
        originator: AUParameterObserverToken,
        hostTime: u64,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value originator : originator atHostTime : hostTime)
    }
    unsafe fn setValue_originator_atHostTime_eventType_(
        &self,
        value: AUValue,
        originator: AUParameterObserverToken,
        hostTime: u64,
        eventType: AUParameterAutomationEventType,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value originator : originator atHostTime : hostTime eventType : eventType)
    }
    unsafe fn stringFromValue_(&self, value: *const AUValue) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromValue: value)
    }
    unsafe fn valueFromString_(&self, string: NSString) -> AUValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueFromString: string)
    }
    unsafe fn minValue(&self) -> AUValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minValue)
    }
    unsafe fn maxValue(&self) -> AUValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maxValue)
    }
    unsafe fn unit(&self) -> AudioUnitParameterUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unit)
    }
    unsafe fn unitName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitName)
    }
    unsafe fn flags(&self) -> AudioUnitParameterOptions
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, flags)
    }
    unsafe fn address(&self) -> AUParameterAddress
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, address)
    }
    unsafe fn valueStrings(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueStrings)
    }
    unsafe fn dependentParameters(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dependentParameters)
    }
    unsafe fn value(&self) -> AUValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, value)
    }
    unsafe fn setValue_(&self, value: AUValue)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setValue: value)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AVAudioFormat(pub id);
impl std::ops::Deref for AVAudioFormat {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AVAudioFormat {}
impl AVAudioFormat {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AVAudioFormat), alloc) })
    }
}
impl IAVAudioFormat for AVAudioFormat {}
pub trait IAVAudioFormat: Sized + std::ops::Deref {}
pub type AUAudioUnitStatus = OSStatus;
pub const AUEventSampleTimeImmediate: _bindgen_ty_125 = -4294967296;
pub type _bindgen_ty_125 = AUEventSampleTime;
pub type AUAudioFrameCount = u32;
pub type AUAudioChannelCount = u32;
pub const AUAudioUnitBusType_AUAudioUnitBusTypeInput: AUAudioUnitBusType = 1;
pub const AUAudioUnitBusType_AUAudioUnitBusTypeOutput: AUAudioUnitBusType = 2;
pub type AUAudioUnitBusType = NSInteger;
pub type AURenderPullInputBlock = *mut ::std::os::raw::c_void;
pub type AURenderBlock = *mut ::std::os::raw::c_void;
pub type AURenderObserver = *mut ::std::os::raw::c_void;
pub type AUScheduleParameterBlock = *mut ::std::os::raw::c_void;
pub type AUScheduleMIDIEventBlock = *mut ::std::os::raw::c_void;
pub type AUMIDIOutputEventBlock = *mut ::std::os::raw::c_void;
pub type AUHostMusicalContextBlock = *mut ::std::os::raw::c_void;
pub type AUMIDICIProfileChangedBlock = *mut ::std::os::raw::c_void;
pub const AUHostTransportStateFlags_AUHostTransportStateChanged: AUHostTransportStateFlags = 1;
pub const AUHostTransportStateFlags_AUHostTransportStateMoving: AUHostTransportStateFlags = 2;
pub const AUHostTransportStateFlags_AUHostTransportStateRecording: AUHostTransportStateFlags = 4;
pub const AUHostTransportStateFlags_AUHostTransportStateCycling: AUHostTransportStateFlags = 8;
pub type AUHostTransportStateFlags = NSUInteger;
pub type AUHostTransportStateBlock = *mut ::std::os::raw::c_void;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUAudioUnit(pub id);
impl std::ops::Deref for AUAudioUnit {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUAudioUnit {}
impl AUAudioUnit {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUAudioUnit), alloc) })
    }
}
impl INSObject for AUAudioUnit {}
impl PNSObject for AUAudioUnit {}
impl From<AUAudioUnit> for NSObject {
    fn from(child: AUAudioUnit) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUAudioUnit {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUAudioUnit, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnit)) };
        if is_kind_of {
            Ok(AUAudioUnit(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUAudioUnit")
        }
    }
}
impl IAUAudioUnit for AUAudioUnit {}
pub trait IAUAudioUnit: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithComponentDescription_options_error_(
        &self,
        componentDescription: AudioComponentDescription,
        options: AudioComponentInstantiationOptions,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithComponentDescription : componentDescription options : options error : outError)
    }
    unsafe fn initWithComponentDescription_error_(
        &self,
        componentDescription: AudioComponentDescription,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithComponentDescription : componentDescription error : outError)
    }
    unsafe fn allocateRenderResourcesAndReturnError_(&self, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allocateRenderResourcesAndReturnError: outError)
    }
    unsafe fn deallocateRenderResources(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, deallocateRenderResources)
    }
    unsafe fn reset(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reset)
    }
    unsafe fn tokenByAddingRenderObserver_(&self, observer: AURenderObserver) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tokenByAddingRenderObserver: observer)
    }
    unsafe fn removeRenderObserver_(&self, token: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeRenderObserver: token)
    }
    unsafe fn parametersForOverviewWithCount_(&self, count: NSInteger) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parametersForOverviewWithCount: count)
    }
    unsafe fn saveUserPreset_error_(
        &self,
        userPreset: AUAudioUnitPreset,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , saveUserPreset : userPreset error : outError)
    }
    unsafe fn deleteUserPreset_error_(
        &self,
        userPreset: AUAudioUnitPreset,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , deleteUserPreset : userPreset error : outError)
    }
    unsafe fn presetStateFor_error_(
        &self,
        userPreset: AUAudioUnitPreset,
        outError: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , presetStateFor : userPreset error : outError)
    }
    unsafe fn profileStateForCable_channel_(
        &self,
        cable: u8,
        channel: MIDIChannelNumber,
    ) -> MIDICIProfileState
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , profileStateForCable : cable channel : channel)
    }
    unsafe fn enableProfile_cable_onChannel_error_(
        &self,
        profile: MIDICIProfile,
        cable: u8,
        channel: MIDIChannelNumber,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enableProfile : profile cable : cable onChannel : channel error : outError)
    }
    unsafe fn disableProfile_cable_onChannel_error_(
        &self,
        profile: MIDICIProfile,
        cable: u8,
        channel: MIDIChannelNumber,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , disableProfile : profile cable : cable onChannel : channel error : outError)
    }
    unsafe fn messageChannelFor_(&self, channelName: NSString) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, messageChannelFor: channelName)
    }
    unsafe fn componentDescription(&self) -> AudioComponentDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentDescription)
    }
    unsafe fn component(&self) -> AudioComponent
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, component)
    }
    unsafe fn componentName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentName)
    }
    unsafe fn audioUnitName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, audioUnitName)
    }
    unsafe fn manufacturerName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, manufacturerName)
    }
    unsafe fn audioUnitShortName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, audioUnitShortName)
    }
    unsafe fn componentVersion(&self) -> u32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentVersion)
    }
    unsafe fn renderResourcesAllocated(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, renderResourcesAllocated)
    }
    unsafe fn inputBusses(&self) -> AUAudioUnitBusArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inputBusses)
    }
    unsafe fn outputBusses(&self) -> AUAudioUnitBusArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, outputBusses)
    }
    unsafe fn renderBlock(&self) -> AURenderBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, renderBlock)
    }
    unsafe fn scheduleParameterBlock(&self) -> AUScheduleParameterBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheduleParameterBlock)
    }
    unsafe fn maximumFramesToRender(&self) -> AUAudioFrameCount
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumFramesToRender)
    }
    unsafe fn setMaximumFramesToRender_(&self, maximumFramesToRender: AUAudioFrameCount)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumFramesToRender: maximumFramesToRender)
    }
    unsafe fn parameterTree(&self) -> AUParameterTree
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parameterTree)
    }
    unsafe fn setParameterTree_(&self, parameterTree: AUParameterTree)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setParameterTree: parameterTree)
    }
    unsafe fn allParameterValues(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allParameterValues)
    }
    unsafe fn isMusicDeviceOrEffect(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMusicDeviceOrEffect)
    }
    unsafe fn virtualMIDICableCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, virtualMIDICableCount)
    }
    unsafe fn scheduleMIDIEventBlock(&self) -> AUScheduleMIDIEventBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheduleMIDIEventBlock)
    }
    unsafe fn scheduleMIDIEventListBlock(&self) -> AUMIDIEventListBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheduleMIDIEventListBlock)
    }
    unsafe fn MIDIOutputNames(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, MIDIOutputNames)
    }
    unsafe fn providesUserInterface(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, providesUserInterface)
    }
    unsafe fn MIDIOutputEventBlock(&self) -> AUMIDIOutputEventBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, MIDIOutputEventBlock)
    }
    unsafe fn setMIDIOutputEventBlock_(&self, MIDIOutputEventBlock: AUMIDIOutputEventBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMIDIOutputEventBlock: MIDIOutputEventBlock)
    }
    unsafe fn MIDIOutputEventListBlock(&self) -> AUMIDIEventListBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, MIDIOutputEventListBlock)
    }
    unsafe fn setMIDIOutputEventListBlock_(&self, MIDIOutputEventListBlock: AUMIDIEventListBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMIDIOutputEventListBlock: MIDIOutputEventListBlock)
    }
    unsafe fn AudioUnitMIDIProtocol(&self) -> MIDIProtocolID
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, AudioUnitMIDIProtocol)
    }
    unsafe fn hostMIDIProtocol(&self) -> MIDIProtocolID
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hostMIDIProtocol)
    }
    unsafe fn setHostMIDIProtocol_(&self, hostMIDIProtocol: MIDIProtocolID)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHostMIDIProtocol: hostMIDIProtocol)
    }
    unsafe fn fullState(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fullState)
    }
    unsafe fn setFullState_(&self, fullState: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFullState: fullState)
    }
    unsafe fn fullStateForDocument(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fullStateForDocument)
    }
    unsafe fn setFullStateForDocument_(&self, fullStateForDocument: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFullStateForDocument: fullStateForDocument)
    }
    unsafe fn factoryPresets(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, factoryPresets)
    }
    unsafe fn userPresets(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userPresets)
    }
    unsafe fn supportsUserPresets(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsUserPresets)
    }
    unsafe fn isLoadedInProcess(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLoadedInProcess)
    }
    unsafe fn currentPreset(&self) -> AUAudioUnitPreset
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentPreset)
    }
    unsafe fn setCurrentPreset_(&self, currentPreset: AUAudioUnitPreset)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCurrentPreset: currentPreset)
    }
    unsafe fn latency(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, latency)
    }
    unsafe fn tailTime(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tailTime)
    }
    unsafe fn renderQuality(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, renderQuality)
    }
    unsafe fn setRenderQuality_(&self, renderQuality: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRenderQuality: renderQuality)
    }
    unsafe fn shouldBypassEffect(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldBypassEffect)
    }
    unsafe fn setShouldBypassEffect_(&self, shouldBypassEffect: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShouldBypassEffect: shouldBypassEffect)
    }
    unsafe fn canProcessInPlace(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canProcessInPlace)
    }
    unsafe fn isRenderingOffline(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isRenderingOffline)
    }
    unsafe fn setRenderingOffline_(&self, renderingOffline: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRenderingOffline: renderingOffline)
    }
    unsafe fn channelCapabilities(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, channelCapabilities)
    }
    unsafe fn musicalContextBlock(&self) -> AUHostMusicalContextBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, musicalContextBlock)
    }
    unsafe fn setMusicalContextBlock_(&self, musicalContextBlock: AUHostMusicalContextBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMusicalContextBlock: musicalContextBlock)
    }
    unsafe fn transportStateBlock(&self) -> AUHostTransportStateBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, transportStateBlock)
    }
    unsafe fn setTransportStateBlock_(&self, transportStateBlock: AUHostTransportStateBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTransportStateBlock: transportStateBlock)
    }
    unsafe fn contextName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, contextName)
    }
    unsafe fn setContextName_(&self, contextName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setContextName: contextName)
    }
    unsafe fn supportsMPE(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsMPE)
    }
    unsafe fn channelMap(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, channelMap)
    }
    unsafe fn setChannelMap_(&self, channelMap: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setChannelMap: channelMap)
    }
    unsafe fn profileChangedBlock(&self) -> AUMIDICIProfileChangedBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, profileChangedBlock)
    }
    unsafe fn setProfileChangedBlock_(&self, profileChangedBlock: AUMIDICIProfileChangedBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProfileChangedBlock: profileChangedBlock)
    }
    unsafe fn instantiateWithComponentDescription_options_completionHandler_(
        componentDescription: AudioComponentDescription,
        options: AudioComponentInstantiationOptions,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (AUAudioUnit) , instantiateWithComponentDescription : componentDescription options : options completionHandler : completionHandler)
    }
}
pub type AUInputHandler = *mut ::std::os::raw::c_void;
impl AUAudioUnit_AUAudioInputOutputUnit for AUAudioUnit {}
pub trait AUAudioUnit_AUAudioInputOutputUnit: Sized + std::ops::Deref {
    unsafe fn startHardwareAndReturnError_(&self, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startHardwareAndReturnError: outError)
    }
    unsafe fn stopHardware(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopHardware)
    }
    unsafe fn canPerformInput(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canPerformInput)
    }
    unsafe fn canPerformOutput(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, canPerformOutput)
    }
    unsafe fn isInputEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isInputEnabled)
    }
    unsafe fn setInputEnabled_(&self, inputEnabled: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setInputEnabled: inputEnabled)
    }
    unsafe fn isOutputEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOutputEnabled)
    }
    unsafe fn setOutputEnabled_(&self, outputEnabled: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setOutputEnabled: outputEnabled)
    }
    unsafe fn outputProvider(&self) -> AURenderPullInputBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, outputProvider)
    }
    unsafe fn setOutputProvider_(&self, outputProvider: AURenderPullInputBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setOutputProvider: outputProvider)
    }
    unsafe fn inputHandler(&self) -> AUInputHandler
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inputHandler)
    }
    unsafe fn setInputHandler_(&self, inputHandler: AUInputHandler)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setInputHandler: inputHandler)
    }
    unsafe fn isRunning(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isRunning)
    }
    unsafe fn osWorkgroup(&self) -> os_workgroup_t
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, osWorkgroup)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUAudioUnitBusArray(pub id);
impl std::ops::Deref for AUAudioUnitBusArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUAudioUnitBusArray {}
impl AUAudioUnitBusArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUAudioUnitBusArray), alloc) })
    }
}
impl PNSFastEnumeration for AUAudioUnitBusArray {}
impl INSObject for AUAudioUnitBusArray {}
impl PNSObject for AUAudioUnitBusArray {}
impl From<AUAudioUnitBusArray> for NSObject {
    fn from(child: AUAudioUnitBusArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUAudioUnitBusArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUAudioUnitBusArray, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnitBusArray)) };
        if is_kind_of {
            Ok(AUAudioUnitBusArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUAudioUnitBusArray")
        }
    }
}
impl IAUAudioUnitBusArray for AUAudioUnitBusArray {}
pub trait IAUAudioUnitBusArray: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithAudioUnit_busType_busses_(
        &self,
        owner: AUAudioUnit,
        busType: AUAudioUnitBusType,
        busArray: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithAudioUnit : owner busType : busType busses : busArray)
    }
    unsafe fn initWithAudioUnit_busType_(
        &self,
        owner: AUAudioUnit,
        busType: AUAudioUnitBusType,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithAudioUnit : owner busType : busType)
    }
    unsafe fn objectAtIndexedSubscript_(&self, index: NSUInteger) -> AUAudioUnitBus
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndexedSubscript: index)
    }
    unsafe fn setBusCount_error_(&self, count: NSUInteger, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setBusCount : count error : outError)
    }
    unsafe fn addObserverToAllBusses_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserverToAllBusses : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserverFromAllBusses_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserverFromAllBusses : observer forKeyPath : keyPath context : context)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn isCountChangeable(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCountChangeable)
    }
    unsafe fn ownerAudioUnit(&self) -> AUAudioUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ownerAudioUnit)
    }
    unsafe fn busType(&self) -> AUAudioUnitBusType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, busType)
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUAudioUnitBus(pub id);
impl std::ops::Deref for AUAudioUnitBus {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUAudioUnitBus {}
impl AUAudioUnitBus {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUAudioUnitBus), alloc) })
    }
}
impl INSObject for AUAudioUnitBus {}
impl PNSObject for AUAudioUnitBus {}
impl From<AUAudioUnitBus> for NSObject {
    fn from(child: AUAudioUnitBus) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUAudioUnitBus {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUAudioUnitBus, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnitBus)) };
        if is_kind_of {
            Ok(AUAudioUnitBus(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUAudioUnitBus")
        }
    }
}
impl IAUAudioUnitBus for AUAudioUnitBus {}
pub trait IAUAudioUnitBus: Sized + std::ops::Deref {
    unsafe fn setFormat_error_(&self, format: AVAudioFormat, outError: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setFormat : format error : outError)
    }
    unsafe fn format(&self) -> AVAudioFormat
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, format)
    }
    unsafe fn shouldAllocateBuffer(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shouldAllocateBuffer)
    }
    unsafe fn setShouldAllocateBuffer_(&self, shouldAllocateBuffer: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShouldAllocateBuffer: shouldAllocateBuffer)
    }
    unsafe fn isEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEnabled)
    }
    unsafe fn setEnabled_(&self, enabled: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEnabled: enabled)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
    unsafe fn index(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, index)
    }
    unsafe fn busType(&self) -> AUAudioUnitBusType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, busType)
    }
    unsafe fn ownerAudioUnit(&self) -> AUAudioUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ownerAudioUnit)
    }
    unsafe fn supportedChannelLayoutTags(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportedChannelLayoutTags)
    }
    unsafe fn contextPresentationLatency(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, contextPresentationLatency)
    }
    unsafe fn setContextPresentationLatency_(&self, contextPresentationLatency: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setContextPresentationLatency: contextPresentationLatency
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUAudioUnitPreset(pub id);
impl std::ops::Deref for AUAudioUnitPreset {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUAudioUnitPreset {}
impl AUAudioUnitPreset {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUAudioUnitPreset), alloc) })
    }
}
impl PNSSecureCoding for AUAudioUnitPreset {}
impl INSObject for AUAudioUnitPreset {}
impl PNSObject for AUAudioUnitPreset {}
impl From<AUAudioUnitPreset> for NSObject {
    fn from(child: AUAudioUnitPreset) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUAudioUnitPreset {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUAudioUnitPreset, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnitPreset)) };
        if is_kind_of {
            Ok(AUAudioUnitPreset(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUAudioUnitPreset")
        }
    }
}
impl IAUAudioUnitPreset for AUAudioUnitPreset {}
pub trait IAUAudioUnitPreset: Sized + std::ops::Deref {
    unsafe fn number(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, number)
    }
    unsafe fn setNumber_(&self, number: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNumber: number)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
}
pub type CallHostBlock = *mut ::std::os::raw::c_void;
pub trait PAUMessageChannel: Sized + std::ops::Deref {
    unsafe fn callAudioUnit_(&self, message: NSDictionary) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, callAudioUnit: message)
    }
    unsafe fn callHostBlock(&self) -> CallHostBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, callHostBlock)
    }
    unsafe fn setCallHostBlock_(&self, callHostBlock: CallHostBlock)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCallHostBlock: callHostBlock)
    }
}
pub const AURenderEventType_AURenderEventParameter: AURenderEventType = 1;
pub const AURenderEventType_AURenderEventParameterRamp: AURenderEventType = 2;
pub const AURenderEventType_AURenderEventMIDI: AURenderEventType = 8;
pub const AURenderEventType_AURenderEventMIDISysEx: AURenderEventType = 9;
pub const AURenderEventType_AURenderEventMIDIEventList: AURenderEventType = 10;
pub type AURenderEventType = u8;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct AURenderEventHeader {
    pub next: *mut AURenderEvent,
    pub eventSampleTime: AUEventSampleTime,
    pub eventType: AURenderEventType,
    pub reserved: u8,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct AUParameterEvent {
    pub next: *mut AURenderEvent,
    pub eventSampleTime: AUEventSampleTime,
    pub eventType: AURenderEventType,
    pub reserved: [u8; 3usize],
    pub rampDurationSampleFrames: AUAudioFrameCount,
    pub parameterAddress: AUParameterAddress,
    pub value: AUValue,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct AUMIDIEvent {
    pub next: *mut AURenderEvent,
    pub eventSampleTime: AUEventSampleTime,
    pub eventType: AURenderEventType,
    pub reserved: u8,
    pub length: u16,
    pub cable: u8,
    pub data: [u8; 3usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct AUMIDIEventList {
    pub next: *mut AURenderEvent,
    pub eventSampleTime: AUEventSampleTime,
    pub eventType: AURenderEventType,
    pub reserved: u8,
    pub cable: u8,
    pub eventList: MIDIEventList,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AURenderEvent {
    pub head: AURenderEventHeader,
    pub parameter: AUParameterEvent,
    pub MIDI: AUMIDIEvent,
    pub MIDIEventsList: AUMIDIEventList,
}
pub type AUInternalRenderBlock = *mut ::std::os::raw::c_void;
impl AUAudioUnit_AUAudioUnitImplementation for AUAudioUnit {}
pub trait AUAudioUnit_AUAudioUnitImplementation: Sized + std::ops::Deref {
    unsafe fn shouldChangeToFormat_forBus_(
        &self,
        format: AVAudioFormat,
        bus: AUAudioUnitBus,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , shouldChangeToFormat : format forBus : bus)
    }
    unsafe fn setRenderResourcesAllocated_(&self, flag: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRenderResourcesAllocated: flag)
    }
    unsafe fn internalRenderBlock(&self) -> AUInternalRenderBlock
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, internalRenderBlock)
    }
    unsafe fn renderContextObserver(&self) -> AURenderContextObserver
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, renderContextObserver)
    }
    unsafe fn MIDIOutputBufferSizeHint(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, MIDIOutputBufferSizeHint)
    }
    unsafe fn setMIDIOutputBufferSizeHint_(&self, MIDIOutputBufferSizeHint: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMIDIOutputBufferSizeHint: MIDIOutputBufferSizeHint)
    }
    unsafe fn registerSubclass_asComponentDescription_name_version_(
        cls: Class,
        componentDescription: AudioComponentDescription,
        name: NSString,
        version: UInt32,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (AUAudioUnit) , registerSubclass : cls asComponentDescription : componentDescription name : name version : version)
    }
}
impl AUAudioUnitBus_AUAudioUnitImplementation for AUAudioUnitBus {}
pub trait AUAudioUnitBus_AUAudioUnitImplementation: Sized + std::ops::Deref {
    unsafe fn initWithFormat_error_(
        &self,
        format: AVAudioFormat,
        outError: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFormat : format error : outError)
    }
    unsafe fn supportedChannelCounts(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportedChannelCounts)
    }
    unsafe fn setSupportedChannelCounts_(&self, supportedChannelCounts: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSupportedChannelCounts: supportedChannelCounts)
    }
    unsafe fn maximumChannelCount(&self) -> AUAudioChannelCount
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumChannelCount)
    }
    unsafe fn setMaximumChannelCount_(&self, maximumChannelCount: AUAudioChannelCount)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumChannelCount: maximumChannelCount)
    }
}
impl AUAudioUnitBusArray_AUAudioUnitBusImplementation for AUAudioUnitBusArray {}
pub trait AUAudioUnitBusArray_AUAudioUnitBusImplementation: Sized + std::ops::Deref {
    unsafe fn replaceBusses_(&self, busArray: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replaceBusses: busArray)
    }
}
impl AUParameterTree_Factory for AUParameterTree {}
pub trait AUParameterTree_Factory: Sized + std::ops::Deref {
    unsafe fn createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_(
        identifier: NSString,
        name: NSString,
        address: AUParameterAddress,
        min: AUValue,
        max: AUValue,
        unit: AudioUnitParameterUnit,
        unitName: NSString,
        flags: AudioUnitParameterOptions,
        valueStrings: NSArray,
        dependentParameters: NSArray,
    ) -> AUParameter
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (AUParameterTree) , createParameterWithIdentifier : identifier name : name address : address min : min max : max unit : unit unitName : unitName flags : flags valueStrings : valueStrings dependentParameters : dependentParameters)
    }
    unsafe fn createGroupWithIdentifier_name_children_(
        identifier: NSString,
        name: NSString,
        children: NSArray,
    ) -> AUParameterGroup
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (AUParameterTree) , createGroupWithIdentifier : identifier name : name children : children)
    }
    unsafe fn createGroupTemplate_(children: NSArray) -> AUParameterGroup
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(AUParameterTree), createGroupTemplate: children)
    }
    unsafe fn createGroupFromTemplate_identifier_name_addressOffset_(
        templateGroup: AUParameterGroup,
        identifier: NSString,
        name: NSString,
        addressOffset: AUParameterAddress,
    ) -> AUParameterGroup
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (AUParameterTree) , createGroupFromTemplate : templateGroup identifier : identifier name : name addressOffset : addressOffset)
    }
    unsafe fn createTreeWithChildren_(children: NSArray) -> AUParameterTree
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(AUParameterTree), createTreeWithChildren: children)
    }
}
pub type AUImplementorValueObserver = *mut ::std::os::raw::c_void;
pub type AUImplementorValueProvider = *mut ::std::os::raw::c_void;
pub type AUImplementorStringFromValueCallback = *mut ::std::os::raw::c_void;
pub type AUImplementorValueFromStringCallback = *mut ::std::os::raw::c_void;
pub type AUImplementorDisplayNameWithLengthCallback = *mut ::std::os::raw::c_void;
impl AUParameterNode_AUParameterNodeImplementation for AUParameterNode {}
pub trait AUParameterNode_AUParameterNodeImplementation: Sized + std::ops::Deref {
    unsafe fn implementorValueObserver(&self) -> AUImplementorValueObserver
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementorValueObserver)
    }
    unsafe fn setImplementorValueObserver_(
        &self,
        implementorValueObserver: AUImplementorValueObserver,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setImplementorValueObserver: implementorValueObserver)
    }
    unsafe fn implementorValueProvider(&self) -> AUImplementorValueProvider
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementorValueProvider)
    }
    unsafe fn setImplementorValueProvider_(
        &self,
        implementorValueProvider: AUImplementorValueProvider,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setImplementorValueProvider: implementorValueProvider)
    }
    unsafe fn implementorStringFromValueCallback(&self) -> AUImplementorStringFromValueCallback
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementorStringFromValueCallback)
    }
    unsafe fn setImplementorStringFromValueCallback_(
        &self,
        implementorStringFromValueCallback: AUImplementorStringFromValueCallback,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setImplementorStringFromValueCallback: implementorStringFromValueCallback
        )
    }
    unsafe fn implementorValueFromStringCallback(&self) -> AUImplementorValueFromStringCallback
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementorValueFromStringCallback)
    }
    unsafe fn setImplementorValueFromStringCallback_(
        &self,
        implementorValueFromStringCallback: AUImplementorValueFromStringCallback,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setImplementorValueFromStringCallback: implementorValueFromStringCallback
        )
    }
    unsafe fn implementorDisplayNameWithLengthCallback(
        &self,
    ) -> AUImplementorDisplayNameWithLengthCallback
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementorDisplayNameWithLengthCallback)
    }
    unsafe fn setImplementorDisplayNameWithLengthCallback_(
        &self,
        implementorDisplayNameWithLengthCallback: AUImplementorDisplayNameWithLengthCallback,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setImplementorDisplayNameWithLengthCallback: implementorDisplayNameWithLengthCallback
        )
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct AUAudioUnitV2Bridge(pub id);
impl std::ops::Deref for AUAudioUnitV2Bridge {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for AUAudioUnitV2Bridge {}
impl AUAudioUnitV2Bridge {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(AUAudioUnitV2Bridge), alloc) })
    }
}
impl IAUAudioUnit for AUAudioUnitV2Bridge {}
impl From<AUAudioUnitV2Bridge> for AUAudioUnit {
    fn from(child: AUAudioUnitV2Bridge) -> AUAudioUnit {
        AUAudioUnit(child.0)
    }
}
impl std::convert::TryFrom<AUAudioUnit> for AUAudioUnitV2Bridge {
    type Error = &'static str;
    fn try_from(parent: AUAudioUnit) -> Result<AUAudioUnitV2Bridge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnitV2Bridge)) };
        if is_kind_of {
            Ok(AUAudioUnitV2Bridge(parent.0))
        } else {
            Err("This AUAudioUnit cannot be downcasted to AUAudioUnitV2Bridge")
        }
    }
}
impl INSObject for AUAudioUnitV2Bridge {}
impl PNSObject for AUAudioUnitV2Bridge {}
impl From<AUAudioUnitV2Bridge> for NSObject {
    fn from(child: AUAudioUnitV2Bridge) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for AUAudioUnitV2Bridge {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<AUAudioUnitV2Bridge, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(AUAudioUnitV2Bridge)) };
        if is_kind_of {
            Ok(AUAudioUnitV2Bridge(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to AUAudioUnitV2Bridge")
        }
    }
}
impl IAUAudioUnitV2Bridge for AUAudioUnitV2Bridge {}
pub trait IAUAudioUnitV2Bridge: Sized + std::ops::Deref {
    unsafe fn audioUnit(&self) -> AudioUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, audioUnit)
    }
}
pub trait PAUAudioUnitFactory: Sized + std::ops::Deref {
    unsafe fn createAudioUnitWithComponentDescription_error_(
        &self,
        desc: AudioComponentDescription,
        error: *mut NSError,
    ) -> AUAudioUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createAudioUnitWithComponentDescription : desc error : error)
    }
}
extern "C" {
    pub fn AudioOutputUnitStart(ci: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioOutputUnitStop(ci: AudioUnit) -> OSStatus;
}
pub const kAudioOutputUnitRange: _bindgen_ty_126 = 512;
pub const kAudioOutputUnitStartSelect: _bindgen_ty_126 = 513;
pub const kAudioOutputUnitStopSelect: _bindgen_ty_126 = 514;
pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
pub type AudioOutputUnitStartProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioOutputUnitStopProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub const kAUGroupParameterID_Volume: _bindgen_ty_127 = 7;
pub const kAUGroupParameterID_Sustain: _bindgen_ty_127 = 64;
pub const kAUGroupParameterID_Sostenuto: _bindgen_ty_127 = 66;
pub const kAUGroupParameterID_AllNotesOff: _bindgen_ty_127 = 123;
pub const kAUGroupParameterID_ModWheel: _bindgen_ty_127 = 1;
pub const kAUGroupParameterID_PitchBend: _bindgen_ty_127 = 224;
pub const kAUGroupParameterID_AllSoundOff: _bindgen_ty_127 = 120;
pub const kAUGroupParameterID_ResetAllControllers: _bindgen_ty_127 = 121;
pub const kAUGroupParameterID_Pan: _bindgen_ty_127 = 10;
pub const kAUGroupParameterID_Foot: _bindgen_ty_127 = 4;
pub const kAUGroupParameterID_ChannelPressure: _bindgen_ty_127 = 208;
pub const kAUGroupParameterID_KeyPressure: _bindgen_ty_127 = 160;
pub const kAUGroupParameterID_Expression: _bindgen_ty_127 = 11;
pub const kAUGroupParameterID_DataEntry: _bindgen_ty_127 = 6;
pub const kAUGroupParameterID_Volume_LSB: _bindgen_ty_127 = 39;
pub const kAUGroupParameterID_ModWheel_LSB: _bindgen_ty_127 = 33;
pub const kAUGroupParameterID_Pan_LSB: _bindgen_ty_127 = 42;
pub const kAUGroupParameterID_Foot_LSB: _bindgen_ty_127 = 36;
pub const kAUGroupParameterID_Expression_LSB: _bindgen_ty_127 = 43;
pub const kAUGroupParameterID_DataEntry_LSB: _bindgen_ty_127 = 38;
pub const kAUGroupParameterID_KeyPressure_FirstKey: _bindgen_ty_127 = 256;
pub const kAUGroupParameterID_KeyPressure_LastKey: _bindgen_ty_127 = 383;
pub type _bindgen_ty_127 = AudioUnitParameterID;
pub const kSpatialMixerParam_Azimuth: _bindgen_ty_128 = 0;
pub const kSpatialMixerParam_Elevation: _bindgen_ty_128 = 1;
pub const kSpatialMixerParam_Distance: _bindgen_ty_128 = 2;
pub const kSpatialMixerParam_Gain: _bindgen_ty_128 = 3;
pub const kSpatialMixerParam_PlaybackRate: _bindgen_ty_128 = 4;
pub const kSpatialMixerParam_Enable: _bindgen_ty_128 = 5;
pub const kSpatialMixerParam_MinGain: _bindgen_ty_128 = 6;
pub const kSpatialMixerParam_MaxGain: _bindgen_ty_128 = 7;
pub const kSpatialMixerParam_ReverbBlend: _bindgen_ty_128 = 8;
pub const kSpatialMixerParam_GlobalReverbGain: _bindgen_ty_128 = 9;
pub const kSpatialMixerParam_OcclusionAttenuation: _bindgen_ty_128 = 10;
pub const kSpatialMixerParam_ObstructionAttenuation: _bindgen_ty_128 = 11;
pub const kSpatialMixerParam_HeadYaw: _bindgen_ty_128 = 19;
pub const kSpatialMixerParam_HeadPitch: _bindgen_ty_128 = 20;
pub const kSpatialMixerParam_HeadRoll: _bindgen_ty_128 = 21;
pub type _bindgen_ty_128 = AudioUnitParameterID;
pub const kReverbParam_FilterFrequency: _bindgen_ty_129 = 14;
pub const kReverbParam_FilterBandwidth: _bindgen_ty_129 = 15;
pub const kReverbParam_FilterGain: _bindgen_ty_129 = 16;
pub const kReverbParam_FilterType: _bindgen_ty_129 = 17;
pub const kReverbParam_FilterEnable: _bindgen_ty_129 = 18;
pub type _bindgen_ty_129 = AudioUnitParameterID;
pub const k3DMixerParam_Azimuth: _bindgen_ty_130 = 0;
pub const k3DMixerParam_Elevation: _bindgen_ty_130 = 1;
pub const k3DMixerParam_Distance: _bindgen_ty_130 = 2;
pub const k3DMixerParam_Gain: _bindgen_ty_130 = 3;
pub const k3DMixerParam_PlaybackRate: _bindgen_ty_130 = 4;
pub const k3DMixerParam_BusEnable: _bindgen_ty_130 = 20;
pub const k3DMixerParam_MinGainInDecibels: _bindgen_ty_130 = 21;
pub const k3DMixerParam_MaxGainInDecibels: _bindgen_ty_130 = 22;
pub const k3DMixerParam_DryWetReverbBlend: _bindgen_ty_130 = 23;
pub const k3DMixerParam_GlobalReverbGainInDecibels: _bindgen_ty_130 = 24;
pub const k3DMixerParam_OcclusionAttenuationInDecibels: _bindgen_ty_130 = 25;
pub const k3DMixerParam_ObstructionAttenuationInDecibels: _bindgen_ty_130 = 26;
pub const k3DMixerParam_Enable: _bindgen_ty_130 = 5;
pub const k3DMixerParam_MinGain: _bindgen_ty_130 = 6;
pub const k3DMixerParam_MaxGain: _bindgen_ty_130 = 7;
pub const k3DMixerParam_ReverbBlend: _bindgen_ty_130 = 8;
pub const k3DMixerParam_GlobalReverbGain: _bindgen_ty_130 = 9;
pub const k3DMixerParam_OcclusionAttenuation: _bindgen_ty_130 = 10;
pub const k3DMixerParam_ObstructionAttenuation: _bindgen_ty_130 = 11;
pub const k3DMixerParam_PreAveragePower: _bindgen_ty_130 = 1000;
pub const k3DMixerParam_PrePeakHoldLevel: _bindgen_ty_130 = 2000;
pub const k3DMixerParam_PostAveragePower: _bindgen_ty_130 = 3000;
pub const k3DMixerParam_PostPeakHoldLevel: _bindgen_ty_130 = 4000;
pub type _bindgen_ty_130 = AudioUnitParameterID;
pub const kMultiChannelMixerParam_Volume: _bindgen_ty_131 = 0;
pub const kMultiChannelMixerParam_Enable: _bindgen_ty_131 = 1;
pub const kMultiChannelMixerParam_Pan: _bindgen_ty_131 = 2;
pub const kMultiChannelMixerParam_PreAveragePower: _bindgen_ty_131 = 1000;
pub const kMultiChannelMixerParam_PrePeakHoldLevel: _bindgen_ty_131 = 2000;
pub const kMultiChannelMixerParam_PostAveragePower: _bindgen_ty_131 = 3000;
pub const kMultiChannelMixerParam_PostPeakHoldLevel: _bindgen_ty_131 = 4000;
pub type _bindgen_ty_131 = AudioUnitParameterID;
pub const kMatrixMixerParam_Volume: _bindgen_ty_132 = 0;
pub const kMatrixMixerParam_Enable: _bindgen_ty_132 = 1;
pub const kMatrixMixerParam_PreAveragePower: _bindgen_ty_132 = 1000;
pub const kMatrixMixerParam_PrePeakHoldLevel: _bindgen_ty_132 = 2000;
pub const kMatrixMixerParam_PostAveragePower: _bindgen_ty_132 = 3000;
pub const kMatrixMixerParam_PostPeakHoldLevel: _bindgen_ty_132 = 4000;
pub const kMatrixMixerParam_PreAveragePowerLinear: _bindgen_ty_132 = 5000;
pub const kMatrixMixerParam_PrePeakHoldLevelLinear: _bindgen_ty_132 = 6000;
pub const kMatrixMixerParam_PostAveragePowerLinear: _bindgen_ty_132 = 7000;
pub const kMatrixMixerParam_PostPeakHoldLevelLinear: _bindgen_ty_132 = 8000;
pub type _bindgen_ty_132 = AudioUnitParameterID;
pub const kHALOutputParam_Volume: _bindgen_ty_133 = 14;
pub type _bindgen_ty_133 = AudioUnitParameterID;
pub const kTimePitchParam_Rate: _bindgen_ty_134 = 0;
pub const kTimePitchParam_Pitch: _bindgen_ty_134 = 1;
pub const kTimePitchParam_EffectBlend: _bindgen_ty_134 = 2;
pub type _bindgen_ty_134 = AudioUnitParameterID;
pub const kNewTimePitchParam_Rate: _bindgen_ty_135 = 0;
pub const kNewTimePitchParam_Pitch: _bindgen_ty_135 = 1;
pub const kNewTimePitchParam_Smoothness: _bindgen_ty_135 = 4;
pub const kNewTimePitchParam_Overlap: _bindgen_ty_135 = 4;
pub const kNewTimePitchParam_EnableSpectralCoherence: _bindgen_ty_135 = 6;
pub const kNewTimePitchParam_EnablePeakLocking: _bindgen_ty_135 = 6;
pub const kNewTimePitchParam_EnableTransientPreservation: _bindgen_ty_135 = 7;
pub type _bindgen_ty_135 = AudioUnitParameterID;
pub const kAUSamplerParam_Gain: _bindgen_ty_136 = 900;
pub const kAUSamplerParam_CoarseTuning: _bindgen_ty_136 = 901;
pub const kAUSamplerParam_FineTuning: _bindgen_ty_136 = 902;
pub const kAUSamplerParam_Pan: _bindgen_ty_136 = 903;
pub type _bindgen_ty_136 = AudioUnitParameterID;
pub const kBandpassParam_CenterFrequency: _bindgen_ty_137 = 0;
pub const kBandpassParam_Bandwidth: _bindgen_ty_137 = 1;
pub type _bindgen_ty_137 = AudioUnitParameterID;
pub const kHipassParam_CutoffFrequency: _bindgen_ty_138 = 0;
pub const kHipassParam_Resonance: _bindgen_ty_138 = 1;
pub type _bindgen_ty_138 = AudioUnitParameterID;
pub const kLowPassParam_CutoffFrequency: _bindgen_ty_139 = 0;
pub const kLowPassParam_Resonance: _bindgen_ty_139 = 1;
pub type _bindgen_ty_139 = AudioUnitParameterID;
pub const kHighShelfParam_CutOffFrequency: _bindgen_ty_140 = 0;
pub const kHighShelfParam_Gain: _bindgen_ty_140 = 1;
pub type _bindgen_ty_140 = AudioUnitParameterID;
pub const kAULowShelfParam_CutoffFrequency: _bindgen_ty_141 = 0;
pub const kAULowShelfParam_Gain: _bindgen_ty_141 = 1;
pub type _bindgen_ty_141 = AudioUnitParameterID;
pub const kParametricEQParam_CenterFreq: _bindgen_ty_142 = 0;
pub const kParametricEQParam_Q: _bindgen_ty_142 = 1;
pub const kParametricEQParam_Gain: _bindgen_ty_142 = 2;
pub type _bindgen_ty_142 = AudioUnitParameterID;
pub const kLimiterParam_AttackTime: _bindgen_ty_143 = 0;
pub const kLimiterParam_DecayTime: _bindgen_ty_143 = 1;
pub const kLimiterParam_PreGain: _bindgen_ty_143 = 2;
pub type _bindgen_ty_143 = AudioUnitParameterID;
pub const kDynamicsProcessorParam_Threshold: _bindgen_ty_144 = 0;
pub const kDynamicsProcessorParam_HeadRoom: _bindgen_ty_144 = 1;
pub const kDynamicsProcessorParam_ExpansionRatio: _bindgen_ty_144 = 2;
pub const kDynamicsProcessorParam_ExpansionThreshold: _bindgen_ty_144 = 3;
pub const kDynamicsProcessorParam_AttackTime: _bindgen_ty_144 = 4;
pub const kDynamicsProcessorParam_ReleaseTime: _bindgen_ty_144 = 5;
pub const kDynamicsProcessorParam_OverallGain: _bindgen_ty_144 = 6;
pub const kDynamicsProcessorParam_MasterGain: _bindgen_ty_144 = 6;
pub const kDynamicsProcessorParam_CompressionAmount: _bindgen_ty_144 = 1000;
pub const kDynamicsProcessorParam_InputAmplitude: _bindgen_ty_144 = 2000;
pub const kDynamicsProcessorParam_OutputAmplitude: _bindgen_ty_144 = 3000;
pub type _bindgen_ty_144 = AudioUnitParameterID;
pub const kVarispeedParam_PlaybackRate: _bindgen_ty_145 = 0;
pub const kVarispeedParam_PlaybackCents: _bindgen_ty_145 = 1;
pub type _bindgen_ty_145 = AudioUnitParameterID;
pub const kDistortionParam_Delay: _bindgen_ty_146 = 0;
pub const kDistortionParam_Decay: _bindgen_ty_146 = 1;
pub const kDistortionParam_DelayMix: _bindgen_ty_146 = 2;
pub const kDistortionParam_Decimation: _bindgen_ty_146 = 3;
pub const kDistortionParam_Rounding: _bindgen_ty_146 = 4;
pub const kDistortionParam_DecimationMix: _bindgen_ty_146 = 5;
pub const kDistortionParam_LinearTerm: _bindgen_ty_146 = 6;
pub const kDistortionParam_SquaredTerm: _bindgen_ty_146 = 7;
pub const kDistortionParam_CubicTerm: _bindgen_ty_146 = 8;
pub const kDistortionParam_PolynomialMix: _bindgen_ty_146 = 9;
pub const kDistortionParam_RingModFreq1: _bindgen_ty_146 = 10;
pub const kDistortionParam_RingModFreq2: _bindgen_ty_146 = 11;
pub const kDistortionParam_RingModBalance: _bindgen_ty_146 = 12;
pub const kDistortionParam_RingModMix: _bindgen_ty_146 = 13;
pub const kDistortionParam_SoftClipGain: _bindgen_ty_146 = 14;
pub const kDistortionParam_FinalMix: _bindgen_ty_146 = 15;
pub type _bindgen_ty_146 = AudioUnitParameterID;
pub const kDelayParam_WetDryMix: _bindgen_ty_147 = 0;
pub const kDelayParam_DelayTime: _bindgen_ty_147 = 1;
pub const kDelayParam_Feedback: _bindgen_ty_147 = 2;
pub const kDelayParam_LopassCutoff: _bindgen_ty_147 = 3;
pub type _bindgen_ty_147 = AudioUnitParameterID;
pub const kSampleDelayParam_DelayFrames: _bindgen_ty_148 = 0;
pub type _bindgen_ty_148 = AudioUnitParameterID;
pub const kAUNBandEQParam_GlobalGain: _bindgen_ty_149 = 0;
pub const kAUNBandEQParam_BypassBand: _bindgen_ty_149 = 1000;
pub const kAUNBandEQParam_FilterType: _bindgen_ty_149 = 2000;
pub const kAUNBandEQParam_Frequency: _bindgen_ty_149 = 3000;
pub const kAUNBandEQParam_Gain: _bindgen_ty_149 = 4000;
pub const kAUNBandEQParam_Bandwidth: _bindgen_ty_149 = 5000;
pub type _bindgen_ty_149 = AudioUnitParameterID;
pub const kAUNBandEQFilterType_Parametric: _bindgen_ty_150 = 0;
pub const kAUNBandEQFilterType_2ndOrderButterworthLowPass: _bindgen_ty_150 = 1;
pub const kAUNBandEQFilterType_2ndOrderButterworthHighPass: _bindgen_ty_150 = 2;
pub const kAUNBandEQFilterType_ResonantLowPass: _bindgen_ty_150 = 3;
pub const kAUNBandEQFilterType_ResonantHighPass: _bindgen_ty_150 = 4;
pub const kAUNBandEQFilterType_BandPass: _bindgen_ty_150 = 5;
pub const kAUNBandEQFilterType_BandStop: _bindgen_ty_150 = 6;
pub const kAUNBandEQFilterType_LowShelf: _bindgen_ty_150 = 7;
pub const kAUNBandEQFilterType_HighShelf: _bindgen_ty_150 = 8;
pub const kAUNBandEQFilterType_ResonantLowShelf: _bindgen_ty_150 = 9;
pub const kAUNBandEQFilterType_ResonantHighShelf: _bindgen_ty_150 = 10;
pub const kNumAUNBandEQFilterTypes: _bindgen_ty_150 = 11;
pub type _bindgen_ty_150 = ::std::os::raw::c_long;
pub const kRoundTripAACParam_Format: _bindgen_ty_151 = 0;
pub const kRoundTripAACParam_EncodingStrategy: _bindgen_ty_151 = 1;
pub const kRoundTripAACParam_RateOrQuality: _bindgen_ty_151 = 2;
pub type _bindgen_ty_151 = AudioUnitParameterID;
pub const kAUSoundIsolationParam_WetDryMixPercent: _bindgen_ty_152 = 0;
pub const kAUSoundIsolationParam_SoundToIsolate: _bindgen_ty_152 = 1;
pub type _bindgen_ty_152 = AudioUnitParameterID;
pub const kAUSoundIsolationSoundType_Voice: _bindgen_ty_153 = 1;
pub type _bindgen_ty_153 = ::std::os::raw::c_long;
pub const kRandomParam_BoundA: _bindgen_ty_154 = 0;
pub const kRandomParam_BoundB: _bindgen_ty_154 = 1;
pub const kRandomParam_Curve: _bindgen_ty_154 = 2;
pub type _bindgen_ty_154 = AudioUnitParameterID;
pub const kReverb2Param_DryWetMix: _bindgen_ty_155 = 0;
pub const kReverb2Param_Gain: _bindgen_ty_155 = 1;
pub const kReverb2Param_MinDelayTime: _bindgen_ty_155 = 2;
pub const kReverb2Param_MaxDelayTime: _bindgen_ty_155 = 3;
pub const kReverb2Param_DecayTimeAt0Hz: _bindgen_ty_155 = 4;
pub const kReverb2Param_DecayTimeAtNyquist: _bindgen_ty_155 = 5;
pub const kReverb2Param_RandomizeReflections: _bindgen_ty_155 = 6;
pub type _bindgen_ty_155 = AudioUnitParameterID;
pub type MusicDeviceInstrumentID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MusicDeviceStdNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NoteParamsControlValue {
    pub mID: AudioUnitParameterID,
    pub mValue: AudioUnitParameterValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MusicDeviceNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
    pub mControls: [NoteParamsControlValue; 1usize],
}
pub const kMusicNoteEvent_UseGroupInstrument: _bindgen_ty_156 = 4294967295;
pub const kMusicNoteEvent_Unused: _bindgen_ty_156 = 4294967295;
pub type _bindgen_ty_156 = ::std::os::raw::c_uint;
pub type MusicDeviceGroupID = UInt32;
pub type NoteInstanceID = UInt32;
pub type MusicDeviceComponent = AudioComponentInstance;
extern "C" {
    pub fn MusicDeviceMIDIEvent(
        inUnit: MusicDeviceComponent,
        inStatus: UInt32,
        inData1: UInt32,
        inData2: UInt32,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceSysEx(
        inUnit: MusicDeviceComponent,
        inData: *const UInt8,
        inLength: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceMIDIEventList(
        inUnit: MusicDeviceComponent,
        inOffsetSampleFrame: UInt32,
        evtList: *const MIDIEventList,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceStartNote(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
        inGroupID: MusicDeviceGroupID,
        outNoteInstanceID: *mut NoteInstanceID,
        inOffsetSampleFrame: UInt32,
        inParams: *const MusicDeviceNoteParams,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceStopNote(
        inUnit: MusicDeviceComponent,
        inGroupID: MusicDeviceGroupID,
        inNoteInstanceID: NoteInstanceID,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus;
}
pub const kMusicDeviceRange: _bindgen_ty_157 = 256;
pub const kMusicDeviceMIDIEventSelect: _bindgen_ty_157 = 257;
pub const kMusicDeviceSysExSelect: _bindgen_ty_157 = 258;
pub const kMusicDevicePrepareInstrumentSelect: _bindgen_ty_157 = 259;
pub const kMusicDeviceReleaseInstrumentSelect: _bindgen_ty_157 = 260;
pub const kMusicDeviceStartNoteSelect: _bindgen_ty_157 = 261;
pub const kMusicDeviceStopNoteSelect: _bindgen_ty_157 = 262;
pub const kMusicDeviceMIDIEventListSelect: _bindgen_ty_157 = 263;
pub type _bindgen_ty_157 = ::std::os::raw::c_uint;
pub type MusicDeviceMIDIEventProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inStatus: UInt32,
        inData1: UInt32,
        inData2: UInt32,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus,
>;
pub type MusicDeviceSysExProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inData: *const UInt8,
        inLength: UInt32,
    ) -> OSStatus,
>;
pub type MusicDeviceStartNoteProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInstrument: MusicDeviceInstrumentID,
        inGroupID: MusicDeviceGroupID,
        outNoteInstanceID: *mut NoteInstanceID,
        inOffsetSampleFrame: UInt32,
        inParams: *const MusicDeviceNoteParams,
    ) -> OSStatus,
>;
pub type MusicDeviceStopNoteProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inGroupID: MusicDeviceGroupID,
        inNoteInstanceID: NoteInstanceID,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus,
>;
extern "C" {
    pub fn MusicDevicePrepareInstrument(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceReleaseInstrument(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAUGraph {
    _unused: [u8; 0],
}
pub type AUGraph = *mut OpaqueAUGraph;
pub type AUNode = SInt32;
pub const kAUGraphErr_NodeNotFound: _bindgen_ty_158 = -10860;
pub const kAUGraphErr_InvalidConnection: _bindgen_ty_158 = -10861;
pub const kAUGraphErr_OutputNodeErr: _bindgen_ty_158 = -10862;
pub const kAUGraphErr_CannotDoInCurrentContext: _bindgen_ty_158 = -10863;
pub const kAUGraphErr_InvalidAudioUnit: _bindgen_ty_158 = -10864;
pub type _bindgen_ty_158 = OSStatus;
extern "C" {
    pub fn NewAUGraph(outGraph: *mut AUGraph) -> OSStatus;
}
extern "C" {
    pub fn DisposeAUGraph(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphAddNode(
        inGraph: AUGraph,
        inDescription: *const AudioComponentDescription,
        outNode: *mut AUNode,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphRemoveNode(inGraph: AUGraph, inNode: AUNode) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeCount(inGraph: AUGraph, outNumberOfNodes: *mut UInt32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetIndNode(inGraph: AUGraph, inIndex: UInt32, outNode: *mut AUNode) -> OSStatus;
}
extern "C" {
    pub fn AUGraphNodeInfo(
        inGraph: AUGraph,
        inNode: AUNode,
        outDescription: *mut AudioComponentDescription,
        outAudioUnit: *mut AudioUnit,
    ) -> OSStatus;
}
pub const kAUNodeInteraction_Connection: _bindgen_ty_159 = 1;
pub const kAUNodeInteraction_InputCallback: _bindgen_ty_159 = 2;
pub type _bindgen_ty_159 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitNodeConnection {
    pub sourceNode: AUNode,
    pub sourceOutputNumber: UInt32,
    pub destNode: AUNode,
    pub destInputNumber: UInt32,
}
pub type AUNodeConnection = AudioUnitNodeConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUNodeRenderCallback {
    pub destNode: AUNode,
    pub destInputNumber: AudioUnitElement,
    pub cback: AURenderCallbackStruct,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AUNodeInteraction {
    pub __bindgen_anon_1: AUNodeInteraction__bindgen_ty_1,
    pub nodeInteractionType: UInt32,
    pub nodeInteraction: AUNodeInteraction__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AUNodeInteraction__bindgen_ty_1 {
    pub connection: AUNodeConnection,
    pub inputCallback: AUNodeRenderCallback,
}
extern "C" {
    pub fn AUGraphConnectNodeInput(
        inGraph: AUGraph,
        inSourceNode: AUNode,
        inSourceOutputNumber: UInt32,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphSetNodeInputCallback(
        inGraph: AUGraph,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
        inInputCallback: *const AURenderCallbackStruct,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphDisconnectNodeInput(
        inGraph: AUGraph,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphClearConnections(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNumberOfInteractions(
        inGraph: AUGraph,
        outNumInteractions: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetInteractionInfo(
        inGraph: AUGraph,
        inInteractionIndex: UInt32,
        outInteraction: *mut AUNodeInteraction,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphCountNodeInteractions(
        inGraph: AUGraph,
        inNode: AUNode,
        outNumInteractions: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeInteractions(
        inGraph: AUGraph,
        inNode: AUNode,
        ioNumInteractions: *mut UInt32,
        outInteractions: *mut AUNodeInteraction,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphUpdate(inGraph: AUGraph, outIsUpdated: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphOpen(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphClose(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphInitialize(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphUninitialize(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphStart(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphStop(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsOpen(inGraph: AUGraph, outIsOpen: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsInitialized(inGraph: AUGraph, outIsInitialized: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsRunning(inGraph: AUGraph, outIsRunning: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetCPULoad(inGraph: AUGraph, outAverageCPULoad: *mut Float32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetMaxCPULoad(inGraph: AUGraph, outMaxLoad: *mut Float32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphAddRenderNotify(
        inGraph: AUGraph,
        inCallback: AURenderCallback,
        inRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphRemoveRenderNotify(
        inGraph: AUGraph,
        inCallback: AURenderCallback,
        inRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioConverter {
    _unused: [u8; 0],
}
pub type AudioConverterRef = *mut OpaqueAudioConverter;
pub type AudioConverterPropertyID = UInt32;
pub const kAudioConverterPropertyMinimumInputBufferSize: _bindgen_ty_160 = 1835623027;
pub const kAudioConverterPropertyMinimumOutputBufferSize: _bindgen_ty_160 = 1836016243;
pub const kAudioConverterPropertyMaximumInputPacketSize: _bindgen_ty_160 = 2020175987;
pub const kAudioConverterPropertyMaximumOutputPacketSize: _bindgen_ty_160 = 2020569203;
pub const kAudioConverterPropertyCalculateInputBufferSize: _bindgen_ty_160 = 1667850867;
pub const kAudioConverterPropertyCalculateOutputBufferSize: _bindgen_ty_160 = 1668244083;
pub const kAudioConverterPropertyInputCodecParameters: _bindgen_ty_160 = 1768121456;
pub const kAudioConverterPropertyOutputCodecParameters: _bindgen_ty_160 = 1868784752;
pub const kAudioConverterSampleRateConverterComplexity: _bindgen_ty_160 = 1936876385;
pub const kAudioConverterSampleRateConverterQuality: _bindgen_ty_160 = 1936876401;
pub const kAudioConverterSampleRateConverterInitialPhase: _bindgen_ty_160 = 1936876400;
pub const kAudioConverterCodecQuality: _bindgen_ty_160 = 1667527029;
pub const kAudioConverterPrimeMethod: _bindgen_ty_160 = 1886547309;
pub const kAudioConverterPrimeInfo: _bindgen_ty_160 = 1886546285;
pub const kAudioConverterChannelMap: _bindgen_ty_160 = 1667788144;
pub const kAudioConverterDecompressionMagicCookie: _bindgen_ty_160 = 1684891491;
pub const kAudioConverterCompressionMagicCookie: _bindgen_ty_160 = 1668114275;
pub const kAudioConverterEncodeBitRate: _bindgen_ty_160 = 1651663220;
pub const kAudioConverterEncodeAdjustableSampleRate: _bindgen_ty_160 = 1634366322;
pub const kAudioConverterInputChannelLayout: _bindgen_ty_160 = 1768123424;
pub const kAudioConverterOutputChannelLayout: _bindgen_ty_160 = 1868786720;
pub const kAudioConverterApplicableEncodeBitRates: _bindgen_ty_160 = 1634034290;
pub const kAudioConverterAvailableEncodeBitRates: _bindgen_ty_160 = 1986355826;
pub const kAudioConverterApplicableEncodeSampleRates: _bindgen_ty_160 = 1634038642;
pub const kAudioConverterAvailableEncodeSampleRates: _bindgen_ty_160 = 1986360178;
pub const kAudioConverterAvailableEncodeChannelLayoutTags: _bindgen_ty_160 = 1634034540;
pub const kAudioConverterCurrentOutputStreamDescription: _bindgen_ty_160 = 1633906532;
pub const kAudioConverterCurrentInputStreamDescription: _bindgen_ty_160 = 1633904996;
pub const kAudioConverterPropertySettings: _bindgen_ty_160 = 1633906803;
pub const kAudioConverterPropertyBitDepthHint: _bindgen_ty_160 = 1633903204;
pub const kAudioConverterPropertyFormatList: _bindgen_ty_160 = 1718383476;
pub type _bindgen_ty_160 = AudioConverterPropertyID;
pub const kAudioConverterQuality_Max: _bindgen_ty_161 = 127;
pub const kAudioConverterQuality_High: _bindgen_ty_161 = 96;
pub const kAudioConverterQuality_Medium: _bindgen_ty_161 = 64;
pub const kAudioConverterQuality_Low: _bindgen_ty_161 = 32;
pub const kAudioConverterQuality_Min: _bindgen_ty_161 = 0;
pub type _bindgen_ty_161 = UInt32;
pub const kAudioConverterSampleRateConverterComplexity_Linear: _bindgen_ty_162 = 1818848869;
pub const kAudioConverterSampleRateConverterComplexity_Normal: _bindgen_ty_162 = 1852797549;
pub const kAudioConverterSampleRateConverterComplexity_Mastering: _bindgen_ty_162 = 1650553971;
pub const kAudioConverterSampleRateConverterComplexity_MinimumPhase: _bindgen_ty_162 = 1835626096;
pub type _bindgen_ty_162 = UInt32;
pub const kConverterPrimeMethod_Pre: _bindgen_ty_163 = 0;
pub const kConverterPrimeMethod_Normal: _bindgen_ty_163 = 1;
pub const kConverterPrimeMethod_None: _bindgen_ty_163 = 2;
pub type _bindgen_ty_163 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioConverterPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
pub const kAudioConverterErr_FormatNotSupported: _bindgen_ty_164 = 1718449215;
pub const kAudioConverterErr_OperationNotSupported: _bindgen_ty_164 = 1869627199;
pub const kAudioConverterErr_PropertyNotSupported: _bindgen_ty_164 = 1886547824;
pub const kAudioConverterErr_InvalidInputSize: _bindgen_ty_164 = 1768846202;
pub const kAudioConverterErr_InvalidOutputSize: _bindgen_ty_164 = 1869902714;
pub const kAudioConverterErr_UnspecifiedError: _bindgen_ty_164 = 2003329396;
pub const kAudioConverterErr_BadPropertySizeError: _bindgen_ty_164 = 561211770;
pub const kAudioConverterErr_RequiresPacketDescriptionsError: _bindgen_ty_164 = 561015652;
pub const kAudioConverterErr_InputSampleRateOutOfRange: _bindgen_ty_164 = 560558962;
pub const kAudioConverterErr_OutputSampleRateOutOfRange: _bindgen_ty_164 = 560952178;
pub type _bindgen_ty_164 = OSStatus;
pub const kAudioConverterErr_HardwareInUse: _bindgen_ty_165 = 1752656245;
pub const kAudioConverterErr_NoHardwarePermission: _bindgen_ty_165 = 1885696621;
pub type _bindgen_ty_165 = OSStatus;
extern "C" {
    pub fn AudioConverterNew(
        inSourceFormat: *const AudioStreamBasicDescription,
        inDestinationFormat: *const AudioStreamBasicDescription,
        outAudioConverter: *mut AudioConverterRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterNewSpecific(
        inSourceFormat: *const AudioStreamBasicDescription,
        inDestinationFormat: *const AudioStreamBasicDescription,
        inNumberClassDescriptions: UInt32,
        inClassDescriptions: *const AudioClassDescription,
        outAudioConverter: *mut AudioConverterRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterDispose(inAudioConverter: AudioConverterRef) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterReset(inAudioConverter: AudioConverterRef) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterGetPropertyInfo(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterGetProperty(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterSetProperty(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterConvertBuffer(
        inAudioConverter: AudioConverterRef,
        inInputDataSize: UInt32,
        inInputData: *const ::std::os::raw::c_void,
        ioOutputDataSize: *mut UInt32,
        outOutputData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub type AudioConverterComplexInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        inAudioConverter: AudioConverterRef,
        ioNumberDataPackets: *mut UInt32,
        ioData: *mut AudioBufferList,
        outDataPacketDescription: *mut *mut AudioStreamPacketDescription,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
extern "C" {
    pub fn AudioConverterFillComplexBuffer(
        inAudioConverter: AudioConverterRef,
        inInputDataProc: AudioConverterComplexInputDataProc,
        inInputDataProcUserData: *mut ::std::os::raw::c_void,
        ioOutputDataPacketSize: *mut UInt32,
        outOutputData: *mut AudioBufferList,
        outPacketDescription: *mut AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterConvertComplexBuffer(
        inAudioConverter: AudioConverterRef,
        inNumberPCMFrames: UInt32,
        inInputData: *const AudioBufferList,
        outOutputData: *mut AudioBufferList,
    ) -> OSStatus;
}
pub const kAudioConverterPropertyMaximumInputBufferSize: _bindgen_ty_166 = 2020172403;
pub const kAudioConverterSampleRateConverterAlgorithm: _bindgen_ty_166 = 1936876393;
pub type _bindgen_ty_166 = AudioConverterPropertyID;
pub const kAudioConverterPropertyCanResumeFromInterruption: _bindgen_ty_167 = 1668441705;
pub type _bindgen_ty_167 = AudioConverterPropertyID;
pub type AudioConverterInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        inAudioConverter: AudioConverterRef,
        ioDataSize: *mut UInt32,
        outData: *mut *mut ::std::os::raw::c_void,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileTypeID = UInt32;
pub const kAudioFileAIFFType: _bindgen_ty_168 = 1095321158;
pub const kAudioFileAIFCType: _bindgen_ty_168 = 1095321155;
pub const kAudioFileWAVEType: _bindgen_ty_168 = 1463899717;
pub const kAudioFileRF64Type: _bindgen_ty_168 = 1380333108;
pub const kAudioFileBW64Type: _bindgen_ty_168 = 1113011764;
pub const kAudioFileWave64Type: _bindgen_ty_168 = 1463170150;
pub const kAudioFileSoundDesigner2Type: _bindgen_ty_168 = 1399075430;
pub const kAudioFileNextType: _bindgen_ty_168 = 1315264596;
pub const kAudioFileMP3Type: _bindgen_ty_168 = 1297106739;
pub const kAudioFileMP2Type: _bindgen_ty_168 = 1297106738;
pub const kAudioFileMP1Type: _bindgen_ty_168 = 1297106737;
pub const kAudioFileAC3Type: _bindgen_ty_168 = 1633889587;
pub const kAudioFileAAC_ADTSType: _bindgen_ty_168 = 1633973363;
pub const kAudioFileMPEG4Type: _bindgen_ty_168 = 1836069990;
pub const kAudioFileM4AType: _bindgen_ty_168 = 1832149350;
pub const kAudioFileM4BType: _bindgen_ty_168 = 1832149606;
pub const kAudioFileCAFType: _bindgen_ty_168 = 1667327590;
pub const kAudioFile3GPType: _bindgen_ty_168 = 862417008;
pub const kAudioFile3GP2Type: _bindgen_ty_168 = 862416946;
pub const kAudioFileAMRType: _bindgen_ty_168 = 1634562662;
pub const kAudioFileFLACType: _bindgen_ty_168 = 1718378851;
pub const kAudioFileLATMInLOASType: _bindgen_ty_168 = 1819238771;
pub type _bindgen_ty_168 = AudioFileTypeID;
pub const kAudioFileUnspecifiedError: _bindgen_ty_169 = 2003334207;
pub const kAudioFileUnsupportedFileTypeError: _bindgen_ty_169 = 1954115647;
pub const kAudioFileUnsupportedDataFormatError: _bindgen_ty_169 = 1718449215;
pub const kAudioFileUnsupportedPropertyError: _bindgen_ty_169 = 1886681407;
pub const kAudioFileBadPropertySizeError: _bindgen_ty_169 = 561211770;
pub const kAudioFilePermissionsError: _bindgen_ty_169 = 1886547263;
pub const kAudioFileNotOptimizedError: _bindgen_ty_169 = 1869640813;
pub const kAudioFileInvalidChunkError: _bindgen_ty_169 = 1667787583;
pub const kAudioFileDoesNotAllow64BitDataSizeError: _bindgen_ty_169 = 1868981823;
pub const kAudioFileInvalidPacketOffsetError: _bindgen_ty_169 = 1885563711;
pub const kAudioFileInvalidPacketDependencyError: _bindgen_ty_169 = 1684369471;
pub const kAudioFileInvalidFileError: _bindgen_ty_169 = 1685348671;
pub const kAudioFileOperationNotSupportedError: _bindgen_ty_169 = 1869627199;
pub const kAudioFileNotOpenError: _bindgen_ty_169 = -38;
pub const kAudioFileEndOfFileError: _bindgen_ty_169 = -39;
pub const kAudioFilePositionError: _bindgen_ty_169 = -40;
pub const kAudioFileFileNotFoundError: _bindgen_ty_169 = -43;
pub type _bindgen_ty_169 = OSStatus;
pub const AudioFileFlags_kAudioFileFlags_EraseFile: AudioFileFlags = 1;
pub const AudioFileFlags_kAudioFileFlags_DontPageAlignAudioData: AudioFileFlags = 2;
pub type AudioFileFlags = UInt32;
pub const AudioFilePermissions_kAudioFileReadPermission: AudioFilePermissions = 1;
pub const AudioFilePermissions_kAudioFileWritePermission: AudioFilePermissions = 2;
pub const AudioFilePermissions_kAudioFileReadWritePermission: AudioFilePermissions = 3;
pub type AudioFilePermissions = SInt8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioFileID {
    _unused: [u8; 0],
}
pub type AudioFileID = *mut OpaqueAudioFileID;
pub type AudioFilePropertyID = UInt32;
pub const kAudioFileLoopDirection_NoLooping: _bindgen_ty_170 = 0;
pub const kAudioFileLoopDirection_Forward: _bindgen_ty_170 = 1;
pub const kAudioFileLoopDirection_ForwardAndBackward: _bindgen_ty_170 = 2;
pub const kAudioFileLoopDirection_Backward: _bindgen_ty_170 = 3;
pub type _bindgen_ty_170 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFile_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: UInt8,
    pub mSeconds: UInt8,
    pub mFrames: UInt8,
    pub mSubFrameSampleOffset: UInt32,
}
pub const kAudioFileMarkerType_Generic: _bindgen_ty_171 = 0;
pub type _bindgen_ty_171 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileMarker {
    pub mFramePosition: Float64,
    pub mName: CFStringRef,
    pub mMarkerID: SInt32,
    pub mSMPTETime: AudioFile_SMPTE_Time,
    pub mType: UInt32,
    pub mReserved: UInt16,
    pub mChannel: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileMarkerList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
pub const AudioFileRegionFlags_kAudioFileRegionFlag_LoopEnable: AudioFileRegionFlags = 1;
pub const AudioFileRegionFlags_kAudioFileRegionFlag_PlayForward: AudioFileRegionFlags = 2;
pub const AudioFileRegionFlags_kAudioFileRegionFlag_PlayBackward: AudioFileRegionFlags = 4;
pub type AudioFileRegionFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileRegion {
    pub mRegionID: UInt32,
    pub mName: CFStringRef,
    pub mFlags: AudioFileRegionFlags,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileRegionList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [AudioFileRegion; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFramePacketTranslation {
    pub mFrame: SInt64,
    pub mPacket: SInt64,
    pub mFrameOffsetInPacket: UInt32,
}
pub const AudioBytePacketTranslationFlags_kBytePacketTranslationFlag_IsEstimate:
    AudioBytePacketTranslationFlags = 1;
pub type AudioBytePacketTranslationFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBytePacketTranslation {
    pub mByte: SInt64,
    pub mPacket: SInt64,
    pub mByteOffsetInPacket: UInt32,
    pub mFlags: AudioBytePacketTranslationFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFilePacketTableInfo {
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPacketRangeByteCountTranslation {
    pub mPacket: SInt64,
    pub mPacketCount: SInt64,
    pub mByteCountUpperBound: SInt64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPacketRollDistanceTranslation {
    pub mPacket: SInt64,
    pub mRollDistance: SInt64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioIndependentPacketTranslation {
    pub mPacket: SInt64,
    pub mIndependentlyDecodablePacket: SInt64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPacketDependencyInfoTranslation {
    pub mPacket: SInt64,
    pub mIsIndependentlyDecodable: UInt32,
    pub mNumberPrerollPackets: UInt32,
}
extern "C" {
    pub fn AudioFileCreateWithURL(
        inFileRef: CFURLRef,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOpenURL(
        inFileRef: CFURLRef,
        inPermissions: AudioFilePermissions,
        inFileTypeHint: AudioFileTypeID,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
pub type AudioFile_ReadProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inPosition: SInt64,
        requestCount: UInt32,
        buffer: *mut ::std::os::raw::c_void,
        actualCount: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFile_WriteProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inPosition: SInt64,
        requestCount: UInt32,
        buffer: *const ::std::os::raw::c_void,
        actualCount: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFile_GetSizeProc = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void) -> SInt64,
>;
pub type AudioFile_SetSizeProc = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void, inSize: SInt64) -> OSStatus,
>;
extern "C" {
    pub fn AudioFileInitializeWithCallbacks(
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOpenWithCallbacks(
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileTypeHint: AudioFileTypeID,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileClose(inAudioFile: AudioFileID) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOptimize(inAudioFile: AudioFileID) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadBytes(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileWriteBytes(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadPacketData(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        ioNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadPackets(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        outNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileWritePackets(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inNumBytes: UInt32,
        inPacketDescriptions: *const AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileCountUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        outNumberItems: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetUserDataSize(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        outUserDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        ioUserDataSize: *mut UInt32,
        outUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileSetUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        inUserDataSize: UInt32,
        inUserData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileRemoveUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
    ) -> OSStatus;
}
pub const kAudioFilePropertyFileFormat: _bindgen_ty_172 = 1717988724;
pub const kAudioFilePropertyDataFormat: _bindgen_ty_172 = 1684434292;
pub const kAudioFilePropertyIsOptimized: _bindgen_ty_172 = 1869640813;
pub const kAudioFilePropertyMagicCookieData: _bindgen_ty_172 = 1835493731;
pub const kAudioFilePropertyAudioDataByteCount: _bindgen_ty_172 = 1650683508;
pub const kAudioFilePropertyAudioDataPacketCount: _bindgen_ty_172 = 1885564532;
pub const kAudioFilePropertyMaximumPacketSize: _bindgen_ty_172 = 1886616165;
pub const kAudioFilePropertyDataOffset: _bindgen_ty_172 = 1685022310;
pub const kAudioFilePropertyChannelLayout: _bindgen_ty_172 = 1668112752;
pub const kAudioFilePropertyDeferSizeUpdates: _bindgen_ty_172 = 1685289589;
pub const kAudioFilePropertyDataFormatName: _bindgen_ty_172 = 1718512997;
pub const kAudioFilePropertyMarkerList: _bindgen_ty_172 = 1835756659;
pub const kAudioFilePropertyRegionList: _bindgen_ty_172 = 1919380595;
pub const kAudioFilePropertyPacketToFrame: _bindgen_ty_172 = 1886086770;
pub const kAudioFilePropertyFrameToPacket: _bindgen_ty_172 = 1718775915;
pub const kAudioFilePropertyRestrictsRandomAccess: _bindgen_ty_172 = 1920098672;
pub const kAudioFilePropertyPacketToRollDistance: _bindgen_ty_172 = 1886089836;
pub const kAudioFilePropertyPreviousIndependentPacket: _bindgen_ty_172 = 1885957732;
pub const kAudioFilePropertyNextIndependentPacket: _bindgen_ty_172 = 1852403300;
pub const kAudioFilePropertyPacketToDependencyInfo: _bindgen_ty_172 = 1886086256;
pub const kAudioFilePropertyPacketToByte: _bindgen_ty_172 = 1886085753;
pub const kAudioFilePropertyByteToPacket: _bindgen_ty_172 = 1652125803;
pub const kAudioFilePropertyChunkIDs: _bindgen_ty_172 = 1667787108;
pub const kAudioFilePropertyInfoDictionary: _bindgen_ty_172 = 1768842863;
pub const kAudioFilePropertyPacketTableInfo: _bindgen_ty_172 = 1886283375;
pub const kAudioFilePropertyFormatList: _bindgen_ty_172 = 1718383476;
pub const kAudioFilePropertyPacketSizeUpperBound: _bindgen_ty_172 = 1886090594;
pub const kAudioFilePropertyPacketRangeByteCountUpperBound: _bindgen_ty_172 = 1886549346;
pub const kAudioFilePropertyReserveDuration: _bindgen_ty_172 = 1920168566;
pub const kAudioFilePropertyEstimatedDuration: _bindgen_ty_172 = 1701082482;
pub const kAudioFilePropertyBitRate: _bindgen_ty_172 = 1651663220;
pub const kAudioFilePropertyID3Tag: _bindgen_ty_172 = 1768174452;
pub const kAudioFilePropertyID3TagOffset: _bindgen_ty_172 = 1768174447;
pub const kAudioFilePropertySourceBitDepth: _bindgen_ty_172 = 1935832164;
pub const kAudioFilePropertyAlbumArtwork: _bindgen_ty_172 = 1633776244;
pub const kAudioFilePropertyAudioTrackCount: _bindgen_ty_172 = 1635017588;
pub const kAudioFilePropertyUseAudioTrack: _bindgen_ty_172 = 1969321067;
pub type _bindgen_ty_172 = AudioFilePropertyID;
extern "C" {
    pub fn AudioFileGetPropertyInfo(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        outDataSize: *mut UInt32,
        isWritable: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetProperty(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        ioDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileSetProperty(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        inDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioFileGlobalInfo_ReadableTypes: _bindgen_ty_173 = 1634103910;
pub const kAudioFileGlobalInfo_WritableTypes: _bindgen_ty_173 = 1634105190;
pub const kAudioFileGlobalInfo_FileTypeName: _bindgen_ty_173 = 1718906477;
pub const kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat: _bindgen_ty_173 = 1935960420;
pub const kAudioFileGlobalInfo_AvailableFormatIDs: _bindgen_ty_173 = 1718446436;
pub const kAudioFileGlobalInfo_AllExtensions: _bindgen_ty_173 = 1634498676;
pub const kAudioFileGlobalInfo_AllHFSTypeCodes: _bindgen_ty_173 = 1634231923;
pub const kAudioFileGlobalInfo_AllUTIs: _bindgen_ty_173 = 1635087465;
pub const kAudioFileGlobalInfo_AllMIMETypes: _bindgen_ty_173 = 1634560365;
pub const kAudioFileGlobalInfo_ExtensionsForType: _bindgen_ty_173 = 1717926004;
pub const kAudioFileGlobalInfo_HFSTypeCodesForType: _bindgen_ty_173 = 1718118003;
pub const kAudioFileGlobalInfo_UTIsForType: _bindgen_ty_173 = 1718973545;
pub const kAudioFileGlobalInfo_MIMETypesForType: _bindgen_ty_173 = 1718446445;
pub const kAudioFileGlobalInfo_TypesForMIMEType: _bindgen_ty_173 = 1953327469;
pub const kAudioFileGlobalInfo_TypesForUTI: _bindgen_ty_173 = 1953854569;
pub const kAudioFileGlobalInfo_TypesForHFSTypeCode: _bindgen_ty_173 = 1952999027;
pub const kAudioFileGlobalInfo_TypesForExtension: _bindgen_ty_173 = 1952807028;
pub type _bindgen_ty_173 = AudioFilePropertyID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileTypeAndFormatID {
    pub mFileType: AudioFileTypeID,
    pub mFormatID: UInt32,
}
extern "C" {
    pub fn AudioFileGetGlobalInfoSize(
        inPropertyID: AudioFilePropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *mut ::std::os::raw::c_void,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetGlobalInfo(
        inPropertyID: AudioFilePropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const AudioFileStreamPropertyFlags_kAudioFileStreamPropertyFlag_PropertyIsCached:
    AudioFileStreamPropertyFlags = 1;
pub const AudioFileStreamPropertyFlags_kAudioFileStreamPropertyFlag_CacheProperty:
    AudioFileStreamPropertyFlags = 2;
pub type AudioFileStreamPropertyFlags = UInt32;
pub const AudioFileStreamParseFlags_kAudioFileStreamParseFlag_Discontinuity:
    AudioFileStreamParseFlags = 1;
pub type AudioFileStreamParseFlags = UInt32;
pub const AudioFileStreamSeekFlags_kAudioFileStreamSeekFlag_OffsetIsEstimated:
    AudioFileStreamSeekFlags = 1;
pub type AudioFileStreamSeekFlags = UInt32;
pub type AudioFileStreamPropertyID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioFileStreamID {
    _unused: [u8; 0],
}
pub type AudioFileStreamID = *mut OpaqueAudioFileStreamID;
pub type AudioFileStream_PropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        ioFlags: *mut AudioFileStreamPropertyFlags,
    ),
>;
pub type AudioFileStream_PacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inNumberBytes: UInt32,
        inNumberPackets: UInt32,
        inInputData: *const ::std::os::raw::c_void,
        inPacketDescriptions: *mut AudioStreamPacketDescription,
    ),
>;
pub const kAudioFileStreamError_UnsupportedFileType: _bindgen_ty_174 = 1954115647;
pub const kAudioFileStreamError_UnsupportedDataFormat: _bindgen_ty_174 = 1718449215;
pub const kAudioFileStreamError_UnsupportedProperty: _bindgen_ty_174 = 1886681407;
pub const kAudioFileStreamError_BadPropertySize: _bindgen_ty_174 = 561211770;
pub const kAudioFileStreamError_NotOptimized: _bindgen_ty_174 = 1869640813;
pub const kAudioFileStreamError_InvalidPacketOffset: _bindgen_ty_174 = 1885563711;
pub const kAudioFileStreamError_InvalidFile: _bindgen_ty_174 = 1685348671;
pub const kAudioFileStreamError_ValueUnknown: _bindgen_ty_174 = 1970170687;
pub const kAudioFileStreamError_DataUnavailable: _bindgen_ty_174 = 1836020325;
pub const kAudioFileStreamError_IllegalOperation: _bindgen_ty_174 = 1852797029;
pub const kAudioFileStreamError_UnspecifiedError: _bindgen_ty_174 = 2003334207;
pub const kAudioFileStreamError_DiscontinuityCantRecover: _bindgen_ty_174 = 1685283617;
pub type _bindgen_ty_174 = OSStatus;
pub const kAudioFileStreamProperty_ReadyToProducePackets: _bindgen_ty_175 = 1919247481;
pub const kAudioFileStreamProperty_FileFormat: _bindgen_ty_175 = 1717988724;
pub const kAudioFileStreamProperty_DataFormat: _bindgen_ty_175 = 1684434292;
pub const kAudioFileStreamProperty_FormatList: _bindgen_ty_175 = 1718383476;
pub const kAudioFileStreamProperty_MagicCookieData: _bindgen_ty_175 = 1835493731;
pub const kAudioFileStreamProperty_AudioDataByteCount: _bindgen_ty_175 = 1650683508;
pub const kAudioFileStreamProperty_AudioDataPacketCount: _bindgen_ty_175 = 1885564532;
pub const kAudioFileStreamProperty_MaximumPacketSize: _bindgen_ty_175 = 1886616165;
pub const kAudioFileStreamProperty_DataOffset: _bindgen_ty_175 = 1685022310;
pub const kAudioFileStreamProperty_ChannelLayout: _bindgen_ty_175 = 1668112752;
pub const kAudioFileStreamProperty_PacketToFrame: _bindgen_ty_175 = 1886086770;
pub const kAudioFileStreamProperty_FrameToPacket: _bindgen_ty_175 = 1718775915;
pub const kAudioFileStreamProperty_RestrictsRandomAccess: _bindgen_ty_175 = 1920098672;
pub const kAudioFileStreamProperty_PacketToRollDistance: _bindgen_ty_175 = 1886089836;
pub const kAudioFileStreamProperty_PreviousIndependentPacket: _bindgen_ty_175 = 1885957732;
pub const kAudioFileStreamProperty_NextIndependentPacket: _bindgen_ty_175 = 1852403300;
pub const kAudioFileStreamProperty_PacketToDependencyInfo: _bindgen_ty_175 = 1886086256;
pub const kAudioFileStreamProperty_PacketToByte: _bindgen_ty_175 = 1886085753;
pub const kAudioFileStreamProperty_ByteToPacket: _bindgen_ty_175 = 1652125803;
pub const kAudioFileStreamProperty_PacketTableInfo: _bindgen_ty_175 = 1886283375;
pub const kAudioFileStreamProperty_PacketSizeUpperBound: _bindgen_ty_175 = 1886090594;
pub const kAudioFileStreamProperty_AverageBytesPerPacket: _bindgen_ty_175 = 1633841264;
pub const kAudioFileStreamProperty_BitRate: _bindgen_ty_175 = 1651663220;
pub const kAudioFileStreamProperty_InfoDictionary: _bindgen_ty_175 = 1768842863;
pub type _bindgen_ty_175 = AudioFileStreamPropertyID;
extern "C" {
    pub fn AudioFileStreamOpen(
        inClientData: *mut ::std::os::raw::c_void,
        inPropertyListenerProc: AudioFileStream_PropertyListenerProc,
        inPacketsProc: AudioFileStream_PacketsProc,
        inFileTypeHint: AudioFileTypeID,
        outAudioFileStream: *mut AudioFileStreamID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamParseBytes(
        inAudioFileStream: AudioFileStreamID,
        inDataByteSize: UInt32,
        inData: *const ::std::os::raw::c_void,
        inFlags: AudioFileStreamParseFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamSeek(
        inAudioFileStream: AudioFileStreamID,
        inPacketOffset: SInt64,
        outDataByteOffset: *mut SInt64,
        ioFlags: *mut AudioFileStreamSeekFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamGetPropertyInfo(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        outPropertyDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamGetProperty(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamSetProperty(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamClose(inAudioFileStream: AudioFileStreamID) -> OSStatus;
}
pub type AudioFormatPropertyID = UInt32;
pub const AudioPanningMode_kPanningMode_SoundField: AudioPanningMode = 3;
pub const AudioPanningMode_kPanningMode_VectorBasedPanning: AudioPanningMode = 4;
pub type AudioPanningMode = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPanningInfo {
    pub mPanningMode: AudioPanningMode,
    pub mCoordinateFlags: UInt32,
    pub mCoordinates: [Float32; 3usize],
    pub mGainScale: Float32,
    pub mOutputChannelMap: *const AudioChannelLayout,
}
pub const AudioBalanceFadeType_kAudioBalanceFadeType_MaxUnityGain: AudioBalanceFadeType = 0;
pub const AudioBalanceFadeType_kAudioBalanceFadeType_EqualPower: AudioBalanceFadeType = 1;
pub type AudioBalanceFadeType = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBalanceFade {
    pub mLeftRightBalance: Float32,
    pub mBackFrontFade: Float32,
    pub mType: AudioBalanceFadeType,
    pub mChannelLayout: *const AudioChannelLayout,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::std::os::raw::c_void,
    pub mMagicCookieSize: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedAudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::std::os::raw::c_void,
    pub mMagicCookieSize: UInt32,
    pub mClassDescription: AudioClassDescription,
}
pub const kAudioFormatProperty_FormatInfo: _bindgen_ty_176 = 1718449257;
pub const kAudioFormatProperty_FormatName: _bindgen_ty_176 = 1718509933;
pub const kAudioFormatProperty_EncodeFormatIDs: _bindgen_ty_176 = 1633906534;
pub const kAudioFormatProperty_DecodeFormatIDs: _bindgen_ty_176 = 1633904998;
pub const kAudioFormatProperty_FormatList: _bindgen_ty_176 = 1718383476;
pub const kAudioFormatProperty_ASBDFromESDS: _bindgen_ty_176 = 1702064996;
pub const kAudioFormatProperty_ChannelLayoutFromESDS: _bindgen_ty_176 = 1702060908;
pub const kAudioFormatProperty_OutputFormatList: _bindgen_ty_176 = 1868983411;
pub const kAudioFormatProperty_FirstPlayableFormatFromList: _bindgen_ty_176 = 1718642284;
pub const kAudioFormatProperty_FormatIsVBR: _bindgen_ty_176 = 1719034482;
pub const kAudioFormatProperty_FormatIsExternallyFramed: _bindgen_ty_176 = 1717925990;
pub const kAudioFormatProperty_FormatEmploysDependentPackets: _bindgen_ty_176 = 1717855600;
pub const kAudioFormatProperty_FormatIsEncrypted: _bindgen_ty_176 = 1668446576;
pub const kAudioFormatProperty_Encoders: _bindgen_ty_176 = 1635149166;
pub const kAudioFormatProperty_Decoders: _bindgen_ty_176 = 1635148901;
pub const kAudioFormatProperty_AvailableEncodeBitRates: _bindgen_ty_176 = 1634034290;
pub const kAudioFormatProperty_AvailableEncodeSampleRates: _bindgen_ty_176 = 1634038642;
pub const kAudioFormatProperty_AvailableEncodeChannelLayoutTags: _bindgen_ty_176 = 1634034540;
pub const kAudioFormatProperty_AvailableEncodeNumberChannels: _bindgen_ty_176 = 1635151459;
pub const kAudioFormatProperty_AvailableDecodeNumberChannels: _bindgen_ty_176 = 1633971811;
pub const kAudioFormatProperty_ASBDFromMPEGPacket: _bindgen_ty_176 = 1633971568;
pub const kAudioFormatProperty_BitmapForLayoutTag: _bindgen_ty_176 = 1651340391;
pub const kAudioFormatProperty_MatrixMixMap: _bindgen_ty_176 = 1835884912;
pub const kAudioFormatProperty_ChannelMap: _bindgen_ty_176 = 1667788144;
pub const kAudioFormatProperty_NumberOfChannelsForLayout: _bindgen_ty_176 = 1852008557;
pub const kAudioFormatProperty_AreChannelLayoutsEquivalent: _bindgen_ty_176 = 1667786097;
pub const kAudioFormatProperty_ChannelLayoutHash: _bindgen_ty_176 = 1667786849;
pub const kAudioFormatProperty_ValidateChannelLayout: _bindgen_ty_176 = 1986093932;
pub const kAudioFormatProperty_ChannelLayoutForTag: _bindgen_ty_176 = 1668116588;
pub const kAudioFormatProperty_TagForChannelLayout: _bindgen_ty_176 = 1668116596;
pub const kAudioFormatProperty_ChannelLayoutName: _bindgen_ty_176 = 1819242093;
pub const kAudioFormatProperty_ChannelLayoutSimpleName: _bindgen_ty_176 = 1819504237;
pub const kAudioFormatProperty_ChannelLayoutForBitmap: _bindgen_ty_176 = 1668116578;
pub const kAudioFormatProperty_ChannelName: _bindgen_ty_176 = 1668178285;
pub const kAudioFormatProperty_ChannelShortName: _bindgen_ty_176 = 1668509293;
pub const kAudioFormatProperty_TagsForNumberOfChannels: _bindgen_ty_176 = 1952540515;
pub const kAudioFormatProperty_PanningMatrix: _bindgen_ty_176 = 1885433453;
pub const kAudioFormatProperty_BalanceFade: _bindgen_ty_176 = 1650551910;
pub const kAudioFormatProperty_ID3TagSize: _bindgen_ty_176 = 1768174451;
pub const kAudioFormatProperty_ID3TagToDictionary: _bindgen_ty_176 = 1768174436;
pub type _bindgen_ty_176 = AudioFormatPropertyID;
pub const kAudioFormatProperty_HardwareCodecCapabilities: _bindgen_ty_177 = 1752654691;
pub type _bindgen_ty_177 = AudioFormatPropertyID;
pub const kAudioDecoderComponentType: _bindgen_ty_178 = 1633969507;
pub const kAudioEncoderComponentType: _bindgen_ty_178 = 1634037347;
pub type _bindgen_ty_178 = UInt32;
pub const kAppleSoftwareAudioCodecManufacturer: _bindgen_ty_179 = 1634758764;
pub const kAppleHardwareAudioCodecManufacturer: _bindgen_ty_179 = 1634756727;
pub type _bindgen_ty_179 = UInt32;
extern "C" {
    pub fn AudioFormatGetPropertyInfo(
        inPropertyID: AudioFormatPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertyDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFormatGetProperty(
        inPropertyID: AudioFormatPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioFormatUnspecifiedError: _bindgen_ty_180 = 2003329396;
pub const kAudioFormatUnsupportedPropertyError: _bindgen_ty_180 = 1886547824;
pub const kAudioFormatBadPropertySizeError: _bindgen_ty_180 = 561211770;
pub const kAudioFormatBadSpecifierSizeError: _bindgen_ty_180 = 561213539;
pub const kAudioFormatUnsupportedDataFormatError: _bindgen_ty_180 = 1718449215;
pub const kAudioFormatUnknownFormatError: _bindgen_ty_180 = 560360820;
pub type _bindgen_ty_180 = OSStatus;
pub type AudioQueuePropertyID = UInt32;
pub type AudioQueueParameterID = UInt32;
pub type AudioQueueParameterValue = Float32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueue {
    _unused: [u8; 0],
}
pub type AudioQueueRef = *mut OpaqueAudioQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueueTimeline {
    _unused: [u8; 0],
}
pub type AudioQueueTimelineRef = *mut OpaqueAudioQueueTimeline;
pub const kAudioQueueErr_InvalidBuffer: _bindgen_ty_181 = -66687;
pub const kAudioQueueErr_BufferEmpty: _bindgen_ty_181 = -66686;
pub const kAudioQueueErr_DisposalPending: _bindgen_ty_181 = -66685;
pub const kAudioQueueErr_InvalidProperty: _bindgen_ty_181 = -66684;
pub const kAudioQueueErr_InvalidPropertySize: _bindgen_ty_181 = -66683;
pub const kAudioQueueErr_InvalidParameter: _bindgen_ty_181 = -66682;
pub const kAudioQueueErr_CannotStart: _bindgen_ty_181 = -66681;
pub const kAudioQueueErr_InvalidDevice: _bindgen_ty_181 = -66680;
pub const kAudioQueueErr_BufferInQueue: _bindgen_ty_181 = -66679;
pub const kAudioQueueErr_InvalidRunState: _bindgen_ty_181 = -66678;
pub const kAudioQueueErr_InvalidQueueType: _bindgen_ty_181 = -66677;
pub const kAudioQueueErr_Permissions: _bindgen_ty_181 = -66676;
pub const kAudioQueueErr_InvalidPropertyValue: _bindgen_ty_181 = -66675;
pub const kAudioQueueErr_PrimeTimedOut: _bindgen_ty_181 = -66674;
pub const kAudioQueueErr_CodecNotFound: _bindgen_ty_181 = -66673;
pub const kAudioQueueErr_InvalidCodecAccess: _bindgen_ty_181 = -66672;
pub const kAudioQueueErr_QueueInvalidated: _bindgen_ty_181 = -66671;
pub const kAudioQueueErr_TooManyTaps: _bindgen_ty_181 = -66670;
pub const kAudioQueueErr_InvalidTapContext: _bindgen_ty_181 = -66669;
pub const kAudioQueueErr_RecordUnderrun: _bindgen_ty_181 = -66668;
pub const kAudioQueueErr_InvalidTapType: _bindgen_ty_181 = -66667;
pub const kAudioQueueErr_BufferEnqueuedTwice: _bindgen_ty_181 = -66666;
pub const kAudioQueueErr_CannotStartYet: _bindgen_ty_181 = -66665;
pub const kAudioQueueErr_EnqueueDuringReset: _bindgen_ty_181 = -66632;
pub const kAudioQueueErr_InvalidOfflineMode: _bindgen_ty_181 = -66626;
pub type _bindgen_ty_181 = OSStatus;
pub const kAudioQueueProperty_IsRunning: _bindgen_ty_182 = 1634824814;
pub const kAudioQueueDeviceProperty_SampleRate: _bindgen_ty_182 = 1634825074;
pub const kAudioQueueDeviceProperty_NumberChannels: _bindgen_ty_182 = 1634821219;
pub const kAudioQueueProperty_CurrentDevice: _bindgen_ty_182 = 1634820964;
pub const kAudioQueueProperty_MagicCookie: _bindgen_ty_182 = 1634823523;
pub const kAudioQueueProperty_MaximumOutputPacketSize: _bindgen_ty_182 = 2020569203;
pub const kAudioQueueProperty_StreamDescription: _bindgen_ty_182 = 1634821748;
pub const kAudioQueueProperty_ChannelLayout: _bindgen_ty_182 = 1634820972;
pub const kAudioQueueProperty_EnableLevelMetering: _bindgen_ty_182 = 1634823525;
pub const kAudioQueueProperty_CurrentLevelMeter: _bindgen_ty_182 = 1634823542;
pub const kAudioQueueProperty_CurrentLevelMeterDB: _bindgen_ty_182 = 1634823524;
pub const kAudioQueueProperty_DecodeBufferSizeFrames: _bindgen_ty_182 = 1684234854;
pub const kAudioQueueProperty_ConverterError: _bindgen_ty_182 = 1902343781;
pub const kAudioQueueProperty_EnableTimePitch: _bindgen_ty_182 = 1902081136;
pub const kAudioQueueProperty_TimePitchAlgorithm: _bindgen_ty_182 = 1903456353;
pub const kAudioQueueProperty_TimePitchBypass: _bindgen_ty_182 = 1903456354;
pub type _bindgen_ty_182 = AudioQueuePropertyID;
pub const kAudioQueueTimePitchAlgorithm_Spectral: _bindgen_ty_183 = 1936745827;
pub const kAudioQueueTimePitchAlgorithm_TimeDomain: _bindgen_ty_183 = 1953064047;
pub const kAudioQueueTimePitchAlgorithm_Varispeed: _bindgen_ty_183 = 1987276900;
pub type _bindgen_ty_183 = UInt32;
pub const kAudioQueueTimePitchAlgorithm_LowQualityZeroLatency: _bindgen_ty_184 = 1819376236;
pub type _bindgen_ty_184 = UInt32;
pub const kAudioQueueProperty_HardwareCodecPolicy: _bindgen_ty_185 = 1634820976;
pub type _bindgen_ty_185 = AudioQueuePropertyID;
pub const kAudioQueueHardwareCodecPolicy_Default: _bindgen_ty_186 = 0;
pub const kAudioQueueHardwareCodecPolicy_UseSoftwareOnly: _bindgen_ty_186 = 1;
pub const kAudioQueueHardwareCodecPolicy_UseHardwareOnly: _bindgen_ty_186 = 2;
pub const kAudioQueueHardwareCodecPolicy_PreferSoftware: _bindgen_ty_186 = 3;
pub const kAudioQueueHardwareCodecPolicy_PreferHardware: _bindgen_ty_186 = 4;
pub type _bindgen_ty_186 = UInt32;
pub const kAudioQueueProperty_ChannelAssignments: _bindgen_ty_187 = 1634820961;
pub type _bindgen_ty_187 = AudioQueuePropertyID;
pub const kAudioQueueParam_Volume: _bindgen_ty_188 = 1;
pub const kAudioQueueParam_PlayRate: _bindgen_ty_188 = 2;
pub const kAudioQueueParam_Pitch: _bindgen_ty_188 = 3;
pub const kAudioQueueParam_VolumeRampTime: _bindgen_ty_188 = 4;
pub const kAudioQueueParam_Pan: _bindgen_ty_188 = 13;
pub type _bindgen_ty_188 = AudioQueueParameterID;
pub const AudioQueueProcessingTapFlags_kAudioQueueProcessingTap_PreEffects:
    AudioQueueProcessingTapFlags = 1;
pub const AudioQueueProcessingTapFlags_kAudioQueueProcessingTap_PostEffects:
    AudioQueueProcessingTapFlags = 2;
pub const AudioQueueProcessingTapFlags_kAudioQueueProcessingTap_Siphon:
    AudioQueueProcessingTapFlags = 4;
pub const AudioQueueProcessingTapFlags_kAudioQueueProcessingTap_StartOfStream:
    AudioQueueProcessingTapFlags = 256;
pub const AudioQueueProcessingTapFlags_kAudioQueueProcessingTap_EndOfStream:
    AudioQueueProcessingTapFlags = 512;
pub type AudioQueueProcessingTapFlags = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueBuffer {
    pub mAudioDataBytesCapacity: UInt32,
    pub mAudioData: *mut ::std::os::raw::c_void,
    pub mAudioDataByteSize: UInt32,
    pub mUserData: *mut ::std::os::raw::c_void,
    pub mPacketDescriptionCapacity: UInt32,
    pub mPacketDescriptions: *mut AudioStreamPacketDescription,
    pub mPacketDescriptionCount: UInt32,
}
pub type AudioQueueBufferRef = *mut AudioQueueBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueParameterEvent {
    pub mID: AudioQueueParameterID,
    pub mValue: AudioQueueParameterValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueLevelMeterState {
    pub mAveragePower: Float32,
    pub mPeakPower: Float32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueueProcessingTap {
    _unused: [u8; 0],
}
pub type AudioQueueProcessingTapRef = *mut OpaqueAudioQueueProcessingTap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueChannelAssignment {
    pub mDeviceUID: CFStringRef,
    pub mChannelNumber: UInt32,
}
pub type AudioQueueOutputCallbackBlock = *mut ::std::os::raw::c_void;
pub type AudioQueueInputCallbackBlock = *mut ::std::os::raw::c_void;
pub type AudioQueueOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
    ),
>;
pub type AudioQueueInputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inStartTime: *const AudioTimeStamp,
        inNumberPacketDescriptions: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
    ),
>;
pub type AudioQueuePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
    ),
>;
pub type AudioQueueProcessingTapCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inAQTap: AudioQueueProcessingTapRef,
        inNumberFrames: UInt32,
        ioTimeStamp: *mut AudioTimeStamp,
        ioFlags: *mut AudioQueueProcessingTapFlags,
        outNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ),
>;
extern "C" {
    pub fn AudioQueueNewOutput(
        inFormat: *const AudioStreamBasicDescription,
        inCallbackProc: AudioQueueOutputCallback,
        inUserData: *mut ::std::os::raw::c_void,
        inCallbackRunLoop: CFRunLoopRef,
        inCallbackRunLoopMode: CFStringRef,
        inFlags: UInt32,
        outAQ: *mut AudioQueueRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewInput(
        inFormat: *const AudioStreamBasicDescription,
        inCallbackProc: AudioQueueInputCallback,
        inUserData: *mut ::std::os::raw::c_void,
        inCallbackRunLoop: CFRunLoopRef,
        inCallbackRunLoopMode: CFStringRef,
        inFlags: UInt32,
        outAQ: *mut AudioQueueRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewOutputWithDispatchQueue(
        outAQ: *mut AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
        inCallbackDispatchQueue: NSObject,
        inCallbackBlock: AudioQueueOutputCallbackBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewInputWithDispatchQueue(
        outAQ: *mut AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
        inCallbackDispatchQueue: NSObject,
        inCallbackBlock: AudioQueueInputCallbackBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDispose(inAQ: AudioQueueRef, inImmediate: Boolean) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAllocateBuffer(
        inAQ: AudioQueueRef,
        inBufferByteSize: UInt32,
        outBuffer: *mut AudioQueueBufferRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAllocateBufferWithPacketDescriptions(
        inAQ: AudioQueueRef,
        inBufferByteSize: UInt32,
        inNumberPacketDescriptions: UInt32,
        outBuffer: *mut AudioQueueBufferRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueFreeBuffer(inAQ: AudioQueueRef, inBuffer: AudioQueueBufferRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueEnqueueBuffer(
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inNumPacketDescs: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueEnqueueBufferWithParameters(
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inNumPacketDescs: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
        inTrimFramesAtStart: UInt32,
        inTrimFramesAtEnd: UInt32,
        inNumParamValues: UInt32,
        inParamValues: *const AudioQueueParameterEvent,
        inStartTime: *const AudioTimeStamp,
        outActualStartTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueStart(inAQ: AudioQueueRef, inStartTime: *const AudioTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn AudioQueuePrime(
        inAQ: AudioQueueRef,
        inNumberOfFramesToPrepare: UInt32,
        outNumberOfFramesPrepared: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueStop(inAQ: AudioQueueRef, inImmediate: Boolean) -> OSStatus;
}
extern "C" {
    pub fn AudioQueuePause(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueFlush(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueReset(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetParameter(
        inAQ: AudioQueueRef,
        inParamID: AudioQueueParameterID,
        outValue: *mut AudioQueueParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetParameter(
        inAQ: AudioQueueRef,
        inParamID: AudioQueueParameterID,
        inValue: AudioQueueParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetProperty(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetProperty(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetPropertySize(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAddPropertyListener(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inProc: AudioQueuePropertyListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueRemovePropertyListener(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inProc: AudioQueuePropertyListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueCreateTimeline(
        inAQ: AudioQueueRef,
        outTimeline: *mut AudioQueueTimelineRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDisposeTimeline(
        inAQ: AudioQueueRef,
        inTimeline: AudioQueueTimelineRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetCurrentTime(
        inAQ: AudioQueueRef,
        inTimeline: AudioQueueTimelineRef,
        outTimeStamp: *mut AudioTimeStamp,
        outTimelineDiscontinuity: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceGetCurrentTime(
        inAQ: AudioQueueRef,
        outTimeStamp: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceTranslateTime(
        inAQ: AudioQueueRef,
        inTime: *const AudioTimeStamp,
        outTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceGetNearestStartTime(
        inAQ: AudioQueueRef,
        ioRequestedStartTime: *mut AudioTimeStamp,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetOfflineRenderFormat(
        inAQ: AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inLayout: *const AudioChannelLayout,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueOfflineRender(
        inAQ: AudioQueueRef,
        inTimestamp: *const AudioTimeStamp,
        ioBuffer: AudioQueueBufferRef,
        inNumberFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapNew(
        inAQ: AudioQueueRef,
        inCallback: AudioQueueProcessingTapCallback,
        inClientData: *mut ::std::os::raw::c_void,
        inFlags: AudioQueueProcessingTapFlags,
        outMaxFrames: *mut UInt32,
        outProcessingFormat: *mut AudioStreamBasicDescription,
        outAQTap: *mut AudioQueueProcessingTapRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapDispose(inAQTap: AudioQueueProcessingTapRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapGetSourceAudio(
        inAQTap: AudioQueueProcessingTapRef,
        inNumberFrames: UInt32,
        ioTimeStamp: *mut AudioTimeStamp,
        outFlags: *mut AudioQueueProcessingTapFlags,
        outNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapGetQueueTime(
        inAQTap: AudioQueueProcessingTapRef,
        outQueueSampleTime: *mut Float64,
        outQueueFrameCount: *mut UInt32,
    ) -> OSStatus;
}
pub const kAudioSessionNoError: _bindgen_ty_189 = 0;
pub const kAudioSessionNotInitialized: _bindgen_ty_189 = 560557673;
pub const kAudioSessionAlreadyInitialized: _bindgen_ty_189 = 1768843636;
pub const kAudioSessionInitializationError: _bindgen_ty_189 = 1768843583;
pub const kAudioSessionUnsupportedPropertyError: _bindgen_ty_189 = 1886681407;
pub const kAudioSessionBadPropertySizeError: _bindgen_ty_189 = 561211770;
pub const kAudioSessionNotActiveError: _bindgen_ty_189 = 560030580;
pub const kAudioServicesNoHardwareError: _bindgen_ty_189 = 1852794999;
pub const kAudioSessionNoCategorySet: _bindgen_ty_189 = 1063477620;
pub const kAudioSessionIncompatibleCategory: _bindgen_ty_189 = 560161140;
pub const kAudioSessionUnspecifiedError: _bindgen_ty_189 = 2003329396;
pub type _bindgen_ty_189 = ::std::os::raw::c_uint;
pub type AudioSessionPropertyID = UInt32;
pub const kAudioSessionBeginInterruption: _bindgen_ty_190 = 1;
pub const kAudioSessionEndInterruption: _bindgen_ty_190 = 0;
pub type _bindgen_ty_190 = ::std::os::raw::c_uint;
pub const kAudioSessionCategory_AmbientSound: _bindgen_ty_191 = 1634558569;
pub const kAudioSessionCategory_SoloAmbientSound: _bindgen_ty_191 = 1936682095;
pub const kAudioSessionCategory_MediaPlayback: _bindgen_ty_191 = 1835361385;
pub const kAudioSessionCategory_RecordAudio: _bindgen_ty_191 = 1919247201;
pub const kAudioSessionCategory_PlayAndRecord: _bindgen_ty_191 = 1886151026;
pub const kAudioSessionCategory_AudioProcessing: _bindgen_ty_191 = 1886547811;
pub type _bindgen_ty_191 = ::std::os::raw::c_uint;
pub const kAudioSessionOverrideAudioRoute_None: _bindgen_ty_192 = 0;
pub const kAudioSessionOverrideAudioRoute_Speaker: _bindgen_ty_192 = 1936747378;
pub type _bindgen_ty_192 = ::std::os::raw::c_uint;
pub const kAudioSessionRouteChangeReason_Unknown: _bindgen_ty_193 = 0;
pub const kAudioSessionRouteChangeReason_NewDeviceAvailable: _bindgen_ty_193 = 1;
pub const kAudioSessionRouteChangeReason_OldDeviceUnavailable: _bindgen_ty_193 = 2;
pub const kAudioSessionRouteChangeReason_CategoryChange: _bindgen_ty_193 = 3;
pub const kAudioSessionRouteChangeReason_Override: _bindgen_ty_193 = 4;
pub const kAudioSessionRouteChangeReason_WakeFromSleep: _bindgen_ty_193 = 6;
pub const kAudioSessionRouteChangeReason_NoSuitableRouteForCategory: _bindgen_ty_193 = 7;
pub const kAudioSessionRouteChangeReason_RouteConfigurationChange: _bindgen_ty_193 = 8;
pub type _bindgen_ty_193 = ::std::os::raw::c_uint;
extern "C" {
    pub static kAudioSession_RouteChangeKey_Reason: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteChangeKey_PreviousRouteDescription: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteChangeKey_CurrentRouteDescription: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Inputs: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Outputs: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Type: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_LineIn: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_BuiltInMic: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_HeadsetMic: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_BluetoothHFP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_USBAudio: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_LineOut: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_Headphones: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BluetoothHFP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BluetoothA2DP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BuiltInReceiver: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BuiltInSpeaker: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_USBAudio: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_HDMI: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_AirPlay: CFStringRef;
}
extern "C" {
    pub static kAudioSession_InputSourceKey_ID: CFStringRef;
}
extern "C" {
    pub static kAudioSession_InputSourceKey_Description: CFStringRef;
}
extern "C" {
    pub static kAudioSession_OutputDestinationKey_ID: CFStringRef;
}
extern "C" {
    pub static kAudioSession_OutputDestinationKey_Description: CFStringRef;
}
pub const kAudioSessionInterruptionType_ShouldResume: _bindgen_ty_194 = 1769108333;
pub const kAudioSessionInterruptionType_ShouldNotResume: _bindgen_ty_194 = 561148781;
pub type _bindgen_ty_194 = ::std::os::raw::c_uint;
pub type AudioSessionInterruptionType = UInt32;
pub const kAudioSessionMode_Default: _bindgen_ty_195 = 1684434036;
pub const kAudioSessionMode_VoiceChat: _bindgen_ty_195 = 1986225012;
pub const kAudioSessionMode_VideoRecording: _bindgen_ty_195 = 1987208036;
pub const kAudioSessionMode_Measurement: _bindgen_ty_195 = 1836281204;
pub const kAudioSessionMode_GameChat: _bindgen_ty_195 = 1735222132;
pub type _bindgen_ty_195 = ::std::os::raw::c_uint;
pub const kAudioSessionProperty_PreferredHardwareSampleRate: _bindgen_ty_196 = 1752658802;
pub const kAudioSessionProperty_PreferredHardwareIOBufferDuration: _bindgen_ty_196 = 1768907364;
pub const kAudioSessionProperty_AudioCategory: _bindgen_ty_196 = 1633902964;
pub const kAudioSessionProperty_AudioRouteChange: _bindgen_ty_196 = 1919902568;
pub const kAudioSessionProperty_CurrentHardwareSampleRate: _bindgen_ty_196 = 1667789682;
pub const kAudioSessionProperty_CurrentHardwareInputNumberChannels: _bindgen_ty_196 = 1667787107;
pub const kAudioSessionProperty_CurrentHardwareOutputNumberChannels: _bindgen_ty_196 = 1667788643;
pub const kAudioSessionProperty_CurrentHardwareOutputVolume: _bindgen_ty_196 = 1667788662;
pub const kAudioSessionProperty_CurrentHardwareInputLatency: _bindgen_ty_196 = 1667853428;
pub const kAudioSessionProperty_CurrentHardwareOutputLatency: _bindgen_ty_196 = 1668246644;
pub const kAudioSessionProperty_CurrentHardwareIOBufferDuration: _bindgen_ty_196 = 1667785316;
pub const kAudioSessionProperty_OtherAudioIsPlaying: _bindgen_ty_196 = 1869899890;
pub const kAudioSessionProperty_OverrideAudioRoute: _bindgen_ty_196 = 1870033508;
pub const kAudioSessionProperty_AudioInputAvailable: _bindgen_ty_196 = 1634296182;
pub const kAudioSessionProperty_ServerDied: _bindgen_ty_196 = 1684628836;
pub const kAudioSessionProperty_OtherMixableAudioShouldDuck: _bindgen_ty_196 = 1685414763;
pub const kAudioSessionProperty_OverrideCategoryMixWithOthers: _bindgen_ty_196 = 1668114808;
pub const kAudioSessionProperty_OverrideCategoryDefaultToSpeaker: _bindgen_ty_196 = 1668509803;
pub const kAudioSessionProperty_OverrideCategoryEnableBluetoothInput: _bindgen_ty_196 = 1667394677;
pub const kAudioSessionProperty_InterruptionType: _bindgen_ty_196 = 1954115685;
pub const kAudioSessionProperty_Mode: _bindgen_ty_196 = 1836016741;
pub const kAudioSessionProperty_InputSources: _bindgen_ty_196 = 1936876403;
pub const kAudioSessionProperty_OutputDestinations: _bindgen_ty_196 = 1685288051;
pub const kAudioSessionProperty_InputSource: _bindgen_ty_196 = 1769173603;
pub const kAudioSessionProperty_OutputDestination: _bindgen_ty_196 = 1868854132;
pub const kAudioSessionProperty_InputGainAvailable: _bindgen_ty_196 = 1768382838;
pub const kAudioSessionProperty_InputGainScalar: _bindgen_ty_196 = 1768387427;
pub const kAudioSessionProperty_AudioRouteDescription: _bindgen_ty_196 = 1668440434;
pub type _bindgen_ty_196 = ::std::os::raw::c_uint;
pub type AudioSessionInterruptionListener = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void, inInterruptionState: UInt32),
>;
pub type AudioSessionPropertyListener = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inID: AudioSessionPropertyID,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn AudioSessionInitialize(
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inInterruptionListener: AudioSessionInterruptionListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionSetActive(active: Boolean) -> OSStatus;
}
pub const kAudioSessionSetActiveFlag_NotifyOthersOnDeactivation: _bindgen_ty_197 = 1;
pub type _bindgen_ty_197 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioSessionSetActiveWithFlags(active: Boolean, inFlags: UInt32) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionGetProperty(
        inID: AudioSessionPropertyID,
        ioDataSize: *mut UInt32,
        outData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionSetProperty(
        inID: AudioSessionPropertyID,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionGetPropertySize(
        inID: AudioSessionPropertyID,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionAddPropertyListener(
        inID: AudioSessionPropertyID,
        inProc: AudioSessionPropertyListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionRemovePropertyListener(inID: AudioSessionPropertyID) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionRemovePropertyListenerWithUserData(
        inID: AudioSessionPropertyID,
        inProc: AudioSessionPropertyListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioSessionCategory_UserInterfaceSoundEffects: _bindgen_ty_198 = 1969841784;
pub const kAudioSessionCategory_LiveAudio: _bindgen_ty_198 = 1818850917;
pub type _bindgen_ty_198 = ::std::os::raw::c_uint;
pub const kAudioSessionProperty_AudioRoute: _bindgen_ty_199 = 1919907188;
pub type _bindgen_ty_199 = ::std::os::raw::c_uint;
pub const kAudioServicesNoError: _bindgen_ty_200 = 0;
pub const kAudioServicesUnsupportedPropertyError: _bindgen_ty_200 = 1886681407;
pub const kAudioServicesBadPropertySizeError: _bindgen_ty_200 = 561211770;
pub const kAudioServicesBadSpecifierSizeError: _bindgen_ty_200 = 561213539;
pub const kAudioServicesSystemSoundUnspecifiedError: _bindgen_ty_200 = -1500;
pub const kAudioServicesSystemSoundClientTimedOutError: _bindgen_ty_200 = -1501;
pub const kAudioServicesSystemSoundExceededMaximumDurationError: _bindgen_ty_200 = -1502;
pub type _bindgen_ty_200 = OSStatus;
pub type SystemSoundID = UInt32;
pub type AudioServicesPropertyID = UInt32;
pub type AudioServicesSystemSoundCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(ssID: SystemSoundID, clientData: *mut ::std::os::raw::c_void),
>;
pub const kSystemSoundID_Vibrate: _bindgen_ty_201 = 4095;
pub type _bindgen_ty_201 = SystemSoundID;
pub const kAudioServicesPropertyIsUISound: _bindgen_ty_202 = 1769174377;
pub const kAudioServicesPropertyCompletePlaybackIfAppDies: _bindgen_ty_202 = 1768318057;
pub type _bindgen_ty_202 = AudioServicesPropertyID;
extern "C" {
    pub fn AudioServicesCreateSystemSoundID(
        inFileURL: CFURLRef,
        outSystemSoundID: *mut SystemSoundID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesDisposeSystemSoundID(inSystemSoundID: SystemSoundID) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesPlayAlertSoundWithCompletion(
        inSystemSoundID: SystemSoundID,
        inCompletionBlock: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioServicesPlaySystemSoundWithCompletion(
        inSystemSoundID: SystemSoundID,
        inCompletionBlock: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioServicesGetPropertyInfo(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertyDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesGetProperty(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesSetProperty(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesPlayAlertSound(inSystemSoundID: SystemSoundID);
}
extern "C" {
    pub fn AudioServicesPlaySystemSound(inSystemSoundID: SystemSoundID);
}
extern "C" {
    pub fn AudioServicesAddSystemSoundCompletion(
        inSystemSoundID: SystemSoundID,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inCompletionRoutine: AudioServicesSystemSoundCompletionProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesRemoveSystemSoundCompletion(inSystemSoundID: SystemSoundID);
}
pub const kAUParameterListener_AnyParameter: _bindgen_ty_203 = 4294967295;
pub type _bindgen_ty_203 = AudioUnitParameterID;
pub const AudioUnitEventType_kAudioUnitEvent_ParameterValueChange: AudioUnitEventType = 0;
pub const AudioUnitEventType_kAudioUnitEvent_BeginParameterChangeGesture: AudioUnitEventType = 1;
pub const AudioUnitEventType_kAudioUnitEvent_EndParameterChangeGesture: AudioUnitEventType = 2;
pub const AudioUnitEventType_kAudioUnitEvent_PropertyChange: AudioUnitEventType = 3;
pub type AudioUnitEventType = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUListenerBase {
    _unused: [u8; 0],
}
pub type AUParameterListenerRef = *mut AUListenerBase;
pub type AUEventListenerRef = AUParameterListenerRef;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AudioUnitEvent {
    pub __bindgen_anon_1: AudioUnitEvent__bindgen_ty_1,
    pub mEventType: AudioUnitEventType,
    pub mArgument: AudioUnitEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AudioUnitEvent__bindgen_ty_1 {
    pub mParameter: AudioUnitParameter,
    pub mProperty: AudioUnitProperty,
}
pub type AUParameterListenerBlock = *mut ::std::os::raw::c_void;
pub type AUEventListenerBlock = *mut ::std::os::raw::c_void;
pub type AUParameterListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
        inValue: AudioUnitParameterValue,
    ),
>;
pub type AUEventListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
        inEventHostTime: UInt64,
        inParameterValue: AudioUnitParameterValue,
    ),
>;
extern "C" {
    pub fn AUListenerCreateWithDispatchQueue(
        outListener: *mut AUParameterListenerRef,
        inNotificationInterval: Float32,
        inDispatchQueue: NSObject,
        inBlock: AUParameterListenerBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerCreate(
        inProc: AUParameterListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inNotificationInterval: Float32,
        outListener: *mut AUParameterListenerRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerDispose(inListener: AUParameterListenerRef) -> OSStatus;
}
extern "C" {
    pub fn AUListenerAddParameter(
        inListener: AUParameterListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerRemoveParameter(
        inListener: AUParameterListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterSet(
        inSendingListener: AUParameterListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterListenerNotify(
        inSendingListener: AUParameterListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerCreateWithDispatchQueue(
        outListener: *mut AUEventListenerRef,
        inNotificationInterval: Float32,
        inValueChangeGranularity: Float32,
        inDispatchQueue: NSObject,
        inBlock: AUEventListenerBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerCreate(
        inProc: AUEventListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inNotificationInterval: Float32,
        inValueChangeGranularity: Float32,
        outListener: *mut AUEventListenerRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerAddEventType(
        inListener: AUEventListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerRemoveEventType(
        inListener: AUEventListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerNotify(
        inSendingListener: AUEventListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterValueFromLinear(
        inLinearValue: Float32,
        inParameter: *const AudioUnitParameter,
    ) -> AudioUnitParameterValue;
}
extern "C" {
    pub fn AUParameterValueToLinear(
        inParameterValue: AudioUnitParameterValue,
        inParameter: *const AudioUnitParameter,
    ) -> Float32;
}
extern "C" {
    pub fn AUParameterFormatValue(
        inParameterValue: Float64,
        inParameter: *const AudioUnitParameter,
        inTextBuffer: *mut ::std::os::raw::c_char,
        inDigits: UInt32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn AudioWorkIntervalCreate(
        name: *const ::std::os::raw::c_char,
        clock: os_clockid_t,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_interval_t;
}
pub const kCAF_FileType: _bindgen_ty_204 = 1667327590;
pub const kCAF_FileVersion_Initial: _bindgen_ty_204 = 1;
pub type _bindgen_ty_204 = UInt32;
pub const kCAF_StreamDescriptionChunkID: _bindgen_ty_205 = 1684370275;
pub const kCAF_AudioDataChunkID: _bindgen_ty_205 = 1684108385;
pub const kCAF_ChannelLayoutChunkID: _bindgen_ty_205 = 1667785070;
pub const kCAF_FillerChunkID: _bindgen_ty_205 = 1718773093;
pub const kCAF_MarkerChunkID: _bindgen_ty_205 = 1835102827;
pub const kCAF_RegionChunkID: _bindgen_ty_205 = 1919248238;
pub const kCAF_InstrumentChunkID: _bindgen_ty_205 = 1768846196;
pub const kCAF_MagicCookieID: _bindgen_ty_205 = 1802857321;
pub const kCAF_InfoStringsChunkID: _bindgen_ty_205 = 1768842863;
pub const kCAF_EditCommentsChunkID: _bindgen_ty_205 = 1701077876;
pub const kCAF_PacketTableChunkID: _bindgen_ty_205 = 1885432692;
pub const kCAF_StringsChunkID: _bindgen_ty_205 = 1937011303;
pub const kCAF_UUIDChunkID: _bindgen_ty_205 = 1970628964;
pub const kCAF_PeakChunkID: _bindgen_ty_205 = 1885692267;
pub const kCAF_OverviewChunkID: _bindgen_ty_205 = 1870034551;
pub const kCAF_MIDIChunkID: _bindgen_ty_205 = 1835623529;
pub const kCAF_UMIDChunkID: _bindgen_ty_205 = 1970104676;
pub const kCAF_FormatListID: _bindgen_ty_205 = 1818522467;
pub const kCAF_iXMLChunkID: _bindgen_ty_205 = 1767394636;
pub type _bindgen_ty_205 = UInt32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFFileHeader {
    pub mFileType: UInt32,
    pub mFileVersion: UInt16,
    pub mFileFlags: UInt16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFChunkHeader {
    pub mChunkType: UInt32,
    pub mChunkSize: SInt64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAF_UUID_ChunkHeader {
    pub mHeader: CAFChunkHeader,
    pub mUUID: [UInt8; 16usize],
}
pub const CAFFormatFlags_kCAFLinearPCMFormatFlagIsFloat: CAFFormatFlags = 1;
pub const CAFFormatFlags_kCAFLinearPCMFormatFlagIsLittleEndian: CAFFormatFlags = 2;
pub type CAFFormatFlags = UInt32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFAudioDescription {
    pub mSampleRate: Float64,
    pub mFormatID: UInt32,
    pub mFormatFlags: CAFFormatFlags,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFAudioFormatListItem {
    pub mFormat: CAFAudioDescription,
    pub mChannelLayoutTag: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFPacketTableHeader {
    pub mNumberPackets: SInt64,
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
    pub mPacketDescriptions: [UInt8; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFDataChunk {
    pub mEditCount: UInt32,
    pub mData: [UInt8; 1usize],
}
pub const kCAFMarkerType_Generic: _bindgen_ty_206 = 0;
pub const kCAFMarkerType_ProgramStart: _bindgen_ty_206 = 1885496679;
pub const kCAFMarkerType_ProgramEnd: _bindgen_ty_206 = 1885695588;
pub const kCAFMarkerType_TrackStart: _bindgen_ty_206 = 1952605543;
pub const kCAFMarkerType_TrackEnd: _bindgen_ty_206 = 1952804452;
pub const kCAFMarkerType_Index: _bindgen_ty_206 = 1768842360;
pub const kCAFMarkerType_RegionStart: _bindgen_ty_206 = 1919051111;
pub const kCAFMarkerType_RegionEnd: _bindgen_ty_206 = 1919250020;
pub const kCAFMarkerType_RegionSyncPoint: _bindgen_ty_206 = 1920170339;
pub const kCAFMarkerType_SelectionStart: _bindgen_ty_206 = 1935828327;
pub const kCAFMarkerType_SelectionEnd: _bindgen_ty_206 = 1936027236;
pub const kCAFMarkerType_EditSourceBegin: _bindgen_ty_206 = 1667392871;
pub const kCAFMarkerType_EditSourceEnd: _bindgen_ty_206 = 1667591780;
pub const kCAFMarkerType_EditDestinationBegin: _bindgen_ty_206 = 1684170087;
pub const kCAFMarkerType_EditDestinationEnd: _bindgen_ty_206 = 1684368996;
pub const kCAFMarkerType_SustainLoopStart: _bindgen_ty_206 = 1936482919;
pub const kCAFMarkerType_SustainLoopEnd: _bindgen_ty_206 = 1936483694;
pub const kCAFMarkerType_ReleaseLoopStart: _bindgen_ty_206 = 1919705703;
pub const kCAFMarkerType_ReleaseLoopEnd: _bindgen_ty_206 = 1919706478;
pub const kCAFMarkerType_SavedPlayPosition: _bindgen_ty_206 = 1936747641;
pub const kCAFMarkerType_Tempo: _bindgen_ty_206 = 1953329263;
pub const kCAFMarkerType_TimeSignature: _bindgen_ty_206 = 1953720679;
pub const kCAFMarkerType_KeySignature: _bindgen_ty_206 = 1802725735;
pub type _bindgen_ty_206 = UInt32;
pub const kCAF_SMPTE_TimeTypeNone: _bindgen_ty_207 = 0;
pub const kCAF_SMPTE_TimeType24: _bindgen_ty_207 = 1;
pub const kCAF_SMPTE_TimeType25: _bindgen_ty_207 = 2;
pub const kCAF_SMPTE_TimeType30Drop: _bindgen_ty_207 = 3;
pub const kCAF_SMPTE_TimeType30: _bindgen_ty_207 = 4;
pub const kCAF_SMPTE_TimeType2997: _bindgen_ty_207 = 5;
pub const kCAF_SMPTE_TimeType2997Drop: _bindgen_ty_207 = 6;
pub const kCAF_SMPTE_TimeType60: _bindgen_ty_207 = 7;
pub const kCAF_SMPTE_TimeType5994: _bindgen_ty_207 = 8;
pub const kCAF_SMPTE_TimeType60Drop: _bindgen_ty_207 = 9;
pub const kCAF_SMPTE_TimeType5994Drop: _bindgen_ty_207 = 10;
pub const kCAF_SMPTE_TimeType50: _bindgen_ty_207 = 11;
pub const kCAF_SMPTE_TimeType2398: _bindgen_ty_207 = 12;
pub type _bindgen_ty_207 = UInt32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAF_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: SInt8,
    pub mSeconds: SInt8,
    pub mFrames: SInt8,
    pub mSubFrameSampleOffset: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFMarker {
    pub mType: UInt32,
    pub mFramePosition: Float64,
    pub mMarkerID: UInt32,
    pub mSMPTETime: CAF_SMPTE_Time,
    pub mChannel: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFMarkerChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
pub const CAFRegionFlags_kCAFRegionFlag_LoopEnable: CAFRegionFlags = 1;
pub const CAFRegionFlags_kCAFRegionFlag_PlayForward: CAFRegionFlags = 2;
pub const CAFRegionFlags_kCAFRegionFlag_PlayBackward: CAFRegionFlags = 4;
pub type CAFRegionFlags = UInt32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFRegion {
    pub mRegionID: UInt32,
    pub mFlags: CAFRegionFlags,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFRegionChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [CAFRegion; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFInstrumentChunk {
    pub mBaseNote: Float32,
    pub mMIDILowNote: UInt8,
    pub mMIDIHighNote: UInt8,
    pub mMIDILowVelocity: UInt8,
    pub mMIDIHighVelocity: UInt8,
    pub mdBGain: Float32,
    pub mStartRegionID: UInt32,
    pub mSustainRegionID: UInt32,
    pub mReleaseRegionID: UInt32,
    pub mInstrumentID: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFStringID {
    pub mStringID: UInt32,
    pub mStringStartByteOffset: SInt64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFStrings {
    pub mNumEntries: UInt32,
    pub mStringsIDs: [CAFStringID; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFInfoStrings {
    pub mNumEntries: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFPositionPeak {
    pub mValue: Float32,
    pub mFrameNumber: UInt64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFPeakChunk {
    pub mEditCount: UInt32,
    pub mPeaks: [CAFPositionPeak; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFOverviewSample {
    pub mMinValue: SInt16,
    pub mMaxValue: SInt16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFOverviewChunk {
    pub mEditCount: UInt32,
    pub mNumFramesPerOVWSample: UInt32,
    pub mData: [CAFOverviewSample; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CAFUMIDChunk {
    pub mBytes: [UInt8; 64usize],
}
extern "C" {
    pub fn CAShow(inObject: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CAShowFile(inObject: *mut ::std::os::raw::c_void, inFile: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueExtAudioFile {
    _unused: [u8; 0],
}
pub type ExtAudioFileRef = *mut OpaqueExtAudioFile;
pub type ExtAudioFilePacketTableInfoOverride = SInt32;
pub const kExtAudioFilePacketTableInfoOverride_UseFileValue: _bindgen_ty_208 = -1;
pub const kExtAudioFilePacketTableInfoOverride_UseFileValueIfValid: _bindgen_ty_208 = -2;
pub type _bindgen_ty_208 = ExtAudioFilePacketTableInfoOverride;
pub type ExtAudioFilePropertyID = UInt32;
pub const kExtAudioFileProperty_FileDataFormat: _bindgen_ty_209 = 1717988724;
pub const kExtAudioFileProperty_FileChannelLayout: _bindgen_ty_209 = 1717791855;
pub const kExtAudioFileProperty_ClientDataFormat: _bindgen_ty_209 = 1667657076;
pub const kExtAudioFileProperty_ClientChannelLayout: _bindgen_ty_209 = 1667460207;
pub const kExtAudioFileProperty_CodecManufacturer: _bindgen_ty_209 = 1668112750;
pub const kExtAudioFileProperty_AudioConverter: _bindgen_ty_209 = 1633906294;
pub const kExtAudioFileProperty_AudioFile: _bindgen_ty_209 = 1634101612;
pub const kExtAudioFileProperty_FileMaxPacketSize: _bindgen_ty_209 = 1718448243;
pub const kExtAudioFileProperty_ClientMaxPacketSize: _bindgen_ty_209 = 1668116595;
pub const kExtAudioFileProperty_FileLengthFrames: _bindgen_ty_209 = 593916525;
pub const kExtAudioFileProperty_ConverterConfig: _bindgen_ty_209 = 1633903462;
pub const kExtAudioFileProperty_IOBufferSizeBytes: _bindgen_ty_209 = 1768907379;
pub const kExtAudioFileProperty_IOBuffer: _bindgen_ty_209 = 1768907366;
pub const kExtAudioFileProperty_PacketTable: _bindgen_ty_209 = 2020635753;
pub type _bindgen_ty_209 = ExtAudioFilePropertyID;
pub const kExtAudioFileError_InvalidProperty: _bindgen_ty_210 = -66561;
pub const kExtAudioFileError_InvalidPropertySize: _bindgen_ty_210 = -66562;
pub const kExtAudioFileError_NonPCMClientFormat: _bindgen_ty_210 = -66563;
pub const kExtAudioFileError_InvalidChannelMap: _bindgen_ty_210 = -66564;
pub const kExtAudioFileError_InvalidOperationOrder: _bindgen_ty_210 = -66565;
pub const kExtAudioFileError_InvalidDataFormat: _bindgen_ty_210 = -66566;
pub const kExtAudioFileError_MaxPacketSizeUnknown: _bindgen_ty_210 = -66567;
pub const kExtAudioFileError_InvalidSeek: _bindgen_ty_210 = -66568;
pub const kExtAudioFileError_AsyncWriteTooLarge: _bindgen_ty_210 = -66569;
pub const kExtAudioFileError_AsyncWriteBufferOverflow: _bindgen_ty_210 = -66570;
pub type _bindgen_ty_210 = OSStatus;
pub const kExtAudioFileError_CodecUnavailableInputConsumed: _bindgen_ty_211 = -66559;
pub const kExtAudioFileError_CodecUnavailableInputNotConsumed: _bindgen_ty_211 = -66560;
pub type _bindgen_ty_211 = OSStatus;
extern "C" {
    pub fn ExtAudioFileOpenURL(inURL: CFURLRef, outExtAudioFile: *mut ExtAudioFileRef) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWrapAudioFileID(
        inFileID: AudioFileID,
        inForWriting: Boolean,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileCreateWithURL(
        inURL: CFURLRef,
        inFileType: AudioFileTypeID,
        inStreamDesc: *const AudioStreamBasicDescription,
        inChannelLayout: *const AudioChannelLayout,
        inFlags: UInt32,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileDispose(inExtAudioFile: ExtAudioFileRef) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileRead(
        inExtAudioFile: ExtAudioFileRef,
        ioNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWrite(
        inExtAudioFile: ExtAudioFileRef,
        inNumberFrames: UInt32,
        ioData: *const AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWriteAsync(
        inExtAudioFile: ExtAudioFileRef,
        inNumberFrames: UInt32,
        ioData: *const AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileSeek(inExtAudioFile: ExtAudioFileRef, inFrameOffset: SInt64) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileTell(
        inExtAudioFile: ExtAudioFileRef,
        outFrameOffset: *mut SInt64,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileGetPropertyInfo(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileGetProperty(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileSetProperty(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kMusicEventType_NULL: _bindgen_ty_212 = 0;
pub const kMusicEventType_ExtendedNote: _bindgen_ty_212 = 1;
pub const kMusicEventType_ExtendedTempo: _bindgen_ty_212 = 3;
pub const kMusicEventType_User: _bindgen_ty_212 = 4;
pub const kMusicEventType_Meta: _bindgen_ty_212 = 5;
pub const kMusicEventType_MIDINoteMessage: _bindgen_ty_212 = 6;
pub const kMusicEventType_MIDIChannelMessage: _bindgen_ty_212 = 7;
pub const kMusicEventType_MIDIRawData: _bindgen_ty_212 = 8;
pub const kMusicEventType_Parameter: _bindgen_ty_212 = 9;
pub const kMusicEventType_AUPreset: _bindgen_ty_212 = 10;
pub type _bindgen_ty_212 = UInt32;
pub type MusicEventType = UInt32;
pub const MusicSequenceLoadFlags_kMusicSequenceLoadSMF_PreserveTracks: MusicSequenceLoadFlags = 0;
pub const MusicSequenceLoadFlags_kMusicSequenceLoadSMF_ChannelsToTracks: MusicSequenceLoadFlags = 1;
pub type MusicSequenceLoadFlags = UInt32;
pub const MusicSequenceType_kMusicSequenceType_Beats: MusicSequenceType = 1650811252;
pub const MusicSequenceType_kMusicSequenceType_Seconds: MusicSequenceType = 1936024435;
pub const MusicSequenceType_kMusicSequenceType_Samples: MusicSequenceType = 1935764848;
pub type MusicSequenceType = UInt32;
pub const MusicSequenceFileTypeID_kMusicSequenceFile_AnyType: MusicSequenceFileTypeID = 0;
pub const MusicSequenceFileTypeID_kMusicSequenceFile_MIDIType: MusicSequenceFileTypeID = 1835623529;
pub const MusicSequenceFileTypeID_kMusicSequenceFile_iMelodyType: MusicSequenceFileTypeID =
    1768777068;
pub type MusicSequenceFileTypeID = UInt32;
pub const MusicSequenceFileFlags_kMusicSequenceFileFlags_Default: MusicSequenceFileFlags = 0;
pub const MusicSequenceFileFlags_kMusicSequenceFileFlags_EraseFile: MusicSequenceFileFlags = 1;
pub type MusicSequenceFileFlags = UInt32;
pub type MusicTimeStamp = Float64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDINoteMessage {
    pub channel: UInt8,
    pub note: UInt8,
    pub velocity: UInt8,
    pub releaseVelocity: UInt8,
    pub duration: Float32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIChannelMessage {
    pub status: UInt8,
    pub data1: UInt8,
    pub data2: UInt8,
    pub reserved: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIRawData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIMetaEvent {
    pub metaEventType: UInt8,
    pub unused1: UInt8,
    pub unused2: UInt8,
    pub unused3: UInt8,
    pub dataLength: UInt32,
    pub data: [UInt8; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MusicEventUserData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedNoteOnEvent {
    pub instrumentID: MusicDeviceInstrumentID,
    pub groupID: MusicDeviceGroupID,
    pub duration: Float32,
    pub extendedParams: MusicDeviceNoteParams,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParameterEvent {
    pub parameterID: AudioUnitParameterID,
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub value: AudioUnitParameterValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedTempoEvent {
    pub bpm: Float64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUPresetEvent {
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub preset: CFPropertyListRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CABarBeatTime {
    pub bar: SInt32,
    pub beat: UInt16,
    pub subbeat: UInt16,
    pub subbeatDivisor: UInt16,
    pub reserved: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicPlayer {
    _unused: [u8; 0],
}
pub type MusicPlayer = *mut OpaqueMusicPlayer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicSequence {
    _unused: [u8; 0],
}
pub type MusicSequence = *mut OpaqueMusicSequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicTrack {
    _unused: [u8; 0],
}
pub type MusicTrack = *mut OpaqueMusicTrack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicEventIterator {
    _unused: [u8; 0],
}
pub type MusicEventIterator = *mut OpaqueMusicEventIterator;
pub type MusicSequenceUserCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inSequence: MusicSequence,
        inTrack: MusicTrack,
        inEventTime: MusicTimeStamp,
        inEventData: *const MusicEventUserData,
        inStartSliceBeat: MusicTimeStamp,
        inEndSliceBeat: MusicTimeStamp,
    ),
>;
pub const kAudioToolboxErr_InvalidSequenceType: _bindgen_ty_213 = -10846;
pub const kAudioToolboxErr_TrackIndexError: _bindgen_ty_213 = -10859;
pub const kAudioToolboxErr_TrackNotFound: _bindgen_ty_213 = -10858;
pub const kAudioToolboxErr_EndOfTrack: _bindgen_ty_213 = -10857;
pub const kAudioToolboxErr_StartOfTrack: _bindgen_ty_213 = -10856;
pub const kAudioToolboxErr_IllegalTrackDestination: _bindgen_ty_213 = -10855;
pub const kAudioToolboxErr_NoSequence: _bindgen_ty_213 = -10854;
pub const kAudioToolboxErr_InvalidEventType: _bindgen_ty_213 = -10853;
pub const kAudioToolboxErr_InvalidPlayerState: _bindgen_ty_213 = -10852;
pub const kAudioToolboxErr_CannotDoInCurrentContext: _bindgen_ty_213 = -10863;
pub const kAudioToolboxError_NoTrackDestination: _bindgen_ty_213 = -66720;
pub type _bindgen_ty_213 = OSStatus;
pub const kSequenceTrackProperty_LoopInfo: _bindgen_ty_214 = 0;
pub const kSequenceTrackProperty_OffsetTime: _bindgen_ty_214 = 1;
pub const kSequenceTrackProperty_MuteStatus: _bindgen_ty_214 = 2;
pub const kSequenceTrackProperty_SoloStatus: _bindgen_ty_214 = 3;
pub const kSequenceTrackProperty_AutomatedParameters: _bindgen_ty_214 = 4;
pub const kSequenceTrackProperty_TrackLength: _bindgen_ty_214 = 5;
pub const kSequenceTrackProperty_TimeResolution: _bindgen_ty_214 = 6;
pub type _bindgen_ty_214 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MusicTrackLoopInfo {
    pub loopDuration: MusicTimeStamp,
    pub numberOfLoops: SInt32,
}
extern "C" {
    pub fn NewMusicPlayer(outPlayer: *mut MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicPlayer(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetSequence(inPlayer: MusicPlayer, inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetSequence(
        inPlayer: MusicPlayer,
        outSequence: *mut MusicSequence,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetTime(inPlayer: MusicPlayer, inTime: MusicTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetTime(inPlayer: MusicPlayer, outTime: *mut MusicTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetHostTimeForBeats(
        inPlayer: MusicPlayer,
        inBeats: MusicTimeStamp,
        outHostTime: *mut UInt64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetBeatsForHostTime(
        inPlayer: MusicPlayer,
        inHostTime: UInt64,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerPreroll(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerStart(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerStop(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerIsPlaying(inPlayer: MusicPlayer, outIsPlaying: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetPlayRateScalar(inPlayer: MusicPlayer, inScaleRate: Float64) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetPlayRateScalar(
        inPlayer: MusicPlayer,
        outScaleRate: *mut Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicSequence(outSequence: *mut MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicSequence(inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceNewTrack(inSequence: MusicSequence, outTrack: *mut MusicTrack) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceDisposeTrack(inSequence: MusicSequence, inTrack: MusicTrack) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTrackCount(
        inSequence: MusicSequence,
        outNumberOfTracks: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetIndTrack(
        inSequence: MusicSequence,
        inTrackIndex: UInt32,
        outTrack: *mut MusicTrack,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTrackIndex(
        inSequence: MusicSequence,
        inTrack: MusicTrack,
        outTrackIndex: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTempoTrack(
        inSequence: MusicSequence,
        outTrack: *mut MusicTrack,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetAUGraph(inSequence: MusicSequence, inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetAUGraph(inSequence: MusicSequence, outGraph: *mut AUGraph) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetMIDIEndpoint(
        inSequence: MusicSequence,
        inEndpoint: MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetSequenceType(
        inSequence: MusicSequence,
        inType: MusicSequenceType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetSequenceType(
        inSequence: MusicSequence,
        outType: *mut MusicSequenceType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileLoad(
        inSequence: MusicSequence,
        inFileRef: CFURLRef,
        inFileTypeHint: MusicSequenceFileTypeID,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileLoadData(
        inSequence: MusicSequence,
        inData: CFDataRef,
        inFileTypeHint: MusicSequenceFileTypeID,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileCreate(
        inSequence: MusicSequence,
        inFileRef: CFURLRef,
        inFileType: MusicSequenceFileTypeID,
        inFlags: MusicSequenceFileFlags,
        inResolution: SInt16,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileCreateData(
        inSequence: MusicSequence,
        inFileType: MusicSequenceFileTypeID,
        inFlags: MusicSequenceFileFlags,
        inResolution: SInt16,
        outData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceReverse(inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetSecondsForBeats(
        inSequence: MusicSequence,
        inBeats: MusicTimeStamp,
        outSeconds: *mut Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetBeatsForSeconds(
        inSequence: MusicSequence,
        inSeconds: Float64,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetUserCallback(
        inSequence: MusicSequence,
        inCallback: MusicSequenceUserCallback,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceBeatsToBarBeatTime(
        inSequence: MusicSequence,
        inBeats: MusicTimeStamp,
        inSubbeatDivisor: UInt32,
        outBarBeatTime: *mut CABarBeatTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceBarBeatTimeToBeats(
        inSequence: MusicSequence,
        inBarBeatTime: *const CABarBeatTime,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetInfoDictionary(inSequence: MusicSequence) -> CFDictionaryRef;
}
extern "C" {
    pub fn MusicTrackGetSequence(inTrack: MusicTrack, outSequence: *mut MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetDestNode(inTrack: MusicTrack, inNode: AUNode) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetDestMIDIEndpoint(
        inTrack: MusicTrack,
        inEndpoint: MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetDestNode(inTrack: MusicTrack, outNode: *mut AUNode) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetDestMIDIEndpoint(
        inTrack: MusicTrack,
        outEndpoint: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetProperty(
        inTrack: MusicTrack,
        inPropertyID: UInt32,
        inData: *mut ::std::os::raw::c_void,
        inLength: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetProperty(
        inTrack: MusicTrack,
        inPropertyID: UInt32,
        outData: *mut ::std::os::raw::c_void,
        ioLength: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackMoveEvents(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
        inMoveTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackClear(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackCut(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackCopyInsert(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        inDestTrack: MusicTrack,
        inDestInsertTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackMerge(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        inDestTrack: MusicTrack,
        inDestInsertTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDINoteEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMessage: *const MIDINoteMessage,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDIChannelEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMessage: *const MIDIChannelMessage,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDIRawDataEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inRawData: *const MIDIRawData,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewExtendedNoteEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inInfo: *const ExtendedNoteOnEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewParameterEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inInfo: *const ParameterEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewExtendedTempoEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inBPM: Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMetaEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMetaEvent: *const MIDIMetaEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewUserEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inUserData: *const MusicEventUserData,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewAUPresetEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inPresetEvent: *const AUPresetEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicEventIterator(
        inTrack: MusicTrack,
        outIterator: *mut MusicEventIterator,
    ) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicEventIterator(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSeek(
        inIterator: MusicEventIterator,
        inTimeStamp: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorNextEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorPreviousEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorGetEventInfo(
        inIterator: MusicEventIterator,
        outTimeStamp: *mut MusicTimeStamp,
        outEventType: *mut MusicEventType,
        outEventData: *mut *const ::std::os::raw::c_void,
        outEventDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSetEventInfo(
        inIterator: MusicEventIterator,
        inEventType: MusicEventType,
        inEventData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSetEventTime(
        inIterator: MusicEventIterator,
        inTimeStamp: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorDeleteEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasPreviousEvent(
        inIterator: MusicEventIterator,
        outHasPrevEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasNextEvent(
        inIterator: MusicEventIterator,
        outHasNextEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasCurrentEvent(
        inIterator: MusicEventIterator,
        outHasCurEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceLoadSMFWithFlags(
        inSequence: MusicSequence,
        inFileRef: *const FSRef,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceLoadSMFDataWithFlags(
        inSequence: MusicSequence,
        inData: CFDataRef,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSaveMIDIFile(
        inSequence: MusicSequence,
        inParentDirectory: *const FSRef,
        inFileName: CFStringRef,
        inResolution: UInt16,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSaveSMFData(
        inSequence: MusicSequence,
        outData: *mut CFDataRef,
        inResolution: UInt16,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicTrackFrom(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        outNewTrack: *mut MusicTrack,
    ) -> OSStatus;
}
extern "C" {
    pub fn CopyNameFromSoundBank(inURL: CFURLRef, outName: *mut CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn CopyInstrumentInfoFromSoundBank(
        inURL: CFURLRef,
        outInstrumentInfo: *mut CFArrayRef,
    ) -> OSStatus;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigacts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {
    pub _address: u8,
}
pub type instancetype = id;

